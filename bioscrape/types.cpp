/* Generated by Cython 0.29.13 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "C:\\Users\\apand\\Anaconda3\\lib\\site-packages\\numpy\\core\\include\\numpy\\arrayobject.h",
            "C:\\Users\\apand\\Anaconda3\\lib\\site-packages\\numpy\\core\\include\\numpy\\ufuncobject.h"
        ],
        "include_dirs": [
            "C:\\Users\\apand\\Anaconda3\\lib\\site-packages\\numpy\\core\\include",
            "."
        ],
        "language": "c++",
        "name": "bioscrape.types",
        "sources": [
            "bioscrape/types.pyx"
        ]
    },
    "module_name": "bioscrape.types"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_13"
#define CYTHON_HEX_VERSION 0x001D0DF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__bioscrape__types
#define __PYX_HAVE_API__bioscrape__types
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <vector>
#include <stdlib.h>
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "bioscrape\\types.pyx",
  "stringsource",
  "__init__.pxd",
  "bioscrape\\types.pxd",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":786
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":800
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":808
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":809
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":811
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":812
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_9bioscrape_5types_Propensity;
struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity;
struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity;
struct __pyx_obj_9bioscrape_5types_BimolecularPropensity;
struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity;
struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity;
struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity;
struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity;
struct __pyx_obj_9bioscrape_5types_MassActionPropensity;
struct __pyx_obj_9bioscrape_5types_Term;
struct __pyx_obj_9bioscrape_5types_ConstantTerm;
struct __pyx_obj_9bioscrape_5types_SpeciesTerm;
struct __pyx_obj_9bioscrape_5types_ParameterTerm;
struct __pyx_obj_9bioscrape_5types_VolumeTerm;
struct __pyx_obj_9bioscrape_5types_BinaryTerm;
struct __pyx_obj_9bioscrape_5types_SumTerm;
struct __pyx_obj_9bioscrape_5types_ProductTerm;
struct __pyx_obj_9bioscrape_5types_MaxTerm;
struct __pyx_obj_9bioscrape_5types_MinTerm;
struct __pyx_obj_9bioscrape_5types_PowerTerm;
struct __pyx_obj_9bioscrape_5types_ExpTerm;
struct __pyx_obj_9bioscrape_5types_LogTerm;
struct __pyx_obj_9bioscrape_5types_StepTerm;
struct __pyx_obj_9bioscrape_5types_AbsTerm;
struct __pyx_obj_9bioscrape_5types_TimeTerm;
struct __pyx_obj_9bioscrape_5types_GeneralPropensity;
struct __pyx_obj_9bioscrape_5types_Delay;
struct __pyx_obj_9bioscrape_5types_NoDelay;
struct __pyx_obj_9bioscrape_5types_FixedDelay;
struct __pyx_obj_9bioscrape_5types_GaussianDelay;
struct __pyx_obj_9bioscrape_5types_GammaDelay;
struct __pyx_obj_9bioscrape_5types_Rule;
struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule;
struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule;
struct __pyx_obj_9bioscrape_5types_GeneralODERule;
struct __pyx_obj_9bioscrape_5types_Volume;
struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume;
struct __pyx_obj_9bioscrape_5types_StateDependentVolume;
struct __pyx_obj_9bioscrape_5types_Model;
struct __pyx_obj_9bioscrape_5types_Schnitz;
struct __pyx_obj_9bioscrape_5types_Lineage;
struct __pyx_obj_9bioscrape_5types_ExperimentalLineage;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":815
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":816
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":817
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":819
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "bioscrape/types.pxd":18
 *     Currently this is used for nothing, but it might come in handy at some point.
 * """
 * ctypedef enum PropensityType:             # <<<<<<<<<<<<<<
 *     unset = -1
 *     constitutive = 0
 */
enum __pyx_t_9bioscrape_5types_PropensityType {
  __pyx_e_9bioscrape_5types_unset = -1L,
  __pyx_e_9bioscrape_5types_constitutive = 0,
  __pyx_e_9bioscrape_5types_unimolecular = 1,
  __pyx_e_9bioscrape_5types_bimolecular = 2,
  __pyx_e_9bioscrape_5types_general = 3,
  __pyx_e_9bioscrape_5types_hill_positive = 4,
  __pyx_e_9bioscrape_5types_hill_negative = 5,
  __pyx_e_9bioscrape_5types_proportional_hill_positive = 6,
  __pyx_e_9bioscrape_5types_proportional_hill_negative = 7,
  __pyx_e_9bioscrape_5types_mass_action = 8
};
typedef enum __pyx_t_9bioscrape_5types_PropensityType __pyx_t_9bioscrape_5types_PropensityType;

/* "bioscrape/types.pxd":326
 * enumerated type for types of Delay, currently not used for anything but might come in handy later.
 * """
 * ctypedef enum DelayType:             # <<<<<<<<<<<<<<
 *     unset_delay = -1
 *     none = 0
 */
enum __pyx_t_9bioscrape_5types_DelayType {
  __pyx_e_9bioscrape_5types_unset_delay = -1L,
  __pyx_e_9bioscrape_5types_none = 0,
  __pyx_e_9bioscrape_5types_fixed = 1,
  __pyx_e_9bioscrape_5types_gaussian = 2,
  __pyx_e_9bioscrape_5types_gamma = 3
};
typedef enum __pyx_t_9bioscrape_5types_DelayType __pyx_t_9bioscrape_5types_DelayType;

/* "bioscrape/types.pxd":30
 *     mass_action = 8
 * 
 * cdef class Propensity:             # <<<<<<<<<<<<<<
 *     """
 *     Class for defining a propensity. Must contain a propensity type as well as two functions.
 */
struct __pyx_obj_9bioscrape_5types_Propensity {
  PyObject_HEAD
  struct __pyx_vtabstruct_9bioscrape_5types_Propensity *__pyx_vtab;
  __pyx_t_9bioscrape_5types_PropensityType propensity_type;
};


/* "bioscrape/types.pxd":44
 * 
 * 
 * cdef class ConstitutivePropensity(Propensity):             # <<<<<<<<<<<<<<
 *     """
 *     A propensity class for constitutive propensities. (k)
 */
struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity {
  struct __pyx_obj_9bioscrape_5types_Propensity __pyx_base;
  unsigned int rate_index;
};


/* "bioscrape/types.pxd":60
 *     cdef double get_stochastic_volume_propensity(self, double *state, double *params, double volume, double time)
 * 
 * cdef class UnimolecularPropensity(Propensity):             # <<<<<<<<<<<<<<
 *     """
 *     A propensity class for a unimolecular propensity (k*x)
 */
struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity {
  struct __pyx_obj_9bioscrape_5types_Propensity __pyx_base;
  unsigned int rate_index;
  unsigned int species_index;
};


/* "bioscrape/types.pxd":81
 * 
 * 
 * cdef class BimolecularPropensity(Propensity):             # <<<<<<<<<<<<<<
 *     """
 *     A propensity class for a bimolecular propensity (k*x1*x2)
 */
struct __pyx_obj_9bioscrape_5types_BimolecularPropensity {
  struct __pyx_obj_9bioscrape_5types_Propensity __pyx_base;
  unsigned int rate_index;
  unsigned int s1_index;
  unsigned int s2_index;
};


/* "bioscrape/types.pxd":102
 *     cdef double get_stochastic_volume_propensity(self, double *state, double *params, double volume, double time)
 * 
 * cdef class PositiveHillPropensity(Propensity):             # <<<<<<<<<<<<<<
 *     """
 *     A propensity class for an activating Hill function (   rate * (x1/K)**n / (1 + (x1/K)**n )   )
 */
struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity {
  struct __pyx_obj_9bioscrape_5types_Propensity __pyx_base;
  unsigned int K_index;
  unsigned int rate_index;
  unsigned int n_index;
  unsigned int s1_index;
};


/* "bioscrape/types.pxd":123
 *     cdef double get_stochastic_volume_propensity(self, double *state, double *params, double volume, double time)
 * 
 * cdef class PositiveProportionalHillPropensity(Propensity):             # <<<<<<<<<<<<<<
 *     """
 *     A propensity class for an activating Hill function proportional to another second species
 */
struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity {
  struct __pyx_obj_9bioscrape_5types_Propensity __pyx_base;
  unsigned int K_index;
  unsigned int rate_index;
  unsigned int n_index;
  unsigned int s1_index;
  unsigned int d_index;
};


/* "bioscrape/types.pxd":149
 *     cdef double get_stochastic_volume_propensity(self, double *state, double *params, double volume, double time)
 * 
 * cdef class NegativeHillPropensity(Propensity):             # <<<<<<<<<<<<<<
 *     """
 *     A propensity class for a repressing Hill function (   rate * 1 / (1 + (x1/K)**n )   )
 */
struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity {
  struct __pyx_obj_9bioscrape_5types_Propensity __pyx_base;
  unsigned int K_index;
  unsigned int rate_index;
  unsigned int n_index;
  unsigned int s1_index;
};


/* "bioscrape/types.pxd":171
 *     cdef double get_stochastic_volume_propensity(self, double *state, double *params, double volume, double time)
 * 
 * cdef class NegativeProportionalHillPropensity(Propensity):             # <<<<<<<<<<<<<<
 *     """
 *     A propensity class for a repressing Hill function proportional to another second species
 */
struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity {
  struct __pyx_obj_9bioscrape_5types_Propensity __pyx_base;
  unsigned int K_index;
  unsigned int rate_index;
  unsigned int n_index;
  unsigned int s1_index;
  unsigned int d_index;
};


/* "bioscrape/types.pxd":196
 *     cdef double get_stochastic_volume_propensity(self, double *state, double *params, double volume, double time)
 * 
 * cdef class MassActionPropensity(Propensity):             # <<<<<<<<<<<<<<
 *     # variables
 *     cdef vector[int] sp_inds
 */
struct __pyx_obj_9bioscrape_5types_MassActionPropensity {
  struct __pyx_obj_9bioscrape_5types_Propensity __pyx_base;
  std::vector<int>  sp_inds;
  std::vector<int>  sp_counts;
  unsigned int k_index;
  int num_species;
};


/* "bioscrape/types.pxd":208
 *     cdef double get_stochastic_volume_propensity(self, double *state, double *params, double volume, double time)
 * 
 * cdef class Term:             # <<<<<<<<<<<<<<
 *     cdef double evaluate(self, double *species, double *params, double time)
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 */
struct __pyx_obj_9bioscrape_5types_Term {
  PyObject_HEAD
  struct __pyx_vtabstruct_9bioscrape_5types_Term *__pyx_vtab;
};


/* "bioscrape/types.pxd":212
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class ConstantTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef double value
 * 
 */
struct __pyx_obj_9bioscrape_5types_ConstantTerm {
  struct __pyx_obj_9bioscrape_5types_Term __pyx_base;
  double value;
};


/* "bioscrape/types.pxd":218
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class SpeciesTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef unsigned index
 * 
 */
struct __pyx_obj_9bioscrape_5types_SpeciesTerm {
  struct __pyx_obj_9bioscrape_5types_Term __pyx_base;
  unsigned int index;
};


/* "bioscrape/types.pxd":224
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class ParameterTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef unsigned index
 * 
 */
struct __pyx_obj_9bioscrape_5types_ParameterTerm {
  struct __pyx_obj_9bioscrape_5types_Term __pyx_base;
  unsigned int index;
};


/* "bioscrape/types.pxd":230
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class VolumeTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef double evaluate(self, double *species, double *params, double time)
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 */
struct __pyx_obj_9bioscrape_5types_VolumeTerm {
  struct __pyx_obj_9bioscrape_5types_Term __pyx_base;
};


/* "bioscrape/types.pxd":236
 * # Putting stuff together
 * 
 * cdef class BinaryTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef vector[void*] terms
 *     cdef list terms_list
 */
struct __pyx_obj_9bioscrape_5types_BinaryTerm {
  struct __pyx_obj_9bioscrape_5types_Term __pyx_base;
  std::vector<void *>  terms;
  PyObject *terms_list;
};


/* "bioscrape/types.pxd":245
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class SumTerm(BinaryTerm):             # <<<<<<<<<<<<<<
 *     cdef void add_term(self,Term trm)
 * 
 */
struct __pyx_obj_9bioscrape_5types_SumTerm {
  struct __pyx_obj_9bioscrape_5types_BinaryTerm __pyx_base;
};


/* "bioscrape/types.pxd":251
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class ProductTerm(BinaryTerm):             # <<<<<<<<<<<<<<
 *     cdef void add_term(self,Term trm)
 *     cdef double evaluate(self, double *species, double *params, double time)
 */
struct __pyx_obj_9bioscrape_5types_ProductTerm {
  struct __pyx_obj_9bioscrape_5types_BinaryTerm __pyx_base;
};


/* "bioscrape/types.pxd":257
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class MaxTerm(BinaryTerm):             # <<<<<<<<<<<<<<
 *     cdef void add_term(self,Term trm)
 *     cdef double evaluate(self, double *species, double *params, double time)
 */
struct __pyx_obj_9bioscrape_5types_MaxTerm {
  struct __pyx_obj_9bioscrape_5types_BinaryTerm __pyx_base;
};


/* "bioscrape/types.pxd":263
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class MinTerm(BinaryTerm):             # <<<<<<<<<<<<<<
 *     cdef void add_term(self,Term trm)
 *     cdef double evaluate(self, double *species, double *params, double time)
 */
struct __pyx_obj_9bioscrape_5types_MinTerm {
  struct __pyx_obj_9bioscrape_5types_BinaryTerm __pyx_base;
};


/* "bioscrape/types.pxd":269
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class PowerTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef Term base
 *     cdef Term exponent
 */
struct __pyx_obj_9bioscrape_5types_PowerTerm {
  struct __pyx_obj_9bioscrape_5types_Term __pyx_base;
  struct __pyx_obj_9bioscrape_5types_Term *base;
  struct __pyx_obj_9bioscrape_5types_Term *exponent;
};


/* "bioscrape/types.pxd":278
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class ExpTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef Term arg
 * 
 */
struct __pyx_obj_9bioscrape_5types_ExpTerm {
  struct __pyx_obj_9bioscrape_5types_Term __pyx_base;
  struct __pyx_obj_9bioscrape_5types_Term *arg;
};


/* "bioscrape/types.pxd":285
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class LogTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef Term arg
 * 
 */
struct __pyx_obj_9bioscrape_5types_LogTerm {
  struct __pyx_obj_9bioscrape_5types_Term __pyx_base;
  struct __pyx_obj_9bioscrape_5types_Term *arg;
};


/* "bioscrape/types.pxd":293
 * 
 * 
 * cdef class StepTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef Term arg
 * 
 */
struct __pyx_obj_9bioscrape_5types_StepTerm {
  struct __pyx_obj_9bioscrape_5types_Term __pyx_base;
  struct __pyx_obj_9bioscrape_5types_Term *arg;
};


/* "bioscrape/types.pxd":300
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class AbsTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef Term arg
 * 
 */
struct __pyx_obj_9bioscrape_5types_AbsTerm {
  struct __pyx_obj_9bioscrape_5types_Term __pyx_base;
  struct __pyx_obj_9bioscrape_5types_Term *arg;
};


/* "bioscrape/types.pxd":307
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class TimeTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef double evaluate(self, double *species, double *params, double time)
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 */
struct __pyx_obj_9bioscrape_5types_TimeTerm {
  struct __pyx_obj_9bioscrape_5types_Term __pyx_base;
};


/* "bioscrape/types.pxd":311
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time)
 * 
 * cdef class GeneralPropensity(Propensity):             # <<<<<<<<<<<<<<
 *     cdef Term term
 * 
 */
struct __pyx_obj_9bioscrape_5types_GeneralPropensity {
  struct __pyx_obj_9bioscrape_5types_Propensity __pyx_base;
  struct __pyx_obj_9bioscrape_5types_Term *term;
};


/* "bioscrape/types.pxd":334
 * 
 * 
 * cdef class Delay:             # <<<<<<<<<<<<<<
 *     """
 *     A delay class for different delay types. Must be overridden by subclasses.
 */
struct __pyx_obj_9bioscrape_5types_Delay {
  PyObject_HEAD
  struct __pyx_vtabstruct_9bioscrape_5types_Delay *__pyx_vtab;
  __pyx_t_9bioscrape_5types_DelayType delay_type;
};


/* "bioscrape/types.pxd":351
 *     cdef double get_delay(self, double* state, double* params)
 * 
 * cdef class NoDelay(Delay):             # <<<<<<<<<<<<<<
 *     """
 *     A delay class for representing no delay. Will always return a delay of 0.0
 */
struct __pyx_obj_9bioscrape_5types_NoDelay {
  struct __pyx_obj_9bioscrape_5types_Delay __pyx_base;
};


/* "bioscrape/types.pxd":358
 *     cdef double get_delay(self, double* state, double* params)
 * 
 * cdef class FixedDelay(Delay):             # <<<<<<<<<<<<<<
 *     """
 *     A delay class for representing a fixed delay.
 */
struct __pyx_obj_9bioscrape_5types_FixedDelay {
  struct __pyx_obj_9bioscrape_5types_Delay __pyx_base;
  unsigned int delay_index;
};


/* "bioscrape/types.pxd":371
 * 
 * 
 * cdef class GaussianDelay(Delay):             # <<<<<<<<<<<<<<
 *     """
 *     A delay class for representing a Gaussian distributed delay with specified mean and std.
 */
struct __pyx_obj_9bioscrape_5types_GaussianDelay {
  struct __pyx_obj_9bioscrape_5types_Delay __pyx_base;
  unsigned int mean_index;
  unsigned int std_index;
};


/* "bioscrape/types.pxd":386
 *     cdef double get_delay(self, double* state, double* params)
 * 
 * cdef class GammaDelay(Delay):             # <<<<<<<<<<<<<<
 *     """
 *     A delay class for representing a gamma distributed delay with specified k and theta, where
 */
struct __pyx_obj_9bioscrape_5types_GammaDelay {
  struct __pyx_obj_9bioscrape_5types_Delay __pyx_base;
  unsigned int k_index;
  unsigned int theta_index;
};


/* "bioscrape/types.pxd":407
 * #################################################                     ################################################
 * 
 * cdef class Rule:             # <<<<<<<<<<<<<<
 *     """
 *     A class for doing rules that must be done either at the beginning of a simulation or repeatedly at each step of
 */
struct __pyx_obj_9bioscrape_5types_Rule {
  PyObject_HEAD
  struct __pyx_vtabstruct_9bioscrape_5types_Rule *__pyx_vtab;
  double frequency_flag;
};


/* "bioscrape/types.pxd":420
 * 
 * 
 * cdef class AdditiveAssignmentRule(Rule):             # <<<<<<<<<<<<<<
 *     """
 *     A class for assigning a species to a sum of a bunch of other species.
 */
struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule {
  struct __pyx_obj_9bioscrape_5types_Rule __pyx_base;
  std::vector<int>  species_source_indices;
  unsigned int dest_index;
};


/* "bioscrape/types.pxd":430
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt)
 * 
 * cdef class GeneralAssignmentRule(Rule):             # <<<<<<<<<<<<<<
 *     """
 *     A class for assigning a species to a product of a bunch of other species.
 */
struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule {
  struct __pyx_obj_9bioscrape_5types_Rule __pyx_base;
  struct __pyx_obj_9bioscrape_5types_Term *rhs;
  unsigned int dest_index;
  int param_flag;
};


/* "bioscrape/types.pxd":442
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt)
 * 
 * cdef class GeneralODERule(Rule):             # <<<<<<<<<<<<<<
 *     """
 *     A class for rules that implement Euler's method every dt. These rules are of the form dest = dest + f(state, params, time)*dt
 */
struct __pyx_obj_9bioscrape_5types_GeneralODERule {
  struct __pyx_obj_9bioscrape_5types_Rule __pyx_base;
  struct __pyx_obj_9bioscrape_5types_Term *rhs;
  unsigned int dest_index;
  int param_flag;
};


/* "bioscrape/types.pxd":459
 * #################################################                     ################################################
 * 
 * cdef class Volume:             # <<<<<<<<<<<<<<
 *     """
 *     A volume class for different volume update types. Must be overridden by subclasses implementing volume models.
 */
struct __pyx_obj_9bioscrape_5types_Volume {
  PyObject_HEAD
  struct __pyx_vtabstruct_9bioscrape_5types_Volume *__pyx_vtab;
  double current_volume;
};


/* "bioscrape/types.pxd":492
 * 
 * 
 * cdef class StochasticTimeThresholdVolume(Volume):             # <<<<<<<<<<<<<<
 *     """
 *     A volume class for a cell that grows at a deterministic exponential rate and divides after a random normally
 */
struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume {
  struct __pyx_obj_9bioscrape_5types_Volume __pyx_base;
  double division_time;
  double average_division_volume;
  double division_noise;
  double cell_cycle_time;
  double growth_rate;
};


/* "bioscrape/types.pxd":520
 * 
 * 
 * cdef class StateDependentVolume(Volume):             # <<<<<<<<<<<<<<
 *     """
 *     A volume class for a cell where growth rate depends on state and the division volume is chosen randomly
 */
struct __pyx_obj_9bioscrape_5types_StateDependentVolume {
  struct __pyx_obj_9bioscrape_5types_Volume __pyx_base;
  double division_volume;
  double average_division_volume;
  double division_noise;
  struct __pyx_obj_9bioscrape_5types_Term *growth_rate;
};


/* "bioscrape/types.pxd":547
 * 
 * 
 * cdef class Model:             # <<<<<<<<<<<<<<
 *     """
 *     A class for keeping track of a chemical reaction model with delays. Does not support volumes, those are supplied
 */
struct __pyx_obj_9bioscrape_5types_Model {
  PyObject_HEAD
  struct __pyx_vtabstruct_9bioscrape_5types_Model *__pyx_vtab;
  unsigned int _next_species_index;
  unsigned int _next_params_index;
  unsigned int _dummy_param_counter;
  unsigned int has_delay;
  std::vector<void *>  c_propensities;
  PyObject *propensities;
  PyObject *delays;
  std::vector<void *>  c_delays;
  PyObject *repeat_rules;
  std::vector<void *>  c_repeat_rules;
  PyObject *species2index;
  PyObject *params2index;
  PyArrayObject *species_values;
  PyArrayObject *params_values;
  PyArrayObject *update_array;
  PyArrayObject *delay_update_array;
  PyObject *reaction_list;
  PyObject *reaction_updates;
  PyObject *delay_reaction_updates;
  int initialized;
  PyObject *txt_dict;
  PyObject *reaction_definitions;
  PyObject *rule_definitions;
};


/* "bioscrape/types.pxd":634
 * #################################################                     ################################################
 * 
 * cdef class Schnitz:             # <<<<<<<<<<<<<<
 *     """
 *     A class for representing the data acquired from a single cell trajectory.
 */
struct __pyx_obj_9bioscrape_5types_Schnitz {
  PyObject_HEAD
  struct __pyx_vtabstruct_9bioscrape_5types_Schnitz *__pyx_vtab;
  PyArrayObject *data;
  PyArrayObject *time;
  PyArrayObject *volume;
  struct __pyx_obj_9bioscrape_5types_Schnitz *parent;
  struct __pyx_obj_9bioscrape_5types_Schnitz *daughter1;
  struct __pyx_obj_9bioscrape_5types_Schnitz *daughter2;
};


/* "bioscrape/types.pxd":678
 * 
 * 
 * cdef class Lineage:             # <<<<<<<<<<<<<<
 *     """
 *     A class for keeping track of cell lineages consisting of many Schnitz's
 */
struct __pyx_obj_9bioscrape_5types_Lineage {
  PyObject_HEAD
  struct __pyx_vtabstruct_9bioscrape_5types_Lineage *__pyx_vtab;
  PyObject *schnitzes;
  std::vector<void *>  c_schnitzes;
};


/* "bioscrape/types.pxd":715
 *         return (<Schnitz> (self.c_schnitzes[index]))
 * 
 * cdef class ExperimentalLineage(Lineage):             # <<<<<<<<<<<<<<
 *     cdef dict species_dict
 * 
 */
struct __pyx_obj_9bioscrape_5types_ExperimentalLineage {
  struct __pyx_obj_9bioscrape_5types_Lineage __pyx_base;
  PyObject *species_dict;
};



/* "bioscrape/types.pyx":26
 * 
 * 
 * cdef class Propensity:             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         """
 */

struct __pyx_vtabstruct_9bioscrape_5types_Propensity {
  double (*get_propensity)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double);
  double (*get_volume_propensity)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double);
  double (*get_stochastic_propensity)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double);
  double (*get_stochastic_volume_propensity)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double);
};
static struct __pyx_vtabstruct_9bioscrape_5types_Propensity *__pyx_vtabptr_9bioscrape_5types_Propensity;


/* "bioscrape/types.pyx":106
 * 
 * 
 * cdef class ConstitutivePropensity(Propensity):             # <<<<<<<<<<<<<<
 *     # constructor
 *     def __init__(self):
 */

struct __pyx_vtabstruct_9bioscrape_5types_ConstitutivePropensity {
  struct __pyx_vtabstruct_9bioscrape_5types_Propensity __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_ConstitutivePropensity *__pyx_vtabptr_9bioscrape_5types_ConstitutivePropensity;


/* "bioscrape/types.pyx":132
 * 
 * 
 * cdef class UnimolecularPropensity(Propensity):             # <<<<<<<<<<<<<<
 *     # constructor
 *     def __init__(self):
 */

struct __pyx_vtabstruct_9bioscrape_5types_UnimolecularPropensity {
  struct __pyx_vtabstruct_9bioscrape_5types_Propensity __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_UnimolecularPropensity *__pyx_vtabptr_9bioscrape_5types_UnimolecularPropensity;


/* "bioscrape/types.pyx":161
 * 
 * 
 * cdef class BimolecularPropensity(Propensity):             # <<<<<<<<<<<<<<
 * 
 *     # constructor
 */

struct __pyx_vtabstruct_9bioscrape_5types_BimolecularPropensity {
  struct __pyx_vtabstruct_9bioscrape_5types_Propensity __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_BimolecularPropensity *__pyx_vtabptr_9bioscrape_5types_BimolecularPropensity;


/* "bioscrape/types.pyx":205
 * 
 * 
 * cdef class PositiveHillPropensity(Propensity):             # <<<<<<<<<<<<<<
 * 
 *     # constructor
 */

struct __pyx_vtabstruct_9bioscrape_5types_PositiveHillPropensity {
  struct __pyx_vtabstruct_9bioscrape_5types_Propensity __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_PositiveHillPropensity *__pyx_vtabptr_9bioscrape_5types_PositiveHillPropensity;


/* "bioscrape/types.pyx":243
 * 
 * 
 * cdef class PositiveProportionalHillPropensity(Propensity):             # <<<<<<<<<<<<<<
 * 
 *     # constructor
 */

struct __pyx_vtabstruct_9bioscrape_5types_PositiveProportionalHillPropensity {
  struct __pyx_vtabstruct_9bioscrape_5types_Propensity __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_vtabptr_9bioscrape_5types_PositiveProportionalHillPropensity;


/* "bioscrape/types.pyx":288
 * 
 * 
 * cdef class NegativeHillPropensity(Propensity):             # <<<<<<<<<<<<<<
 * 
 *     # constructor
 */

struct __pyx_vtabstruct_9bioscrape_5types_NegativeHillPropensity {
  struct __pyx_vtabstruct_9bioscrape_5types_Propensity __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_NegativeHillPropensity *__pyx_vtabptr_9bioscrape_5types_NegativeHillPropensity;


/* "bioscrape/types.pyx":327
 * 
 * 
 * cdef class NegativeProportionalHillPropensity(Propensity):             # <<<<<<<<<<<<<<
 * 
 *     # constructor
 */

struct __pyx_vtabstruct_9bioscrape_5types_NegativeProportionalHillPropensity {
  struct __pyx_vtabstruct_9bioscrape_5types_Propensity __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_vtabptr_9bioscrape_5types_NegativeProportionalHillPropensity;


/* "bioscrape/types.pyx":390
 * 
 * 
 * cdef class MassActionPropensity(Propensity):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.propensity_type = PropensityType.mass_action
 */

struct __pyx_vtabstruct_9bioscrape_5types_MassActionPropensity {
  struct __pyx_vtabstruct_9bioscrape_5types_Propensity __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_MassActionPropensity *__pyx_vtabptr_9bioscrape_5types_MassActionPropensity;


/* "bioscrape/types.pyx":458
 * 
 * @cython.auto_pickle(True)
 * cdef class Term:             # <<<<<<<<<<<<<<
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         raise SyntaxError('Cannot make Term base object')
 */

struct __pyx_vtabstruct_9bioscrape_5types_Term {
  double (*evaluate)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double);
  double (*volume_evaluate)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double);
};
static struct __pyx_vtabstruct_9bioscrape_5types_Term *__pyx_vtabptr_9bioscrape_5types_Term;


/* "bioscrape/types.pyx":476
 * # Base building blocks
 * @cython.auto_pickle(True)
 * cdef class ConstantTerm(Term):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double val):
 */

struct __pyx_vtabstruct_9bioscrape_5types_ConstantTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_ConstantTerm *__pyx_vtabptr_9bioscrape_5types_ConstantTerm;


/* "bioscrape/types.pyx":487
 * 
 * @cython.auto_pickle(True)
 * cdef class SpeciesTerm(Term):             # <<<<<<<<<<<<<<
 *     def __init__(self, unsigned ind):
 *         self.index = ind
 */

struct __pyx_vtabstruct_9bioscrape_5types_SpeciesTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_SpeciesTerm *__pyx_vtabptr_9bioscrape_5types_SpeciesTerm;


/* "bioscrape/types.pyx":497
 * 
 * @cython.auto_pickle(True)
 * cdef class ParameterTerm(Term):             # <<<<<<<<<<<<<<
 *     def __init__(self, unsigned ind):
 *         self.index = ind
 */

struct __pyx_vtabstruct_9bioscrape_5types_ParameterTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_ParameterTerm *__pyx_vtabptr_9bioscrape_5types_ParameterTerm;


/* "bioscrape/types.pyx":506
 *         return params[self.index]
 * 
 * cdef class VolumeTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return 1.0
 */

struct __pyx_vtabstruct_9bioscrape_5types_VolumeTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_VolumeTerm *__pyx_vtabptr_9bioscrape_5types_VolumeTerm;


/* "bioscrape/types.pyx":530
 *     return new_term
 * 
 * cdef class BinaryTerm(Term):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.terms_list = []
 */

struct __pyx_vtabstruct_9bioscrape_5types_BinaryTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_base;
  void (*add_term)(struct __pyx_obj_9bioscrape_5types_BinaryTerm *, struct __pyx_obj_9bioscrape_5types_Term *);
};
static struct __pyx_vtabstruct_9bioscrape_5types_BinaryTerm *__pyx_vtabptr_9bioscrape_5types_BinaryTerm;


/* "bioscrape/types.pyx":544
 *         self.add_term(trm)
 * 
 * cdef class SumTerm(BinaryTerm):             # <<<<<<<<<<<<<<
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         cdef double ans = 0.0
 */

struct __pyx_vtabstruct_9bioscrape_5types_SumTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_BinaryTerm __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_SumTerm *__pyx_vtabptr_9bioscrape_5types_SumTerm;


/* "bioscrape/types.pyx":559
 *         return ans
 * 
 * cdef class ProductTerm(BinaryTerm):             # <<<<<<<<<<<<<<
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         cdef double ans = 1.0
 */

struct __pyx_vtabstruct_9bioscrape_5types_ProductTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_BinaryTerm __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_ProductTerm *__pyx_vtabptr_9bioscrape_5types_ProductTerm;


/* "bioscrape/types.pyx":575
 * 
 * 
 * cdef class MaxTerm(BinaryTerm):             # <<<<<<<<<<<<<<
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         cdef double ans = (<Term>(self.terms[0])).evaluate(species, params,time)
 */

struct __pyx_vtabstruct_9bioscrape_5types_MaxTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_BinaryTerm __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_MaxTerm *__pyx_vtabptr_9bioscrape_5types_MaxTerm;


/* "bioscrape/types.pyx":597
 *         return ans
 * 
 * cdef class MinTerm(BinaryTerm):             # <<<<<<<<<<<<<<
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         cdef double ans = (<Term>(self.terms[0])).evaluate(species, params,time)
 */

struct __pyx_vtabstruct_9bioscrape_5types_MinTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_BinaryTerm __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_MinTerm *__pyx_vtabptr_9bioscrape_5types_MinTerm;


/* "bioscrape/types.pyx":620
 * 
 * @cython.auto_pickle(True)
 * cdef class PowerTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef void set_base(self, Term base):
 *         self.base = base
 */

struct __pyx_vtabstruct_9bioscrape_5types_PowerTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_base;
  void (*set_base)(struct __pyx_obj_9bioscrape_5types_PowerTerm *, struct __pyx_obj_9bioscrape_5types_Term *);
  void (*set_exponent)(struct __pyx_obj_9bioscrape_5types_PowerTerm *, struct __pyx_obj_9bioscrape_5types_Term *);
};
static struct __pyx_vtabstruct_9bioscrape_5types_PowerTerm *__pyx_vtabptr_9bioscrape_5types_PowerTerm;


/* "bioscrape/types.pyx":635
 * 
 * @cython.auto_pickle(True)
 * cdef class ExpTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef void set_arg(self, Term arg):
 *         self.arg = arg
 */

struct __pyx_vtabstruct_9bioscrape_5types_ExpTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_base;
  void (*set_arg)(struct __pyx_obj_9bioscrape_5types_ExpTerm *, struct __pyx_obj_9bioscrape_5types_Term *);
};
static struct __pyx_vtabstruct_9bioscrape_5types_ExpTerm *__pyx_vtabptr_9bioscrape_5types_ExpTerm;


/* "bioscrape/types.pyx":646
 * 
 * @cython.auto_pickle(True)
 * cdef class LogTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef void set_arg(self, Term arg):
 *         self.arg = arg
 */

struct __pyx_vtabstruct_9bioscrape_5types_LogTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_base;
  void (*set_arg)(struct __pyx_obj_9bioscrape_5types_LogTerm *, struct __pyx_obj_9bioscrape_5types_Term *);
};
static struct __pyx_vtabstruct_9bioscrape_5types_LogTerm *__pyx_vtabptr_9bioscrape_5types_LogTerm;


/* "bioscrape/types.pyx":657
 * 
 * @cython.auto_pickle(True)
 * cdef class StepTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef void set_arg(self, Term arg):
 *         self.arg = arg
 */

struct __pyx_vtabstruct_9bioscrape_5types_StepTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_base;
  void (*set_arg)(struct __pyx_obj_9bioscrape_5types_StepTerm *, struct __pyx_obj_9bioscrape_5types_Term *);
};
static struct __pyx_vtabstruct_9bioscrape_5types_StepTerm *__pyx_vtabptr_9bioscrape_5types_StepTerm;


/* "bioscrape/types.pyx":672
 * 
 * @cython.auto_pickle(True)
 * cdef class AbsTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef void set_arg(self, Term arg):
 *         self.arg = arg
 */

struct __pyx_vtabstruct_9bioscrape_5types_AbsTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_base;
  void (*set_arg)(struct __pyx_obj_9bioscrape_5types_AbsTerm *, struct __pyx_obj_9bioscrape_5types_Term *);
};
static struct __pyx_vtabstruct_9bioscrape_5types_AbsTerm *__pyx_vtabptr_9bioscrape_5types_AbsTerm;


/* "bioscrape/types.pyx":683
 * 
 * @cython.auto_pickle(True)
 * cdef class TimeTerm(Term):             # <<<<<<<<<<<<<<
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return time
 */

struct __pyx_vtabstruct_9bioscrape_5types_TimeTerm {
  struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_TimeTerm *__pyx_vtabptr_9bioscrape_5types_TimeTerm;


/* "bioscrape/types.pyx":824
 * 
 * 
 * cdef class GeneralPropensity(Propensity):             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 */

struct __pyx_vtabstruct_9bioscrape_5types_GeneralPropensity {
  struct __pyx_vtabstruct_9bioscrape_5types_Propensity __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_GeneralPropensity *__pyx_vtabptr_9bioscrape_5types_GeneralPropensity;


/* "bioscrape/types.pyx":851
 * #################################################                     ################################################
 * 
 * cdef class Delay:             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         """
 */

struct __pyx_vtabstruct_9bioscrape_5types_Delay {
  double (*get_delay)(struct __pyx_obj_9bioscrape_5types_Delay *, double *, double *);
};
static struct __pyx_vtabstruct_9bioscrape_5types_Delay *__pyx_vtabptr_9bioscrape_5types_Delay;


/* "bioscrape/types.pyx":913
 * 
 * 
 * cdef class NoDelay(Delay):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.delay_type = DelayType.none
 */

struct __pyx_vtabstruct_9bioscrape_5types_NoDelay {
  struct __pyx_vtabstruct_9bioscrape_5types_Delay __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_NoDelay *__pyx_vtabptr_9bioscrape_5types_NoDelay;


/* "bioscrape/types.pyx":920
 *         return 0.0
 * 
 * cdef class FixedDelay(Delay):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

struct __pyx_vtabstruct_9bioscrape_5types_FixedDelay {
  struct __pyx_vtabstruct_9bioscrape_5types_Delay __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_FixedDelay *__pyx_vtabptr_9bioscrape_5types_FixedDelay;


/* "bioscrape/types.pyx":940
 *         return [], [fields['delay']]
 * 
 * cdef class GaussianDelay(Delay):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

struct __pyx_vtabstruct_9bioscrape_5types_GaussianDelay {
  struct __pyx_vtabstruct_9bioscrape_5types_Delay __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_GaussianDelay *__pyx_vtabptr_9bioscrape_5types_GaussianDelay;


/* "bioscrape/types.pyx":965
 * 
 * 
 * cdef class GammaDelay(Delay):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

struct __pyx_vtabstruct_9bioscrape_5types_GammaDelay {
  struct __pyx_vtabstruct_9bioscrape_5types_Delay __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_GammaDelay *__pyx_vtabptr_9bioscrape_5types_GammaDelay;


/* "bioscrape/types.pyx":991
 * #################################################                     ################################################
 * 
 * cdef class Rule:             # <<<<<<<<<<<<<<
 *     """
 *     A class for doing rules that must be done either at the beginning of a simulation or repeatedly at each step of
 */

struct __pyx_vtabstruct_9bioscrape_5types_Rule {
  void (*rule_operation)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double);
  void (*rule_volume_operation)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double, double);
  void (*execute_rule)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double, unsigned int);
  void (*execute_volume_rule)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double, double, unsigned int);
};
static struct __pyx_vtabstruct_9bioscrape_5types_Rule *__pyx_vtabptr_9bioscrape_5types_Rule;


/* "bioscrape/types.pyx":1054
 * 
 * 
 * cdef class AdditiveAssignmentRule(Rule):             # <<<<<<<<<<<<<<
 *     """
 *     A class for assigning a species to a sum of a bunch of other species.
 */

struct __pyx_vtabstruct_9bioscrape_5types_AdditiveAssignmentRule {
  struct __pyx_vtabstruct_9bioscrape_5types_Rule __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_AdditiveAssignmentRule *__pyx_vtabptr_9bioscrape_5types_AdditiveAssignmentRule;


/* "bioscrape/types.pyx":1090
 *         return species_names, []
 * 
 * cdef class GeneralAssignmentRule(Rule):             # <<<<<<<<<<<<<<
 *     """
 *     A class for doing rules that must be done either at the beginning of a simulation or repeatedly at each step of
 */

struct __pyx_vtabstruct_9bioscrape_5types_GeneralAssignmentRule {
  struct __pyx_vtabstruct_9bioscrape_5types_Rule __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_GeneralAssignmentRule *__pyx_vtabptr_9bioscrape_5types_GeneralAssignmentRule;


/* "bioscrape/types.pyx":1141
 * 
 * 
 * cdef class GeneralODERule(Rule):             # <<<<<<<<<<<<<<
 *     """
 *     A class for rules that implement Euler's method every dt. These rules are of the form dest = dest + f(state, params, time)*dt
 */

struct __pyx_vtabstruct_9bioscrape_5types_GeneralODERule {
  struct __pyx_vtabstruct_9bioscrape_5types_Rule __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_GeneralODERule *__pyx_vtabptr_9bioscrape_5types_GeneralODERule;


/* "bioscrape/types.pyx":1196
 * #################################################                     ################################################
 * 
 * cdef class Volume:             # <<<<<<<<<<<<<<
 *     cdef double get_volume_step(self, double *state, double *params, double time, double volume, double dt):
 *         """
 */

struct __pyx_vtabstruct_9bioscrape_5types_Volume {
  double (*get_volume_step)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double, double);
  void (*initialize)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double);
  unsigned int (*cell_divided)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double, double);
  struct __pyx_obj_9bioscrape_5types_Volume *(*copy)(struct __pyx_obj_9bioscrape_5types_Volume *);
  void (*set_volume)(struct __pyx_obj_9bioscrape_5types_Volume *, double);
  double (*get_volume)(struct __pyx_obj_9bioscrape_5types_Volume *);
};
static struct __pyx_vtabstruct_9bioscrape_5types_Volume *__pyx_vtabptr_9bioscrape_5types_Volume;
static CYTHON_INLINE void __pyx_f_9bioscrape_5types_6Volume_set_volume(struct __pyx_obj_9bioscrape_5types_Volume *, double);
static CYTHON_INLINE double __pyx_f_9bioscrape_5types_6Volume_get_volume(struct __pyx_obj_9bioscrape_5types_Volume *);


/* "bioscrape/types.pyx":1283
 * 
 * 
 * cdef class StochasticTimeThresholdVolume(Volume):             # <<<<<<<<<<<<<<
 *     def __init__(self, double cell_cycle_time, double average_division_volume, double division_noise):
 *         """
 */

struct __pyx_vtabstruct_9bioscrape_5types_StochasticTimeThresholdVolume {
  struct __pyx_vtabstruct_9bioscrape_5types_Volume __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_vtabptr_9bioscrape_5types_StochasticTimeThresholdVolume;


/* "bioscrape/types.pyx":1361
 *         return 0
 * 
 * cdef class StateDependentVolume(Volume):             # <<<<<<<<<<<<<<
 *     """
 *     A volume class for a cell where growth rate depends on state and the division volume is chosen randomly
 */

struct __pyx_vtabstruct_9bioscrape_5types_StateDependentVolume {
  struct __pyx_vtabstruct_9bioscrape_5types_Volume __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_StateDependentVolume *__pyx_vtabptr_9bioscrape_5types_StateDependentVolume;


/* "bioscrape/types.pyx":1413
 * ##############################                     #############################
 * 
 * cdef class Model:             # <<<<<<<<<<<<<<
 *     def __init__(self, filename = None, species = [], reactions = [],
 *                  parameters = [], rules = [], initial_condition_dict = None,
 */

struct __pyx_vtabstruct_9bioscrape_5types_Model {
  std::vector<void *>  *(*get_c_propensities)(struct __pyx_obj_9bioscrape_5types_Model *);
  std::vector<void *>  *(*get_c_delays)(struct __pyx_obj_9bioscrape_5types_Model *);
  std::vector<void *>  *(*get_c_repeat_rules)(struct __pyx_obj_9bioscrape_5types_Model *);
  PyArrayObject *(*get_update_array)(struct __pyx_obj_9bioscrape_5types_Model *);
  PyArrayObject *(*get_delay_update_array)(struct __pyx_obj_9bioscrape_5types_Model *);
  PyArrayObject *(*get_species_values)(struct __pyx_obj_9bioscrape_5types_Model *);
  PyArrayObject *(*get_params_values)(struct __pyx_obj_9bioscrape_5types_Model *);
  void (*_initialize)(struct __pyx_obj_9bioscrape_5types_Model *);
};
static struct __pyx_vtabstruct_9bioscrape_5types_Model *__pyx_vtabptr_9bioscrape_5types_Model;


/* "bioscrape/types.pyx":2453
 * #################################################                     ################################################
 * 
 * cdef class Schnitz:             # <<<<<<<<<<<<<<
 *     def __init__(self, time, data, volume):
 *         """
 */

struct __pyx_vtabstruct_9bioscrape_5types_Schnitz {
  PyArrayObject *(*get_data)(struct __pyx_obj_9bioscrape_5types_Schnitz *);
  PyArrayObject *(*get_time)(struct __pyx_obj_9bioscrape_5types_Schnitz *);
  PyArrayObject *(*get_volume)(struct __pyx_obj_9bioscrape_5types_Schnitz *);
  struct __pyx_obj_9bioscrape_5types_Schnitz *(*get_parent)(struct __pyx_obj_9bioscrape_5types_Schnitz *);
  struct __pyx_obj_9bioscrape_5types_Schnitz *(*get_daughter_1)(struct __pyx_obj_9bioscrape_5types_Schnitz *);
  struct __pyx_obj_9bioscrape_5types_Schnitz *(*get_daughter_2)(struct __pyx_obj_9bioscrape_5types_Schnitz *);
  void (*set_parent)(struct __pyx_obj_9bioscrape_5types_Schnitz *, struct __pyx_obj_9bioscrape_5types_Schnitz *);
  void (*set_daughters)(struct __pyx_obj_9bioscrape_5types_Schnitz *, struct __pyx_obj_9bioscrape_5types_Schnitz *, struct __pyx_obj_9bioscrape_5types_Schnitz *);
};
static struct __pyx_vtabstruct_9bioscrape_5types_Schnitz *__pyx_vtabptr_9bioscrape_5types_Schnitz;
static CYTHON_INLINE PyArrayObject *__pyx_f_9bioscrape_5types_7Schnitz_get_data(struct __pyx_obj_9bioscrape_5types_Schnitz *);
static CYTHON_INLINE PyArrayObject *__pyx_f_9bioscrape_5types_7Schnitz_get_time(struct __pyx_obj_9bioscrape_5types_Schnitz *);
static CYTHON_INLINE PyArrayObject *__pyx_f_9bioscrape_5types_7Schnitz_get_volume(struct __pyx_obj_9bioscrape_5types_Schnitz *);
static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Schnitz_get_parent(struct __pyx_obj_9bioscrape_5types_Schnitz *);
static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_1(struct __pyx_obj_9bioscrape_5types_Schnitz *);
static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_2(struct __pyx_obj_9bioscrape_5types_Schnitz *);
static CYTHON_INLINE void __pyx_f_9bioscrape_5types_7Schnitz_set_parent(struct __pyx_obj_9bioscrape_5types_Schnitz *, struct __pyx_obj_9bioscrape_5types_Schnitz *);
static CYTHON_INLINE void __pyx_f_9bioscrape_5types_7Schnitz_set_daughters(struct __pyx_obj_9bioscrape_5types_Schnitz *, struct __pyx_obj_9bioscrape_5types_Schnitz *, struct __pyx_obj_9bioscrape_5types_Schnitz *);


/* "bioscrape/types.pyx":2559
 *         return (self.parent,self.daughter1,self.daughter2, self.time, self.volume, self.data)
 * 
 * cdef class Lineage:             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         """
 */

struct __pyx_vtabstruct_9bioscrape_5types_Lineage {
  void (*add_schnitz)(struct __pyx_obj_9bioscrape_5types_Lineage *, struct __pyx_obj_9bioscrape_5types_Schnitz *);
  unsigned int (*size)(struct __pyx_obj_9bioscrape_5types_Lineage *);
  struct __pyx_obj_9bioscrape_5types_Schnitz *(*get_schnitz)(struct __pyx_obj_9bioscrape_5types_Lineage *, unsigned int);
};
static struct __pyx_vtabstruct_9bioscrape_5types_Lineage *__pyx_vtabptr_9bioscrape_5types_Lineage;
static CYTHON_INLINE void __pyx_f_9bioscrape_5types_7Lineage_add_schnitz(struct __pyx_obj_9bioscrape_5types_Lineage *, struct __pyx_obj_9bioscrape_5types_Schnitz *);
static CYTHON_INLINE unsigned int __pyx_f_9bioscrape_5types_7Lineage_size(struct __pyx_obj_9bioscrape_5types_Lineage *);
static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Lineage_get_schnitz(struct __pyx_obj_9bioscrape_5types_Lineage *, unsigned int);


/* "bioscrape/types.pyx":2652
 * 
 * 
 * cdef class ExperimentalLineage(Lineage):             # <<<<<<<<<<<<<<
 *     def __init__(self, dict species_indices={}):
 *         super().__init__()
 */

struct __pyx_vtabstruct_9bioscrape_5types_ExperimentalLineage {
  struct __pyx_vtabstruct_9bioscrape_5types_Lineage __pyx_base;
};
static struct __pyx_vtabstruct_9bioscrape_5types_ExperimentalLineage *__pyx_vtabptr_9bioscrape_5types_ExperimentalLineage;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* MergeKeywords.proto */
static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_unsigned_int(unsigned int value, Py_ssize_t width, char padding_char, char format_char);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_t_9bioscrape_5types_PropensityType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From___pyx_t_9bioscrape_5types_DelayType(__pyx_t_9bioscrape_5types_DelayType value);

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE __pyx_t_9bioscrape_5types_PropensityType __Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE __pyx_t_9bioscrape_5types_DelayType __Pyx_PyInt_As___pyx_t_9bioscrape_5types_DelayType(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static double __pyx_f_9bioscrape_5types_10Propensity_get_propensity(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_10Propensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_volume, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_10Propensity_get_stochastic_propensity(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_10Propensity_get_stochastic_volume_propensity(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_22ConstitutivePropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_22ConstitutivePropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_22UnimolecularPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_22UnimolecularPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_21BimolecularPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_21BimolecularPropensity_get_stochastic_propensity(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_21BimolecularPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_21BimolecularPropensity_get_stochastic_volume_propensity(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_22PositiveHillPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_22PositiveHillPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_34PositiveProportionalHillPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_34PositiveProportionalHillPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_22NegativeHillPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_22NegativeHillPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_34NegativeProportionalHillPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_34NegativeProportionalHillPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_20MassActionPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_20MassActionPropensity_get_stochastic_propensity(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_20MassActionPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_20MassActionPropensity_get_stochastic_volume_propensity(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_4Term_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_4Term_volume_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_vol, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_12ConstantTerm_evaluate(struct __pyx_obj_9bioscrape_5types_ConstantTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_12ConstantTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_ConstantTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_vol, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_11SpeciesTerm_evaluate(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *__pyx_v_self, double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_11SpeciesTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *__pyx_v_self, double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_vol, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_13ParameterTerm_evaluate(struct __pyx_obj_9bioscrape_5types_ParameterTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_13ParameterTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_ParameterTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_vol, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_10VolumeTerm_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_VolumeTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_10VolumeTerm_volume_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_VolumeTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, double __pyx_v_vol, CYTHON_UNUSED double __pyx_v_time); /* proto*/
static void __pyx_f_9bioscrape_5types_10BinaryTerm_add_term(struct __pyx_obj_9bioscrape_5types_BinaryTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_trm); /* proto*/
static double __pyx_f_9bioscrape_5types_7SumTerm_evaluate(struct __pyx_obj_9bioscrape_5types_SumTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_7SumTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_SumTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_11ProductTerm_evaluate(struct __pyx_obj_9bioscrape_5types_ProductTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_11ProductTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_ProductTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_7MaxTerm_evaluate(struct __pyx_obj_9bioscrape_5types_MaxTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_7MaxTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_MaxTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_7MinTerm_evaluate(struct __pyx_obj_9bioscrape_5types_MinTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_7MinTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_MinTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time); /* proto*/
static void __pyx_f_9bioscrape_5types_9PowerTerm_set_base(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_base); /* proto*/
static void __pyx_f_9bioscrape_5types_9PowerTerm_set_exponent(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_exponent); /* proto*/
static double __pyx_f_9bioscrape_5types_9PowerTerm_evaluate(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_9PowerTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time); /* proto*/
static void __pyx_f_9bioscrape_5types_7ExpTerm_set_arg(struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_arg); /* proto*/
static double __pyx_f_9bioscrape_5types_7ExpTerm_evaluate(struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_7ExpTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time); /* proto*/
static void __pyx_f_9bioscrape_5types_7LogTerm_set_arg(struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_arg); /* proto*/
static double __pyx_f_9bioscrape_5types_7LogTerm_evaluate(struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_7LogTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time); /* proto*/
static void __pyx_f_9bioscrape_5types_8StepTerm_set_arg(struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_arg); /* proto*/
static double __pyx_f_9bioscrape_5types_8StepTerm_evaluate(struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_8StepTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time); /* proto*/
static void __pyx_f_9bioscrape_5types_7AbsTerm_set_arg(struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_arg); /* proto*/
static double __pyx_f_9bioscrape_5types_7AbsTerm_evaluate(struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_7AbsTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_8TimeTerm_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_TimeTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_8TimeTerm_volume_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_TimeTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_vol, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_17GeneralPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_17GeneralPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time); /* proto*/
static double __pyx_f_9bioscrape_5types_5Delay_get_delay(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params); /* proto*/
static double __pyx_f_9bioscrape_5types_7NoDelay_get_delay(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_NoDelay *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params); /* proto*/
static double __pyx_f_9bioscrape_5types_10FixedDelay_get_delay(struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, double *__pyx_v_params); /* proto*/
static double __pyx_f_9bioscrape_5types_13GaussianDelay_get_delay(struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, double *__pyx_v_params); /* proto*/
static double __pyx_f_9bioscrape_5types_10GammaDelay_get_delay(struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, double *__pyx_v_params); /* proto*/
static void __pyx_f_9bioscrape_5types_4Rule_rule_operation(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, CYTHON_UNUSED double __pyx_v_dt); /* proto*/
static void __pyx_f_9bioscrape_5types_4Rule_rule_volume_operation(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_volume, double __pyx_v_time, double __pyx_v_dt); /* proto*/
static void __pyx_f_9bioscrape_5types_4Rule_execute_rule(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time, double __pyx_v_dt, unsigned int __pyx_v_rule_step); /* proto*/
static void __pyx_f_9bioscrape_5types_4Rule_execute_volume_rule(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time, double __pyx_v_dt, unsigned int __pyx_v_rule_step); /* proto*/
static void __pyx_f_9bioscrape_5types_22AdditiveAssignmentRule_rule_operation(struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *__pyx_v_self, double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, CYTHON_UNUSED double __pyx_v_dt); /* proto*/
static void __pyx_f_9bioscrape_5types_21GeneralAssignmentRule_rule_operation(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time, CYTHON_UNUSED double __pyx_v_dt); /* proto*/
static void __pyx_f_9bioscrape_5types_21GeneralAssignmentRule_rule_volume_operation(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time, CYTHON_UNUSED double __pyx_v_dt); /* proto*/
static void __pyx_f_9bioscrape_5types_14GeneralODERule_rule_operation(struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time, double __pyx_v_dt); /* proto*/
static void __pyx_f_9bioscrape_5types_14GeneralODERule_rule_volume_operation(struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time, double __pyx_v_dt); /* proto*/
static double __pyx_f_9bioscrape_5types_6Volume_get_volume_step(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, CYTHON_UNUSED double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_dt); /* proto*/
static struct __pyx_obj_9bioscrape_5types_Volume *__pyx_f_9bioscrape_5types_6Volume_copy(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self); /* proto*/
static void __pyx_f_9bioscrape_5types_6Volume_initialize(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, CYTHON_UNUSED double __pyx_v_volume); /* proto*/
static unsigned int __pyx_f_9bioscrape_5types_6Volume_cell_divided(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, CYTHON_UNUSED double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_dt); /* proto*/
static struct __pyx_obj_9bioscrape_5types_Volume *__pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_copy(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self); /* proto*/
static double __pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_get_volume_step(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, double __pyx_v_volume, double __pyx_v_dt); /* proto*/
static void __pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_initialize(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, double __pyx_v_time, double __pyx_v_volume); /* proto*/
static unsigned int __pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_cell_divided(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, double __pyx_v_time, CYTHON_UNUSED double __pyx_v_volume, double __pyx_v_dt); /* proto*/
static double __pyx_f_9bioscrape_5types_20StateDependentVolume_get_volume_step(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time, double __pyx_v_volume, double __pyx_v_dt); /* proto*/
static void __pyx_f_9bioscrape_5types_20StateDependentVolume_initialize(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, double __pyx_v_volume); /* proto*/
static unsigned int __pyx_f_9bioscrape_5types_20StateDependentVolume_cell_divided(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_dt); /* proto*/
static struct __pyx_obj_9bioscrape_5types_Volume *__pyx_f_9bioscrape_5types_20StateDependentVolume_copy(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self); /* proto*/
static void __pyx_f_9bioscrape_5types_5Model__initialize(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto*/
static std::vector<void *>  *__pyx_f_9bioscrape_5types_5Model_get_c_repeat_rules(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_9bioscrape_5types_5Model_get_species_values(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_9bioscrape_5types_5Model_get_params_values(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto*/
static std::vector<void *>  *__pyx_f_9bioscrape_5types_5Model_get_c_propensities(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto*/
static std::vector<void *>  *__pyx_f_9bioscrape_5types_5Model_get_c_delays(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_9bioscrape_5types_5Model_get_update_array(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_9bioscrape_5types_5Model_get_delay_update_array(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto*/
static CYTHON_INLINE void __pyx_f_9bioscrape_5types_6Volume_set_volume(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, double __pyx_v_v); /* proto*/
static CYTHON_INLINE double __pyx_f_9bioscrape_5types_6Volume_get_volume(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArrayObject *__pyx_f_9bioscrape_5types_7Schnitz_get_data(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArrayObject *__pyx_f_9bioscrape_5types_7Schnitz_get_time(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArrayObject *__pyx_f_9bioscrape_5types_7Schnitz_get_volume(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto*/
static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Schnitz_get_parent(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto*/
static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_1(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto*/
static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_2(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto*/
static CYTHON_INLINE void __pyx_f_9bioscrape_5types_7Schnitz_set_parent(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_p); /* proto*/
static CYTHON_INLINE void __pyx_f_9bioscrape_5types_7Schnitz_set_daughters(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_d1, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_d2); /* proto*/
static CYTHON_INLINE void __pyx_f_9bioscrape_5types_7Lineage_add_schnitz(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_s); /* proto*/
static CYTHON_INLINE unsigned int __pyx_f_9bioscrape_5types_7Lineage_size(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self); /* proto*/
static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Lineage_get_schnitz(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, unsigned int __pyx_v_index); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'bioscrape.vector' */

/* Module declarations from 'cython' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'bioscrape.random' */
static double (*__pyx_f_9bioscrape_6random_normal_rv)(double, double); /*proto*/
static double (*__pyx_f_9bioscrape_6random_gamma_rv)(double, double); /*proto*/

/* Module declarations from 'bioscrape.types' */
static PyTypeObject *__pyx_ptype_9bioscrape_5types_Propensity = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_ConstitutivePropensity = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_UnimolecularPropensity = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_BimolecularPropensity = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_PositiveHillPropensity = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_PositiveProportionalHillPropensity = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_NegativeHillPropensity = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_NegativeProportionalHillPropensity = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_MassActionPropensity = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_Term = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_ConstantTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_SpeciesTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_ParameterTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_VolumeTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_BinaryTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_SumTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_ProductTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_MaxTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_MinTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_PowerTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_ExpTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_LogTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_StepTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_AbsTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_TimeTerm = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_GeneralPropensity = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_Delay = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_NoDelay = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_FixedDelay = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_GaussianDelay = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_GammaDelay = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_Rule = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_AdditiveAssignmentRule = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_GeneralAssignmentRule = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_GeneralODERule = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_Volume = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_StochasticTimeThresholdVolume = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_StateDependentVolume = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_Model = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_Schnitz = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_Lineage = 0;
static PyTypeObject *__pyx_ptype_9bioscrape_5types_ExperimentalLineage = 0;
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Propensity__set_state(struct __pyx_obj_9bioscrape_5types_Propensity *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_ConstitutivePropensity__set_state(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_UnimolecularPropensity__set_state(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_BimolecularPropensity__set_state(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_PositiveHillPropensity__set_state(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_PositiveProportionalHillPropensity__set_state(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_NegativeHillPropensity__set_state(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_NegativeProportionalHillPropensity__set_state(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_MassActionPropensity__set_state(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Term__set_state(struct __pyx_obj_9bioscrape_5types_Term *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_ConstantTerm__set_state(struct __pyx_obj_9bioscrape_5types_ConstantTerm *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_SpeciesTerm__set_state(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_ParameterTerm__set_state(struct __pyx_obj_9bioscrape_5types_ParameterTerm *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_VolumeTerm__set_state(struct __pyx_obj_9bioscrape_5types_VolumeTerm *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_PowerTerm__set_state(struct __pyx_obj_9bioscrape_5types_PowerTerm *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_ExpTerm__set_state(struct __pyx_obj_9bioscrape_5types_ExpTerm *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_LogTerm__set_state(struct __pyx_obj_9bioscrape_5types_LogTerm *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_StepTerm__set_state(struct __pyx_obj_9bioscrape_5types_StepTerm *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_AbsTerm__set_state(struct __pyx_obj_9bioscrape_5types_AbsTerm *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_TimeTerm__set_state(struct __pyx_obj_9bioscrape_5types_TimeTerm *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_GeneralPropensity__set_state(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Delay__set_state(struct __pyx_obj_9bioscrape_5types_Delay *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_NoDelay__set_state(struct __pyx_obj_9bioscrape_5types_NoDelay *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_FixedDelay__set_state(struct __pyx_obj_9bioscrape_5types_FixedDelay *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_GaussianDelay__set_state(struct __pyx_obj_9bioscrape_5types_GaussianDelay *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_GammaDelay__set_state(struct __pyx_obj_9bioscrape_5types_GammaDelay *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Rule__set_state(struct __pyx_obj_9bioscrape_5types_Rule *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_AdditiveAssignmentRule__set_state(struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_GeneralAssignmentRule__set_state(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_GeneralODERule__set_state(struct __pyx_obj_9bioscrape_5types_GeneralODERule *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Volume__set_state(struct __pyx_obj_9bioscrape_5types_Volume *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_StochasticTimeThresholdVolume__set_state(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_StateDependentVolume__set_state(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *, PyObject *); /*proto*/
static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Schnitz__set_state(struct __pyx_obj_9bioscrape_5types_Schnitz *, PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_double_t = { "double_t", NULL, sizeof(__pyx_t_5numpy_double_t), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "bioscrape.types"
extern int __pyx_module_is_main_bioscrape__types;
int __pyx_module_is_main_bioscrape__types = 0;

/* Implementation of 'bioscrape.types' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_SyntaxError;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_LookupError;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_0[] = "0";
static const char __pyx_k_K[] = "K";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k__2[] = "*";
static const char __pyx_k__3[] = "";
static const char __pyx_k__4[] = "+";
static const char __pyx_k__5[] = "-";
static const char __pyx_k__8[] = "^";
static const char __pyx_k__9[] = "**";
static const char __pyx_k_d1[] = "d1";
static const char __pyx_k_d2[] = "d2";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_eq[] = "__eq__";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_s1[] = "s1";
static const char __pyx_k_Abs[] = "Abs";
static const char __pyx_k_Add[] = "Add";
static const char __pyx_k_Max[] = "Max";
static const char __pyx_k_Min[] = "Min";
static const char __pyx_k_Mul[] = "Mul";
static const char __pyx_k_ODE[] = "ODE";
static const char __pyx_k_Pow[] = "Pow";
static const char __pyx_k__11[] = "|";
static const char __pyx_k__12[] = "_";
static const char __pyx_k__17[] = ".";
static const char __pyx_k__18[] = "=";
static const char __pyx_k__31[] = ", ";
static const char __pyx_k__32[] = ")";
static const char __pyx_k__35[] = "--";
static const char __pyx_k_bs4[] = "bs4";
static const char __pyx_k_dic[] = "dic";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_for[] = " for ";
static const char __pyx_k_ind[] = "ind";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_ode[] = "ode";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_std[] = "std";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_vol[] = "vol";
static const char __pyx_k_xml[] = "xml";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Rule[] = "Rule";
static const char __pyx_k_Term[] = "Term";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_func[] = "func";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_rate[] = "rate";
static const char __pyx_k_root[] = "root";
static const char __pyx_k_rule[] = "rule";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_tree[] = "tree";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_Delay[] = "Delay";
static const char __pyx_k_Model[] = "Model";
static const char __pyx_k_after[] = "after";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_attrs[] = "attrs";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_delay[] = "delay";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_evalf[] = "evalf";
static const char __pyx_k_fixed[] = "fixed";
static const char __pyx_k_gamma[] = "gamma";
static const char __pyx_k_index[] = "index ";
static const char __pyx_k_isnan[] = "isnan";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_model[] = "model";
static const char __pyx_k_names[] = "names";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_rules[] = "rules";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_sympy[] = "sympy";
static const char __pyx_k_theta[] = "theta";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_Inputs[] = " Inputs=";
static const char __pyx_k_Symbol[] = "Symbol";
static const char __pyx_k_Volume[] = "Volume";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_clash1[] = "_clash1";
static const char __pyx_k_fields[] = "fields";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_params[] = "params";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_repeat[] = "repeat";
static const char __pyx_k_specie[] = "specie";
static const char __pyx_k_target[] = "target";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_AbsTerm[] = "AbsTerm";
static const char __pyx_k_ExpTerm[] = "ExpTerm";
static const char __pyx_k_Lineage[] = "Lineage";
static const char __pyx_k_LogTerm[] = "LogTerm";
static const char __pyx_k_MaxTerm[] = "MaxTerm";
static const char __pyx_k_MinTerm[] = "MinTerm";
static const char __pyx_k_NoDelay[] = "NoDelay";
static const char __pyx_k_Outputs[] = " Outputs=";
static const char __pyx_k_Schnitz[] = "Schnitz";
static const char __pyx_k_Species[] = "Species ";
static const char __pyx_k_SumTerm[] = "SumTerm";
static const char __pyx_k_absterm[] = "absterm";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_expterm[] = "expterm";
static const char __pyx_k_general[] = "general";
static const char __pyx_k_index_2[] = "index";
static const char __pyx_k_libsbml[] = "libsbml";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_logterm[] = "logterm";
static const char __pyx_k_maxterm[] = "maxterm";
static const char __pyx_k_minterm[] = "minterm";
static const char __pyx_k_py_size[] = "py_size";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_species[] = "species";
static const char __pyx_k_sumterm[] = "sumterm";
static const char __pyx_k_sympify[] = "sympify";
static const char __pyx_k_StepTerm[] = "StepTerm";
static const char __pyx_k_TimeTerm[] = "TimeTerm";
static const char __pyx_k_add_rule[] = "add_rule";
static const char __pyx_k_additive[] = "additive";
static const char __pyx_k_end_time[] = "end_time";
static const char __pyx_k_equation[] = "equation";
static const char __pyx_k_features[] = "features";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_find_all[] = "find_all";
static const char __pyx_k_gaussian[] = "gaussian";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_has_attr[] = "has_attr";
static const char __pyx_k_instring[] = "instring";
static const char __pyx_k_new_term[] = "new_term";
static const char __pyx_k_params_2[] = " params=";
static const char __pyx_k_products[] = "products";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_reaction[] = "reaction";
static const char __pyx_k_repeated[] = "repeated";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_stepterm[] = "stepterm";
static const char __pyx_k_toString[] = "toString";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_ClassName[] = "ClassName";
static const char __pyx_k_DataFrame[] = "DataFrame";
static const char __pyx_k_Heaviside[] = "Heaviside";
static const char __pyx_k_PowerTerm[] = "PowerTerm";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_add_param[] = "_add_param";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_file_name[] = "file_name";
static const char __pyx_k_frequency[] = "frequency";
static const char __pyx_k_heaviside[] = "heaviside";
static const char __pyx_k_parameter[] = "parameter";
static const char __pyx_k_powerterm[] = "powerterm";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reactants[] = "reactants";
static const char __pyx_k_reactions[] = "reactions";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_rule_step[] = "rule_step";
static const char __pyx_k_rule_type[] = "rule_type";
static const char __pyx_k_sympy_abc[] = "sympy.abc";
static const char __pyx_k_BinaryTerm[] = "BinaryTerm";
static const char __pyx_k_FixedDelay[] = "FixedDelay";
static const char __pyx_k_GammaDelay[] = "GammaDelay";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_Propensity[] = "Propensity";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_VolumeTerm[] = "VolumeTerm";
static const char __pyx_k_assignment[] = "assignment";
static const char __pyx_k_delay_type[] = "delay_type";
static const char __pyx_k_dictionary[] = "dictionary";
static const char __pyx_k_get_params[] = "get_params";
static const char __pyx_k_initialize[] = "initialize";
static const char __pyx_k_massaction[] = "massaction";
static const char __pyx_k_param_name[] = "param_name ";
static const char __pyx_k_parameters[] = "parameters";
static const char __pyx_k_parse_tree[] = "parse_tree";
static const char __pyx_k_propensity[] = "propensity";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_start_time[] = "start_time";
static const char __pyx_k_stochastic[] = "stochastic";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_LookupError[] = "LookupError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_ProductTerm[] = "ProductTerm";
static const char __pyx_k_SpeciesTerm[] = "SpeciesTerm";
static const char __pyx_k_SyntaxError[] = "SyntaxError";
static const char __pyx_k_add_species[] = "_add_species";
static const char __pyx_k_array_equal[] = "array_equal";
static const char __pyx_k_compartment[] = "compartment";
static const char __pyx_k_concatenate[] = "concatenate";
static const char __pyx_k_create_rule[] = "create_rule";
static const char __pyx_k_getErrorLog[] = "getErrorLog";
static const char __pyx_k_get_species[] = "get_species";
static const char __pyx_k_growth_rate[] = "growth_rate";
static const char __pyx_k_import_sbml[] = "import_sbml";
static const char __pyx_k_param_names[] = "param_names";
static const char __pyx_k_param_value[] = "param_value";
static const char __pyx_k_parse_model[] = "parse_model";
static const char __pyx_k_productterm[] = "productterm";
static const char __pyx_k_py_add_term[] = "py_add_term";
static const char __pyx_k_py_get_data[] = "py_get_data";
static const char __pyx_k_set_species[] = "set_species";
static const char __pyx_k_ConstantTerm[] = "ConstantTerm";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_Unknown_term[] = "Unknown term ";
static const char __pyx_k_add_reaction[] = "_add_reaction";
static const char __pyx_k_delay_inputs[] = " delay inputs=";
static const char __pyx_k_delay_object[] = "delay_object";
static const char __pyx_k_delay_type_2[] = "\n\tdelay type=";
static const char __pyx_k_getNumErrors[] = "getNumErrors";
static const char __pyx_k_hillnegative[] = "hillnegative";
static const char __pyx_k_hillpositive[] = "hillpositive";
static const char __pyx_k_param_name_2[] = "param_name";
static const char __pyx_k_params2index[] = "params2index";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_species_dict[] = "species_dict";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_BeautifulSoup[] = "BeautifulSoup";
static const char __pyx_k_GaussianDelay[] = "GaussianDelay";
static const char __pyx_k_ParameterTerm[] = "ParameterTerm";
static const char __pyx_k_add_parameter[] = "add_parameter";
static const char __pyx_k_add_species_2[] = "add_species";
static const char __pyx_k_check_species[] = "check_species";
static const char __pyx_k_delay_outputs[] = " delay outputs=";
static const char __pyx_k_py_get_parent[] = "py_get_parent";
static const char __pyx_k_py_get_result[] = "py_get_result";
static const char __pyx_k_py_set_parent[] = "py_set_parent";
static const char __pyx_k_py_set_volume[] = "py_set_volume";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_rule_equation[] = "rule equation";
static const char __pyx_k_sbml_filename[] = "sbml_filename";
static const char __pyx_k_set_parameter[] = "set_parameter";
static const char __pyx_k_species2index[] = "species2index";
static const char __pyx_k_species_names[] = "species_names";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_GeneralODERule[] = "GeneralODERule";
static const char __pyx_k_add_reaction_2[] = "add_reaction";
static const char __pyx_k_create_vectors[] = "_create_vectors";
static const char __pyx_k_delay_products[] = "delay_products";
static const char __pyx_k_division_noise[] = "division_noise";
static const char __pyx_k_getCompartment[] = "getCompartment";
static const char __pyx_k_get_param_list[] = "get_param_list";
static const char __pyx_k_input_printout[] = "input_printout";
static const char __pyx_k_rule_frequency[] = "rule_frequency";
static const char __pyx_k_Propensity_type[] = "\n\tPropensity_type=";
static const char __pyx_k_bioscrape_model[] = "bioscrape_model";
static const char __pyx_k_bioscrape_types[] = "bioscrape.types";
static const char __pyx_k_cell_cycle_time[] = "cell_cycle_time";
static const char __pyx_k_create_reaction[] = "create_reaction";
static const char __pyx_k_delay_reactants[] = "delay_reactants";
static const char __pyx_k_get_param_value[] = "get_param_value";
static const char __pyx_k_lineage_py_size[] = " > lineage.py_size() = ";
static const char __pyx_k_param_values_is[] = "; param_values is ";
static const char __pyx_k_params2index_is[] = " (params2index is ";
static const char __pyx_k_propensity_type[] = "propensity_type";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_rule_attributes[] = "rule_attributes";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_species_indices[] = "species_indices";
static const char __pyx_k_sympy_recursion[] = "sympy_recursion";
static const char __pyx_k_check_parameters[] = "check_parameters";
static const char __pyx_k_delay_param_dict[] = "delay_param_dict";
static const char __pyx_k_delay_parameters[] = "\n\tdelay parameters=";
static const char __pyx_k_for_param_object[] = " for param object ";
static const char __pyx_k_get_species_list[] = "get_species_list";
static const char __pyx_k_initialize_model[] = "initialize_model";
static const char __pyx_k_param_dict_check[] = "_param_dict_check";
static const char __pyx_k_param_dictionary[] = "param_dictionary";
static const char __pyx_k_parse_expression[] = "parse_expression";
static const char __pyx_k_py_set_daughters[] = "py_set_daughters";
static const char __pyx_k_rule_frequency_2[] = "\n\trule_frequency=";
static const char __pyx_k_stochastic_model[] = "stochastic_model";
static const char __pyx_k_GeneralPropensity[] = "GeneralPropensity";
static const char __pyx_k_Warning_parameter[] = "Warning! parameter ";
static const char __pyx_k_create_propensity[] = "create_propensity";
static const char __pyx_k_create_sbml_model[] = "create_sbml_model";
static const char __pyx_k_get_species_array[] = "get_species_array";
static const char __pyx_k_get_species_value[] = "get_species_value";
static const char __pyx_k_param_object_name[] = "param_object_name";
static const char __pyx_k_parameter_indices[] = "parameter_indices";
static const char __pyx_k_propensity_object[] = "propensity_object";
static const char __pyx_k_pyx_unpickle_Rule[] = "__pyx_unpickle_Rule";
static const char __pyx_k_pyx_unpickle_Term[] = "__pyx_unpickle_Term";
static const char __pyx_k_rule_attributes_2[] = "\n\trule_attributes=";
static const char __pyx_k_set_species_value[] = "_set_species_value";
static const char __pyx_k_writeSBMLToString[] = "writeSBMLToString";
static const char __pyx_k_Unknown_delay_type[] = "Unknown delay type: ";
static const char __pyx_k_bioscrape_sbmlutil[] = "bioscrape.sbmlutil";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_pyx_unpickle_Delay[] = "__pyx_unpickle_Delay";
static const char __pyx_k_set_frequency_flag[] = "set_frequency_flag";
static const char __pyx_k_DummyVar_FixedDelay[] = "DummyVar_FixedDelay";
static const char __pyx_k_DummyVar_GammaDelay[] = "DummyVar_GammaDelay";
static const char __pyx_k_ExperimentalLineage[] = "ExperimentalLineage";
static const char __pyx_k_ModuleNotFoundError[] = "ModuleNotFoundError";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_bioscrape_types_pyx[] = "bioscrape\\types.pyx";
static const char __pyx_k_generate_sbml_model[] = "generate_sbml_model";
static const char __pyx_k_pyx_unpickle_Volume[] = "__pyx_unpickle_Volume";
static const char __pyx_k_restore_binary_term[] = "restore_binary_term";
static const char __pyx_k_Incorrect_delay_spec[] = "Incorrect delay spec";
static const char __pyx_k_Invalid_type_of_Rule[] = "Invalid type of Rule: ";
static const char __pyx_k_MassActionPropensity[] = "MassActionPropensity";
static const char __pyx_k_No_species_with_name[] = "No species with name ";
static const char __pyx_k_StateDependentVolume[] = "StateDependentVolume";
static const char __pyx_k_get_number_of_params[] = "get_number_of_params";
static const char __pyx_k_get_parameter_values[] = "get_parameter_values";
static const char __pyx_k_pyx_unpickle_AbsTerm[] = "__pyx_unpickle_AbsTerm";
static const char __pyx_k_pyx_unpickle_ExpTerm[] = "__pyx_unpickle_ExpTerm";
static const char __pyx_k_pyx_unpickle_LogTerm[] = "__pyx_unpickle_LogTerm";
static const char __pyx_k_pyx_unpickle_NoDelay[] = "__pyx_unpickle_NoDelay";
static const char __pyx_k_pyx_unpickle_Schnitz[] = "__pyx_unpickle_Schnitz";
static const char __pyx_k_reaction_update_dict[] = "reaction_update_dict";
static const char __pyx_k_BimolecularPropensity[] = "BimolecularPropensity";
static const char __pyx_k_GeneralAssignmentRule[] = "GeneralAssignmentRule";
static const char __pyx_k_Initializing_ODE_Rule[] = "Initializing ODE Rule";
static const char __pyx_k_Sympy_unable_to_parse[] = "Sympy unable to parse: ";
static const char __pyx_k_delay_annotation_dict[] = "delay_annotation_dict";
static const char __pyx_k_get_number_of_species[] = "get_number_of_species";
static const char __pyx_k_initial_concentration[] = "initial_concentration";
static const char __pyx_k_propensity_param_dict[] = "propensity_param_dict";
static const char __pyx_k_pyx_unpickle_StepTerm[] = "__pyx_unpickle_StepTerm";
static const char __pyx_k_pyx_unpickle_TimeTerm[] = "__pyx_unpickle_TimeTerm";
static const char __pyx_k_AdditiveAssignmentRule[] = "AdditiveAssignmentRule";
static const char __pyx_k_ConstitutivePropensity[] = "ConstitutivePropensity";
static const char __pyx_k_DummyVar_GaussianDelay[] = "DummyVar_GaussianDelay";
static const char __pyx_k_Invalid_rule_frequency[] = "Invalid rule frequency: ";
static const char __pyx_k_NegativeHillPropensity[] = "NegativeHillPropensity";
static const char __pyx_k_No_parameter_with_name[] = "No parameter with name ";
static const char __pyx_k_PositiveHillPropensity[] = "PositiveHillPropensity";
static const char __pyx_k_UnimolecularPropensity[] = "UnimolecularPropensity";
static const char __pyx_k_Unspecified_Parameters[] = "Unspecified Parameters: ";
static const char __pyx_k_creating_reaction_with[] = "creating reaction with:";
static const char __pyx_k_initial_condition_dict[] = "initial_condition_dict";
static const char __pyx_k_py_set_species_indices[] = "py_set_species_indices";
static const char __pyx_k_pyx_unpickle_PowerTerm[] = "__pyx_unpickle_PowerTerm";
static const char __pyx_k_This_should_be_a_number[] = "This should be a number: ";
static const char __pyx_k_average_division_volume[] = "average_division_volume";
static const char __pyx_k_propensity_param_dict_2[] = "\n\tpropensity_param_dict=";
static const char __pyx_k_pyx_unpickle_FixedDelay[] = "__pyx_unpickle_FixedDelay";
static const char __pyx_k_pyx_unpickle_GammaDelay[] = "__pyx_unpickle_GammaDelay";
static const char __pyx_k_pyx_unpickle_Propensity[] = "__pyx_unpickle_Propensity";
static const char __pyx_k_pyx_unpickle_VolumeTerm[] = "__pyx_unpickle_VolumeTerm";
static const char __pyx_k_parse_general_expression[] = "parse_general_expression";
static const char __pyx_k_proportionalhillnegative[] = "proportionalhillnegative";
static const char __pyx_k_proportionalhillpositive[] = "proportionalhillpositive";
static const char __pyx_k_pyx_unpickle_SpeciesTerm[] = "__pyx_unpickle_SpeciesTerm";
static const char __pyx_k_pyx_unpickle_ConstantTerm[] = "__pyx_unpickle_ConstantTerm";
static const char __pyx_k_delay_reaction_update_dict[] = "delay_reaction_update_dict";
static const char __pyx_k_get_species_and_parameters[] = "get_species_and_parameters";
static const char __pyx_k_pyx_unpickle_GaussianDelay[] = "__pyx_unpickle_GaussianDelay";
static const char __pyx_k_pyx_unpickle_ParameterTerm[] = "__pyx_unpickle_ParameterTerm";
static const char __pyx_k_Rule_Created_with_rule_type[] = "Rule Created with \n\trule_type = ";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_pyx_unpickle_GeneralODERule[] = "__pyx_unpickle_GeneralODERule";
static const char __pyx_k_Cannot_make_Term_base_object[] = "Cannot make Term base object";
static const char __pyx_k_not_of_the_form_VARIABLE_F_X[] = "not of the form VARIABLE = F(X).";
static const char __pyx_k_sympy_species_and_parameters[] = "sympy_species_and_parameters";
static const char __pyx_k_Creating_Propensity_prop_type[] = "Creating Propensity: prop_type=";
static const char __pyx_k_DummyVar_MassActionPropensity[] = "DummyVar_MassActionPropensity";
static const char __pyx_k_StochasticTimeThresholdVolume[] = "StochasticTimeThresholdVolume";
static const char __pyx_k_create_stochiometric_matrices[] = "_create_stochiometric_matrices";
static const char __pyx_k_DummyVar_BimolecularPropensity[] = "DummyVar_BimolecularPropensity";
static const char __pyx_k_pyx_unpickle_AdditiveAssignmen[] = "__pyx_unpickle_AdditiveAssignmentRule";
static const char __pyx_k_pyx_unpickle_BimolecularPropen[] = "__pyx_unpickle_BimolecularPropensity";
static const char __pyx_k_pyx_unpickle_ConstitutivePrope[] = "__pyx_unpickle_ConstitutivePropensity";
static const char __pyx_k_pyx_unpickle_GeneralAssignment[] = "__pyx_unpickle_GeneralAssignmentRule";
static const char __pyx_k_pyx_unpickle_GeneralPropensity[] = "__pyx_unpickle_GeneralPropensity";
static const char __pyx_k_pyx_unpickle_MassActionPropens[] = "__pyx_unpickle_MassActionPropensity";
static const char __pyx_k_pyx_unpickle_NegativeHillPrope[] = "__pyx_unpickle_NegativeHillPropensity";
static const char __pyx_k_pyx_unpickle_NegativeProportio[] = "__pyx_unpickle_NegativeProportionalHillPropensity";
static const char __pyx_k_pyx_unpickle_PositiveHillPrope[] = "__pyx_unpickle_PositiveHillPropensity";
static const char __pyx_k_pyx_unpickle_PositiveProportio[] = "__pyx_unpickle_PositiveProportionalHillPropensity";
static const char __pyx_k_pyx_unpickle_StateDependentVol[] = "__pyx_unpickle_StateDependentVolume";
static const char __pyx_k_pyx_unpickle_StochasticTimeThr[] = "__pyx_unpickle_StochasticTimeThresholdVolume";
static const char __pyx_k_pyx_unpickle_UnimolecularPrope[] = "__pyx_unpickle_UnimolecularPropensity";
static const char __pyx_k_DummyVar_ConstitutivePropensity[] = "DummyVar_ConstitutivePropensity";
static const char __pyx_k_DummyVar_NegativeHillPropensity[] = "DummyVar_NegativeHillPropensity";
static const char __pyx_k_DummyVar_PositiveHillPropensity[] = "DummyVar_PositiveHillPropensity";
static const char __pyx_k_DummyVar_UnimolecularPropensity[] = "DummyVar_UnimolecularPropensity";
static const char __pyx_k_Please_don_t_name_your_paramete[] = ". Please don't name your parameters like this to avoid errors.";
static const char __pyx_k_Plus_or_minus_character_in_mass[] = "Plus or minus character in mass action propensity string.";
static const char __pyx_k_Rules_must_be_a_tuple_rule_type[] = "Rules must be a tuple: (rule_type (string), rule_attributes (dict), rule_frequency (optional))";
static const char __pyx_k_Trying_to_set_parameter_that_is[] = "Trying to set parameter that is not in model: %s";
static const char __pyx_k_Warning_Useless_field_for_fixed[] = "Warning! Useless field for fixed delay";
static const char __pyx_k_Warning_Useless_field_for_gamma[] = "Warning! Useless field for gamma delay";
static const char __pyx_k_does_not_show_up_in_any_current[] = " does not show up in any currently defined reactions or rules.";
static const char __pyx_k_found_in_a_reaction_but_not_dec[] = " found in a reaction but not declared in Species. All Species must be declared for proper parsing.";
static const char __pyx_k_is_the_same_as_the_name_of_a_sp[] = " is the same as the name of a species!";
static const char __pyx_k_not_found_in_Species_Parameters[] = " not found in Species, Parameters, or built-in-terms.";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Cannot_load_both_a_bioSCRAPE_xml[] = "Cannot load both a bioSCRAPE xml file and an SBML file. Please choose just one.";
static const char __pyx_k_Creating_base_Rule_class_This_sh[] = "Creating base Rule class. This should be subclassed.";
static const char __pyx_k_Deprecated_Warning_Bioscrape_XML[] = "Deprecated Warning: Bioscrape XML is being replaced by SBML and will no longer be supported in a future version of the software.";
static const char __pyx_k_Did_not_include_global_model_tag[] = "Did not include global model tag in XML file";
static const char __pyx_k_Division_occurs_before_initial_v[] = "Division occurs before initial volume - change your parameters!";
static const char __pyx_k_DummyVar_NegativeProportionalHil[] = "DummyVar_NegativeProportionalHillPropensity";
static const char __pyx_k_DummyVar_PositiveProportionalHil[] = "DummyVar_PositiveProportionalHillPropensity";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Incompatible_checksums_s_vs_0x0a[] = "Incompatible checksums (%s vs 0x0a0ee63 = (average_division_volume, cell_cycle_time, current_volume, division_noise, division_time, growth_rate))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x1c[] = "Incompatible checksums (%s vs 0x1ce7080 = (frequency_flag))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x20[] = "Incompatible checksums (%s vs 0x2063c16 = (value))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x28[] = "Incompatible checksums (%s vs 0x286babc = (delay_index, delay_type))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x2b[] = "Incompatible checksums (%s vs 0x2b6d7b7 = (average_division_volume, current_volume, division_noise, division_volume, growth_rate))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x41[] = "Incompatible checksums (%s vs 0x41bf233 = (propensity_type))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x54[] = "Incompatible checksums (%s vs 0x54e9932 = (propensity_type, rate_index, s1_index, s2_index))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x61[] = "Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x68[] = "Incompatible checksums (%s vs 0x688789b = (propensity_type, term))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x6a[] = "Incompatible checksums (%s vs 0x6a992d5 = (index))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x80[] = "Incompatible checksums (%s vs 0x808fbba = (delay_type))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x8a[] = "Incompatible checksums (%s vs 0x8a1cb64 = (k_index, num_species, propensity_type, sp_counts, sp_inds))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x8d[] = "Incompatible checksums (%s vs 0x8ded253 = (current_volume))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x90[] = "Incompatible checksums (%s vs 0x90b60d2 = (delay_type, mean_index, std_index))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xa3[] = "Incompatible checksums (%s vs 0xa30f800 = (data, daughter1, daughter2, parent, time, volume))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xbb[] = "Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xce[] = "Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xd4[] = "Incompatible checksums (%s vs 0xd41d8cd = ())";
static const char __pyx_k_Incompatible_checksums_s_vs_0xe2[] = "Incompatible checksums (%s vs 0xe2181f8 = (delay_type, k_index, theta_index))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xe6[] = "Incompatible checksums (%s vs 0xe60425b = (base, exponent))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xf7[] = "Incompatible checksums (%s vs 0xf7c2634 = (propensity_type, rate_index, species_index))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xf8[] = "Incompatible checksums (%s vs 0xf8da774 = (dest_index, frequency_flag, species_source_indices))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xfd[] = "Incompatible checksums (%s vs 0xfd3ec69 = (propensity_type, rate_index))";
static const char __pyx_k_Incorrect_propensity_tags_in_XML[] = "Incorrect propensity tags in XML model\n";
static const char __pyx_k_Need_to_implement_copy_for_popul[] = "Need to implement copy for population simulations";
static const char __pyx_k_NegativeProportionalHillPropensi[] = "NegativeProportionalHillPropensity";
static const char __pyx_k_No_Model_passed_into_py_get_data[] = "No Model passed into py_get_dataframe. No species names will be attached to the data frame.";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_PositiveProportionalHillPropensi[] = "PositiveProportionalHillPropensity";
static const char __pyx_k_Propensity_Type_is_not_supported[] = "Propensity Type is not supported: ";
static const char __pyx_k_Reaction_Tuple_of_the_wrong_leng[] = "Reaction Tuple of the wrong length! Must be of length 4 (no delay) or 8 (with delays). See BioSCRAPE Model API for details.";
static const char __pyx_k_Species_not_found_in_experimenta[] = "Species not found in experimental lineage: %s\n";
static const char __pyx_k_The_following_species_are_uninit[] = "The following species are uninitialized and their value has been defaulted to 0: ";
static const char __pyx_k_The_generated_SBML_model_has_err[] = "The generated SBML model has errors:";
static const char __pyx_k_Trying_to_create_a_dummy_paramet[] = "Trying to create a dummy parameter that already exists. Dummy Param Name: ";
static const char __pyx_k_Trying_to_set_species_that_is_no[] = "Trying to set species that is not in model: %s";
static const char __pyx_k_Warning_Useless_field_for_Bimole[] = "Warning! Useless field for BimolecularPropensity";
static const char __pyx_k_Warning_Useless_field_for_Consti[] = "Warning! Useless field for ConstitutivePropensity";
static const char __pyx_k_Warning_Useless_field_for_MassAc[] = "Warning! Useless field for MassActionPropensity ";
static const char __pyx_k_Warning_Useless_field_for_Negati[] = "Warning! Useless field for NegativeHillPropensity ";
static const char __pyx_k_Warning_Useless_field_for_Positi[] = "Warning! Useless field for PositiveHillPropensity ";
static const char __pyx_k_Warning_Useless_field_for_Unimol[] = "Warning! Useless field for UnimolecularPropensity ";
static const char __pyx_k_Warning_Useless_field_for_gaussi[] = "Warning! Useless field for gaussian delay";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_param_dictionary_does_not_contai[] = "param dictionary does not contain required key: ";
static const char __pyx_k_py_get_dataframe_requires_the_pa[] = "py_get_dataframe requires the pandas Module to return a Pandas Dataframe object. Numpy array being returned instead.";
static const char __pyx_k_self_c_delays_self_c_propensitie[] = "self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling";
static const char __pyx_k_self_c_schnitzes_cannot_be_conve[] = "self.c_schnitzes cannot be converted to a Python object for pickling";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_Incompatible_checksums_s_vs_0x61_2[] = "Incompatible checksums (%s vs 0x61dd86c = (arg))";
static const char __pyx_k_Warning_Useless_field_for_Negati_2[] = "Warning! Useless field for NegativeProportionalHillPropensity ";
static const char __pyx_k_Warning_Useless_field_for_Positi_2[] = "Warning! Useless field for PositiveProportionalHillPropensity ";
static PyObject *__pyx_kp_s_0;
static PyObject *__pyx_n_s_Abs;
static PyObject *__pyx_n_s_AbsTerm;
static PyObject *__pyx_n_s_Add;
static PyObject *__pyx_n_s_AdditiveAssignmentRule;
static PyObject *__pyx_n_s_AssertionError;
static PyObject *__pyx_n_s_BeautifulSoup;
static PyObject *__pyx_n_s_BimolecularPropensity;
static PyObject *__pyx_n_s_BinaryTerm;
static PyObject *__pyx_kp_s_Cannot_load_both_a_bioSCRAPE_xml;
static PyObject *__pyx_kp_s_Cannot_make_Term_base_object;
static PyObject *__pyx_n_s_ClassName;
static PyObject *__pyx_n_s_ConstantTerm;
static PyObject *__pyx_n_s_ConstitutivePropensity;
static PyObject *__pyx_kp_s_Creating_Propensity_prop_type;
static PyObject *__pyx_kp_s_Creating_base_Rule_class_This_sh;
static PyObject *__pyx_n_s_DataFrame;
static PyObject *__pyx_n_s_Delay;
static PyObject *__pyx_kp_s_Deprecated_Warning_Bioscrape_XML;
static PyObject *__pyx_kp_s_Did_not_include_global_model_tag;
static PyObject *__pyx_kp_s_Division_occurs_before_initial_v;
static PyObject *__pyx_n_s_DummyVar_BimolecularPropensity;
static PyObject *__pyx_n_s_DummyVar_ConstitutivePropensity;
static PyObject *__pyx_n_s_DummyVar_FixedDelay;
static PyObject *__pyx_n_s_DummyVar_GammaDelay;
static PyObject *__pyx_n_s_DummyVar_GaussianDelay;
static PyObject *__pyx_n_s_DummyVar_MassActionPropensity;
static PyObject *__pyx_n_s_DummyVar_NegativeHillPropensity;
static PyObject *__pyx_n_s_DummyVar_NegativeProportionalHil;
static PyObject *__pyx_n_s_DummyVar_PositiveHillPropensity;
static PyObject *__pyx_n_s_DummyVar_PositiveProportionalHil;
static PyObject *__pyx_n_s_DummyVar_UnimolecularPropensity;
static PyObject *__pyx_n_s_ExpTerm;
static PyObject *__pyx_n_s_ExperimentalLineage;
static PyObject *__pyx_n_s_FixedDelay;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_GammaDelay;
static PyObject *__pyx_n_s_GaussianDelay;
static PyObject *__pyx_n_s_GeneralAssignmentRule;
static PyObject *__pyx_n_s_GeneralODERule;
static PyObject *__pyx_n_s_GeneralPropensity;
static PyObject *__pyx_n_s_Heaviside;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x0a;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x1c;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x20;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x28;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x2b;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x41;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x54;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x61;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x61_2;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x68;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x6a;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x80;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x8a;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x8d;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x90;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xa3;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xbb;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xce;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xd4;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xe2;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xe6;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xf7;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xf8;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xfd;
static PyObject *__pyx_kp_s_Incorrect_delay_spec;
static PyObject *__pyx_kp_s_Incorrect_propensity_tags_in_XML;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Initializing_ODE_Rule;
static PyObject *__pyx_kp_s_Inputs;
static PyObject *__pyx_kp_u_Invalid_rule_frequency;
static PyObject *__pyx_kp_s_Invalid_type_of_Rule;
static PyObject *__pyx_n_s_K;
static PyObject *__pyx_n_s_Lineage;
static PyObject *__pyx_n_s_LogTerm;
static PyObject *__pyx_n_s_LookupError;
static PyObject *__pyx_n_s_MassActionPropensity;
static PyObject *__pyx_n_s_Max;
static PyObject *__pyx_n_s_MaxTerm;
static PyObject *__pyx_n_s_Min;
static PyObject *__pyx_n_s_MinTerm;
static PyObject *__pyx_n_s_Model;
static PyObject *__pyx_n_s_ModuleNotFoundError;
static PyObject *__pyx_n_s_Mul;
static PyObject *__pyx_kp_s_Need_to_implement_copy_for_popul;
static PyObject *__pyx_n_s_NegativeHillPropensity;
static PyObject *__pyx_n_s_NegativeProportionalHillPropensi;
static PyObject *__pyx_n_s_NoDelay;
static PyObject *__pyx_kp_s_No_Model_passed_into_py_get_data;
static PyObject *__pyx_kp_s_No_parameter_with_name;
static PyObject *__pyx_kp_s_No_species_with_name;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_ODE;
static PyObject *__pyx_kp_s_Outputs;
static PyObject *__pyx_n_s_ParameterTerm;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_s_Please_don_t_name_your_paramete;
static PyObject *__pyx_kp_s_Plus_or_minus_character_in_mass;
static PyObject *__pyx_n_s_PositiveHillPropensity;
static PyObject *__pyx_n_s_PositiveProportionalHillPropensi;
static PyObject *__pyx_n_s_Pow;
static PyObject *__pyx_n_s_PowerTerm;
static PyObject *__pyx_n_s_ProductTerm;
static PyObject *__pyx_n_s_Propensity;
static PyObject *__pyx_kp_s_Propensity_Type_is_not_supported;
static PyObject *__pyx_kp_s_Propensity_type;
static PyObject *__pyx_kp_s_Reaction_Tuple_of_the_wrong_leng;
static PyObject *__pyx_n_s_Rule;
static PyObject *__pyx_kp_s_Rule_Created_with_rule_type;
static PyObject *__pyx_kp_s_Rules_must_be_a_tuple_rule_type;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_Schnitz;
static PyObject *__pyx_kp_u_Species;
static PyObject *__pyx_n_s_SpeciesTerm;
static PyObject *__pyx_kp_s_Species_not_found_in_experimenta;
static PyObject *__pyx_n_s_StateDependentVolume;
static PyObject *__pyx_n_s_StepTerm;
static PyObject *__pyx_n_s_StochasticTimeThresholdVolume;
static PyObject *__pyx_n_s_SumTerm;
static PyObject *__pyx_n_s_Symbol;
static PyObject *__pyx_kp_s_Sympy_unable_to_parse;
static PyObject *__pyx_n_s_SyntaxError;
static PyObject *__pyx_n_s_Term;
static PyObject *__pyx_kp_s_The_following_species_are_uninit;
static PyObject *__pyx_kp_s_The_generated_SBML_model_has_err;
static PyObject *__pyx_kp_s_This_should_be_a_number;
static PyObject *__pyx_n_s_TimeTerm;
static PyObject *__pyx_kp_s_Trying_to_create_a_dummy_paramet;
static PyObject *__pyx_kp_s_Trying_to_set_parameter_that_is;
static PyObject *__pyx_kp_s_Trying_to_set_species_that_is_no;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_UnimolecularPropensity;
static PyObject *__pyx_kp_s_Unknown_delay_type;
static PyObject *__pyx_kp_u_Unknown_term;
static PyObject *__pyx_kp_s_Unspecified_Parameters;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Volume;
static PyObject *__pyx_n_s_VolumeTerm;
static PyObject *__pyx_kp_s_Warning_Useless_field_for_Bimole;
static PyObject *__pyx_kp_s_Warning_Useless_field_for_Consti;
static PyObject *__pyx_kp_s_Warning_Useless_field_for_MassAc;
static PyObject *__pyx_kp_s_Warning_Useless_field_for_Negati;
static PyObject *__pyx_kp_s_Warning_Useless_field_for_Negati_2;
static PyObject *__pyx_kp_s_Warning_Useless_field_for_Positi;
static PyObject *__pyx_kp_s_Warning_Useless_field_for_Positi_2;
static PyObject *__pyx_kp_s_Warning_Useless_field_for_Unimol;
static PyObject *__pyx_kp_s_Warning_Useless_field_for_fixed;
static PyObject *__pyx_kp_s_Warning_Useless_field_for_gamma;
static PyObject *__pyx_kp_s_Warning_Useless_field_for_gaussi;
static PyObject *__pyx_kp_s_Warning_parameter;
static PyObject *__pyx_kp_s__11;
static PyObject *__pyx_n_s__12;
static PyObject *__pyx_kp_u__17;
static PyObject *__pyx_kp_s__18;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_kp_s__31;
static PyObject *__pyx_kp_u__32;
static PyObject *__pyx_kp_s__35;
static PyObject *__pyx_kp_s__4;
static PyObject *__pyx_kp_s__5;
static PyObject *__pyx_kp_s__8;
static PyObject *__pyx_kp_s__9;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_absterm;
static PyObject *__pyx_n_s_add_param;
static PyObject *__pyx_n_s_add_parameter;
static PyObject *__pyx_n_s_add_reaction;
static PyObject *__pyx_n_s_add_reaction_2;
static PyObject *__pyx_n_s_add_rule;
static PyObject *__pyx_n_s_add_species;
static PyObject *__pyx_n_s_add_species_2;
static PyObject *__pyx_n_s_additive;
static PyObject *__pyx_n_s_after;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_array_equal;
static PyObject *__pyx_n_s_assignment;
static PyObject *__pyx_n_s_attrs;
static PyObject *__pyx_n_s_average_division_volume;
static PyObject *__pyx_n_s_bioscrape_model;
static PyObject *__pyx_n_s_bioscrape_sbmlutil;
static PyObject *__pyx_n_s_bioscrape_types;
static PyObject *__pyx_kp_s_bioscrape_types_pyx;
static PyObject *__pyx_n_s_bs4;
static PyObject *__pyx_n_s_cell_cycle_time;
static PyObject *__pyx_n_s_check_parameters;
static PyObject *__pyx_n_s_check_species;
static PyObject *__pyx_n_s_clash1;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_n_s_compartment;
static PyObject *__pyx_n_s_concatenate;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_create_propensity;
static PyObject *__pyx_n_s_create_reaction;
static PyObject *__pyx_n_s_create_rule;
static PyObject *__pyx_n_s_create_sbml_model;
static PyObject *__pyx_n_s_create_stochiometric_matrices;
static PyObject *__pyx_n_s_create_vectors;
static PyObject *__pyx_kp_s_creating_reaction_with;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_d1;
static PyObject *__pyx_n_s_d2;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_delay;
static PyObject *__pyx_n_s_delay_annotation_dict;
static PyObject *__pyx_kp_s_delay_inputs;
static PyObject *__pyx_n_s_delay_object;
static PyObject *__pyx_kp_s_delay_outputs;
static PyObject *__pyx_n_s_delay_param_dict;
static PyObject *__pyx_kp_s_delay_parameters;
static PyObject *__pyx_n_s_delay_products;
static PyObject *__pyx_n_s_delay_reactants;
static PyObject *__pyx_n_s_delay_reaction_update_dict;
static PyObject *__pyx_n_s_delay_type;
static PyObject *__pyx_kp_s_delay_type_2;
static PyObject *__pyx_n_s_dic;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dictionary;
static PyObject *__pyx_n_s_division_noise;
static PyObject *__pyx_kp_s_does_not_show_up_in_any_current;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_end_time;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_eq;
static PyObject *__pyx_n_s_equation;
static PyObject *__pyx_n_s_evalf;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_exp;
static PyObject *__pyx_n_s_expterm;
static PyObject *__pyx_n_s_features;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_file_name;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_find_all;
static PyObject *__pyx_n_s_fixed;
static PyObject *__pyx_kp_u_for;
static PyObject *__pyx_kp_s_for_param_object;
static PyObject *__pyx_kp_u_found_in_a_reaction_but_not_dec;
static PyObject *__pyx_n_s_frequency;
static PyObject *__pyx_n_s_func;
static PyObject *__pyx_n_s_gamma;
static PyObject *__pyx_n_s_gaussian;
static PyObject *__pyx_n_s_general;
static PyObject *__pyx_n_s_generate_sbml_model;
static PyObject *__pyx_n_s_getCompartment;
static PyObject *__pyx_n_s_getErrorLog;
static PyObject *__pyx_n_s_getNumErrors;
static PyObject *__pyx_n_s_get_number_of_params;
static PyObject *__pyx_n_s_get_number_of_species;
static PyObject *__pyx_n_s_get_param_list;
static PyObject *__pyx_n_s_get_param_value;
static PyObject *__pyx_n_s_get_parameter_values;
static PyObject *__pyx_n_s_get_params;
static PyObject *__pyx_n_s_get_species;
static PyObject *__pyx_n_s_get_species_and_parameters;
static PyObject *__pyx_n_s_get_species_array;
static PyObject *__pyx_n_s_get_species_list;
static PyObject *__pyx_n_s_get_species_value;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_growth_rate;
static PyObject *__pyx_n_s_has_attr;
static PyObject *__pyx_n_s_heaviside;
static PyObject *__pyx_n_s_hillnegative;
static PyObject *__pyx_n_s_hillpositive;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_import_sbml;
static PyObject *__pyx_n_s_ind;
static PyObject *__pyx_kp_u_index;
static PyObject *__pyx_n_s_index_2;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_initial_concentration;
static PyObject *__pyx_n_s_initial_condition_dict;
static PyObject *__pyx_n_s_initialize;
static PyObject *__pyx_n_s_initialize_model;
static PyObject *__pyx_n_s_input_printout;
static PyObject *__pyx_n_s_instring;
static PyObject *__pyx_kp_u_is_the_same_as_the_name_of_a_sp;
static PyObject *__pyx_n_s_isnan;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_libsbml;
static PyObject *__pyx_kp_u_lineage_py_size;
static PyObject *__pyx_n_s_log;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_logterm;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_massaction;
static PyObject *__pyx_n_s_maxterm;
static PyObject *__pyx_n_s_mean;
static PyObject *__pyx_n_s_minterm;
static PyObject *__pyx_n_s_model;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_names;
static PyObject *__pyx_n_s_nan;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_term;
static PyObject *__pyx_n_s_node;
static PyObject *__pyx_n_s_nodes;
static PyObject *__pyx_n_s_none;
static PyObject *__pyx_kp_u_not_found_in_Species_Parameters;
static PyObject *__pyx_kp_s_not_of_the_form_VARIABLE_F_X;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_ode;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_n_s_param_dict_check;
static PyObject *__pyx_n_s_param_dictionary;
static PyObject *__pyx_kp_s_param_dictionary_does_not_contai;
static PyObject *__pyx_kp_u_param_name;
static PyObject *__pyx_n_s_param_name_2;
static PyObject *__pyx_n_s_param_names;
static PyObject *__pyx_n_s_param_object_name;
static PyObject *__pyx_n_s_param_value;
static PyObject *__pyx_kp_u_param_values_is;
static PyObject *__pyx_n_s_parameter;
static PyObject *__pyx_n_s_parameter_indices;
static PyObject *__pyx_n_s_parameters;
static PyObject *__pyx_n_s_params;
static PyObject *__pyx_n_s_params2index;
static PyObject *__pyx_kp_u_params2index_is;
static PyObject *__pyx_kp_s_params_2;
static PyObject *__pyx_n_s_parse_expression;
static PyObject *__pyx_n_s_parse_general_expression;
static PyObject *__pyx_n_s_parse_model;
static PyObject *__pyx_n_s_parse_tree;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_powerterm;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_products;
static PyObject *__pyx_n_s_productterm;
static PyObject *__pyx_n_s_propensity;
static PyObject *__pyx_n_s_propensity_object;
static PyObject *__pyx_n_s_propensity_param_dict;
static PyObject *__pyx_kp_s_propensity_param_dict_2;
static PyObject *__pyx_n_s_propensity_type;
static PyObject *__pyx_n_s_proportionalhillnegative;
static PyObject *__pyx_n_s_proportionalhillpositive;
static PyObject *__pyx_n_s_py_add_term;
static PyObject *__pyx_n_s_py_get_data;
static PyObject *__pyx_kp_s_py_get_dataframe_requires_the_pa;
static PyObject *__pyx_n_s_py_get_parent;
static PyObject *__pyx_n_s_py_get_result;
static PyObject *__pyx_n_s_py_set_daughters;
static PyObject *__pyx_n_s_py_set_parent;
static PyObject *__pyx_n_s_py_set_species_indices;
static PyObject *__pyx_n_s_py_set_volume;
static PyObject *__pyx_n_s_py_size;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_AbsTerm;
static PyObject *__pyx_n_s_pyx_unpickle_AdditiveAssignmen;
static PyObject *__pyx_n_s_pyx_unpickle_BimolecularPropen;
static PyObject *__pyx_n_s_pyx_unpickle_ConstantTerm;
static PyObject *__pyx_n_s_pyx_unpickle_ConstitutivePrope;
static PyObject *__pyx_n_s_pyx_unpickle_Delay;
static PyObject *__pyx_n_s_pyx_unpickle_ExpTerm;
static PyObject *__pyx_n_s_pyx_unpickle_FixedDelay;
static PyObject *__pyx_n_s_pyx_unpickle_GammaDelay;
static PyObject *__pyx_n_s_pyx_unpickle_GaussianDelay;
static PyObject *__pyx_n_s_pyx_unpickle_GeneralAssignment;
static PyObject *__pyx_n_s_pyx_unpickle_GeneralODERule;
static PyObject *__pyx_n_s_pyx_unpickle_GeneralPropensity;
static PyObject *__pyx_n_s_pyx_unpickle_LogTerm;
static PyObject *__pyx_n_s_pyx_unpickle_MassActionPropens;
static PyObject *__pyx_n_s_pyx_unpickle_NegativeHillPrope;
static PyObject *__pyx_n_s_pyx_unpickle_NegativeProportio;
static PyObject *__pyx_n_s_pyx_unpickle_NoDelay;
static PyObject *__pyx_n_s_pyx_unpickle_ParameterTerm;
static PyObject *__pyx_n_s_pyx_unpickle_PositiveHillPrope;
static PyObject *__pyx_n_s_pyx_unpickle_PositiveProportio;
static PyObject *__pyx_n_s_pyx_unpickle_PowerTerm;
static PyObject *__pyx_n_s_pyx_unpickle_Propensity;
static PyObject *__pyx_n_s_pyx_unpickle_Rule;
static PyObject *__pyx_n_s_pyx_unpickle_Schnitz;
static PyObject *__pyx_n_s_pyx_unpickle_SpeciesTerm;
static PyObject *__pyx_n_s_pyx_unpickle_StateDependentVol;
static PyObject *__pyx_n_s_pyx_unpickle_StepTerm;
static PyObject *__pyx_n_s_pyx_unpickle_StochasticTimeThr;
static PyObject *__pyx_n_s_pyx_unpickle_Term;
static PyObject *__pyx_n_s_pyx_unpickle_TimeTerm;
static PyObject *__pyx_n_s_pyx_unpickle_UnimolecularPrope;
static PyObject *__pyx_n_s_pyx_unpickle_Volume;
static PyObject *__pyx_n_s_pyx_unpickle_VolumeTerm;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rate;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_reactants;
static PyObject *__pyx_n_s_reaction;
static PyObject *__pyx_n_s_reaction_update_dict;
static PyObject *__pyx_n_s_reactions;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_repeat;
static PyObject *__pyx_n_s_repeated;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_restore_binary_term;
static PyObject *__pyx_n_s_root;
static PyObject *__pyx_n_s_rule;
static PyObject *__pyx_n_s_rule_attributes;
static PyObject *__pyx_kp_s_rule_attributes_2;
static PyObject *__pyx_kp_s_rule_equation;
static PyObject *__pyx_n_s_rule_frequency;
static PyObject *__pyx_kp_s_rule_frequency_2;
static PyObject *__pyx_n_s_rule_step;
static PyObject *__pyx_n_s_rule_type;
static PyObject *__pyx_n_s_rules;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_s1;
static PyObject *__pyx_n_s_sbml_filename;
static PyObject *__pyx_kp_s_self_c_delays_self_c_propensitie;
static PyObject *__pyx_kp_s_self_c_schnitzes_cannot_be_conve;
static PyObject *__pyx_n_s_set_frequency_flag;
static PyObject *__pyx_n_s_set_parameter;
static PyObject *__pyx_n_s_set_species;
static PyObject *__pyx_n_s_set_species_value;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_specie;
static PyObject *__pyx_n_s_species;
static PyObject *__pyx_n_s_species2index;
static PyObject *__pyx_n_s_species_dict;
static PyObject *__pyx_n_s_species_indices;
static PyObject *__pyx_n_s_species_names;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_time;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_s_std;
static PyObject *__pyx_n_s_stepterm;
static PyObject *__pyx_n_s_stochastic;
static PyObject *__pyx_n_s_stochastic_model;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sumterm;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_sympify;
static PyObject *__pyx_n_s_sympy;
static PyObject *__pyx_n_s_sympy_abc;
static PyObject *__pyx_n_s_sympy_recursion;
static PyObject *__pyx_n_s_sympy_species_and_parameters;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_target;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_theta;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_toString;
static PyObject *__pyx_n_s_tree;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_vol;
static PyObject *__pyx_n_s_volume;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_writeSBMLToString;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xml;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zip;
static int __pyx_pf_9bioscrape_5types_10Propensity___init__(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_2py_get_propensity(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_time); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_4py_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_6initialize(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, CYTHON_UNUSED PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_8get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_10__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_12__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_22ConstitutivePropensity___init__(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22ConstitutivePropensity_2initialize(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22ConstitutivePropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22ConstitutivePropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22ConstitutivePropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_22UnimolecularPropensity___init__(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22UnimolecularPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22UnimolecularPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22UnimolecularPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22UnimolecularPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_21BimolecularPropensity___init__(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_21BimolecularPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_21BimolecularPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_21BimolecularPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_21BimolecularPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_22PositiveHillPropensity___init__(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22PositiveHillPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22PositiveHillPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22PositiveHillPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22PositiveHillPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity___init__(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_22NegativeHillPropensity___init__(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22NegativeHillPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22NegativeHillPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22NegativeHillPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22NegativeHillPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity___init__(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_6set_species(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_species, PyObject *__pyx_v_species_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_8set_parameters(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_parameters, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_10__reduce_cython__(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_12__setstate_cython__(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_20MassActionPropensity___init__(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_20MassActionPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_20MassActionPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_20MassActionPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_20MassActionPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4Term_py_evaluate(struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self, PyArrayObject *__pyx_v_species, PyArrayObject *__pyx_v_params, double __pyx_v_time); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4Term_2py_volume_evaluate(struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self, PyArrayObject *__pyx_v_species, PyArrayObject *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4Term_4__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4Term_6__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_12ConstantTerm___init__(struct __pyx_obj_9bioscrape_5types_ConstantTerm *__pyx_v_self, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_12ConstantTerm_2__reduce_cython__(struct __pyx_obj_9bioscrape_5types_ConstantTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_12ConstantTerm_4__setstate_cython__(struct __pyx_obj_9bioscrape_5types_ConstantTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_11SpeciesTerm___init__(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *__pyx_v_self, unsigned int __pyx_v_ind); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_11SpeciesTerm_2__reduce_cython__(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_11SpeciesTerm_4__setstate_cython__(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_13ParameterTerm___init__(struct __pyx_obj_9bioscrape_5types_ParameterTerm *__pyx_v_self, unsigned int __pyx_v_ind); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_13ParameterTerm_2__reduce_cython__(struct __pyx_obj_9bioscrape_5types_ParameterTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_13ParameterTerm_4__setstate_cython__(struct __pyx_obj_9bioscrape_5types_ParameterTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10VolumeTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_VolumeTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10VolumeTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_VolumeTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_restore_binary_term(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_state, PyObject *__pyx_v_ClassName); /* proto */
static int __pyx_pf_9bioscrape_5types_10BinaryTerm___init__(struct __pyx_obj_9bioscrape_5types_BinaryTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10BinaryTerm_2__reduce__(struct __pyx_obj_9bioscrape_5types_BinaryTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10BinaryTerm_4py_add_term(struct __pyx_obj_9bioscrape_5types_BinaryTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_trm); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_9PowerTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_9PowerTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7ExpTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7ExpTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7LogTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7LogTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_8StepTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_8StepTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7AbsTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7AbsTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_8TimeTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_TimeTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_8TimeTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_TimeTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_2sympy_species_and_parameters(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_instring, PyObject *__pyx_v_species2index, CYTHON_UNUSED PyObject *__pyx_v_params2index); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4sympy_recursion(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_6parse_expression(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_instring, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index); /* proto */
static int __pyx_pf_9bioscrape_5types_17GeneralPropensity___init__(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_17GeneralPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self, PyObject *__pyx_v_dictionary, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_17GeneralPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_17GeneralPropensity_6py_get_term(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_17GeneralPropensity_8__reduce_cython__(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_17GeneralPropensity_10__setstate_cython__(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_5Delay___init__(struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Delay_2py_get_delay(struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Delay_4__eq__(struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Delay_6initialize(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, CYTHON_UNUSED PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Delay_8get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Delay_10__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Delay_12__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_7NoDelay___init__(struct __pyx_obj_9bioscrape_5types_NoDelay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7NoDelay_2__reduce_cython__(struct __pyx_obj_9bioscrape_5types_NoDelay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7NoDelay_4__setstate_cython__(struct __pyx_obj_9bioscrape_5types_NoDelay *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_10FixedDelay___init__(struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10FixedDelay_2initialize(struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self, PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10FixedDelay_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10FixedDelay_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10FixedDelay_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_13GaussianDelay___init__(struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_13GaussianDelay_2initialize(struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self, PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_13GaussianDelay_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_13GaussianDelay_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_13GaussianDelay_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_10GammaDelay___init__(struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10GammaDelay_2initialize(struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self, PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10GammaDelay_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10GammaDelay_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10GammaDelay_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4Rule_py_execute_rule(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_time, double __pyx_v_dt, PyObject *__pyx_v_rule_step); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4Rule_2py_execute_volume_rule(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time, double __pyx_v_dt, PyObject *__pyx_v_rule_step); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4Rule_4initialize(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, CYTHON_UNUSED PyObject *__pyx_v_parameter_indices, CYTHON_UNUSED PyObject *__pyx_v_rule_frequency); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4Rule_6get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4Rule_8set_frequency_flag(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, PyObject *__pyx_v_rule_frequency); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4Rule_10__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_4Rule_12__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_initialize(struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *__pyx_v_self, PyObject *__pyx_v_dictionary, PyObject *__pyx_v_species_indices, CYTHON_UNUSED PyObject *__pyx_v_parameter_indices, PyObject *__pyx_v_rule_frequency); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_2get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_4__reduce_cython__(struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_6__setstate_cython__(struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_initialize(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index, PyObject *__pyx_v_rule_frequency); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_2get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_4__reduce_cython__(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_6__setstate_cython__(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_14GeneralODERule_initialize(struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index, PyObject *__pyx_v_rule_frequency); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_14GeneralODERule_2get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_14GeneralODERule_4__reduce_cython__(struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_14GeneralODERule_6__setstate_cython__(struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_6Volume_py_copy(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_6Volume_2py_get_volume_step(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_time, double __pyx_v_volume, double __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_6Volume_4py_initialize(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_time, double __pyx_v_volume); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_6Volume_6py_cell_divided(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_time, double __pyx_v_volume, double __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_6Volume_8py_set_volume(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_6Volume_10py_get_volume(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_6Volume_12__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_6Volume_14__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_29StochasticTimeThresholdVolume___init__(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self, double __pyx_v_cell_cycle_time, double __pyx_v_average_division_volume, double __pyx_v_division_noise); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_29StochasticTimeThresholdVolume_2__reduce_cython__(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_29StochasticTimeThresholdVolume_4__setstate_cython__(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_20StateDependentVolume___init__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_20StateDependentVolume_2setup(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self, double __pyx_v_average_division_volume, double __pyx_v_division_noise, PyObject *__pyx_v_growth_rate, struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_20StateDependentVolume_4__reduce_cython__(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_20StateDependentVolume_6__setstate_cython__(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_5Model___init__(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_species, PyObject *__pyx_v_reactions, PyObject *__pyx_v_parameters, PyObject *__pyx_v_rules, PyObject *__pyx_v_initial_condition_dict, PyObject *__pyx_v_sbml_filename, PyObject *__pyx_v_input_printout, PyObject *__pyx_v_initialize_model, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_2py_initialize(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_4_create_vectors(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_6py_initialize(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_8__eq__(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_10__neq__(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_12_add_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_species); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_14_set_species_value(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_specie, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_16_add_reaction(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_reaction_update_dict, PyObject *__pyx_v_propensity_object, PyObject *__pyx_v_propensity_param_dict, PyObject *__pyx_v_delay_reaction_update_dict, PyObject *__pyx_v_delay_object, PyObject *__pyx_v_delay_param_dict); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_18create_propensity(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_propensity_type, PyObject *__pyx_v_propensity_param_dict, PyObject *__pyx_v_input_printout); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_20create_reaction(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_reactants, PyObject *__pyx_v_products, PyObject *__pyx_v_propensity_type, PyObject *__pyx_v_propensity_param_dict, PyObject *__pyx_v_delay_type, PyObject *__pyx_v_delay_reactants, PyObject *__pyx_v_delay_products, PyObject *__pyx_v_delay_param_dict, PyObject *__pyx_v_input_printout); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_22_add_param(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_name); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_24create_rule(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_rule_type, PyObject *__pyx_v_rule_attributes, PyObject *__pyx_v_rule_frequency, PyObject *__pyx_v_input_printout); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_26set_parameter(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_name, PyObject *__pyx_v_param_value); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_28create_parameter(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_name, PyObject *__pyx_v_param_value); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_30check_parameters(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_32check_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_34_param_dict_check(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_dic, PyObject *__pyx_v_key, PyObject *__pyx_v_param_object_name); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_36_create_stochiometric_matrices(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_38parse_model(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_input_printout); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_40has_delays(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_42get_params2index(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_44get_species2index(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_46get_species_list(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_48get_species_array(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_50get_param_list(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_52get_params(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_54get_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_56get_number_of_params(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_58get_parameter_values(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_60get_parameter_dictionary(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_62get_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_64get_species_dictionary(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_66get_number_of_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_68set_params(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_dict); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_70set_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_species_dict); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_72get_propensities(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_74get_delays(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_76get_reactions(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_78get_rules(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_80py_get_update_array(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_82py_get_delay_update_array(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_84get_param_index(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_name); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_86get_species_index(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_species_name); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_88get_param_value(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_name); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_90get_species_value(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_species_name); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_92parse_general_expression(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_instring); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_94generate_sbml_model(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_stochastic_model, PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_96write_sbml_model(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_file_name, PyObject *__pyx_v_stochastic_model, PyObject *__pyx_v_keywords); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_98__getstate__(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_100__setstate__(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_102__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_5Model_104__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_7Schnitz___init__(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v_time, PyObject *__pyx_v_data, PyObject *__pyx_v_volume); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_2py_get_data(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_4py_set_data(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_6py_get_time(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_8py_get_volume(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_10py_get_dataframe(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v_Model); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_12py_get_parent(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_14py_get_daughters(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_16py_set_parent(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_18py_set_daughters(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_d1, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_d2); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_20get_sub_lineage(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v_species_dict); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_22copy(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_24__setstate__(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_26__getstate__(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_28__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_30__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_7Lineage___init__(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_2py_size(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_4py_get_schnitz(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, unsigned int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_6py_add_schnitz(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_8__setstate__(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, PyObject *__pyx_v_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_10__getstate__(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_12truncate_lineage(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, double __pyx_v_start_time, double __pyx_v_end_time); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_14get_schnitzes_by_generation(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9bioscrape_5types_19ExperimentalLineage___init__(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, PyObject *__pyx_v_species_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_2py_set_species_indices(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, PyObject *__pyx_v_species_indices); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_4py_get_species_index(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, PyObject *__pyx_v_species); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_6__setstate__(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, PyObject *__pyx_v_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_8__getstate__(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_10truncate_lineage(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, double __pyx_v_start_time, double __pyx_v_end_time); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_8__pyx_unpickle_Propensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_10__pyx_unpickle_ConstitutivePropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_12__pyx_unpickle_UnimolecularPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_14__pyx_unpickle_BimolecularPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_16__pyx_unpickle_PositiveHillPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_18__pyx_unpickle_PositiveProportionalHillPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_20__pyx_unpickle_NegativeHillPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_22__pyx_unpickle_NegativeProportionalHillPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_24__pyx_unpickle_MassActionPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_26__pyx_unpickle_Term(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_28__pyx_unpickle_ConstantTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_30__pyx_unpickle_SpeciesTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_32__pyx_unpickle_ParameterTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_34__pyx_unpickle_VolumeTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_36__pyx_unpickle_PowerTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_38__pyx_unpickle_ExpTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_40__pyx_unpickle_LogTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_42__pyx_unpickle_StepTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_44__pyx_unpickle_AbsTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_46__pyx_unpickle_TimeTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_48__pyx_unpickle_GeneralPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_50__pyx_unpickle_Delay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_52__pyx_unpickle_NoDelay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_54__pyx_unpickle_FixedDelay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_56__pyx_unpickle_GaussianDelay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_58__pyx_unpickle_GammaDelay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_60__pyx_unpickle_Rule(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_62__pyx_unpickle_AdditiveAssignmentRule(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_64__pyx_unpickle_GeneralAssignmentRule(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_66__pyx_unpickle_GeneralODERule(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_68__pyx_unpickle_Volume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_70__pyx_unpickle_StochasticTimeThresholdVolume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_72__pyx_unpickle_StateDependentVolume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9bioscrape_5types_74__pyx_unpickle_Schnitz(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_9bioscrape_5types_Propensity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_ConstitutivePropensity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_UnimolecularPropensity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_BimolecularPropensity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_PositiveHillPropensity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_PositiveProportionalHillPropensity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_NegativeHillPropensity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_NegativeProportionalHillPropensity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_MassActionPropensity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_Term(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_ConstantTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_SpeciesTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_ParameterTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_VolumeTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_BinaryTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_SumTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_ProductTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_MaxTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_MinTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_PowerTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_ExpTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_LogTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_StepTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_AbsTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_TimeTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_GeneralPropensity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_Delay(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_NoDelay(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_FixedDelay(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_GaussianDelay(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_GammaDelay(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_Rule(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_AdditiveAssignmentRule(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_GeneralAssignmentRule(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_GeneralODERule(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_Volume(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_StochasticTimeThresholdVolume(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_StateDependentVolume(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_Model(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_Schnitz(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_Lineage(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9bioscrape_5types_ExperimentalLineage(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, &__pyx_n_s_items, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_10546787;
static PyObject *__pyx_int_30306432;
static PyObject *__pyx_int_33963030;
static PyObject *__pyx_int_42384060;
static PyObject *__pyx_int_45537207;
static PyObject *__pyx_int_68940339;
static PyObject *__pyx_int_89037106;
static PyObject *__pyx_int_101827990;
static PyObject *__pyx_int_102619244;
static PyObject *__pyx_int_109607067;
static PyObject *__pyx_int_111776469;
static PyObject *__pyx_int_134806458;
static PyObject *__pyx_int_144821092;
static PyObject *__pyx_int_148820563;
static PyObject *__pyx_int_151740626;
static PyObject *__pyx_int_170981376;
static PyObject *__pyx_int_196870574;
static PyObject *__pyx_int_216766286;
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_int_237076984;
static PyObject *__pyx_int_241189467;
static PyObject *__pyx_int_259794484;
static PyObject *__pyx_int_260941684;
static PyObject *__pyx_int_265546857;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_neg_2;
static PyObject *__pyx_k__21;
static PyObject *__pyx_k__22;
static PyObject *__pyx_k__23;
static PyObject *__pyx_k__24;
static PyObject *__pyx_k__28;
static PyObject *__pyx_k__29;
static PyObject *__pyx_k__43;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_slice__14;
static PyObject *__pyx_slice__33;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__96;
static PyObject *__pyx_codeobj__98;
static PyObject *__pyx_codeobj__100;
static PyObject *__pyx_codeobj__102;
static PyObject *__pyx_codeobj__104;
static PyObject *__pyx_codeobj__106;
static PyObject *__pyx_codeobj__108;
static PyObject *__pyx_codeobj__110;
static PyObject *__pyx_codeobj__112;
static PyObject *__pyx_codeobj__114;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__120;
static PyObject *__pyx_codeobj__122;
static PyObject *__pyx_codeobj__124;
static PyObject *__pyx_codeobj__126;
static PyObject *__pyx_codeobj__128;
/* Late includes */

/* "bioscrape/types.pyx":27
 * 
 * cdef class Propensity:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the propensity type enum variable.
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_10Propensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_10Propensity___init__[] = "\n        Set the propensity type enum variable.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9bioscrape_5types_10Propensity___init__;
#endif
static int __pyx_pw_9bioscrape_5types_10Propensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_10Propensity___init__(((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_10Propensity___init__(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":31
 *         Set the propensity type enum variable.
 *         """
 *         self.propensity_type = PropensityType.unset             # <<<<<<<<<<<<<<
 * 
 *     def py_get_propensity(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 */
  __pyx_v_self->propensity_type = __pyx_e_9bioscrape_5types_unset;

  /* "bioscrape/types.pyx":27
 * 
 * cdef class Propensity:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the propensity type enum variable.
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":33
 *         self.propensity_type = PropensityType.unset
 * 
 *     def py_get_propensity(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                           double time = 0.0):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_3py_get_propensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_10Propensity_2py_get_propensity[] = "\n        Calculate propensity in pure python given a state and parameter vector.\n        :param state: (np.ndarray) state vector of doubles\n        :param params: (np.ndarray) parameter vector of doubles.\n        :return: (double) computed propensity, should be non-negative\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_3py_get_propensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_state = 0;
  PyArrayObject *__pyx_v_params = 0;
  double __pyx_v_time;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_propensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_state,&__pyx_n_s_params,&__pyx_n_s_time,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_get_propensity", 0, 2, 3, 1); __PYX_ERR(0, 33, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_get_propensity") < 0)) __PYX_ERR(0, 33, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_state = ((PyArrayObject *)values[0]);
    __pyx_v_params = ((PyArrayObject *)values[1]);
    if (values[2]) {
      __pyx_v_time = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L3_error)
    } else {
      __pyx_v_time = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_get_propensity", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 33, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Propensity.py_get_propensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_state), __pyx_ptype_5numpy_ndarray, 1, "state", 0))) __PYX_ERR(0, 33, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), __pyx_ptype_5numpy_ndarray, 1, "params", 0))) __PYX_ERR(0, 33, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_10Propensity_2py_get_propensity(((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_v_self), __pyx_v_state, __pyx_v_params, __pyx_v_time);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_2py_get_propensity(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_time) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_params;
  __Pyx_Buffer __pyx_pybuffer_params;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_state;
  __Pyx_Buffer __pyx_pybuffer_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_get_propensity", 0);
  __pyx_pybuffer_state.pybuffer.buf = NULL;
  __pyx_pybuffer_state.refcount = 0;
  __pyx_pybuffernd_state.data = NULL;
  __pyx_pybuffernd_state.rcbuffer = &__pyx_pybuffer_state;
  __pyx_pybuffer_params.pybuffer.buf = NULL;
  __pyx_pybuffer_params.refcount = 0;
  __pyx_pybuffernd_params.data = NULL;
  __pyx_pybuffernd_params.rcbuffer = &__pyx_pybuffer_params;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_state.rcbuffer->pybuffer, (PyObject*)__pyx_v_state, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 33, __pyx_L1_error)
  }
  __pyx_pybuffernd_state.diminfo[0].strides = __pyx_pybuffernd_state.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_state.diminfo[0].shape = __pyx_pybuffernd_state.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_params.rcbuffer->pybuffer, (PyObject*)__pyx_v_params, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 33, __pyx_L1_error)
  }
  __pyx_pybuffernd_params.diminfo[0].strides = __pyx_pybuffernd_params.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_params.diminfo[0].shape = __pyx_pybuffernd_params.rcbuffer->pybuffer.shape[0];

  /* "bioscrape/types.pyx":41
 *         :return: (double) computed propensity, should be non-negative
 *         """
 *         return self.get_propensity(<double*> state.data, <double*> params.data, time)             # <<<<<<<<<<<<<<
 * 
 *     # must be overriden by the daughter class
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9bioscrape_5types_Propensity *)__pyx_v_self->__pyx_vtab)->get_propensity(__pyx_v_self, ((double *)__pyx_v_state->data), ((double *)__pyx_v_params->data), __pyx_v_time)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":33
 *         self.propensity_type = PropensityType.unset
 * 
 *     def py_get_propensity(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                           double time = 0.0):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("bioscrape.types.Propensity.py_get_propensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":44
 * 
 *     # must be overriden by the daughter class
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         """
 *         Compute the propensity given state and parameters (MUST be overridden, this returns -1.0)
 */

static double __pyx_f_9bioscrape_5types_10Propensity_get_propensity(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propensity", 0);

  /* "bioscrape/types.pyx":52
 *         :return: (double) computed propensity, should be non-negative
 *         """
 *         return -1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 */
  __pyx_r = -1.0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":44
 * 
 *     # must be overriden by the daughter class
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         """
 *         Compute the propensity given state and parameters (MUST be overridden, this returns -1.0)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":54
 *         return -1.0
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         """
 *         Compute the propensity given state and parameters and volume. (MUST be overridden)
 */

static double __pyx_f_9bioscrape_5types_10Propensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_volume, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_propensity", 0);

  /* "bioscrape/types.pyx":64
 *         """
 *         #By default, volume propensitiesa are the same as regular propensities, unless otherwise noted
 *         return self.get_propensity(state, params, time)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((struct __pyx_vtabstruct_9bioscrape_5types_Propensity *)__pyx_v_self->__pyx_vtab)->get_propensity(__pyx_v_self, __pyx_v_state, __pyx_v_params, __pyx_v_time);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":54
 *         return -1.0
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         """
 *         Compute the propensity given state and parameters and volume. (MUST be overridden)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":67
 * 
 * 
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         """
 *         By default, stochastic propensities are the same as deterministic propensities but can be overwritten for specific propensity types.
 */

static double __pyx_f_9bioscrape_5types_10Propensity_get_stochastic_propensity(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_stochastic_propensity", 0);

  /* "bioscrape/types.pyx":71
 *         By default, stochastic propensities are the same as deterministic propensities but can be overwritten for specific propensity types.
 *         """
 *         return self.get_propensity(state, params, time)             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_stochastic_volume_propensity(self, double* state, double* params, double volume, double time):
 */
  __pyx_r = ((struct __pyx_vtabstruct_9bioscrape_5types_Propensity *)__pyx_v_self->__pyx_vtab)->get_propensity(__pyx_v_self, __pyx_v_state, __pyx_v_params, __pyx_v_time);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":67
 * 
 * 
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         """
 *         By default, stochastic propensities are the same as deterministic propensities but can be overwritten for specific propensity types.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":73
 *         return self.get_propensity(state, params, time)
 * 
 *     cdef double get_stochastic_volume_propensity(self, double* state, double* params, double volume, double time):             # <<<<<<<<<<<<<<
 *         """
 *         By default, stochastic propensities are the same as deterministic propensities but can be overwritten for specific propensity types.
 */

static double __pyx_f_9bioscrape_5types_10Propensity_get_stochastic_volume_propensity(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_stochastic_volume_propensity", 0);

  /* "bioscrape/types.pyx":77
 *         By default, stochastic propensities are the same as deterministic propensities but can be overwritten for specific propensity types.
 *         """
 *         return self.get_volume_propensity(state, params, volume, time)             # <<<<<<<<<<<<<<
 * 
 *     def py_get_volume_propensity(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 */
  __pyx_r = ((struct __pyx_vtabstruct_9bioscrape_5types_Propensity *)__pyx_v_self->__pyx_vtab)->get_volume_propensity(__pyx_v_self, __pyx_v_state, __pyx_v_params, __pyx_v_volume, __pyx_v_time);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":73
 *         return self.get_propensity(state, params, time)
 * 
 *     cdef double get_stochastic_volume_propensity(self, double* state, double* params, double volume, double time):             # <<<<<<<<<<<<<<
 *         """
 *         By default, stochastic propensities are the same as deterministic propensities but can be overwritten for specific propensity types.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":79
 *         return self.get_volume_propensity(state, params, volume, time)
 * 
 *     def py_get_volume_propensity(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                                  double volume, double time = 0.0):
 *         return self.get_volume_propensity(<double*> state.data, <double*> params.data, volume, time)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_5py_get_volume_propensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_5py_get_volume_propensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_state = 0;
  PyArrayObject *__pyx_v_params = 0;
  double __pyx_v_volume;
  double __pyx_v_time;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_volume_propensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_state,&__pyx_n_s_params,&__pyx_n_s_volume,&__pyx_n_s_time,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_get_volume_propensity", 0, 3, 4, 1); __PYX_ERR(0, 79, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_get_volume_propensity", 0, 3, 4, 2); __PYX_ERR(0, 79, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_get_volume_propensity") < 0)) __PYX_ERR(0, 79, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_state = ((PyArrayObject *)values[0]);
    __pyx_v_params = ((PyArrayObject *)values[1]);
    __pyx_v_volume = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_volume == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 80, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_time = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 80, __pyx_L3_error)
    } else {
      __pyx_v_time = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_get_volume_propensity", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 79, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Propensity.py_get_volume_propensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_state), __pyx_ptype_5numpy_ndarray, 1, "state", 0))) __PYX_ERR(0, 79, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), __pyx_ptype_5numpy_ndarray, 1, "params", 0))) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_10Propensity_4py_get_volume_propensity(((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_v_self), __pyx_v_state, __pyx_v_params, __pyx_v_volume, __pyx_v_time);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_4py_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_params;
  __Pyx_Buffer __pyx_pybuffer_params;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_state;
  __Pyx_Buffer __pyx_pybuffer_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_get_volume_propensity", 0);
  __pyx_pybuffer_state.pybuffer.buf = NULL;
  __pyx_pybuffer_state.refcount = 0;
  __pyx_pybuffernd_state.data = NULL;
  __pyx_pybuffernd_state.rcbuffer = &__pyx_pybuffer_state;
  __pyx_pybuffer_params.pybuffer.buf = NULL;
  __pyx_pybuffer_params.refcount = 0;
  __pyx_pybuffernd_params.data = NULL;
  __pyx_pybuffernd_params.rcbuffer = &__pyx_pybuffer_params;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_state.rcbuffer->pybuffer, (PyObject*)__pyx_v_state, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 79, __pyx_L1_error)
  }
  __pyx_pybuffernd_state.diminfo[0].strides = __pyx_pybuffernd_state.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_state.diminfo[0].shape = __pyx_pybuffernd_state.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_params.rcbuffer->pybuffer, (PyObject*)__pyx_v_params, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 79, __pyx_L1_error)
  }
  __pyx_pybuffernd_params.diminfo[0].strides = __pyx_pybuffernd_params.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_params.diminfo[0].shape = __pyx_pybuffernd_params.rcbuffer->pybuffer.shape[0];

  /* "bioscrape/types.pyx":81
 *     def py_get_volume_propensity(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 *                                  double volume, double time = 0.0):
 *         return self.get_volume_propensity(<double*> state.data, <double*> params.data, volume, time)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9bioscrape_5types_Propensity *)__pyx_v_self->__pyx_vtab)->get_volume_propensity(__pyx_v_self, ((double *)__pyx_v_state->data), ((double *)__pyx_v_params->data), __pyx_v_volume, __pyx_v_time)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":79
 *         return self.get_volume_propensity(state, params, volume, time)
 * 
 *     def py_get_volume_propensity(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                                  double volume, double time = 0.0):
 *         return self.get_volume_propensity(<double*> state.data, <double*> params.data, volume, time)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("bioscrape.types.Propensity.py_get_volume_propensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":85
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 *         """
 *         Initializes the parameters and species to look at the right indices in the state
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_7initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_10Propensity_6initialize[] = "\n        Initializes the parameters and species to look at the right indices in the state\n        :param dictionary: (dict:str--> str) the fields for the propensity 'k','s1' etc map to the actual parameter\n                                             and species names\n        :param species_indices: (dict:str-->int) map species names to entry in species vector\n        :param parameter_indices: (dict:str-->int) map param names to entry in param vector\n        :return: nothing\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_7initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_param_dictionary = 0;
  CYTHON_UNUSED PyObject *__pyx_v_species_indices = 0;
  CYTHON_UNUSED PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 85, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 85, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 85, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 85, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Propensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 85, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 85, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_10Propensity_6initialize(((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_6initialize(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, CYTHON_UNUSED PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":96
 *         pass
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         """
 *         get which fields are species and which are parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_9get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_10Propensity_8get_species_and_parameters[] = "\n        get which fields are species and which are parameters\n        :param dict(str-->str) dictionary containing the propensity to process.\n        :return: (list(string), list(string)) First entry is the names of species, second entry is the names of parameters\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_9get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 96, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 96, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.Propensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 96, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_10Propensity_8get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_8get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":102
 *         :return: (list(string), list(string)) First entry is the names of species, second entry is the names of parameters
 *         """
 *         return (None,None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple_);
  __pyx_r = __pyx_tuple_;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":96
 *         pass
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         """
 *         get which fields are species and which are parameters
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_10Propensity_10__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_10__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.propensity_type,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_v_self->propensity_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.propensity_type,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.propensity_type,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.propensity_type,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Propensity, (type(self), 0x41bf233, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Propensity, (type(self), 0x41bf233, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Propensity, (type(self), 0x41bf233, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Propensity, (type(self), 0x41bf233, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_Propensity); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_68940339);
    __Pyx_GIVEREF(__pyx_int_68940339);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_68940339);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Propensity, (type(self), 0x41bf233, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Propensity, (type(self), 0x41bf233, None), state
 *     else:
 *         return __pyx_unpickle_Propensity, (type(self), 0x41bf233, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Propensity__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Propensity); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_68940339);
    __Pyx_GIVEREF(__pyx_int_68940339);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_68940339);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Propensity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Propensity, (type(self), 0x41bf233, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Propensity__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10Propensity_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_10Propensity_12__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10Propensity_12__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Propensity, (type(self), 0x41bf233, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Propensity__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_Propensity__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Propensity, (type(self), 0x41bf233, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Propensity__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Propensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":108
 * cdef class ConstitutivePropensity(Propensity):
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.constitutive
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_22ConstitutivePropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_22ConstitutivePropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_22ConstitutivePropensity___init__(((struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_22ConstitutivePropensity___init__(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":109
 *     # constructor
 *     def __init__(self):
 *         self.propensity_type = PropensityType.constitutive             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 */
  __pyx_v_self->__pyx_base.propensity_type = __pyx_e_9bioscrape_5types_constitutive;

  /* "bioscrape/types.pyx":108
 * cdef class ConstitutivePropensity(Propensity):
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.constitutive
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":111
 *         self.propensity_type = PropensityType.constitutive
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index]
 * 
 */

static double __pyx_f_9bioscrape_5types_22ConstitutivePropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propensity", 0);

  /* "bioscrape/types.pyx":112
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         return params[self.rate_index]             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 */
  __pyx_r = (__pyx_v_params[__pyx_v_self->rate_index]);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":111
 *         self.propensity_type = PropensityType.constitutive
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":114
 *         return params[self.rate_index]
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index] * volume
 * 
 */

static double __pyx_f_9bioscrape_5types_22ConstitutivePropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_propensity", 0);

  /* "bioscrape/types.pyx":115
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         return params[self.rate_index] * volume             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 */
  __pyx_r = ((__pyx_v_params[__pyx_v_self->rate_index]) * __pyx_v_volume);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":114
 *         return params[self.rate_index]
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index] * volume
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":117
 *         return params[self.rate_index] * volume
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 *         for key,value in param_dictionary.items():
 *             if key == 'k':
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_dictionary = 0;
  CYTHON_UNUSED PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 117, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 117, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 117, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 117, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.ConstitutivePropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 117, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 117, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 117, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_22ConstitutivePropensity_2initialize(((struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22ConstitutivePropensity_2initialize(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":118
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'k':
 *                 self.rate_index = parameter_indices[value]
 */
  if (unlikely(__pyx_v_param_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 118, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_param_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 118, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 118, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 118, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 118, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 118, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 118, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 118, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 118, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 118, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":119
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 *         for key,value in param_dictionary.items():
 *             if key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             elif key == 'species':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_k, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 119, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":120
 *         for key,value in param_dictionary.items():
 *             if key == 'k':
 *                 self.rate_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'species':
 *                 pass
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 120, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->rate_index = __pyx_t_10;

      /* "bioscrape/types.pyx":119
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 *         for key,value in param_dictionary.items():
 *             if key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             elif key == 'species':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":121
 *             if key == 'k':
 *                 self.rate_index = parameter_indices[value]
 *             elif key == 'species':             # <<<<<<<<<<<<<<
 *                 pass
 *             elif key == "propensity_type":
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_species, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 121, __pyx_L1_error)
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":123
 *             elif key == 'species':
 *                 pass
 *             elif key == "propensity_type":             # <<<<<<<<<<<<<<
 *                 pass
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_propensity_type, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 123, __pyx_L1_error)
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":126
 *                 pass
 *             else:
 *                 logging.info('Warning! Useless field for ConstitutivePropensity'+str(key))             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Warning_Useless_field_for_Consti, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "bioscrape/types.pyx":118
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'k':
 *                 self.rate_index = parameter_indices[value]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":117
 *         return params[self.rate_index] * volume
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 *         for key,value in param_dictionary.items():
 *             if key == 'k':
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.ConstitutivePropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":128
 *                 logging.info('Warning! Useless field for ConstitutivePropensity'+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([],[fields['k']])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 128, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 128, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.ConstitutivePropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_22ConstitutivePropensity_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22ConstitutivePropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":129
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         return ([],[fields['k']])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 129, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":128
 *                 logging.info('Warning! Useless field for ConstitutivePropensity'+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([],[fields['k']])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.ConstitutivePropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_22ConstitutivePropensity_6__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22ConstitutivePropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.propensity_type, self.rate_index)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_v_self->__pyx_base.propensity_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->rate_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.propensity_type, self.rate_index)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_3 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v__dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":7
 *     state = (self.propensity_type, self.rate_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_4 = (__pyx_v__dict != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v__dict);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.propensity_type, self.rate_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ConstitutivePropensity, (type(self), 0xfd3ec69, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ConstitutivePropensity, (type(self), 0xfd3ec69, None), state
 *     else:
 */
  __pyx_t_5 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_ConstitutivePropensity, (type(self), 0xfd3ec69, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ConstitutivePropensity, (type(self), 0xfd3ec69, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_ConstitutivePrope); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_265546857);
    __Pyx_GIVEREF(__pyx_int_265546857);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_265546857);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ConstitutivePropensity, (type(self), 0xfd3ec69, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ConstitutivePropensity, (type(self), 0xfd3ec69, None), state
 *     else:
 *         return __pyx_unpickle_ConstitutivePropensity, (type(self), 0xfd3ec69, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ConstitutivePropensity__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_ConstitutivePrope); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_265546857);
    __Pyx_GIVEREF(__pyx_int_265546857);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_265546857);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.ConstitutivePropensity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ConstitutivePropensity, (type(self), 0xfd3ec69, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ConstitutivePropensity__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_22ConstitutivePropensity_8__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22ConstitutivePropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ConstitutivePropensity, (type(self), 0xfd3ec69, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ConstitutivePropensity__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_ConstitutivePropensity__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ConstitutivePropensity, (type(self), 0xfd3ec69, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ConstitutivePropensity__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.ConstitutivePropensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":134
 * cdef class UnimolecularPropensity(Propensity):
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.unimolecular
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_22UnimolecularPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_22UnimolecularPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_22UnimolecularPropensity___init__(((struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_22UnimolecularPropensity___init__(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":135
 *     # constructor
 *     def __init__(self):
 *         self.propensity_type = PropensityType.unimolecular             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 */
  __pyx_v_self->__pyx_base.propensity_type = __pyx_e_9bioscrape_5types_unimolecular;

  /* "bioscrape/types.pyx":134
 * cdef class UnimolecularPropensity(Propensity):
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.unimolecular
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":137
 *         self.propensity_type = PropensityType.unimolecular
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index] * state[self.species_index]
 * 
 */

static double __pyx_f_9bioscrape_5types_22UnimolecularPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propensity", 0);

  /* "bioscrape/types.pyx":138
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         return params[self.rate_index] * state[self.species_index]             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 */
  __pyx_r = ((__pyx_v_params[__pyx_v_self->rate_index]) * (__pyx_v_state[__pyx_v_self->species_index]));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":137
 *         self.propensity_type = PropensityType.unimolecular
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index] * state[self.species_index]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":140
 *         return params[self.rate_index] * state[self.species_index]
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index] * state[self.species_index]
 * 
 */

static double __pyx_f_9bioscrape_5types_22UnimolecularPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_propensity", 0);

  /* "bioscrape/types.pyx":141
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         return params[self.rate_index] * state[self.species_index]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((__pyx_v_params[__pyx_v_self->rate_index]) * (__pyx_v_state[__pyx_v_self->species_index]));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":140
 *         return params[self.rate_index] * state[self.species_index]
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index] * state[self.species_index]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":144
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_dictionary = 0;
  PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 144, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 144, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 144, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 144, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.UnimolecularPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 144, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_22UnimolecularPropensity_2initialize(((struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22UnimolecularPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":146
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'species':
 *                 self.species_index = species_indices[value]
 */
  if (unlikely(__pyx_v_param_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 146, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_param_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 146, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 146, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 146, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 146, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 146, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":147
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 'species':             # <<<<<<<<<<<<<<
 *                 self.species_index = species_indices[value]
 *             elif key == 'k':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_species, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 147, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":148
 *         for key,value in param_dictionary.items():
 *             if key == 'species':
 *                 self.species_index = species_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_species_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 148, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->species_index = __pyx_t_10;

      /* "bioscrape/types.pyx":147
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 'species':             # <<<<<<<<<<<<<<
 *                 self.species_index = species_indices[value]
 *             elif key == 'k':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":149
 *             if key == 'species':
 *                 self.species_index = species_indices[value]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             elif key == "propensity_type":
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_k, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 149, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":150
 *                 self.species_index = species_indices[value]
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == "propensity_type":
 *                 pass
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 150, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->rate_index = __pyx_t_10;

      /* "bioscrape/types.pyx":149
 *             if key == 'species':
 *                 self.species_index = species_indices[value]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             elif key == "propensity_type":
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":151
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]
 *             elif key == "propensity_type":             # <<<<<<<<<<<<<<
 *                 pass
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_propensity_type, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 151, __pyx_L1_error)
    if (__pyx_t_9) {
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":154
 *                 pass
 *             else:
 *                 logging.info('Warning! Useless field for UnimolecularPropensity '+str(key))             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Warning_Useless_field_for_Unimol, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "bioscrape/types.pyx":146
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'species':
 *                 self.species_index = species_indices[value]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":144
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.UnimolecularPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":156
 *                 logging.info('Warning! Useless field for UnimolecularPropensity '+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ fields['species'] ],[ fields['k'] ])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 156, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 156, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.UnimolecularPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 156, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_22UnimolecularPropensity_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22UnimolecularPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":157
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         return ([ fields['species'] ],[ fields['k'] ])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 157, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_species); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 157, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_k); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":156
 *                 logging.info('Warning! Useless field for UnimolecularPropensity '+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ fields['species'] ],[ fields['k'] ])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.UnimolecularPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_22UnimolecularPropensity_6__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22UnimolecularPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.propensity_type, self.rate_index, self.species_index)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_v_self->__pyx_base.propensity_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->rate_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->species_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.propensity_type, self.rate_index, self.species_index)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.propensity_type, self.rate_index, self.species_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.propensity_type, self.rate_index, self.species_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_UnimolecularPropensity, (type(self), 0xf7c2634, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_UnimolecularPropensity, (type(self), 0xf7c2634, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_UnimolecularPropensity, (type(self), 0xf7c2634, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_UnimolecularPropensity, (type(self), 0xf7c2634, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_UnimolecularPrope); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_259794484);
    __Pyx_GIVEREF(__pyx_int_259794484);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_259794484);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_UnimolecularPropensity, (type(self), 0xf7c2634, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_UnimolecularPropensity, (type(self), 0xf7c2634, None), state
 *     else:
 *         return __pyx_unpickle_UnimolecularPropensity, (type(self), 0xf7c2634, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_UnimolecularPropensity__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_UnimolecularPrope); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_259794484);
    __Pyx_GIVEREF(__pyx_int_259794484);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_259794484);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.UnimolecularPropensity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_UnimolecularPropensity, (type(self), 0xf7c2634, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_UnimolecularPropensity__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_22UnimolecularPropensity_8__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22UnimolecularPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_UnimolecularPropensity, (type(self), 0xf7c2634, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_UnimolecularPropensity__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_UnimolecularPropensity__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_UnimolecularPropensity, (type(self), 0xf7c2634, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_UnimolecularPropensity__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.UnimolecularPropensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":164
 * 
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.bimolecular
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_21BimolecularPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_21BimolecularPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_21BimolecularPropensity___init__(((struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_21BimolecularPropensity___init__(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":165
 *     # constructor
 *     def __init__(self):
 *         self.propensity_type = PropensityType.bimolecular             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 */
  __pyx_v_self->__pyx_base.propensity_type = __pyx_e_9bioscrape_5types_bimolecular;

  /* "bioscrape/types.pyx":164
 * 
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.bimolecular
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":167
 *         self.propensity_type = PropensityType.bimolecular
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index] * state[self.s1_index] * state[self.s2_index]
 * 
 */

static double __pyx_f_9bioscrape_5types_21BimolecularPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propensity", 0);

  /* "bioscrape/types.pyx":168
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         return params[self.rate_index] * state[self.s1_index] * state[self.s2_index]             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):
 */
  __pyx_r = (((__pyx_v_params[__pyx_v_self->rate_index]) * (__pyx_v_state[__pyx_v_self->s1_index])) * (__pyx_v_state[__pyx_v_self->s2_index]));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":167
 *         self.propensity_type = PropensityType.bimolecular
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index] * state[self.s1_index] * state[self.s2_index]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":170
 *         return params[self.rate_index] * state[self.s1_index] * state[self.s2_index]
 * 
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         if self.s1_index != self.s2_index:
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index]
 */

static double __pyx_f_9bioscrape_5types_21BimolecularPropensity_get_stochastic_propensity(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("get_stochastic_propensity", 0);

  /* "bioscrape/types.pyx":171
 * 
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):
 *         if self.s1_index != self.s2_index:             # <<<<<<<<<<<<<<
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index]
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->s1_index != __pyx_v_self->s2_index) != 0);
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":172
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):
 *         if self.s1_index != self.s2_index:
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index]             # <<<<<<<<<<<<<<
 *         else:
 *             return params[self.rate_index]*state[self.s1_index]*max(state[self.s1_index]-1, 0)
 */
    __pyx_r = (((__pyx_v_params[__pyx_v_self->rate_index]) * (__pyx_v_state[__pyx_v_self->s1_index])) * (__pyx_v_state[__pyx_v_self->s2_index]));
    goto __pyx_L0;

    /* "bioscrape/types.pyx":171
 * 
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):
 *         if self.s1_index != self.s2_index:             # <<<<<<<<<<<<<<
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index]
 *         else:
 */
  }

  /* "bioscrape/types.pyx":174
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index]
 *         else:
 *             return params[self.rate_index]*state[self.s1_index]*max(state[self.s1_index]-1, 0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_2 = 0;
    __pyx_t_3 = ((__pyx_v_state[__pyx_v_self->s1_index]) - 1.0);
    if (((__pyx_t_2 > __pyx_t_3) != 0)) {
      __pyx_t_4 = __pyx_t_2;
    } else {
      __pyx_t_4 = __pyx_t_3;
    }
    __pyx_r = (((__pyx_v_params[__pyx_v_self->rate_index]) * (__pyx_v_state[__pyx_v_self->s1_index])) * __pyx_t_4);
    goto __pyx_L0;
  }

  /* "bioscrape/types.pyx":170
 *         return params[self.rate_index] * state[self.s1_index] * state[self.s2_index]
 * 
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         if self.s1_index != self.s2_index:
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":177
 * 
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index] * state[self.s1_index] * state[self.s2_index] / volume
 * 
 */

static double __pyx_f_9bioscrape_5types_21BimolecularPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_propensity", 0);

  /* "bioscrape/types.pyx":178
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         return params[self.rate_index] * state[self.s1_index] * state[self.s2_index] / volume             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_stochastic_volume_propensity(self, double* state, double* params, double volume, double time):
 */
  __pyx_r = ((((__pyx_v_params[__pyx_v_self->rate_index]) * (__pyx_v_state[__pyx_v_self->s1_index])) * (__pyx_v_state[__pyx_v_self->s2_index])) / __pyx_v_volume);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":177
 * 
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return params[self.rate_index] * state[self.s1_index] * state[self.s2_index] / volume
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":180
 *         return params[self.rate_index] * state[self.s1_index] * state[self.s2_index] / volume
 * 
 *     cdef double get_stochastic_volume_propensity(self, double* state, double* params, double volume, double time):             # <<<<<<<<<<<<<<
 *         if self.s1_index != self.s2_index:
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index] / volume
 */

static double __pyx_f_9bioscrape_5types_21BimolecularPropensity_get_stochastic_volume_propensity(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("get_stochastic_volume_propensity", 0);

  /* "bioscrape/types.pyx":181
 * 
 *     cdef double get_stochastic_volume_propensity(self, double* state, double* params, double volume, double time):
 *         if self.s1_index != self.s2_index:             # <<<<<<<<<<<<<<
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index] / volume
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->s1_index != __pyx_v_self->s2_index) != 0);
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":182
 *     cdef double get_stochastic_volume_propensity(self, double* state, double* params, double volume, double time):
 *         if self.s1_index != self.s2_index:
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index] / volume             # <<<<<<<<<<<<<<
 *         else:
 *             return params[self.rate_index]*state[self.s1_index]*max(state[self.s1_index]-1, 0) / volume
 */
    __pyx_r = ((((__pyx_v_params[__pyx_v_self->rate_index]) * (__pyx_v_state[__pyx_v_self->s1_index])) * (__pyx_v_state[__pyx_v_self->s2_index])) / __pyx_v_volume);
    goto __pyx_L0;

    /* "bioscrape/types.pyx":181
 * 
 *     cdef double get_stochastic_volume_propensity(self, double* state, double* params, double volume, double time):
 *         if self.s1_index != self.s2_index:             # <<<<<<<<<<<<<<
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index] / volume
 *         else:
 */
  }

  /* "bioscrape/types.pyx":184
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index] / volume
 *         else:
 *             return params[self.rate_index]*state[self.s1_index]*max(state[self.s1_index]-1, 0) / volume             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_2 = 0;
    __pyx_t_3 = ((__pyx_v_state[__pyx_v_self->s1_index]) - 1.0);
    if (((__pyx_t_2 > __pyx_t_3) != 0)) {
      __pyx_t_4 = __pyx_t_2;
    } else {
      __pyx_t_4 = __pyx_t_3;
    }
    __pyx_r = ((((__pyx_v_params[__pyx_v_self->rate_index]) * (__pyx_v_state[__pyx_v_self->s1_index])) * __pyx_t_4) / __pyx_v_volume);
    goto __pyx_L0;
  }

  /* "bioscrape/types.pyx":180
 *         return params[self.rate_index] * state[self.s1_index] * state[self.s2_index] / volume
 * 
 *     cdef double get_stochastic_volume_propensity(self, double* state, double* params, double volume, double time):             # <<<<<<<<<<<<<<
 *         if self.s1_index != self.s2_index:
 *             return params[self.rate_index] * state[self.s1_index] * state[self.s2_index] / volume
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":187
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_21BimolecularPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_21BimolecularPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_dictionary = 0;
  PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 187, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 187, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 187, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 187, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.BimolecularPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 187, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 187, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 187, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_21BimolecularPropensity_2initialize(((struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_21BimolecularPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_species_names = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  unsigned int __pyx_t_13;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":189
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'species':
 *                 species_names = [x.strip() for x in value.split('*')]
 */
  if (unlikely(__pyx_v_param_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 189, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_param_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 189, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 189, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 189, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 189, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 189, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 189, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":190
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 'species':             # <<<<<<<<<<<<<<
 *                 species_names = [x.strip() for x in value.split('*')]
 *                 species_names = [x for x in species_names if x != '']
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_species, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 190, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":191
 *         for key,value in param_dictionary.items():
 *             if key == 'species':
 *                 species_names = [x.strip() for x in value.split('*')]             # <<<<<<<<<<<<<<
 *                 species_names = [x for x in species_names if x != '']
 *                 assert(len(species_names) == 2)
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s__2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s__2);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
        __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 191, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 191, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 191, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 191, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 191, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_11(__pyx_t_5);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 191, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_strip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_6 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 191, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_species_names, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "bioscrape/types.pyx":192
 *             if key == 'species':
 *                 species_names = [x.strip() for x in value.split('*')]
 *                 species_names = [x for x in species_names if x != '']             # <<<<<<<<<<<<<<
 *                 assert(len(species_names) == 2)
 *                 self.s1_index = species_indices[species_names[0]]
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __pyx_v_species_names; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
      for (;;) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_x, __pyx_kp_s__3, Py_NE)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
        if (__pyx_t_9) {
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_x))) __PYX_ERR(0, 192, __pyx_L1_error)
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_species_names, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "bioscrape/types.pyx":193
 *                 species_names = [x.strip() for x in value.split('*')]
 *                 species_names = [x for x in species_names if x != '']
 *                 assert(len(species_names) == 2)             # <<<<<<<<<<<<<<
 *                 self.s1_index = species_indices[species_names[0]]
 *                 self.s2_index = species_indices[species_names[1]]
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_10 = PyList_GET_SIZE(__pyx_v_species_names); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 193, __pyx_L1_error)
        if (unlikely(!((__pyx_t_10 == 2) != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 193, __pyx_L1_error)
        }
      }
      #endif

      /* "bioscrape/types.pyx":194
 *                 species_names = [x for x in species_names if x != '']
 *                 assert(len(species_names) == 2)
 *                 self.s1_index = species_indices[species_names[0]]             # <<<<<<<<<<<<<<
 *                 self.s2_index = species_indices[species_names[1]]
 *             elif key == 'k':
 */
      if (unlikely(__pyx_v_species_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 194, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, PyList_GET_ITEM(__pyx_v_species_names, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->s1_index = __pyx_t_13;

      /* "bioscrape/types.pyx":195
 *                 assert(len(species_names) == 2)
 *                 self.s1_index = species_indices[species_names[0]]
 *                 self.s2_index = species_indices[species_names[1]]             # <<<<<<<<<<<<<<
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_species_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 195, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, PyList_GET_ITEM(__pyx_v_species_names, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->s2_index = __pyx_t_13;

      /* "bioscrape/types.pyx":190
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 'species':             # <<<<<<<<<<<<<<
 *                 species_names = [x.strip() for x in value.split('*')]
 *                 species_names = [x for x in species_names if x != '']
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":196
 *                 self.s1_index = species_indices[species_names[0]]
 *                 self.s2_index = species_indices[species_names[1]]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_k, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 196, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":197
 *                 self.s2_index = species_indices[species_names[1]]
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             else:
 *                 logging.info('Warning! Useless field for BimolecularPropensity'+str(key))
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 197, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->rate_index = __pyx_t_13;

      /* "bioscrape/types.pyx":196
 *                 self.s1_index = species_indices[species_names[0]]
 *                 self.s2_index = species_indices[species_names[1]]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             else:
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":199
 *                 self.rate_index = parameter_indices[value]
 *             else:
 *                 logging.info('Warning! Useless field for BimolecularPropensity'+str(key))             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logging); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Warning_Useless_field_for_Bimole, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "bioscrape/types.pyx":189
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'species':
 *                 species_names = [x.strip() for x in value.split('*')]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":187
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("bioscrape.types.BimolecularPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_species_names);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":201
 *                 logging.info('Warning! Useless field for BimolecularPropensity'+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ x.strip() for x in fields['species'].split('*') ],[ fields['k'] ])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_21BimolecularPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_21BimolecularPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 201, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 201, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.BimolecularPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 201, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_21BimolecularPropensity_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_21BimolecularPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":202
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         return ([ x.strip() for x in fields['species'].split('*') ],[ fields['k'] ])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 202, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_s__2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s__2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 202, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 202, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 202, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 202, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 202, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_k); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":201
 *                 logging.info('Warning! Useless field for BimolecularPropensity'+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ x.strip() for x in fields['species'].split('*') ],[ fields['k'] ])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.BimolecularPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_21BimolecularPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_21BimolecularPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_21BimolecularPropensity_6__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_21BimolecularPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.propensity_type, self.rate_index, self.s1_index, self.s2_index)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_v_self->__pyx_base.propensity_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->rate_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->s1_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->s2_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.propensity_type, self.rate_index, self.s1_index, self.s2_index)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_5 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v__dict = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "(tree fragment)":7
 *     state = (self.propensity_type, self.rate_index, self.s1_index, self.s2_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_6 = (__pyx_v__dict != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.propensity_type, self.rate_index, self.s1_index, self.s2_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_BimolecularPropensity, (type(self), 0x54e9932, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BimolecularPropensity, (type(self), 0x54e9932, None), state
 *     else:
 */
  __pyx_t_7 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_BimolecularPropensity, (type(self), 0x54e9932, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_BimolecularPropensity, (type(self), 0x54e9932, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_BimolecularPropen); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_89037106);
    __Pyx_GIVEREF(__pyx_int_89037106);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_89037106);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 2, Py_None);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BimolecularPropensity, (type(self), 0x54e9932, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_BimolecularPropensity, (type(self), 0x54e9932, None), state
 *     else:
 *         return __pyx_unpickle_BimolecularPropensity, (type(self), 0x54e9932, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BimolecularPropensity__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_BimolecularPropen); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_89037106);
    __Pyx_GIVEREF(__pyx_int_89037106);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_89037106);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.BimolecularPropensity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BimolecularPropensity, (type(self), 0x54e9932, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BimolecularPropensity__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_21BimolecularPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_21BimolecularPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_21BimolecularPropensity_8__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_21BimolecularPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_BimolecularPropensity, (type(self), 0x54e9932, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BimolecularPropensity__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_BimolecularPropensity__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BimolecularPropensity, (type(self), 0x54e9932, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BimolecularPropensity__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.BimolecularPropensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":208
 * 
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.hill_positive
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_22PositiveHillPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_22PositiveHillPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_22PositiveHillPropensity___init__(((struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_22PositiveHillPropensity___init__(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":209
 *     # constructor
 *     def __init__(self):
 *         self.propensity_type = PropensityType.hill_positive             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 */
  __pyx_v_self->__pyx_base.propensity_type = __pyx_e_9bioscrape_5types_hill_positive;

  /* "bioscrape/types.pyx":208
 * 
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.hill_positive
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":211
 *         self.propensity_type = PropensityType.hill_positive
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 */

static double __pyx_f_9bioscrape_5types_22PositiveHillPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_v_X;
  double __pyx_v_K;
  double __pyx_v_n;
  double __pyx_v_rate;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propensity", 0);

  /* "bioscrape/types.pyx":212
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         cdef double X = state[self.s1_index]             # <<<<<<<<<<<<<<
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 */
  __pyx_v_X = (__pyx_v_state[__pyx_v_self->s1_index]);

  /* "bioscrape/types.pyx":213
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]             # <<<<<<<<<<<<<<
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 */
  __pyx_v_K = (__pyx_v_params[__pyx_v_self->K_index]);

  /* "bioscrape/types.pyx":214
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]             # <<<<<<<<<<<<<<
 *         cdef double rate = params[self.rate_index]
 *         return rate * (X / K) ** n / (1 + (X/K)**n)
 */
  __pyx_v_n = (__pyx_v_params[__pyx_v_self->n_index]);

  /* "bioscrape/types.pyx":215
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]             # <<<<<<<<<<<<<<
 *         return rate * (X / K) ** n / (1 + (X/K)**n)
 * 
 */
  __pyx_v_rate = (__pyx_v_params[__pyx_v_self->rate_index]);

  /* "bioscrape/types.pyx":216
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 *         return rate * (X / K) ** n / (1 + (X/K)**n)             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 */
  __pyx_r = ((__pyx_v_rate * pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)) / (1.0 + pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":211
 *         self.propensity_type = PropensityType.hill_positive
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":218
 *         return rate * (X / K) ** n / (1 + (X/K)**n)
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 */

static double __pyx_f_9bioscrape_5types_22PositiveHillPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_v_X;
  double __pyx_v_K;
  double __pyx_v_n;
  double __pyx_v_rate;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_propensity", 0);

  /* "bioscrape/types.pyx":219
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         cdef double X = state[self.s1_index] / volume             # <<<<<<<<<<<<<<
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 */
  __pyx_v_X = ((__pyx_v_state[__pyx_v_self->s1_index]) / __pyx_v_volume);

  /* "bioscrape/types.pyx":220
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]             # <<<<<<<<<<<<<<
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 */
  __pyx_v_K = (__pyx_v_params[__pyx_v_self->K_index]);

  /* "bioscrape/types.pyx":221
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]             # <<<<<<<<<<<<<<
 *         cdef double rate = params[self.rate_index]
 *         return rate * (X / K) ** n / (1 + (X/K)**n)
 */
  __pyx_v_n = (__pyx_v_params[__pyx_v_self->n_index]);

  /* "bioscrape/types.pyx":222
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]             # <<<<<<<<<<<<<<
 *         return rate * (X / K) ** n / (1 + (X/K)**n)
 * 
 */
  __pyx_v_rate = (__pyx_v_params[__pyx_v_self->rate_index]);

  /* "bioscrape/types.pyx":223
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 *         return rate * (X / K) ** n / (1 + (X/K)**n)             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 */
  __pyx_r = ((__pyx_v_rate * pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)) / (1.0 + pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":218
 *         return rate * (X / K) ** n / (1 + (X/K)**n)
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":225
 *         return rate * (X / K) ** n / (1 + (X/K)**n)
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_dictionary = 0;
  PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 225, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 225, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 225, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 225, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.PositiveHillPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 225, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 225, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_22PositiveHillPropensity_2initialize(((struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22PositiveHillPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":227
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 */
  if (unlikely(__pyx_v_param_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 227, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_param_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 227, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 227, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 227, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 227, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 227, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 227, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":228
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 's1':             # <<<<<<<<<<<<<<
 *                 self.s1_index = species_indices[value]
 *             elif key == 'K':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_s1, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 228, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":229
 *         for key,value in param_dictionary.items():
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_species_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 229, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->s1_index = __pyx_t_10;

      /* "bioscrape/types.pyx":228
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 's1':             # <<<<<<<<<<<<<<
 *                 self.s1_index = species_indices[value]
 *             elif key == 'K':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":230
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 *             elif key == 'K':             # <<<<<<<<<<<<<<
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_K, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 230, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":231
 *                 self.s1_index = species_indices[value]
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 231, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->K_index = __pyx_t_10;

      /* "bioscrape/types.pyx":230
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 *             elif key == 'K':             # <<<<<<<<<<<<<<
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":232
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':             # <<<<<<<<<<<<<<
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_n, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 232, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":233
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 233, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 233, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->n_index = __pyx_t_10;

      /* "bioscrape/types.pyx":232
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':             # <<<<<<<<<<<<<<
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":234
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_k, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 234, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":235
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             else:
 *                 logging.info('Warning! Useless field for PositiveHillPropensity '+str(key))
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 235, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->rate_index = __pyx_t_10;

      /* "bioscrape/types.pyx":234
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             else:
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":237
 *                 self.rate_index = parameter_indices[value]
 *             else:
 *                 logging.info('Warning! Useless field for PositiveHillPropensity '+str(key))             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Warning_Useless_field_for_Positi, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "bioscrape/types.pyx":227
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":225
 *         return rate * (X / K) ** n / (1 + (X/K)**n)
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.PositiveHillPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":239
 *                 logging.info('Warning! Useless field for PositiveHillPropensity '+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ fields['s1'] ],[ fields['K'],fields['n'],fields['k'] ])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 239, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 239, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.PositiveHillPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_22PositiveHillPropensity_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22PositiveHillPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":240
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         return ([ fields['s1'] ],[ fields['K'],fields['n'],fields['k'] ])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 240, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_s1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 240, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_K); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 240, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 240, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_k); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":239
 *                 logging.info('Warning! Useless field for PositiveHillPropensity '+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ fields['s1'] ],[ fields['K'],fields['n'],fields['k'] ])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.PositiveHillPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_22PositiveHillPropensity_6__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22PositiveHillPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.K_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->K_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->n_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_v_self->__pyx_base.propensity_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->rate_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->s1_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.K_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_6 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v__dict = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "(tree fragment)":7
 *     state = (self.K_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_7 = (__pyx_v__dict != Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v__dict);
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.K_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PositiveHillPropensity, (type(self), 0xbbc01ae, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PositiveHillPropensity, (type(self), 0xbbc01ae, None), state
 *     else:
 */
  __pyx_t_8 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_8) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PositiveHillPropensity, (type(self), 0xbbc01ae, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PositiveHillPropensity, (type(self), 0xbbc01ae, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_PositiveHillPrope); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_196870574);
    __Pyx_GIVEREF(__pyx_int_196870574);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_196870574);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_6, 2, Py_None);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PositiveHillPropensity, (type(self), 0xbbc01ae, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PositiveHillPropensity, (type(self), 0xbbc01ae, None), state
 *     else:
 *         return __pyx_unpickle_PositiveHillPropensity, (type(self), 0xbbc01ae, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PositiveHillPropensity__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PositiveHillPrope); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_196870574);
    __Pyx_GIVEREF(__pyx_int_196870574);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_196870574);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bioscrape.types.PositiveHillPropensity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PositiveHillPropensity, (type(self), 0xbbc01ae, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PositiveHillPropensity__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_22PositiveHillPropensity_8__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22PositiveHillPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PositiveHillPropensity, (type(self), 0xbbc01ae, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PositiveHillPropensity__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_PositiveHillPropensity__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PositiveHillPropensity, (type(self), 0xbbc01ae, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PositiveHillPropensity__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.PositiveHillPropensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":246
 * 
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.proportional_hill_positive
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity___init__(((struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity___init__(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":247
 *     # constructor
 *     def __init__(self):
 *         self.propensity_type = PropensityType.proportional_hill_positive             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 */
  __pyx_v_self->__pyx_base.propensity_type = __pyx_e_9bioscrape_5types_proportional_hill_positive;

  /* "bioscrape/types.pyx":246
 * 
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.proportional_hill_positive
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":249
 *         self.propensity_type = PropensityType.proportional_hill_positive
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 */

static double __pyx_f_9bioscrape_5types_34PositiveProportionalHillPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_v_X;
  double __pyx_v_K;
  double __pyx_v_n;
  double __pyx_v_rate;
  double __pyx_v_d;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propensity", 0);

  /* "bioscrape/types.pyx":250
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         cdef double X = state[self.s1_index]             # <<<<<<<<<<<<<<
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 */
  __pyx_v_X = (__pyx_v_state[__pyx_v_self->s1_index]);

  /* "bioscrape/types.pyx":251
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]             # <<<<<<<<<<<<<<
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 */
  __pyx_v_K = (__pyx_v_params[__pyx_v_self->K_index]);

  /* "bioscrape/types.pyx":252
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]             # <<<<<<<<<<<<<<
 *         cdef double rate = params[self.rate_index]
 *         cdef double d = state[self.d_index]
 */
  __pyx_v_n = (__pyx_v_params[__pyx_v_self->n_index]);

  /* "bioscrape/types.pyx":253
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]             # <<<<<<<<<<<<<<
 *         cdef double d = state[self.d_index]
 *         return rate * d *  (X / K) ** n / (1 + (X/K)**n)
 */
  __pyx_v_rate = (__pyx_v_params[__pyx_v_self->rate_index]);

  /* "bioscrape/types.pyx":254
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 *         cdef double d = state[self.d_index]             # <<<<<<<<<<<<<<
 *         return rate * d *  (X / K) ** n / (1 + (X/K)**n)
 * 
 */
  __pyx_v_d = (__pyx_v_state[__pyx_v_self->d_index]);

  /* "bioscrape/types.pyx":255
 *         cdef double rate = params[self.rate_index]
 *         cdef double d = state[self.d_index]
 *         return rate * d *  (X / K) ** n / (1 + (X/K)**n)             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 */
  __pyx_r = (((__pyx_v_rate * __pyx_v_d) * pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)) / (1.0 + pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":249
 *         self.propensity_type = PropensityType.proportional_hill_positive
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":257
 *         return rate * d *  (X / K) ** n / (1 + (X/K)**n)
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 */

static double __pyx_f_9bioscrape_5types_34PositiveProportionalHillPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_v_X;
  double __pyx_v_K;
  double __pyx_v_n;
  double __pyx_v_d;
  double __pyx_v_rate;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_propensity", 0);

  /* "bioscrape/types.pyx":258
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         cdef double X = state[self.s1_index] / volume             # <<<<<<<<<<<<<<
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 */
  __pyx_v_X = ((__pyx_v_state[__pyx_v_self->s1_index]) / __pyx_v_volume);

  /* "bioscrape/types.pyx":259
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]             # <<<<<<<<<<<<<<
 *         cdef double n = params[self.n_index]
 *         cdef double d = state[self.d_index]
 */
  __pyx_v_K = (__pyx_v_params[__pyx_v_self->K_index]);

  /* "bioscrape/types.pyx":260
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]             # <<<<<<<<<<<<<<
 *         cdef double d = state[self.d_index]
 *         cdef double rate = params[self.rate_index]
 */
  __pyx_v_n = (__pyx_v_params[__pyx_v_self->n_index]);

  /* "bioscrape/types.pyx":261
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 *         cdef double d = state[self.d_index]             # <<<<<<<<<<<<<<
 *         cdef double rate = params[self.rate_index]
 *         return d * rate * (X / K) ** n / (1 + (X/K)**n)
 */
  __pyx_v_d = (__pyx_v_state[__pyx_v_self->d_index]);

  /* "bioscrape/types.pyx":262
 *         cdef double n = params[self.n_index]
 *         cdef double d = state[self.d_index]
 *         cdef double rate = params[self.rate_index]             # <<<<<<<<<<<<<<
 *         return d * rate * (X / K) ** n / (1 + (X/K)**n)
 * 
 */
  __pyx_v_rate = (__pyx_v_params[__pyx_v_self->rate_index]);

  /* "bioscrape/types.pyx":263
 *         cdef double d = state[self.d_index]
 *         cdef double rate = params[self.rate_index]
 *         return d * rate * (X / K) ** n / (1 + (X/K)**n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (((__pyx_v_d * __pyx_v_rate) * pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)) / (1.0 + pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":257
 *         return rate * d *  (X / K) ** n / (1 + (X/K)**n)
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":266
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_dictionary = 0;
  PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 266, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 266, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 266, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 266, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.PositiveProportionalHillPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 266, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 266, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 266, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_2initialize(((struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":268
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 */
  if (unlikely(__pyx_v_param_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 268, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_param_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 268, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 268, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 268, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 268, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 268, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 268, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":269
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 's1':             # <<<<<<<<<<<<<<
 *                 self.s1_index = species_indices[value]
 *             elif key == 'd':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_s1, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 269, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":270
 *         for key,value in param_dictionary.items():
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'd':
 *                 self.d_index = species_indices[value]
 */
      if (unlikely(__pyx_v_species_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 270, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->s1_index = __pyx_t_10;

      /* "bioscrape/types.pyx":269
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 's1':             # <<<<<<<<<<<<<<
 *                 self.s1_index = species_indices[value]
 *             elif key == 'd':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":271
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 *             elif key == 'd':             # <<<<<<<<<<<<<<
 *                 self.d_index = species_indices[value]
 *             elif key == 'K':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_d, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 271, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":272
 *                 self.s1_index = species_indices[value]
 *             elif key == 'd':
 *                 self.d_index = species_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_species_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 272, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->d_index = __pyx_t_10;

      /* "bioscrape/types.pyx":271
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 *             elif key == 'd':             # <<<<<<<<<<<<<<
 *                 self.d_index = species_indices[value]
 *             elif key == 'K':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":273
 *             elif key == 'd':
 *                 self.d_index = species_indices[value]
 *             elif key == 'K':             # <<<<<<<<<<<<<<
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_K, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 273, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":274
 *                 self.d_index = species_indices[value]
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 274, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->K_index = __pyx_t_10;

      /* "bioscrape/types.pyx":273
 *             elif key == 'd':
 *                 self.d_index = species_indices[value]
 *             elif key == 'K':             # <<<<<<<<<<<<<<
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":275
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':             # <<<<<<<<<<<<<<
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_n, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 275, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":276
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 276, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->n_index = __pyx_t_10;

      /* "bioscrape/types.pyx":275
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':             # <<<<<<<<<<<<<<
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":277
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_k, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 277, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":278
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             else:
 *                 logging.info('Warning! Useless field for PositiveProportionalHillPropensity '+str(key))
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 278, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->rate_index = __pyx_t_10;

      /* "bioscrape/types.pyx":277
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             else:
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":280
 *                 self.rate_index = parameter_indices[value]
 *             else:
 *                 logging.info('Warning! Useless field for PositiveProportionalHillPropensity '+str(key))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Warning_Useless_field_for_Positi_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "bioscrape/types.pyx":268
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":266
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.PositiveProportionalHillPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":283
 * 
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ fields['s1'], fields['d'] ],[ fields['K'],fields['n'],fields['k'] ])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 283, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 283, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.PositiveProportionalHillPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 283, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":284
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         return ([ fields['s1'], fields['d'] ],[ fields['K'],fields['n'],fields['k'] ])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 284, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_s1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 284, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_d); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 284, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_K); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 284, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 284, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_k); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":283
 * 
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ fields['s1'], fields['d'] ],[ fields['K'],fields['n'],fields['k'] ])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.PositiveProportionalHillPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_6__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.K_index, self.d_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->K_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->d_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->n_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_v_self->__pyx_base.propensity_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->rate_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->s1_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.K_index, self.d_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_7 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v__dict = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "(tree fragment)":7
 *     state = (self.K_index, self.d_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_8 = (__pyx_v__dict != Py_None);
  __pyx_t_9 = (__pyx_t_8 != 0);
  if (__pyx_t_9) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v__dict);
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.K_index, self.d_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PositiveProportionalHillPropensity, (type(self), 0x611c596, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PositiveProportionalHillPropensity, (type(self), 0x611c596, None), state
 *     else:
 */
  __pyx_t_9 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_9) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PositiveProportionalHillPropensity, (type(self), 0x611c596, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PositiveProportionalHillPropensity, (type(self), 0x611c596, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_PositiveProportio); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_101827990);
    __Pyx_GIVEREF(__pyx_int_101827990);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_101827990);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_7, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PositiveProportionalHillPropensity, (type(self), 0x611c596, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PositiveProportionalHillPropensity, (type(self), 0x611c596, None), state
 *     else:
 *         return __pyx_unpickle_PositiveProportionalHillPropensity, (type(self), 0x611c596, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PositiveProportionalHillPropensity__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_PositiveProportio); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_101827990);
    __Pyx_GIVEREF(__pyx_int_101827990);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_101827990);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_state);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.PositiveProportionalHillPropensity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PositiveProportionalHillPropensity, (type(self), 0x611c596, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PositiveProportionalHillPropensity__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_8__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_34PositiveProportionalHillPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PositiveProportionalHillPropensity, (type(self), 0x611c596, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PositiveProportionalHillPropensity__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_PositiveProportionalHillPropensity__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PositiveProportionalHillPropensity, (type(self), 0x611c596, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PositiveProportionalHillPropensity__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.PositiveProportionalHillPropensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":291
 * 
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.hill_negative
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_22NegativeHillPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_22NegativeHillPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_22NegativeHillPropensity___init__(((struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_22NegativeHillPropensity___init__(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":292
 *     # constructor
 *     def __init__(self):
 *         self.propensity_type = PropensityType.hill_negative             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 */
  __pyx_v_self->__pyx_base.propensity_type = __pyx_e_9bioscrape_5types_hill_negative;

  /* "bioscrape/types.pyx":291
 * 
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.hill_negative
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":294
 *         self.propensity_type = PropensityType.hill_negative
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 */

static double __pyx_f_9bioscrape_5types_22NegativeHillPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_v_X;
  double __pyx_v_K;
  double __pyx_v_n;
  double __pyx_v_rate;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propensity", 0);

  /* "bioscrape/types.pyx":295
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         cdef double X = state[self.s1_index]             # <<<<<<<<<<<<<<
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 */
  __pyx_v_X = (__pyx_v_state[__pyx_v_self->s1_index]);

  /* "bioscrape/types.pyx":296
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]             # <<<<<<<<<<<<<<
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 */
  __pyx_v_K = (__pyx_v_params[__pyx_v_self->K_index]);

  /* "bioscrape/types.pyx":297
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]             # <<<<<<<<<<<<<<
 *         cdef double rate = params[self.rate_index]
 *         return rate * 1 / (1 + (X/K)**n)
 */
  __pyx_v_n = (__pyx_v_params[__pyx_v_self->n_index]);

  /* "bioscrape/types.pyx":298
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]             # <<<<<<<<<<<<<<
 *         return rate * 1 / (1 + (X/K)**n)
 * 
 */
  __pyx_v_rate = (__pyx_v_params[__pyx_v_self->rate_index]);

  /* "bioscrape/types.pyx":299
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 *         return rate * 1 / (1 + (X/K)**n)             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 */
  __pyx_r = ((__pyx_v_rate * 1.0) / (1.0 + pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":294
 *         self.propensity_type = PropensityType.hill_negative
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":301
 *         return rate * 1 / (1 + (X/K)**n)
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 */

static double __pyx_f_9bioscrape_5types_22NegativeHillPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_v_X;
  double __pyx_v_K;
  double __pyx_v_n;
  double __pyx_v_rate;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_propensity", 0);

  /* "bioscrape/types.pyx":302
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         cdef double X = state[self.s1_index] / volume             # <<<<<<<<<<<<<<
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 */
  __pyx_v_X = ((__pyx_v_state[__pyx_v_self->s1_index]) / __pyx_v_volume);

  /* "bioscrape/types.pyx":303
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]             # <<<<<<<<<<<<<<
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 */
  __pyx_v_K = (__pyx_v_params[__pyx_v_self->K_index]);

  /* "bioscrape/types.pyx":304
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]             # <<<<<<<<<<<<<<
 *         cdef double rate = params[self.rate_index]
 *         return rate * 1 / (1 + (X/K)**n)
 */
  __pyx_v_n = (__pyx_v_params[__pyx_v_self->n_index]);

  /* "bioscrape/types.pyx":305
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]             # <<<<<<<<<<<<<<
 *         return rate * 1 / (1 + (X/K)**n)
 * 
 */
  __pyx_v_rate = (__pyx_v_params[__pyx_v_self->rate_index]);

  /* "bioscrape/types.pyx":306
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 *         return rate * 1 / (1 + (X/K)**n)             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 */
  __pyx_r = ((__pyx_v_rate * 1.0) / (1.0 + pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":301
 *         return rate * 1 / (1 + (X/K)**n)
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":308
 *         return rate * 1 / (1 + (X/K)**n)
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_dictionary = 0;
  PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 308, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 308, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 308, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 308, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.NegativeHillPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 308, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 308, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 308, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_22NegativeHillPropensity_2initialize(((struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22NegativeHillPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":310
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 */
  if (unlikely(__pyx_v_param_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 310, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_param_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 310, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 310, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 310, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 310, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 310, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 310, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 310, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":311
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 's1':             # <<<<<<<<<<<<<<
 *                 self.s1_index = species_indices[value]
 *             elif key == 'K':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_s1, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 311, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":312
 *         for key,value in param_dictionary.items():
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_species_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 312, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->s1_index = __pyx_t_10;

      /* "bioscrape/types.pyx":311
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 's1':             # <<<<<<<<<<<<<<
 *                 self.s1_index = species_indices[value]
 *             elif key == 'K':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":313
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 *             elif key == 'K':             # <<<<<<<<<<<<<<
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_K, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 313, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":314
 *                 self.s1_index = species_indices[value]
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 314, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->K_index = __pyx_t_10;

      /* "bioscrape/types.pyx":313
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 *             elif key == 'K':             # <<<<<<<<<<<<<<
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":315
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':             # <<<<<<<<<<<<<<
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_n, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 315, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":316
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 316, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->n_index = __pyx_t_10;

      /* "bioscrape/types.pyx":315
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':             # <<<<<<<<<<<<<<
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":317
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_k, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 317, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":318
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             else:
 *                 logging.info('Warning! Useless field for NegativeHillPropensity '+str(key))
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 318, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->rate_index = __pyx_t_10;

      /* "bioscrape/types.pyx":317
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             else:
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":320
 *                 self.rate_index = parameter_indices[value]
 *             else:
 *                 logging.info('Warning! Useless field for NegativeHillPropensity '+str(key))             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Warning_Useless_field_for_Negati, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "bioscrape/types.pyx":310
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":308
 *         return rate * 1 / (1 + (X/K)**n)
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.NegativeHillPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":322
 *                 logging.info('Warning! Useless field for NegativeHillPropensity '+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ fields['s1'] ],[ fields['K'],fields['n'],fields['k'] ])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 322, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 322, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.NegativeHillPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_22NegativeHillPropensity_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22NegativeHillPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":323
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         return ([ fields['s1'] ],[ fields['K'],fields['n'],fields['k'] ])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 323, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_s1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 323, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_K); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 323, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 323, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_k); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":322
 *                 logging.info('Warning! Useless field for NegativeHillPropensity '+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ fields['s1'] ],[ fields['K'],fields['n'],fields['k'] ])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.NegativeHillPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_22NegativeHillPropensity_6__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22NegativeHillPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.K_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->K_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->n_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_v_self->__pyx_base.propensity_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->rate_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->s1_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.K_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_6 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v__dict = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "(tree fragment)":7
 *     state = (self.K_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_7 = (__pyx_v__dict != Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v__dict);
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.K_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_NegativeHillPropensity, (type(self), 0xbbc01ae, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_NegativeHillPropensity, (type(self), 0xbbc01ae, None), state
 *     else:
 */
  __pyx_t_8 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_8) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_NegativeHillPropensity, (type(self), 0xbbc01ae, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_NegativeHillPropensity, (type(self), 0xbbc01ae, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_NegativeHillPrope); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_196870574);
    __Pyx_GIVEREF(__pyx_int_196870574);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_196870574);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_6, 2, Py_None);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_NegativeHillPropensity, (type(self), 0xbbc01ae, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_NegativeHillPropensity, (type(self), 0xbbc01ae, None), state
 *     else:
 *         return __pyx_unpickle_NegativeHillPropensity, (type(self), 0xbbc01ae, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_NegativeHillPropensity__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_NegativeHillPrope); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_196870574);
    __Pyx_GIVEREF(__pyx_int_196870574);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_196870574);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bioscrape.types.NegativeHillPropensity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NegativeHillPropensity, (type(self), 0xbbc01ae, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NegativeHillPropensity__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_22NegativeHillPropensity_8__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22NegativeHillPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_NegativeHillPropensity, (type(self), 0xbbc01ae, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_NegativeHillPropensity__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_NegativeHillPropensity__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NegativeHillPropensity, (type(self), 0xbbc01ae, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NegativeHillPropensity__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.NegativeHillPropensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":330
 * 
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.proportional_hill_negative
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity___init__(((struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity___init__(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":331
 *     # constructor
 *     def __init__(self):
 *         self.propensity_type = PropensityType.proportional_hill_negative             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 */
  __pyx_v_self->__pyx_base.propensity_type = __pyx_e_9bioscrape_5types_proportional_hill_negative;

  /* "bioscrape/types.pyx":330
 * 
 *     # constructor
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.proportional_hill_negative
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":333
 *         self.propensity_type = PropensityType.proportional_hill_negative
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 */

static double __pyx_f_9bioscrape_5types_34NegativeProportionalHillPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_v_X;
  double __pyx_v_K;
  double __pyx_v_n;
  double __pyx_v_rate;
  double __pyx_v_d;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propensity", 0);

  /* "bioscrape/types.pyx":334
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         cdef double X = state[self.s1_index]             # <<<<<<<<<<<<<<
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 */
  __pyx_v_X = (__pyx_v_state[__pyx_v_self->s1_index]);

  /* "bioscrape/types.pyx":335
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]             # <<<<<<<<<<<<<<
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 */
  __pyx_v_K = (__pyx_v_params[__pyx_v_self->K_index]);

  /* "bioscrape/types.pyx":336
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]             # <<<<<<<<<<<<<<
 *         cdef double rate = params[self.rate_index]
 *         cdef double d = state[self.d_index]
 */
  __pyx_v_n = (__pyx_v_params[__pyx_v_self->n_index]);

  /* "bioscrape/types.pyx":337
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]             # <<<<<<<<<<<<<<
 *         cdef double d = state[self.d_index]
 *         return rate * d *  1/ (1 + (X/K)**n)
 */
  __pyx_v_rate = (__pyx_v_params[__pyx_v_self->rate_index]);

  /* "bioscrape/types.pyx":338
 *         cdef double n = params[self.n_index]
 *         cdef double rate = params[self.rate_index]
 *         cdef double d = state[self.d_index]             # <<<<<<<<<<<<<<
 *         return rate * d *  1/ (1 + (X/K)**n)
 * 
 */
  __pyx_v_d = (__pyx_v_state[__pyx_v_self->d_index]);

  /* "bioscrape/types.pyx":339
 *         cdef double rate = params[self.rate_index]
 *         cdef double d = state[self.d_index]
 *         return rate * d *  1/ (1 + (X/K)**n)             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 */
  __pyx_r = (((__pyx_v_rate * __pyx_v_d) * 1.0) / (1.0 + pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":333
 *         self.propensity_type = PropensityType.proportional_hill_negative
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index]
 *         cdef double K = params[self.K_index]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":341
 *         return rate * d *  1/ (1 + (X/K)**n)
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 */

static double __pyx_f_9bioscrape_5types_34NegativeProportionalHillPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_v_X;
  double __pyx_v_K;
  double __pyx_v_n;
  double __pyx_v_d;
  double __pyx_v_rate;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_propensity", 0);

  /* "bioscrape/types.pyx":342
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         cdef double X = state[self.s1_index] / volume             # <<<<<<<<<<<<<<
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 */
  __pyx_v_X = ((__pyx_v_state[__pyx_v_self->s1_index]) / __pyx_v_volume);

  /* "bioscrape/types.pyx":343
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]             # <<<<<<<<<<<<<<
 *         cdef double n = params[self.n_index]
 *         cdef double d = state[self.d_index]
 */
  __pyx_v_K = (__pyx_v_params[__pyx_v_self->K_index]);

  /* "bioscrape/types.pyx":344
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]             # <<<<<<<<<<<<<<
 *         cdef double d = state[self.d_index]
 *         cdef double rate = params[self.rate_index]
 */
  __pyx_v_n = (__pyx_v_params[__pyx_v_self->n_index]);

  /* "bioscrape/types.pyx":345
 *         cdef double K = params[self.K_index]
 *         cdef double n = params[self.n_index]
 *         cdef double d = state[self.d_index]             # <<<<<<<<<<<<<<
 *         cdef double rate = params[self.rate_index]
 *         return d * rate * 1 / (1 + (X/K)**n)
 */
  __pyx_v_d = (__pyx_v_state[__pyx_v_self->d_index]);

  /* "bioscrape/types.pyx":346
 *         cdef double n = params[self.n_index]
 *         cdef double d = state[self.d_index]
 *         cdef double rate = params[self.rate_index]             # <<<<<<<<<<<<<<
 *         return d * rate * 1 / (1 + (X/K)**n)
 * 
 */
  __pyx_v_rate = (__pyx_v_params[__pyx_v_self->rate_index]);

  /* "bioscrape/types.pyx":347
 *         cdef double d = state[self.d_index]
 *         cdef double rate = params[self.rate_index]
 *         return d * rate * 1 / (1 + (X/K)**n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (((__pyx_v_d * __pyx_v_rate) * 1.0) / (1.0 + pow((__pyx_v_X / __pyx_v_K), __pyx_v_n)));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":341
 *         return rate * d *  1/ (1 + (X/K)**n)
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         cdef double X = state[self.s1_index] / volume
 *         cdef double K = params[self.K_index]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":350
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_dictionary = 0;
  PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 350, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 350, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 350, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 350, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.NegativeProportionalHillPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 350, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 350, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_2initialize(((struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":352
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 */
  if (unlikely(__pyx_v_param_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 352, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_param_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 352, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 352, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 352, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 352, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 352, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 352, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 352, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":353
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 's1':             # <<<<<<<<<<<<<<
 *                 self.s1_index = species_indices[value]
 *             elif key == 'd':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_s1, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 353, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":354
 *         for key,value in param_dictionary.items():
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'd':
 *                 self.d_index = species_indices[value]
 */
      if (unlikely(__pyx_v_species_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 354, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->s1_index = __pyx_t_10;

      /* "bioscrape/types.pyx":353
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 's1':             # <<<<<<<<<<<<<<
 *                 self.s1_index = species_indices[value]
 *             elif key == 'd':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":355
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 *             elif key == 'd':             # <<<<<<<<<<<<<<
 *                 self.d_index = species_indices[value]
 *             elif key == 'K':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_d, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 355, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":356
 *                 self.s1_index = species_indices[value]
 *             elif key == 'd':
 *                 self.d_index = species_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_species_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 356, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->d_index = __pyx_t_10;

      /* "bioscrape/types.pyx":355
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 *             elif key == 'd':             # <<<<<<<<<<<<<<
 *                 self.d_index = species_indices[value]
 *             elif key == 'K':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":357
 *             elif key == 'd':
 *                 self.d_index = species_indices[value]
 *             elif key == 'K':             # <<<<<<<<<<<<<<
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_K, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 357, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":358
 *                 self.d_index = species_indices[value]
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 358, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->K_index = __pyx_t_10;

      /* "bioscrape/types.pyx":357
 *             elif key == 'd':
 *                 self.d_index = species_indices[value]
 *             elif key == 'K':             # <<<<<<<<<<<<<<
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":359
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':             # <<<<<<<<<<<<<<
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_n, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 359, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":360
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 360, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->n_index = __pyx_t_10;

      /* "bioscrape/types.pyx":359
 *             elif key == 'K':
 *                 self.K_index = parameter_indices[value]
 *             elif key == 'n':             # <<<<<<<<<<<<<<
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":361
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_k, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 361, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":362
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             else:
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 362, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->rate_index = __pyx_t_10;

      /* "bioscrape/types.pyx":361
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[value]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[value]
 *             else:
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":364
 *                 self.rate_index = parameter_indices[value]
 *             else:
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Warning_Useless_field_for_Negati_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "bioscrape/types.pyx":352
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 's1':
 *                 self.s1_index = species_indices[value]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":350
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         for key,value in param_dictionary.items():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.NegativeProportionalHillPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":366
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ fields['s1'], fields['d'] ],[ fields['K'],fields['n'],fields['k'] ])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 366, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 366, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.NegativeProportionalHillPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 366, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":367
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         return ([ fields['s1'], fields['d'] ],[ fields['K'],fields['n'],fields['k'] ])             # <<<<<<<<<<<<<<
 * 
 *     def set_species(self, species, species_indices):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 367, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_s1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 367, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_d); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 367, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_K); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 367, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 367, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_k); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":366
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return ([ fields['s1'], fields['d'] ],[ fields['K'],fields['n'],fields['k'] ])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.NegativeProportionalHillPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":369
 *         return ([ fields['s1'], fields['d'] ],[ fields['K'],fields['n'],fields['k'] ])
 * 
 *     def set_species(self, species, species_indices):             # <<<<<<<<<<<<<<
 *         for key in species:
 *             if key == 's1':
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_7set_species(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_7set_species(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_species = 0;
  PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_species (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_species,&__pyx_n_s_species_indices,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_species", 1, 2, 2, 1); __PYX_ERR(0, 369, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_species") < 0)) __PYX_ERR(0, 369, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_species = values[0];
    __pyx_v_species_indices = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_species", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 369, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.NegativeProportionalHillPropensity.set_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_6set_species(((struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *)__pyx_v_self), __pyx_v_species, __pyx_v_species_indices);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_6set_species(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_species, PyObject *__pyx_v_species_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("set_species", 0);

  /* "bioscrape/types.pyx":370
 * 
 *     def set_species(self, species, species_indices):
 *         for key in species:             # <<<<<<<<<<<<<<
 *             if key == 's1':
 *                 self.s1_index = species_indices[species['s1']]
 */
  if (likely(PyList_CheckExact(__pyx_v_species)) || PyTuple_CheckExact(__pyx_v_species)) {
    __pyx_t_1 = __pyx_v_species; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_species); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 370, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 370, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 370, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 370, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 370, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":371
 *     def set_species(self, species, species_indices):
 *         for key in species:
 *             if key == 's1':             # <<<<<<<<<<<<<<
 *                 self.s1_index = species_indices[species['s1']]
 *             elif key == 'd':
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_s1, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 371, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "bioscrape/types.pyx":372
 *         for key in species:
 *             if key == 's1':
 *                 self.s1_index = species_indices[species['s1']]             # <<<<<<<<<<<<<<
 *             elif key == 'd':
 *                 self.d_index = species_indices[species['d']]
 */
      __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_species, __pyx_n_s_s1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 372, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_species_indices, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 372, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_self->s1_index = __pyx_t_7;

      /* "bioscrape/types.pyx":371
 *     def set_species(self, species, species_indices):
 *         for key in species:
 *             if key == 's1':             # <<<<<<<<<<<<<<
 *                 self.s1_index = species_indices[species['s1']]
 *             elif key == 'd':
 */
      goto __pyx_L5;
    }

    /* "bioscrape/types.pyx":373
 *             if key == 's1':
 *                 self.s1_index = species_indices[species['s1']]
 *             elif key == 'd':             # <<<<<<<<<<<<<<
 *                 self.d_index = species_indices[species['d']]
 *             else:
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_d, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 373, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "bioscrape/types.pyx":374
 *                 self.s1_index = species_indices[species['s1']]
 *             elif key == 'd':
 *                 self.d_index = species_indices[species['d']]             # <<<<<<<<<<<<<<
 *             else:
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))
 */
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_species, __pyx_n_s_d); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_species_indices, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->d_index = __pyx_t_7;

      /* "bioscrape/types.pyx":373
 *             if key == 's1':
 *                 self.s1_index = species_indices[species['s1']]
 *             elif key == 'd':             # <<<<<<<<<<<<<<
 *                 self.d_index = species_indices[species['d']]
 *             else:
 */
      goto __pyx_L5;
    }

    /* "bioscrape/types.pyx":376
 *                 self.d_index = species_indices[species['d']]
 *             else:
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))             # <<<<<<<<<<<<<<
 *     def set_parameters(self, parameters, parameter_indices):
 *         for key in parameters:
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = PyNumber_Add(__pyx_kp_s_Warning_Useless_field_for_Negati_2, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_6, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L5:;

    /* "bioscrape/types.pyx":370
 * 
 *     def set_species(self, species, species_indices):
 *         for key in species:             # <<<<<<<<<<<<<<
 *             if key == 's1':
 *                 self.s1_index = species_indices[species['s1']]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":369
 *         return ([ fields['s1'], fields['d'] ],[ fields['K'],fields['n'],fields['k'] ])
 * 
 *     def set_species(self, species, species_indices):             # <<<<<<<<<<<<<<
 *         for key in species:
 *             if key == 's1':
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.NegativeProportionalHillPropensity.set_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":377
 *             else:
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))
 *     def set_parameters(self, parameters, parameter_indices):             # <<<<<<<<<<<<<<
 *         for key in parameters:
 *             if key == 'K':
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_9set_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_9set_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parameters = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_parameters (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parameters,&__pyx_n_s_parameter_indices,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameters)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_parameters", 1, 2, 2, 1); __PYX_ERR(0, 377, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_parameters") < 0)) __PYX_ERR(0, 377, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parameters = values[0];
    __pyx_v_parameter_indices = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_parameters", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 377, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.NegativeProportionalHillPropensity.set_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_8set_parameters(((struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *)__pyx_v_self), __pyx_v_parameters, __pyx_v_parameter_indices);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_8set_parameters(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v_parameters, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("set_parameters", 0);

  /* "bioscrape/types.pyx":378
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))
 *     def set_parameters(self, parameters, parameter_indices):
 *         for key in parameters:             # <<<<<<<<<<<<<<
 *             if key == 'K':
 *                 self.K_index = parameter_indices[parameters[key]]
 */
  if (likely(PyList_CheckExact(__pyx_v_parameters)) || PyTuple_CheckExact(__pyx_v_parameters)) {
    __pyx_t_1 = __pyx_v_parameters; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_parameters); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 378, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 378, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 378, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 378, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":379
 *     def set_parameters(self, parameters, parameter_indices):
 *         for key in parameters:
 *             if key == 'K':             # <<<<<<<<<<<<<<
 *                 self.K_index = parameter_indices[parameters[key]]
 *             elif key == 'n':
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_K, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 379, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "bioscrape/types.pyx":380
 *         for key in parameters:
 *             if key == 'K':
 *                 self.K_index = parameter_indices[parameters[key]]             # <<<<<<<<<<<<<<
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[parameters[key]]
 */
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_parameter_indices, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_self->K_index = __pyx_t_7;

      /* "bioscrape/types.pyx":379
 *     def set_parameters(self, parameters, parameter_indices):
 *         for key in parameters:
 *             if key == 'K':             # <<<<<<<<<<<<<<
 *                 self.K_index = parameter_indices[parameters[key]]
 *             elif key == 'n':
 */
      goto __pyx_L5;
    }

    /* "bioscrape/types.pyx":381
 *             if key == 'K':
 *                 self.K_index = parameter_indices[parameters[key]]
 *             elif key == 'n':             # <<<<<<<<<<<<<<
 *                 self.n_index = parameter_indices[parameters[key]]
 *             elif key == 'k':
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_n, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 381, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "bioscrape/types.pyx":382
 *                 self.K_index = parameter_indices[parameters[key]]
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[parameters[key]]             # <<<<<<<<<<<<<<
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[parameters[key]]
 */
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameter_indices, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->n_index = __pyx_t_7;

      /* "bioscrape/types.pyx":381
 *             if key == 'K':
 *                 self.K_index = parameter_indices[parameters[key]]
 *             elif key == 'n':             # <<<<<<<<<<<<<<
 *                 self.n_index = parameter_indices[parameters[key]]
 *             elif key == 'k':
 */
      goto __pyx_L5;
    }

    /* "bioscrape/types.pyx":383
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[parameters[key]]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[parameters[key]]
 *             else:
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_k, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "bioscrape/types.pyx":384
 *                 self.n_index = parameter_indices[parameters[key]]
 *             elif key == 'k':
 *                 self.rate_index = parameter_indices[parameters[key]]             # <<<<<<<<<<<<<<
 *             else:
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))
 */
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_parameter_indices, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_self->rate_index = __pyx_t_7;

      /* "bioscrape/types.pyx":383
 *             elif key == 'n':
 *                 self.n_index = parameter_indices[parameters[key]]
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.rate_index = parameter_indices[parameters[key]]
 *             else:
 */
      goto __pyx_L5;
    }

    /* "bioscrape/types.pyx":386
 *                 self.rate_index = parameter_indices[parameters[key]]
 *             else:
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = PyNumber_Add(__pyx_kp_s_Warning_Useless_field_for_Negati_2, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_4, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_L5:;

    /* "bioscrape/types.pyx":378
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))
 *     def set_parameters(self, parameters, parameter_indices):
 *         for key in parameters:             # <<<<<<<<<<<<<<
 *             if key == 'K':
 *                 self.K_index = parameter_indices[parameters[key]]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":377
 *             else:
 *                 logging.info('Warning! Useless field for NegativeProportionalHillPropensity '+str(key))
 *     def set_parameters(self, parameters, parameter_indices):             # <<<<<<<<<<<<<<
 *         for key in parameters:
 *             if key == 'K':
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.NegativeProportionalHillPropensity.set_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_10__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_10__reduce_cython__(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.K_index, self.d_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->K_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->d_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->n_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_v_self->__pyx_base.propensity_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->rate_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->s1_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.K_index, self.d_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_7 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v__dict = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "(tree fragment)":7
 *     state = (self.K_index, self.d_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_8 = (__pyx_v__dict != Py_None);
  __pyx_t_9 = (__pyx_t_8 != 0);
  if (__pyx_t_9) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v__dict);
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.K_index, self.d_index, self.n_index, self.propensity_type, self.rate_index, self.s1_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_NegativeProportionalHillPropensity, (type(self), 0x611c596, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_NegativeProportionalHillPropensity, (type(self), 0x611c596, None), state
 *     else:
 */
  __pyx_t_9 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_9) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_NegativeProportionalHillPropensity, (type(self), 0x611c596, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_NegativeProportionalHillPropensity, (type(self), 0x611c596, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_NegativeProportio); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_101827990);
    __Pyx_GIVEREF(__pyx_int_101827990);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_101827990);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_7, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_NegativeProportionalHillPropensity, (type(self), 0x611c596, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_NegativeProportionalHillPropensity, (type(self), 0x611c596, None), state
 *     else:
 *         return __pyx_unpickle_NegativeProportionalHillPropensity, (type(self), 0x611c596, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_NegativeProportionalHillPropensity__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_NegativeProportio); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_101827990);
    __Pyx_GIVEREF(__pyx_int_101827990);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_101827990);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_state);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.NegativeProportionalHillPropensity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NegativeProportionalHillPropensity, (type(self), 0x611c596, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NegativeProportionalHillPropensity__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_12__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_34NegativeProportionalHillPropensity_12__setstate_cython__(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_NegativeProportionalHillPropensity, (type(self), 0x611c596, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_NegativeProportionalHillPropensity__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_NegativeProportionalHillPropensity__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NegativeProportionalHillPropensity, (type(self), 0x611c596, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NegativeProportionalHillPropensity__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.NegativeProportionalHillPropensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":391
 * 
 * cdef class MassActionPropensity(Propensity):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.mass_action
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_20MassActionPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_20MassActionPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_20MassActionPropensity___init__(((struct __pyx_obj_9bioscrape_5types_MassActionPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_20MassActionPropensity___init__(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":392
 * cdef class MassActionPropensity(Propensity):
 *     def __init__(self):
 *         self.propensity_type = PropensityType.mass_action             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 */
  __pyx_v_self->__pyx_base.propensity_type = __pyx_e_9bioscrape_5types_mass_action;

  /* "bioscrape/types.pyx":391
 * 
 * cdef class MassActionPropensity(Propensity):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.mass_action
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":394
 *         self.propensity_type = PropensityType.mass_action
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = params[self.k_index]
 *         cdef int i
 */

static double __pyx_f_9bioscrape_5types_20MassActionPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_v_ans;
  int __pyx_v_i;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("get_propensity", 0);

  /* "bioscrape/types.pyx":395
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         cdef double ans = params[self.k_index]             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(len(self.sp_inds)):
 */
  __pyx_v_ans = (__pyx_v_params[__pyx_v_self->k_index]);

  /* "bioscrape/types.pyx":397
 *         cdef double ans = params[self.k_index]
 *         cdef int i
 *         for i in range(len(self.sp_inds)):             # <<<<<<<<<<<<<<
 *             ans *= state[self.sp_inds[i]]
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->sp_inds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "bioscrape/types.pyx":398
 *         cdef int i
 *         for i in range(len(self.sp_inds)):
 *             ans *= state[self.sp_inds[i]]             # <<<<<<<<<<<<<<
 * 
 *         return ans
 */
    __pyx_v_ans = (__pyx_v_ans * (__pyx_v_state[(__pyx_v_self->sp_inds[__pyx_v_i])]));
  }

  /* "bioscrape/types.pyx":400
 *             ans *= state[self.sp_inds[i]]
 * 
 *         return ans             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):
 */
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":394
 *         self.propensity_type = PropensityType.mass_action
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = params[self.k_index]
 *         cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("bioscrape.types.MassActionPropensity.get_propensity", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":402
 *         return ans
 * 
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = params[self.k_index]
 *         cdef int i
 */

static double __pyx_f_9bioscrape_5types_20MassActionPropensity_get_stochastic_propensity(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_v_ans;
  int __pyx_v_i;
  PyObject *__pyx_v_j = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  long __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  double __pyx_t_14;
  __Pyx_RefNannySetupContext("get_stochastic_propensity", 0);

  /* "bioscrape/types.pyx":403
 * 
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):
 *         cdef double ans = params[self.k_index]             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(len(self.sp_inds)):
 */
  __pyx_v_ans = (__pyx_v_params[__pyx_v_self->k_index]);

  /* "bioscrape/types.pyx":405
 *         cdef double ans = params[self.k_index]
 *         cdef int i
 *         for i in range(len(self.sp_inds)):             # <<<<<<<<<<<<<<
 *             for j in range(self.sp_counts[i]):
 *                 ans *= max(state[self.sp_inds[i]]-j, 0)
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->sp_inds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "bioscrape/types.pyx":406
 *         cdef int i
 *         for i in range(len(self.sp_inds)):
 *             for j in range(self.sp_counts[i]):             # <<<<<<<<<<<<<<
 *                 ans *= max(state[self.sp_inds[i]]-j, 0)
 *         return ans
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->sp_counts[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_1 = __pyx_t_5; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 406, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 406, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 406, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 406, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 406, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 406, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "bioscrape/types.pyx":407
 *         for i in range(len(self.sp_inds)):
 *             for j in range(self.sp_counts[i]):
 *                 ans *= max(state[self.sp_inds[i]]-j, 0)             # <<<<<<<<<<<<<<
 *         return ans
 * 
 */
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_ans); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = 0;
      __pyx_t_9 = PyFloat_FromDouble((__pyx_v_state[(__pyx_v_self->sp_inds[__pyx_v_i])])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyNumber_Subtract(__pyx_t_9, __pyx_v_j); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_11 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyObject_RichCompare(__pyx_t_11, __pyx_t_10, Py_GT); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_13) {
        __pyx_t_12 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 407, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_9 = __pyx_t_12;
        __pyx_t_12 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_10);
        __pyx_t_9 = __pyx_t_10;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyNumber_InPlaceMultiply(__pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_ans = __pyx_t_14;

      /* "bioscrape/types.pyx":406
 *         cdef int i
 *         for i in range(len(self.sp_inds)):
 *             for j in range(self.sp_counts[i]):             # <<<<<<<<<<<<<<
 *                 ans *= max(state[self.sp_inds[i]]-j, 0)
 *         return ans
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bioscrape/types.pyx":408
 *             for j in range(self.sp_counts[i]):
 *                 ans *= max(state[self.sp_inds[i]]-j, 0)
 *         return ans             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 */
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":402
 *         return ans
 * 
 *     cdef double get_stochastic_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = params[self.k_index]
 *         cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("bioscrape.types.MassActionPropensity.get_stochastic_propensity", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":410
 *         return ans
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return self.get_propensity(state, params, time) / (volume ** (self.num_species - 1) )
 * 
 */

static double __pyx_f_9bioscrape_5types_20MassActionPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_propensity", 0);

  /* "bioscrape/types.pyx":411
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         return self.get_propensity(state, params, time) / (volume ** (self.num_species - 1) )             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_stochastic_volume_propensity(self, double *state, double *params, double volume, double time):
 */
  __pyx_r = (((struct __pyx_vtabstruct_9bioscrape_5types_MassActionPropensity *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_propensity(((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_v_self), __pyx_v_state, __pyx_v_params, __pyx_v_time) / pow(__pyx_v_volume, ((double)(__pyx_v_self->num_species - 1))));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":410
 *         return ans
 * 
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return self.get_propensity(state, params, time) / (volume ** (self.num_species - 1) )
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":413
 *         return self.get_propensity(state, params, time) / (volume ** (self.num_species - 1) )
 * 
 *     cdef double get_stochastic_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return self.get_stochastic_propensity(state, params, time) / (volume ** (self.num_species - 1))
 * 
 */

static double __pyx_f_9bioscrape_5types_20MassActionPropensity_get_stochastic_volume_propensity(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_stochastic_volume_propensity", 0);

  /* "bioscrape/types.pyx":414
 * 
 *     cdef double get_stochastic_volume_propensity(self, double *state, double *params, double volume, double time):
 *         return self.get_stochastic_propensity(state, params, time) / (volume ** (self.num_species - 1))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (((struct __pyx_vtabstruct_9bioscrape_5types_MassActionPropensity *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_stochastic_propensity(((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_v_self), __pyx_v_state, __pyx_v_params, __pyx_v_time) / pow(__pyx_v_volume, ((double)(__pyx_v_self->num_species - 1))));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":413
 *         return self.get_propensity(state, params, time) / (volume ** (self.num_species - 1) )
 * 
 *     cdef double get_stochastic_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return self.get_stochastic_propensity(state, params, time) / (volume ** (self.num_species - 1))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":417
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         sp_ind_dict = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_20MassActionPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_20MassActionPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_dictionary = 0;
  PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 417, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 417, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 417, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 417, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.MassActionPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 417, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 417, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 417, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_20MassActionPropensity_2initialize(((struct __pyx_obj_9bioscrape_5types_MassActionPropensity *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_20MassActionPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, PyObject *__pyx_v_param_dictionary, PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_sp_ind_dict = NULL;
  PyObject *__pyx_v_sp_ind_counter = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_species_names = NULL;
  PyObject *__pyx_v_species_name = NULL;
  PyObject *__pyx_v_sp_ind = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  unsigned int __pyx_t_16;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":419
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):
 * 
 *         sp_ind_dict = {}             # <<<<<<<<<<<<<<
 *         sp_ind_counter = 0
 *         for key,value in param_dictionary.items():
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sp_ind_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":420
 * 
 *         sp_ind_dict = {}
 *         sp_ind_counter = 0             # <<<<<<<<<<<<<<
 *         for key,value in param_dictionary.items():
 *             if key == 'species':
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_sp_ind_counter = __pyx_int_0;

  /* "bioscrape/types.pyx":421
 *         sp_ind_dict = {}
 *         sp_ind_counter = 0
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'species':
 *                 if '+' in value or '-' in value:
 */
  if (unlikely(__pyx_v_param_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 421, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_param_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 421, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 421, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 421, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 421, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 421, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 421, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":422
 *         sp_ind_counter = 0
 *         for key,value in param_dictionary.items():
 *             if key == 'species':             # <<<<<<<<<<<<<<
 *                 if '+' in value or '-' in value:
 *                     raise SyntaxError('Plus or minus character in mass action propensity string.')
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_species, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 422, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":423
 *         for key,value in param_dictionary.items():
 *             if key == 'species':
 *                 if '+' in value or '-' in value:             # <<<<<<<<<<<<<<
 *                     raise SyntaxError('Plus or minus character in mass action propensity string.')
 *                 species_names = [s.strip() for s in value.split('*')]
 */
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s__4, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 423, __pyx_L1_error)
      __pyx_t_11 = (__pyx_t_10 != 0);
      if (!__pyx_t_11) {
      } else {
        __pyx_t_9 = __pyx_t_11;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s__5, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 423, __pyx_L1_error)
      __pyx_t_10 = (__pyx_t_11 != 0);
      __pyx_t_9 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_9)) {

        /* "bioscrape/types.pyx":424
 *             if key == 'species':
 *                 if '+' in value or '-' in value:
 *                     raise SyntaxError('Plus or minus character in mass action propensity string.')             # <<<<<<<<<<<<<<
 *                 species_names = [s.strip() for s in value.split('*')]
 *                 for species_name in species_names:
 */
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_SyntaxError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 424, __pyx_L1_error)

        /* "bioscrape/types.pyx":423
 *         for key,value in param_dictionary.items():
 *             if key == 'species':
 *                 if '+' in value or '-' in value:             # <<<<<<<<<<<<<<
 *                     raise SyntaxError('Plus or minus character in mass action propensity string.')
 *                 species_names = [s.strip() for s in value.split('*')]
 */
      }

      /* "bioscrape/types.pyx":425
 *                 if '+' in value or '-' in value:
 *                     raise SyntaxError('Plus or minus character in mass action propensity string.')
 *                 species_names = [s.strip() for s in value.split('*')]             # <<<<<<<<<<<<<<
 *                 for species_name in species_names:
 *                     if species_name == '':
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_kp_s__2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s__2);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
        __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 425, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 425, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 425, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 425, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 425, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 425, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_13(__pyx_t_5);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 425, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_strip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 425, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_6 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 425, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 425, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_species_names, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "bioscrape/types.pyx":426
 *                     raise SyntaxError('Plus or minus character in mass action propensity string.')
 *                 species_names = [s.strip() for s in value.split('*')]
 *                 for species_name in species_names:             # <<<<<<<<<<<<<<
 *                     if species_name == '':
 *                         continue
 */
      __pyx_t_1 = __pyx_v_species_names; __Pyx_INCREF(__pyx_t_1); __pyx_t_12 = 0;
      for (;;) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 426, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_species_name, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "bioscrape/types.pyx":427
 *                 species_names = [s.strip() for s in value.split('*')]
 *                 for species_name in species_names:
 *                     if species_name == '':             # <<<<<<<<<<<<<<
 *                         continue
 *                     if species_name not in sp_ind_dict:
 */
        __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_species_name, __pyx_kp_s__3, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 427, __pyx_L1_error)
        if (__pyx_t_9) {

          /* "bioscrape/types.pyx":428
 *                 for species_name in species_names:
 *                     if species_name == '':
 *                         continue             # <<<<<<<<<<<<<<
 *                     if species_name not in sp_ind_dict:
 *                         self.sp_inds.push_back(species_indices[species_name])
 */
          goto __pyx_L13_continue;

          /* "bioscrape/types.pyx":427
 *                 species_names = [s.strip() for s in value.split('*')]
 *                 for species_name in species_names:
 *                     if species_name == '':             # <<<<<<<<<<<<<<
 *                         continue
 *                     if species_name not in sp_ind_dict:
 */
        }

        /* "bioscrape/types.pyx":429
 *                     if species_name == '':
 *                         continue
 *                     if species_name not in sp_ind_dict:             # <<<<<<<<<<<<<<
 *                         self.sp_inds.push_back(species_indices[species_name])
 *                         self.sp_counts.push_back(1)
 */
        __pyx_t_9 = (__Pyx_PyDict_ContainsTF(__pyx_v_species_name, __pyx_v_sp_ind_dict, Py_NE)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 429, __pyx_L1_error)
        __pyx_t_10 = (__pyx_t_9 != 0);
        if (__pyx_t_10) {

          /* "bioscrape/types.pyx":430
 *                         continue
 *                     if species_name not in sp_ind_dict:
 *                         self.sp_inds.push_back(species_indices[species_name])             # <<<<<<<<<<<<<<
 *                         self.sp_counts.push_back(1)
 *                         sp_ind_dict[species_name] = sp_ind_counter
 */
          if (unlikely(__pyx_v_species_indices == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 430, __pyx_L1_error)
          }
          __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, __pyx_v_species_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 430, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_v_self->sp_inds.push_back(__pyx_t_15);

          /* "bioscrape/types.pyx":431
 *                     if species_name not in sp_ind_dict:
 *                         self.sp_inds.push_back(species_indices[species_name])
 *                         self.sp_counts.push_back(1)             # <<<<<<<<<<<<<<
 *                         sp_ind_dict[species_name] = sp_ind_counter
 *                         sp_ind_counter += 1
 */
          __pyx_v_self->sp_counts.push_back(1);

          /* "bioscrape/types.pyx":432
 *                         self.sp_inds.push_back(species_indices[species_name])
 *                         self.sp_counts.push_back(1)
 *                         sp_ind_dict[species_name] = sp_ind_counter             # <<<<<<<<<<<<<<
 *                         sp_ind_counter += 1
 *                     else:
 */
          if (unlikely(PyDict_SetItem(__pyx_v_sp_ind_dict, __pyx_v_species_name, __pyx_v_sp_ind_counter) < 0)) __PYX_ERR(0, 432, __pyx_L1_error)

          /* "bioscrape/types.pyx":433
 *                         self.sp_counts.push_back(1)
 *                         sp_ind_dict[species_name] = sp_ind_counter
 *                         sp_ind_counter += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         sp_ind =sp_ind_dict[species_name]
 */
          __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_sp_ind_counter, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 433, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF_SET(__pyx_v_sp_ind_counter, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "bioscrape/types.pyx":429
 *                     if species_name == '':
 *                         continue
 *                     if species_name not in sp_ind_dict:             # <<<<<<<<<<<<<<
 *                         self.sp_inds.push_back(species_indices[species_name])
 *                         self.sp_counts.push_back(1)
 */
          goto __pyx_L16;
        }

        /* "bioscrape/types.pyx":435
 *                         sp_ind_counter += 1
 *                     else:
 *                         sp_ind =sp_ind_dict[species_name]             # <<<<<<<<<<<<<<
 *                         self.sp_counts[sp_ind] += 1
 * 
 */
        /*else*/ {
          __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_sp_ind_dict, __pyx_v_species_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 435, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_sp_ind, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "bioscrape/types.pyx":436
 *                     else:
 *                         sp_ind =sp_ind_dict[species_name]
 *                         self.sp_counts[sp_ind] += 1             # <<<<<<<<<<<<<<
 * 
 *                 self.num_species = int(sum(self.sp_counts))
 */
          __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_sp_ind); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 436, __pyx_L1_error)
          (__pyx_v_self->sp_counts[__pyx_t_15]) = ((__pyx_v_self->sp_counts[__pyx_t_15]) + 1);
        }
        __pyx_L16:;

        /* "bioscrape/types.pyx":426
 *                     raise SyntaxError('Plus or minus character in mass action propensity string.')
 *                 species_names = [s.strip() for s in value.split('*')]
 *                 for species_name in species_names:             # <<<<<<<<<<<<<<
 *                     if species_name == '':
 *                         continue
 */
        __pyx_L13_continue:;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "bioscrape/types.pyx":438
 *                         self.sp_counts[sp_ind] += 1
 * 
 *                 self.num_species = int(sum(self.sp_counts))             # <<<<<<<<<<<<<<
 *             elif key == 'k':
 *                 self.k_index = parameter_indices[value]
 */
      __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->sp_counts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->num_species = __pyx_t_15;

      /* "bioscrape/types.pyx":422
 *         sp_ind_counter = 0
 *         for key,value in param_dictionary.items():
 *             if key == 'species':             # <<<<<<<<<<<<<<
 *                 if '+' in value or '-' in value:
 *                     raise SyntaxError('Plus or minus character in mass action propensity string.')
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":439
 * 
 *                 self.num_species = int(sum(self.sp_counts))
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.k_index = parameter_indices[value]
 *             else:
 */
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_k, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 439, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "bioscrape/types.pyx":440
 *                 self.num_species = int(sum(self.sp_counts))
 *             elif key == 'k':
 *                 self.k_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             else:
 *                 logging.info('Warning! Useless field for MassActionPropensity '+str(key))
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 440, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_16 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_16 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->k_index = __pyx_t_16;

      /* "bioscrape/types.pyx":439
 * 
 *                 self.num_species = int(sum(self.sp_counts))
 *             elif key == 'k':             # <<<<<<<<<<<<<<
 *                 self.k_index = parameter_indices[value]
 *             else:
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":442
 *                 self.k_index = parameter_indices[value]
 *             else:
 *                 logging.info('Warning! Useless field for MassActionPropensity '+str(key))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logging); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = PyNumber_Add(__pyx_kp_s_Warning_Useless_field_for_MassAc, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "bioscrape/types.pyx":421
 *         sp_ind_dict = {}
 *         sp_ind_counter = 0
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'species':
 *                 if '+' in value or '-' in value:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":417
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices, dict parameter_indices):             # <<<<<<<<<<<<<<
 * 
 *         sp_ind_dict = {}
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("bioscrape.types.MassActionPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sp_ind_dict);
  __Pyx_XDECREF(__pyx_v_sp_ind_counter);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_species_names);
  __Pyx_XDECREF(__pyx_v_species_name);
  __Pyx_XDECREF(__pyx_v_sp_ind);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":446
 * 
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         species_list = [x.strip()   for x in fields['species'].split('*') ]
 *         species_list = [x for x in species_list if x != '']
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_20MassActionPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_20MassActionPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 446, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 446, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.MassActionPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 446, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_20MassActionPropensity_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_MassActionPropensity *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_20MassActionPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_v_species_list = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":447
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         species_list = [x.strip()   for x in fields['species'].split('*') ]             # <<<<<<<<<<<<<<
 *         species_list = [x for x in species_list if x != '']
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 447, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_s__2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s__2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 447, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 447, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 447, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 447, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_species_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":448
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         species_list = [x.strip()   for x in fields['species'].split('*') ]
 *         species_list = [x for x in species_list if x != '']             # <<<<<<<<<<<<<<
 * 
 *         return (species_list, [ fields['k'] ])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_v_species_list; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 448, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_x, __pyx_kp_s__3, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 448, __pyx_L1_error)
    if (__pyx_t_8) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_x))) __PYX_ERR(0, 448, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_species_list, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":450
 *         species_list = [x for x in species_list if x != '']
 * 
 *         return (species_list, [ fields['k'] ])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 450, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_k); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_species_list);
  __Pyx_GIVEREF(__pyx_v_species_list);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_species_list);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":446
 * 
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         species_list = [x.strip()   for x in fields['species'].split('*') ]
 *         species_list = [x for x in species_list if x != '']
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.MassActionPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_species_list);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_20MassActionPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_20MassActionPropensity_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_20MassActionPropensity_6__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_MassActionPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_20MassActionPropensity_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.k_index, self.num_species, self.propensity_type, self.sp_counts, self.sp_inds)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->k_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->num_species); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_v_self->__pyx_base.propensity_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_convert_vector_to_py_int(__pyx_v_self->sp_counts); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_convert_vector_to_py_int(__pyx_v_self->sp_inds); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.k_index, self.num_species, self.propensity_type, self.sp_counts, self.sp_inds)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_6 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v__dict = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "(tree fragment)":7
 *     state = (self.k_index, self.num_species, self.propensity_type, self.sp_counts, self.sp_inds)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_7 = (__pyx_v__dict != Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v__dict);
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.k_index, self.num_species, self.propensity_type, self.sp_counts, self.sp_inds)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_MassActionPropensity, (type(self), 0x8a1cb64, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MassActionPropensity, (type(self), 0x8a1cb64, None), state
 *     else:
 */
  __pyx_t_8 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_8) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_MassActionPropensity, (type(self), 0x8a1cb64, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_MassActionPropensity, (type(self), 0x8a1cb64, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_MassActionPropens); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_144821092);
    __Pyx_GIVEREF(__pyx_int_144821092);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_144821092);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_6, 2, Py_None);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MassActionPropensity, (type(self), 0x8a1cb64, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_MassActionPropensity, (type(self), 0x8a1cb64, None), state
 *     else:
 *         return __pyx_unpickle_MassActionPropensity, (type(self), 0x8a1cb64, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MassActionPropensity__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_MassActionPropens); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_144821092);
    __Pyx_GIVEREF(__pyx_int_144821092);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_144821092);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bioscrape.types.MassActionPropensity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MassActionPropensity, (type(self), 0x8a1cb64, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MassActionPropensity__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_20MassActionPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_20MassActionPropensity_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_20MassActionPropensity_8__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_MassActionPropensity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_20MassActionPropensity_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_MassActionPropensity, (type(self), 0x8a1cb64, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MassActionPropensity__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_MassActionPropensity__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MassActionPropensity, (type(self), 0x8a1cb64, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MassActionPropensity__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.MassActionPropensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":459
 * @cython.auto_pickle(True)
 * cdef class Term:
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         raise SyntaxError('Cannot make Term base object')
 * 
 */

static double __pyx_f_9bioscrape_5types_4Term_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":460
 * cdef class Term:
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         raise SyntaxError('Cannot make Term base object')             # <<<<<<<<<<<<<<
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_SyntaxError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 460, __pyx_L1_error)

  /* "bioscrape/types.pyx":459
 * @cython.auto_pickle(True)
 * cdef class Term:
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         raise SyntaxError('Cannot make Term base object')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("bioscrape.types.Term.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":462
 *         raise SyntaxError('Cannot make Term base object')
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         raise SyntaxError('Cannot make Term base object')
 * 
 */

static double __pyx_f_9bioscrape_5types_4Term_volume_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_vol, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":463
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         raise SyntaxError('Cannot make Term base object')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_SyntaxError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 463, __pyx_L1_error)

  /* "bioscrape/types.pyx":462
 *         raise SyntaxError('Cannot make Term base object')
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         raise SyntaxError('Cannot make Term base object')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("bioscrape.types.Term.volume_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":466
 * 
 * 
 *     def py_evaluate(self, np.ndarray species, np.ndarray params, double time=0.0):             # <<<<<<<<<<<<<<
 *         return self.evaluate(<double*> species.data, <double*> params.data, time)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_4Term_1py_evaluate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_4Term_1py_evaluate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_species = 0;
  PyArrayObject *__pyx_v_params = 0;
  double __pyx_v_time;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_evaluate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_species,&__pyx_n_s_params,&__pyx_n_s_time,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_evaluate", 0, 2, 3, 1); __PYX_ERR(0, 466, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_evaluate") < 0)) __PYX_ERR(0, 466, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_species = ((PyArrayObject *)values[0]);
    __pyx_v_params = ((PyArrayObject *)values[1]);
    if (values[2]) {
      __pyx_v_time = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 466, __pyx_L3_error)
    } else {
      __pyx_v_time = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_evaluate", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 466, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Term.py_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species), __pyx_ptype_5numpy_ndarray, 1, "species", 0))) __PYX_ERR(0, 466, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), __pyx_ptype_5numpy_ndarray, 1, "params", 0))) __PYX_ERR(0, 466, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_4Term_py_evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_v_self), __pyx_v_species, __pyx_v_params, __pyx_v_time);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4Term_py_evaluate(struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self, PyArrayObject *__pyx_v_species, PyArrayObject *__pyx_v_params, double __pyx_v_time) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_evaluate", 0);

  /* "bioscrape/types.pyx":467
 * 
 *     def py_evaluate(self, np.ndarray species, np.ndarray params, double time=0.0):
 *         return self.evaluate(<double*> species.data, <double*> params.data, time)             # <<<<<<<<<<<<<<
 * 
 *     def py_volume_evaluate(self, np.ndarray species, np.ndarray params,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->__pyx_vtab)->evaluate(__pyx_v_self, ((double *)__pyx_v_species->data), ((double *)__pyx_v_params->data), __pyx_v_time)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":466
 * 
 * 
 *     def py_evaluate(self, np.ndarray species, np.ndarray params, double time=0.0):             # <<<<<<<<<<<<<<
 *         return self.evaluate(<double*> species.data, <double*> params.data, time)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Term.py_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":469
 *         return self.evaluate(<double*> species.data, <double*> params.data, time)
 * 
 *     def py_volume_evaluate(self, np.ndarray species, np.ndarray params,             # <<<<<<<<<<<<<<
 *                            double vol, double time=0.0):
 *         return self.volume_evaluate(<double*> species.data, <double*> params.data,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_4Term_3py_volume_evaluate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_4Term_3py_volume_evaluate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_species = 0;
  PyArrayObject *__pyx_v_params = 0;
  double __pyx_v_vol;
  double __pyx_v_time;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_volume_evaluate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_species,&__pyx_n_s_params,&__pyx_n_s_vol,&__pyx_n_s_time,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_volume_evaluate", 0, 3, 4, 1); __PYX_ERR(0, 469, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_volume_evaluate", 0, 3, 4, 2); __PYX_ERR(0, 469, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_volume_evaluate") < 0)) __PYX_ERR(0, 469, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_species = ((PyArrayObject *)values[0]);
    __pyx_v_params = ((PyArrayObject *)values[1]);
    __pyx_v_vol = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_vol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 470, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_time = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 470, __pyx_L3_error)
    } else {
      __pyx_v_time = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_volume_evaluate", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 469, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Term.py_volume_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species), __pyx_ptype_5numpy_ndarray, 1, "species", 0))) __PYX_ERR(0, 469, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), __pyx_ptype_5numpy_ndarray, 1, "params", 0))) __PYX_ERR(0, 469, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_4Term_2py_volume_evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_v_self), __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4Term_2py_volume_evaluate(struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self, PyArrayObject *__pyx_v_species, PyArrayObject *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_volume_evaluate", 0);

  /* "bioscrape/types.pyx":471
 *     def py_volume_evaluate(self, np.ndarray species, np.ndarray params,
 *                            double vol, double time=0.0):
 *         return self.volume_evaluate(<double*> species.data, <double*> params.data,             # <<<<<<<<<<<<<<
 *                                     vol, time)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "bioscrape/types.pyx":472
 *                            double vol, double time=0.0):
 *         return self.volume_evaluate(<double*> species.data, <double*> params.data,
 *                                     vol, time)             # <<<<<<<<<<<<<<
 * 
 * # Base building blocks
 */
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->__pyx_vtab)->volume_evaluate(__pyx_v_self, ((double *)__pyx_v_species->data), ((double *)__pyx_v_params->data), __pyx_v_vol, __pyx_v_time)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":469
 *         return self.evaluate(<double*> species.data, <double*> params.data, time)
 * 
 *     def py_volume_evaluate(self, np.ndarray species, np.ndarray params,             # <<<<<<<<<<<<<<
 *                            double vol, double time=0.0):
 *         return self.volume_evaluate(<double*> species.data, <double*> params.data,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Term.py_volume_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_4Term_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_4Term_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_4Term_4__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4Term_4__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Term, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Term, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Term, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Term, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Term); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Term, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Term, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_Term, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Term__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Term); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Term.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Term, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Term__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_4Term_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_4Term_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_4Term_6__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4Term_6__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Term, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Term__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_Term__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Term, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Term__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Term.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":478
 * cdef class ConstantTerm(Term):
 * 
 *     def __init__(self, double val):             # <<<<<<<<<<<<<<
 *         self.value = val
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_12ConstantTerm_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_12ConstantTerm_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_val;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 478, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 478, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 478, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.ConstantTerm.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_12ConstantTerm___init__(((struct __pyx_obj_9bioscrape_5types_ConstantTerm *)__pyx_v_self), __pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_12ConstantTerm___init__(struct __pyx_obj_9bioscrape_5types_ConstantTerm *__pyx_v_self, double __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":479
 * 
 *     def __init__(self, double val):
 *         self.value = val             # <<<<<<<<<<<<<<
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 */
  __pyx_v_self->value = __pyx_v_val;

  /* "bioscrape/types.pyx":478
 * cdef class ConstantTerm(Term):
 * 
 *     def __init__(self, double val):             # <<<<<<<<<<<<<<
 *         self.value = val
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":481
 *         self.value = val
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return self.value
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */

static double __pyx_f_9bioscrape_5types_12ConstantTerm_evaluate(struct __pyx_obj_9bioscrape_5types_ConstantTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":482
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return self.value             # <<<<<<<<<<<<<<
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return self.value
 */
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":481
 *         self.value = val
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return self.value
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":483
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return self.value
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return self.value
 * 
 */

static double __pyx_f_9bioscrape_5types_12ConstantTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_ConstantTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_vol, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":484
 *         return self.value
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return self.value             # <<<<<<<<<<<<<<
 * 
 * @cython.auto_pickle(True)
 */
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":483
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return self.value
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return self.value
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_12ConstantTerm_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_12ConstantTerm_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_12ConstantTerm_2__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_ConstantTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_12ConstantTerm_2__reduce_cython__(struct __pyx_obj_9bioscrape_5types_ConstantTerm *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.value,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.value,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.value,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.value,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ConstantTerm, (type(self), 0x2063c16, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ConstantTerm, (type(self), 0x2063c16, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_ConstantTerm, (type(self), 0x2063c16, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ConstantTerm, (type(self), 0x2063c16, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_ConstantTerm); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_33963030);
    __Pyx_GIVEREF(__pyx_int_33963030);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_33963030);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ConstantTerm, (type(self), 0x2063c16, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ConstantTerm, (type(self), 0x2063c16, None), state
 *     else:
 *         return __pyx_unpickle_ConstantTerm, (type(self), 0x2063c16, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ConstantTerm__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_ConstantTerm); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_33963030);
    __Pyx_GIVEREF(__pyx_int_33963030);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_33963030);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.ConstantTerm.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ConstantTerm, (type(self), 0x2063c16, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ConstantTerm__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_12ConstantTerm_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_12ConstantTerm_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_12ConstantTerm_4__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_ConstantTerm *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_12ConstantTerm_4__setstate_cython__(struct __pyx_obj_9bioscrape_5types_ConstantTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ConstantTerm, (type(self), 0x2063c16, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ConstantTerm__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_ConstantTerm__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ConstantTerm, (type(self), 0x2063c16, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ConstantTerm__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.ConstantTerm.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":488
 * @cython.auto_pickle(True)
 * cdef class SpeciesTerm(Term):
 *     def __init__(self, unsigned ind):             # <<<<<<<<<<<<<<
 *         self.index = ind
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_11SpeciesTerm_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_11SpeciesTerm_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_ind;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ind,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ind)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 488, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ind = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_ind == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 488, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.SpeciesTerm.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_11SpeciesTerm___init__(((struct __pyx_obj_9bioscrape_5types_SpeciesTerm *)__pyx_v_self), __pyx_v_ind);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_11SpeciesTerm___init__(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *__pyx_v_self, unsigned int __pyx_v_ind) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":489
 * cdef class SpeciesTerm(Term):
 *     def __init__(self, unsigned ind):
 *         self.index = ind             # <<<<<<<<<<<<<<
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 */
  __pyx_v_self->index = __pyx_v_ind;

  /* "bioscrape/types.pyx":488
 * @cython.auto_pickle(True)
 * cdef class SpeciesTerm(Term):
 *     def __init__(self, unsigned ind):             # <<<<<<<<<<<<<<
 *         self.index = ind
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":491
 *         self.index = ind
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return species[self.index]
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */

static double __pyx_f_9bioscrape_5types_11SpeciesTerm_evaluate(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *__pyx_v_self, double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":492
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return species[self.index]             # <<<<<<<<<<<<<<
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return species[self.index]
 */
  __pyx_r = (__pyx_v_species[__pyx_v_self->index]);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":491
 *         self.index = ind
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return species[self.index]
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":493
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return species[self.index]
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return species[self.index]
 * 
 */

static double __pyx_f_9bioscrape_5types_11SpeciesTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *__pyx_v_self, double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_vol, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":494
 *         return species[self.index]
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return species[self.index]             # <<<<<<<<<<<<<<
 * 
 * @cython.auto_pickle(True)
 */
  __pyx_r = (__pyx_v_species[__pyx_v_self->index]);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":493
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return species[self.index]
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return species[self.index]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_11SpeciesTerm_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_11SpeciesTerm_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_11SpeciesTerm_2__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_SpeciesTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_11SpeciesTerm_2__reduce_cython__(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.index,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.index,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.index,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.index,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_SpeciesTerm, (type(self), 0x6a992d5, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SpeciesTerm, (type(self), 0x6a992d5, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_SpeciesTerm, (type(self), 0x6a992d5, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_SpeciesTerm, (type(self), 0x6a992d5, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_SpeciesTerm); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_111776469);
    __Pyx_GIVEREF(__pyx_int_111776469);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_111776469);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SpeciesTerm, (type(self), 0x6a992d5, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_SpeciesTerm, (type(self), 0x6a992d5, None), state
 *     else:
 *         return __pyx_unpickle_SpeciesTerm, (type(self), 0x6a992d5, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SpeciesTerm__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_SpeciesTerm); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_111776469);
    __Pyx_GIVEREF(__pyx_int_111776469);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_111776469);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.SpeciesTerm.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SpeciesTerm, (type(self), 0x6a992d5, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SpeciesTerm__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_11SpeciesTerm_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_11SpeciesTerm_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_11SpeciesTerm_4__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_SpeciesTerm *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_11SpeciesTerm_4__setstate_cython__(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_SpeciesTerm, (type(self), 0x6a992d5, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SpeciesTerm__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_SpeciesTerm__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SpeciesTerm, (type(self), 0x6a992d5, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SpeciesTerm__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.SpeciesTerm.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":498
 * @cython.auto_pickle(True)
 * cdef class ParameterTerm(Term):
 *     def __init__(self, unsigned ind):             # <<<<<<<<<<<<<<
 *         self.index = ind
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_13ParameterTerm_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_13ParameterTerm_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_ind;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ind,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ind)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 498, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ind = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_ind == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 498, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 498, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.ParameterTerm.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_13ParameterTerm___init__(((struct __pyx_obj_9bioscrape_5types_ParameterTerm *)__pyx_v_self), __pyx_v_ind);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_13ParameterTerm___init__(struct __pyx_obj_9bioscrape_5types_ParameterTerm *__pyx_v_self, unsigned int __pyx_v_ind) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":499
 * cdef class ParameterTerm(Term):
 *     def __init__(self, unsigned ind):
 *         self.index = ind             # <<<<<<<<<<<<<<
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 */
  __pyx_v_self->index = __pyx_v_ind;

  /* "bioscrape/types.pyx":498
 * @cython.auto_pickle(True)
 * cdef class ParameterTerm(Term):
 *     def __init__(self, unsigned ind):             # <<<<<<<<<<<<<<
 *         self.index = ind
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":501
 *         self.index = ind
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return params[self.index]
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */

static double __pyx_f_9bioscrape_5types_13ParameterTerm_evaluate(struct __pyx_obj_9bioscrape_5types_ParameterTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":502
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return params[self.index]             # <<<<<<<<<<<<<<
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return params[self.index]
 */
  __pyx_r = (__pyx_v_params[__pyx_v_self->index]);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":501
 *         self.index = ind
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return params[self.index]
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":503
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return params[self.index]
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return params[self.index]
 * 
 */

static double __pyx_f_9bioscrape_5types_13ParameterTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_ParameterTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_vol, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":504
 *         return params[self.index]
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return params[self.index]             # <<<<<<<<<<<<<<
 * 
 * cdef class VolumeTerm(Term):
 */
  __pyx_r = (__pyx_v_params[__pyx_v_self->index]);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":503
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return params[self.index]
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return params[self.index]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_13ParameterTerm_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_13ParameterTerm_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_13ParameterTerm_2__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_ParameterTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_13ParameterTerm_2__reduce_cython__(struct __pyx_obj_9bioscrape_5types_ParameterTerm *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.index,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.index,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.index,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.index,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ParameterTerm, (type(self), 0x6a992d5, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ParameterTerm, (type(self), 0x6a992d5, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_ParameterTerm, (type(self), 0x6a992d5, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ParameterTerm, (type(self), 0x6a992d5, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_ParameterTerm); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_111776469);
    __Pyx_GIVEREF(__pyx_int_111776469);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_111776469);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ParameterTerm, (type(self), 0x6a992d5, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ParameterTerm, (type(self), 0x6a992d5, None), state
 *     else:
 *         return __pyx_unpickle_ParameterTerm, (type(self), 0x6a992d5, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ParameterTerm__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_ParameterTerm); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_111776469);
    __Pyx_GIVEREF(__pyx_int_111776469);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_111776469);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.ParameterTerm.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ParameterTerm, (type(self), 0x6a992d5, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ParameterTerm__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_13ParameterTerm_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_13ParameterTerm_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_13ParameterTerm_4__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_ParameterTerm *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_13ParameterTerm_4__setstate_cython__(struct __pyx_obj_9bioscrape_5types_ParameterTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ParameterTerm, (type(self), 0x6a992d5, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ParameterTerm__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_ParameterTerm__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ParameterTerm, (type(self), 0x6a992d5, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ParameterTerm__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.ParameterTerm.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":507
 * 
 * cdef class VolumeTerm(Term):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return 1.0
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */

static double __pyx_f_9bioscrape_5types_10VolumeTerm_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_VolumeTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":508
 * cdef class VolumeTerm(Term):
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return 1.0             # <<<<<<<<<<<<<<
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return vol
 */
  __pyx_r = 1.0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":507
 * 
 * cdef class VolumeTerm(Term):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return 1.0
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":509
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return 1.0
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return vol
 * 
 */

static double __pyx_f_9bioscrape_5types_10VolumeTerm_volume_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_VolumeTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, double __pyx_v_vol, CYTHON_UNUSED double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":510
 *         return 1.0
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return vol             # <<<<<<<<<<<<<<
 * 
 * # Putting stuff together
 */
  __pyx_r = __pyx_v_vol;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":509
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return 1.0
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return vol
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10VolumeTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10VolumeTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_10VolumeTerm___reduce_cython__(((struct __pyx_obj_9bioscrape_5types_VolumeTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10VolumeTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_VolumeTerm *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_VolumeTerm, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_VolumeTerm, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_VolumeTerm, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_VolumeTerm, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_VolumeTerm); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_VolumeTerm, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_VolumeTerm, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_VolumeTerm, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_VolumeTerm__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_VolumeTerm); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.VolumeTerm.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_VolumeTerm, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_VolumeTerm__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10VolumeTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10VolumeTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_10VolumeTerm_2__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_VolumeTerm *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10VolumeTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_VolumeTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_VolumeTerm, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_VolumeTerm__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_VolumeTerm__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_VolumeTerm, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_VolumeTerm__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.VolumeTerm.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":523
 * #   but that resulted in mysterious errors about calling unsafe __new__()
 * #   methods, which I couldn't resolve. Sorry. =(
 * def restore_binary_term(state, ClassName):             # <<<<<<<<<<<<<<
 *     new_term = ClassName()
 *     if state is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_1restore_binary_term(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_1restore_binary_term = {"restore_binary_term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_1restore_binary_term, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_1restore_binary_term(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v_ClassName = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore_binary_term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_state,&__pyx_n_s_ClassName,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ClassName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("restore_binary_term", 1, 2, 2, 1); __PYX_ERR(0, 523, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "restore_binary_term") < 0)) __PYX_ERR(0, 523, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_state = values[0];
    __pyx_v_ClassName = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("restore_binary_term", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 523, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.restore_binary_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_restore_binary_term(__pyx_self, __pyx_v_state, __pyx_v_ClassName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_restore_binary_term(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_state, PyObject *__pyx_v_ClassName) {
  PyObject *__pyx_v_new_term = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("restore_binary_term", 0);

  /* "bioscrape/types.pyx":524
 * #   methods, which I couldn't resolve. Sorry. =(
 * def restore_binary_term(state, ClassName):
 *     new_term = ClassName()             # <<<<<<<<<<<<<<
 *     if state is not None:
 *         for i, x in enumerate(state):
 */
  __Pyx_INCREF(__pyx_v_ClassName);
  __pyx_t_2 = __pyx_v_ClassName; __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_new_term = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":525
 * def restore_binary_term(state, ClassName):
 *     new_term = ClassName()
 *     if state is not None:             # <<<<<<<<<<<<<<
 *         for i, x in enumerate(state):
 *             new_term.py_add_term(x)
 */
  __pyx_t_4 = (__pyx_v_state != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":526
 *     new_term = ClassName()
 *     if state is not None:
 *         for i, x in enumerate(state):             # <<<<<<<<<<<<<<
 *             new_term.py_add_term(x)
 *     return new_term
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_1 = __pyx_int_0;
    if (likely(PyList_CheckExact(__pyx_v_state)) || PyTuple_CheckExact(__pyx_v_state)) {
      __pyx_t_2 = __pyx_v_state; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 526, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 526, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 526, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 526, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1);
      __pyx_t_1 = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "bioscrape/types.pyx":527
 *     if state is not None:
 *         for i, x in enumerate(state):
 *             new_term.py_add_term(x)             # <<<<<<<<<<<<<<
 *     return new_term
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_term, __pyx_n_s_py_add_term); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_v_x) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_x);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "bioscrape/types.pyx":526
 *     new_term = ClassName()
 *     if state is not None:
 *         for i, x in enumerate(state):             # <<<<<<<<<<<<<<
 *             new_term.py_add_term(x)
 *     return new_term
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":525
 * def restore_binary_term(state, ClassName):
 *     new_term = ClassName()
 *     if state is not None:             # <<<<<<<<<<<<<<
 *         for i, x in enumerate(state):
 *             new_term.py_add_term(x)
 */
  }

  /* "bioscrape/types.pyx":528
 *         for i, x in enumerate(state):
 *             new_term.py_add_term(x)
 *     return new_term             # <<<<<<<<<<<<<<
 * 
 * cdef class BinaryTerm(Term):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_new_term);
  __pyx_r = __pyx_v_new_term;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":523
 * #   but that resulted in mysterious errors about calling unsafe __new__()
 * #   methods, which I couldn't resolve. Sorry. =(
 * def restore_binary_term(state, ClassName):             # <<<<<<<<<<<<<<
 *     new_term = ClassName()
 *     if state is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.restore_binary_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_new_term);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":531
 * 
 * cdef class BinaryTerm(Term):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.terms_list = []
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_10BinaryTerm_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_10BinaryTerm_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_10BinaryTerm___init__(((struct __pyx_obj_9bioscrape_5types_BinaryTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_10BinaryTerm___init__(struct __pyx_obj_9bioscrape_5types_BinaryTerm *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":532
 * cdef class BinaryTerm(Term):
 *     def __init__(self):
 *         self.terms_list = []             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->terms_list);
  __Pyx_DECREF(__pyx_v_self->terms_list);
  __pyx_v_self->terms_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":531
 * 
 * cdef class BinaryTerm(Term):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.terms_list = []
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.BinaryTerm.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":534
 *         self.terms_list = []
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (restore_binary_term, (self.terms_list, self.__class__))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10BinaryTerm_3__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10BinaryTerm_3__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_10BinaryTerm_2__reduce__(((struct __pyx_obj_9bioscrape_5types_BinaryTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10BinaryTerm_2__reduce__(struct __pyx_obj_9bioscrape_5types_BinaryTerm *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "bioscrape/types.pyx":535
 * 
 *     def __reduce__(self):
 *         return (restore_binary_term, (self.terms_list, self.__class__))             # <<<<<<<<<<<<<<
 * 
 *     cdef void add_term(self,Term trm):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_restore_binary_term); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->terms_list);
  __Pyx_GIVEREF(__pyx_v_self->terms_list);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->terms_list);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":534
 *         self.terms_list = []
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (restore_binary_term, (self.terms_list, self.__class__))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.BinaryTerm.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":537
 *         return (restore_binary_term, (self.terms_list, self.__class__))
 * 
 *     cdef void add_term(self,Term trm):             # <<<<<<<<<<<<<<
 *         self.terms.push_back(<void*> trm)
 *         self.terms_list.append(trm)
 */

static void __pyx_f_9bioscrape_5types_10BinaryTerm_add_term(struct __pyx_obj_9bioscrape_5types_BinaryTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_trm) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("add_term", 0);

  /* "bioscrape/types.pyx":538
 * 
 *     cdef void add_term(self,Term trm):
 *         self.terms.push_back(<void*> trm)             # <<<<<<<<<<<<<<
 *         self.terms_list.append(trm)
 * 
 */
  __pyx_v_self->terms.push_back(((void *)__pyx_v_trm));

  /* "bioscrape/types.pyx":539
 *     cdef void add_term(self,Term trm):
 *         self.terms.push_back(<void*> trm)
 *         self.terms_list.append(trm)             # <<<<<<<<<<<<<<
 * 
 *     def py_add_term(self, Term trm):
 */
  if (unlikely(__pyx_v_self->terms_list == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 539, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Append(__pyx_v_self->terms_list, ((PyObject *)__pyx_v_trm)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 539, __pyx_L1_error)

  /* "bioscrape/types.pyx":537
 *         return (restore_binary_term, (self.terms_list, self.__class__))
 * 
 *     cdef void add_term(self,Term trm):             # <<<<<<<<<<<<<<
 *         self.terms.push_back(<void*> trm)
 *         self.terms_list.append(trm)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("bioscrape.types.BinaryTerm.add_term", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":541
 *         self.terms_list.append(trm)
 * 
 *     def py_add_term(self, Term trm):             # <<<<<<<<<<<<<<
 *         self.add_term(trm)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10BinaryTerm_5py_add_term(PyObject *__pyx_v_self, PyObject *__pyx_v_trm); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10BinaryTerm_5py_add_term(PyObject *__pyx_v_self, PyObject *__pyx_v_trm) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_add_term (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trm), __pyx_ptype_9bioscrape_5types_Term, 1, "trm", 0))) __PYX_ERR(0, 541, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_10BinaryTerm_4py_add_term(((struct __pyx_obj_9bioscrape_5types_BinaryTerm *)__pyx_v_self), ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_v_trm));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10BinaryTerm_4py_add_term(struct __pyx_obj_9bioscrape_5types_BinaryTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_trm) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_add_term", 0);

  /* "bioscrape/types.pyx":542
 * 
 *     def py_add_term(self, Term trm):
 *         self.add_term(trm)             # <<<<<<<<<<<<<<
 * 
 * cdef class SumTerm(BinaryTerm):
 */
  ((struct __pyx_vtabstruct_9bioscrape_5types_BinaryTerm *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_term(__pyx_v_self, __pyx_v_trm);

  /* "bioscrape/types.pyx":541
 *         self.terms_list.append(trm)
 * 
 *     def py_add_term(self, Term trm):             # <<<<<<<<<<<<<<
 *         self.add_term(trm)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":545
 * 
 * cdef class SumTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = 0.0
 *         cdef unsigned i
 */

static double __pyx_f_9bioscrape_5types_7SumTerm_evaluate(struct __pyx_obj_9bioscrape_5types_SumTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_v_ans;
  unsigned int __pyx_v_i;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  unsigned int __pyx_t_3;
  void *__pyx_t_4;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":546
 * cdef class SumTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         cdef double ans = 0.0             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         for i in range(self.terms.size()):
 */
  __pyx_v_ans = 0.0;

  /* "bioscrape/types.pyx":548
 *         cdef double ans = 0.0
 *         cdef unsigned i
 *         for i in range(self.terms.size()):             # <<<<<<<<<<<<<<
 *             ans += (<Term>(self.terms[i])).evaluate(species, params, time)
 *         return ans
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.terms.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "bioscrape/types.pyx":549
 *         cdef unsigned i
 *         for i in range(self.terms.size()):
 *             ans += (<Term>(self.terms[i])).evaluate(species, params, time)             # <<<<<<<<<<<<<<
 *         return ans
 * 
 */
    __pyx_t_4 = (__pyx_v_self->__pyx_base.terms[__pyx_v_i]);
    __pyx_v_ans = (__pyx_v_ans + ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_4)->__pyx_vtab)->evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_4), __pyx_v_species, __pyx_v_params, __pyx_v_time));
  }

  /* "bioscrape/types.pyx":550
 *         for i in range(self.terms.size()):
 *             ans += (<Term>(self.terms[i])).evaluate(species, params, time)
 *         return ans             # <<<<<<<<<<<<<<
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":545
 * 
 * cdef class SumTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = 0.0
 *         cdef unsigned i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":552
 *         return ans
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = 0.0
 *         cdef unsigned i
 */

static double __pyx_f_9bioscrape_5types_7SumTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_SumTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time) {
  double __pyx_v_ans;
  unsigned int __pyx_v_i;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  unsigned int __pyx_t_3;
  void *__pyx_t_4;
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":553
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         cdef double ans = 0.0             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         for i in range(self.terms.size()):
 */
  __pyx_v_ans = 0.0;

  /* "bioscrape/types.pyx":555
 *         cdef double ans = 0.0
 *         cdef unsigned i
 *         for i in range(self.terms.size()):             # <<<<<<<<<<<<<<
 *             ans += (<Term>(self.terms[i])).volume_evaluate(species,params,vol, time)
 *         return ans
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.terms.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "bioscrape/types.pyx":556
 *         cdef unsigned i
 *         for i in range(self.terms.size()):
 *             ans += (<Term>(self.terms[i])).volume_evaluate(species,params,vol, time)             # <<<<<<<<<<<<<<
 *         return ans
 * 
 */
    __pyx_t_4 = (__pyx_v_self->__pyx_base.terms[__pyx_v_i]);
    __pyx_v_ans = (__pyx_v_ans + ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_4)->__pyx_vtab)->volume_evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_4), __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time));
  }

  /* "bioscrape/types.pyx":557
 *         for i in range(self.terms.size()):
 *             ans += (<Term>(self.terms[i])).volume_evaluate(species,params,vol, time)
 *         return ans             # <<<<<<<<<<<<<<
 * 
 * cdef class ProductTerm(BinaryTerm):
 */
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":552
 *         return ans
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = 0.0
 *         cdef unsigned i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":560
 * 
 * cdef class ProductTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = 1.0
 *         cdef unsigned i
 */

static double __pyx_f_9bioscrape_5types_11ProductTerm_evaluate(struct __pyx_obj_9bioscrape_5types_ProductTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_v_ans;
  unsigned int __pyx_v_i;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  unsigned int __pyx_t_3;
  void *__pyx_t_4;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":561
 * cdef class ProductTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         cdef double ans = 1.0             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         for i in range(self.terms.size()):
 */
  __pyx_v_ans = 1.0;

  /* "bioscrape/types.pyx":563
 *         cdef double ans = 1.0
 *         cdef unsigned i
 *         for i in range(self.terms.size()):             # <<<<<<<<<<<<<<
 *             ans *= (<Term>(self.terms[i])).evaluate(species, params,time)
 *         return ans
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.terms.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "bioscrape/types.pyx":564
 *         cdef unsigned i
 *         for i in range(self.terms.size()):
 *             ans *= (<Term>(self.terms[i])).evaluate(species, params,time)             # <<<<<<<<<<<<<<
 *         return ans
 * 
 */
    __pyx_t_4 = (__pyx_v_self->__pyx_base.terms[__pyx_v_i]);
    __pyx_v_ans = (__pyx_v_ans * ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_4)->__pyx_vtab)->evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_4), __pyx_v_species, __pyx_v_params, __pyx_v_time));
  }

  /* "bioscrape/types.pyx":565
 *         for i in range(self.terms.size()):
 *             ans *= (<Term>(self.terms[i])).evaluate(species, params,time)
 *         return ans             # <<<<<<<<<<<<<<
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":560
 * 
 * cdef class ProductTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = 1.0
 *         cdef unsigned i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":567
 *         return ans
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = 1.0
 *         cdef unsigned i
 */

static double __pyx_f_9bioscrape_5types_11ProductTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_ProductTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time) {
  double __pyx_v_ans;
  unsigned int __pyx_v_i;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  unsigned int __pyx_t_3;
  void *__pyx_t_4;
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":568
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         cdef double ans = 1.0             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         for i in range(self.terms.size()):
 */
  __pyx_v_ans = 1.0;

  /* "bioscrape/types.pyx":570
 *         cdef double ans = 1.0
 *         cdef unsigned i
 *         for i in range(self.terms.size()):             # <<<<<<<<<<<<<<
 *             ans *= (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 *         return ans
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.terms.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "bioscrape/types.pyx":571
 *         cdef unsigned i
 *         for i in range(self.terms.size()):
 *             ans *= (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)             # <<<<<<<<<<<<<<
 *         return ans
 * 
 */
    __pyx_t_4 = (__pyx_v_self->__pyx_base.terms[__pyx_v_i]);
    __pyx_v_ans = (__pyx_v_ans * ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_4)->__pyx_vtab)->volume_evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_4), __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time));
  }

  /* "bioscrape/types.pyx":572
 *         for i in range(self.terms.size()):
 *             ans *= (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 *         return ans             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":567
 *         return ans
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = 1.0
 *         cdef unsigned i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":576
 * 
 * cdef class MaxTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = (<Term>(self.terms[0])).evaluate(species, params,time)
 *         cdef unsigned i
 */

static double __pyx_f_9bioscrape_5types_7MaxTerm_evaluate(struct __pyx_obj_9bioscrape_5types_MaxTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_v_ans;
  unsigned int __pyx_v_i;
  double __pyx_v_temp;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":577
 * cdef class MaxTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         cdef double ans = (<Term>(self.terms[0])).evaluate(species, params,time)             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         cdef double temp = 0
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.terms[0]);
  __pyx_v_ans = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1)->__pyx_vtab)->evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1), __pyx_v_species, __pyx_v_params, __pyx_v_time);

  /* "bioscrape/types.pyx":579
 *         cdef double ans = (<Term>(self.terms[0])).evaluate(species, params,time)
 *         cdef unsigned i
 *         cdef double temp = 0             # <<<<<<<<<<<<<<
 *         for i in range(1,self.terms.size()):
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)
 */
  __pyx_v_temp = 0.0;

  /* "bioscrape/types.pyx":580
 *         cdef unsigned i
 *         cdef double temp = 0
 *         for i in range(1,self.terms.size()):             # <<<<<<<<<<<<<<
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)
 *             if temp > ans:
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.terms.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "bioscrape/types.pyx":581
 *         cdef double temp = 0
 *         for i in range(1,self.terms.size()):
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)             # <<<<<<<<<<<<<<
 *             if temp > ans:
 *                 ans = temp
 */
    __pyx_t_1 = (__pyx_v_self->__pyx_base.terms[__pyx_v_i]);
    __pyx_v_temp = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1)->__pyx_vtab)->evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1), __pyx_v_species, __pyx_v_params, __pyx_v_time);

    /* "bioscrape/types.pyx":582
 *         for i in range(1,self.terms.size()):
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)
 *             if temp > ans:             # <<<<<<<<<<<<<<
 *                 ans = temp
 * 
 */
    __pyx_t_5 = ((__pyx_v_temp > __pyx_v_ans) != 0);
    if (__pyx_t_5) {

      /* "bioscrape/types.pyx":583
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)
 *             if temp > ans:
 *                 ans = temp             # <<<<<<<<<<<<<<
 * 
 *         return ans
 */
      __pyx_v_ans = __pyx_v_temp;

      /* "bioscrape/types.pyx":582
 *         for i in range(1,self.terms.size()):
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)
 *             if temp > ans:             # <<<<<<<<<<<<<<
 *                 ans = temp
 * 
 */
    }
  }

  /* "bioscrape/types.pyx":585
 *                 ans = temp
 * 
 *         return ans             # <<<<<<<<<<<<<<
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":576
 * 
 * cdef class MaxTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = (<Term>(self.terms[0])).evaluate(species, params,time)
 *         cdef unsigned i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":587
 *         return ans
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = (<Term>(self.terms[0])).volume_evaluate(species,params,vol,time)
 *         cdef unsigned i
 */

static double __pyx_f_9bioscrape_5types_7MaxTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_MaxTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time) {
  double __pyx_v_ans;
  unsigned int __pyx_v_i;
  double __pyx_v_temp;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":588
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         cdef double ans = (<Term>(self.terms[0])).volume_evaluate(species,params,vol,time)             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         cdef double temp = 0
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.terms[0]);
  __pyx_v_ans = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1)->__pyx_vtab)->volume_evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1), __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time);

  /* "bioscrape/types.pyx":590
 *         cdef double ans = (<Term>(self.terms[0])).volume_evaluate(species,params,vol,time)
 *         cdef unsigned i
 *         cdef double temp = 0             # <<<<<<<<<<<<<<
 *         for i in range(1,self.terms.size()):
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 */
  __pyx_v_temp = 0.0;

  /* "bioscrape/types.pyx":591
 *         cdef unsigned i
 *         cdef double temp = 0
 *         for i in range(1,self.terms.size()):             # <<<<<<<<<<<<<<
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 *             if temp > ans:
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.terms.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "bioscrape/types.pyx":592
 *         cdef double temp = 0
 *         for i in range(1,self.terms.size()):
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)             # <<<<<<<<<<<<<<
 *             if temp > ans:
 *                 ans = temp
 */
    __pyx_t_1 = (__pyx_v_self->__pyx_base.terms[__pyx_v_i]);
    __pyx_v_temp = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1)->__pyx_vtab)->volume_evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1), __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time);

    /* "bioscrape/types.pyx":593
 *         for i in range(1,self.terms.size()):
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 *             if temp > ans:             # <<<<<<<<<<<<<<
 *                 ans = temp
 *         return ans
 */
    __pyx_t_5 = ((__pyx_v_temp > __pyx_v_ans) != 0);
    if (__pyx_t_5) {

      /* "bioscrape/types.pyx":594
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 *             if temp > ans:
 *                 ans = temp             # <<<<<<<<<<<<<<
 *         return ans
 * 
 */
      __pyx_v_ans = __pyx_v_temp;

      /* "bioscrape/types.pyx":593
 *         for i in range(1,self.terms.size()):
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 *             if temp > ans:             # <<<<<<<<<<<<<<
 *                 ans = temp
 *         return ans
 */
    }
  }

  /* "bioscrape/types.pyx":595
 *             if temp > ans:
 *                 ans = temp
 *         return ans             # <<<<<<<<<<<<<<
 * 
 * cdef class MinTerm(BinaryTerm):
 */
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":587
 *         return ans
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = (<Term>(self.terms[0])).volume_evaluate(species,params,vol,time)
 *         cdef unsigned i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":598
 * 
 * cdef class MinTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = (<Term>(self.terms[0])).evaluate(species, params,time)
 *         cdef unsigned i
 */

static double __pyx_f_9bioscrape_5types_7MinTerm_evaluate(struct __pyx_obj_9bioscrape_5types_MinTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_v_ans;
  unsigned int __pyx_v_i;
  double __pyx_v_temp;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":599
 * cdef class MinTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         cdef double ans = (<Term>(self.terms[0])).evaluate(species, params,time)             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         cdef double temp = 0
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.terms[0]);
  __pyx_v_ans = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1)->__pyx_vtab)->evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1), __pyx_v_species, __pyx_v_params, __pyx_v_time);

  /* "bioscrape/types.pyx":601
 *         cdef double ans = (<Term>(self.terms[0])).evaluate(species, params,time)
 *         cdef unsigned i
 *         cdef double temp = 0             # <<<<<<<<<<<<<<
 *         for i in range(1,self.terms.size()):
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)
 */
  __pyx_v_temp = 0.0;

  /* "bioscrape/types.pyx":602
 *         cdef unsigned i
 *         cdef double temp = 0
 *         for i in range(1,self.terms.size()):             # <<<<<<<<<<<<<<
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)
 *             if temp < ans:
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.terms.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "bioscrape/types.pyx":603
 *         cdef double temp = 0
 *         for i in range(1,self.terms.size()):
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)             # <<<<<<<<<<<<<<
 *             if temp < ans:
 *                 ans = temp
 */
    __pyx_t_1 = (__pyx_v_self->__pyx_base.terms[__pyx_v_i]);
    __pyx_v_temp = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1)->__pyx_vtab)->evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1), __pyx_v_species, __pyx_v_params, __pyx_v_time);

    /* "bioscrape/types.pyx":604
 *         for i in range(1,self.terms.size()):
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)
 *             if temp < ans:             # <<<<<<<<<<<<<<
 *                 ans = temp
 * 
 */
    __pyx_t_5 = ((__pyx_v_temp < __pyx_v_ans) != 0);
    if (__pyx_t_5) {

      /* "bioscrape/types.pyx":605
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)
 *             if temp < ans:
 *                 ans = temp             # <<<<<<<<<<<<<<
 * 
 *         return ans
 */
      __pyx_v_ans = __pyx_v_temp;

      /* "bioscrape/types.pyx":604
 *         for i in range(1,self.terms.size()):
 *             temp =  (<Term>(self.terms[i])).evaluate(species, params,time)
 *             if temp < ans:             # <<<<<<<<<<<<<<
 *                 ans = temp
 * 
 */
    }
  }

  /* "bioscrape/types.pyx":607
 *                 ans = temp
 * 
 *         return ans             # <<<<<<<<<<<<<<
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":598
 * 
 * cdef class MinTerm(BinaryTerm):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = (<Term>(self.terms[0])).evaluate(species, params,time)
 *         cdef unsigned i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":609
 *         return ans
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = (<Term>(self.terms[0])).volume_evaluate(species,params,vol,time)
 *         cdef unsigned i
 */

static double __pyx_f_9bioscrape_5types_7MinTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_MinTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time) {
  double __pyx_v_ans;
  unsigned int __pyx_v_i;
  double __pyx_v_temp;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":610
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         cdef double ans = (<Term>(self.terms[0])).volume_evaluate(species,params,vol,time)             # <<<<<<<<<<<<<<
 *         cdef unsigned i
 *         cdef double temp = 0
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.terms[0]);
  __pyx_v_ans = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1)->__pyx_vtab)->volume_evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1), __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time);

  /* "bioscrape/types.pyx":612
 *         cdef double ans = (<Term>(self.terms[0])).volume_evaluate(species,params,vol,time)
 *         cdef unsigned i
 *         cdef double temp = 0             # <<<<<<<<<<<<<<
 *         for i in range(1,self.terms.size()):
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 */
  __pyx_v_temp = 0.0;

  /* "bioscrape/types.pyx":613
 *         cdef unsigned i
 *         cdef double temp = 0
 *         for i in range(1,self.terms.size()):             # <<<<<<<<<<<<<<
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 *             if temp < ans:
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.terms.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "bioscrape/types.pyx":614
 *         cdef double temp = 0
 *         for i in range(1,self.terms.size()):
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)             # <<<<<<<<<<<<<<
 *             if temp < ans:
 *                 ans = temp
 */
    __pyx_t_1 = (__pyx_v_self->__pyx_base.terms[__pyx_v_i]);
    __pyx_v_temp = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1)->__pyx_vtab)->volume_evaluate(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1), __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time);

    /* "bioscrape/types.pyx":615
 *         for i in range(1,self.terms.size()):
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 *             if temp < ans:             # <<<<<<<<<<<<<<
 *                 ans = temp
 *         return ans
 */
    __pyx_t_5 = ((__pyx_v_temp < __pyx_v_ans) != 0);
    if (__pyx_t_5) {

      /* "bioscrape/types.pyx":616
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 *             if temp < ans:
 *                 ans = temp             # <<<<<<<<<<<<<<
 *         return ans
 * 
 */
      __pyx_v_ans = __pyx_v_temp;

      /* "bioscrape/types.pyx":615
 *         for i in range(1,self.terms.size()):
 *             temp = (<Term>(self.terms[i])).volume_evaluate(species,params,vol,time)
 *             if temp < ans:             # <<<<<<<<<<<<<<
 *                 ans = temp
 *         return ans
 */
    }
  }

  /* "bioscrape/types.pyx":617
 *             if temp < ans:
 *                 ans = temp
 *         return ans             # <<<<<<<<<<<<<<
 * 
 * @cython.auto_pickle(True)
 */
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":609
 *         return ans
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         cdef double ans = (<Term>(self.terms[0])).volume_evaluate(species,params,vol,time)
 *         cdef unsigned i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":621
 * @cython.auto_pickle(True)
 * cdef class PowerTerm(Term):
 *     cdef void set_base(self, Term base):             # <<<<<<<<<<<<<<
 *         self.base = base
 *     cdef void set_exponent(self, Term exponent):
 */

static void __pyx_f_9bioscrape_5types_9PowerTerm_set_base(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_base", 0);

  /* "bioscrape/types.pyx":622
 * cdef class PowerTerm(Term):
 *     cdef void set_base(self, Term base):
 *         self.base = base             # <<<<<<<<<<<<<<
 *     cdef void set_exponent(self, Term exponent):
 *         self.exponent = exponent
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_base));
  __Pyx_GOTREF(__pyx_v_self->base);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->base));
  __pyx_v_self->base = __pyx_v_base;

  /* "bioscrape/types.pyx":621
 * @cython.auto_pickle(True)
 * cdef class PowerTerm(Term):
 *     cdef void set_base(self, Term base):             # <<<<<<<<<<<<<<
 *         self.base = base
 *     cdef void set_exponent(self, Term exponent):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":623
 *     cdef void set_base(self, Term base):
 *         self.base = base
 *     cdef void set_exponent(self, Term exponent):             # <<<<<<<<<<<<<<
 *         self.exponent = exponent
 * 
 */

static void __pyx_f_9bioscrape_5types_9PowerTerm_set_exponent(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_exponent) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_exponent", 0);

  /* "bioscrape/types.pyx":624
 *         self.base = base
 *     cdef void set_exponent(self, Term exponent):
 *         self.exponent = exponent             # <<<<<<<<<<<<<<
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_exponent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_exponent));
  __Pyx_GOTREF(__pyx_v_self->exponent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->exponent));
  __pyx_v_self->exponent = __pyx_v_exponent;

  /* "bioscrape/types.pyx":623
 *     cdef void set_base(self, Term base):
 *         self.base = base
 *     cdef void set_exponent(self, Term exponent):             # <<<<<<<<<<<<<<
 *         self.exponent = exponent
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":626
 *         self.exponent = exponent
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return self.base.evaluate(species,params,time) ** \
 *                self.exponent.evaluate(species,params,time)
 */

static double __pyx_f_9bioscrape_5types_9PowerTerm_evaluate(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":627
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return self.base.evaluate(species,params,time) ** \             # <<<<<<<<<<<<<<
 *                self.exponent.evaluate(species,params,time)
 * 
 */
  __pyx_r = pow(((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->base->__pyx_vtab)->evaluate(__pyx_v_self->base, __pyx_v_species, __pyx_v_params, __pyx_v_time), ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->exponent->__pyx_vtab)->evaluate(__pyx_v_self->exponent, __pyx_v_species, __pyx_v_params, __pyx_v_time));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":626
 *         self.exponent = exponent
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return self.base.evaluate(species,params,time) ** \
 *                self.exponent.evaluate(species,params,time)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":630
 *                self.exponent.evaluate(species,params,time)
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return self.base.volume_evaluate(species,params,vol,time) ** \
 *                self.exponent.volume_evaluate(species,params,vol,time)
 */

static double __pyx_f_9bioscrape_5types_9PowerTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":631
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return self.base.volume_evaluate(species,params,vol,time) ** \             # <<<<<<<<<<<<<<
 *                self.exponent.volume_evaluate(species,params,vol,time)
 * 
 */
  __pyx_r = pow(((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->base->__pyx_vtab)->volume_evaluate(__pyx_v_self->base, __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time), ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->exponent->__pyx_vtab)->volume_evaluate(__pyx_v_self->exponent, __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":630
 *                self.exponent.evaluate(species,params,time)
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return self.base.volume_evaluate(species,params,vol,time) ** \
 *                self.exponent.volume_evaluate(species,params,vol,time)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_9PowerTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_9PowerTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_9PowerTerm___reduce_cython__(((struct __pyx_obj_9bioscrape_5types_PowerTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_9PowerTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.base, self.exponent)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->base));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->base));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->base));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->exponent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->exponent));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->exponent));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.base, self.exponent)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.base, self.exponent)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.base is not None or self.exponent is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.base, self.exponent)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.base is not None or self.exponent is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PowerTerm, (type(self), 0xe60425b, None), state
 */
  /*else*/ {
    __pyx_t_2 = (((PyObject *)__pyx_v_self->base) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->exponent) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.base is not None or self.exponent is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PowerTerm, (type(self), 0xe60425b, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.base is not None or self.exponent is not None
 *     if use_setstate:
 *         return __pyx_unpickle_PowerTerm, (type(self), 0xe60425b, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PowerTerm, (type(self), 0xe60425b, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PowerTerm); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_241189467);
    __Pyx_GIVEREF(__pyx_int_241189467);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_241189467);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.base is not None or self.exponent is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PowerTerm, (type(self), 0xe60425b, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PowerTerm, (type(self), 0xe60425b, None), state
 *     else:
 *         return __pyx_unpickle_PowerTerm, (type(self), 0xe60425b, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PowerTerm__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_PowerTerm); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_241189467);
    __Pyx_GIVEREF(__pyx_int_241189467);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_241189467);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bioscrape.types.PowerTerm.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PowerTerm, (type(self), 0xe60425b, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PowerTerm__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_9PowerTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_9PowerTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_9PowerTerm_2__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_PowerTerm *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_9PowerTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PowerTerm, (type(self), 0xe60425b, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PowerTerm__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_PowerTerm__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PowerTerm, (type(self), 0xe60425b, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PowerTerm__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.PowerTerm.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":636
 * @cython.auto_pickle(True)
 * cdef class ExpTerm(Term):
 *     cdef void set_arg(self, Term arg):             # <<<<<<<<<<<<<<
 *         self.arg = arg
 * 
 */

static void __pyx_f_9bioscrape_5types_7ExpTerm_set_arg(struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_arg) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_arg", 0);

  /* "bioscrape/types.pyx":637
 * cdef class ExpTerm(Term):
 *     cdef void set_arg(self, Term arg):
 *         self.arg = arg             # <<<<<<<<<<<<<<
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_arg));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg));
  __Pyx_GOTREF(__pyx_v_self->arg);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->arg));
  __pyx_v_self->arg = __pyx_v_arg;

  /* "bioscrape/types.pyx":636
 * @cython.auto_pickle(True)
 * cdef class ExpTerm(Term):
 *     cdef void set_arg(self, Term arg):             # <<<<<<<<<<<<<<
 *         self.arg = arg
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":639
 *         self.arg = arg
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return exp(self.arg.evaluate(species,params,time))
 * 
 */

static double __pyx_f_9bioscrape_5types_7ExpTerm_evaluate(struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":640
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return exp(self.arg.evaluate(species,params,time))             # <<<<<<<<<<<<<<
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */
  __pyx_r = exp(((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->arg->__pyx_vtab)->evaluate(__pyx_v_self->arg, __pyx_v_species, __pyx_v_params, __pyx_v_time));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":639
 *         self.arg = arg
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return exp(self.arg.evaluate(species,params,time))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":642
 *         return exp(self.arg.evaluate(species,params,time))
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return exp(self.arg.volume_evaluate(species,params,vol,time))
 * 
 */

static double __pyx_f_9bioscrape_5types_7ExpTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":643
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return exp(self.arg.volume_evaluate(species,params,vol,time))             # <<<<<<<<<<<<<<
 * 
 * @cython.auto_pickle(True)
 */
  __pyx_r = exp(((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->arg->__pyx_vtab)->volume_evaluate(__pyx_v_self->arg, __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":642
 *         return exp(self.arg.evaluate(species,params,time))
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return exp(self.arg.volume_evaluate(species,params,vol,time))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7ExpTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7ExpTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7ExpTerm___reduce_cython__(((struct __pyx_obj_9bioscrape_5types_ExpTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7ExpTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.arg,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->arg));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->arg));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->arg));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.arg is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.arg is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ExpTerm, (type(self), 0x61dd86c, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->arg) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.arg is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ExpTerm, (type(self), 0x61dd86c, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.arg is not None
 *     if use_setstate:
 *         return __pyx_unpickle_ExpTerm, (type(self), 0x61dd86c, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ExpTerm, (type(self), 0x61dd86c, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_ExpTerm); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_102619244);
    __Pyx_GIVEREF(__pyx_int_102619244);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_102619244);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.arg is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ExpTerm, (type(self), 0x61dd86c, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ExpTerm, (type(self), 0x61dd86c, None), state
 *     else:
 *         return __pyx_unpickle_ExpTerm, (type(self), 0x61dd86c, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ExpTerm__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_ExpTerm); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_102619244);
    __Pyx_GIVEREF(__pyx_int_102619244);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_102619244);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.ExpTerm.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ExpTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ExpTerm__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7ExpTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7ExpTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7ExpTerm_2__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_ExpTerm *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7ExpTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ExpTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ExpTerm__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_ExpTerm__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ExpTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ExpTerm__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.ExpTerm.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":647
 * @cython.auto_pickle(True)
 * cdef class LogTerm(Term):
 *     cdef void set_arg(self, Term arg):             # <<<<<<<<<<<<<<
 *         self.arg = arg
 * 
 */

static void __pyx_f_9bioscrape_5types_7LogTerm_set_arg(struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_arg) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_arg", 0);

  /* "bioscrape/types.pyx":648
 * cdef class LogTerm(Term):
 *     cdef void set_arg(self, Term arg):
 *         self.arg = arg             # <<<<<<<<<<<<<<
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_arg));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg));
  __Pyx_GOTREF(__pyx_v_self->arg);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->arg));
  __pyx_v_self->arg = __pyx_v_arg;

  /* "bioscrape/types.pyx":647
 * @cython.auto_pickle(True)
 * cdef class LogTerm(Term):
 *     cdef void set_arg(self, Term arg):             # <<<<<<<<<<<<<<
 *         self.arg = arg
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":650
 *         self.arg = arg
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return log(self.arg.evaluate(species,params,time))
 * 
 */

static double __pyx_f_9bioscrape_5types_7LogTerm_evaluate(struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":651
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return log(self.arg.evaluate(species,params,time))             # <<<<<<<<<<<<<<
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */
  __pyx_r = log(((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->arg->__pyx_vtab)->evaluate(__pyx_v_self->arg, __pyx_v_species, __pyx_v_params, __pyx_v_time));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":650
 *         self.arg = arg
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return log(self.arg.evaluate(species,params,time))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":653
 *         return log(self.arg.evaluate(species,params,time))
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return log(self.arg.volume_evaluate(species,params,vol,time))
 * 
 */

static double __pyx_f_9bioscrape_5types_7LogTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":654
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return log(self.arg.volume_evaluate(species,params,vol,time))             # <<<<<<<<<<<<<<
 * 
 * @cython.auto_pickle(True)
 */
  __pyx_r = log(((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->arg->__pyx_vtab)->volume_evaluate(__pyx_v_self->arg, __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":653
 *         return log(self.arg.evaluate(species,params,time))
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return log(self.arg.volume_evaluate(species,params,vol,time))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7LogTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7LogTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7LogTerm___reduce_cython__(((struct __pyx_obj_9bioscrape_5types_LogTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7LogTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.arg,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->arg));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->arg));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->arg));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.arg is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.arg is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_LogTerm, (type(self), 0x61dd86c, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->arg) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.arg is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_LogTerm, (type(self), 0x61dd86c, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.arg is not None
 *     if use_setstate:
 *         return __pyx_unpickle_LogTerm, (type(self), 0x61dd86c, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_LogTerm, (type(self), 0x61dd86c, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_LogTerm); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_102619244);
    __Pyx_GIVEREF(__pyx_int_102619244);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_102619244);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.arg is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_LogTerm, (type(self), 0x61dd86c, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_LogTerm, (type(self), 0x61dd86c, None), state
 *     else:
 *         return __pyx_unpickle_LogTerm, (type(self), 0x61dd86c, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_LogTerm__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_LogTerm); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_102619244);
    __Pyx_GIVEREF(__pyx_int_102619244);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_102619244);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.LogTerm.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_LogTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_LogTerm__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7LogTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7LogTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7LogTerm_2__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_LogTerm *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7LogTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_LogTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_LogTerm__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_LogTerm__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_LogTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_LogTerm__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.LogTerm.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":658
 * @cython.auto_pickle(True)
 * cdef class StepTerm(Term):
 *     cdef void set_arg(self, Term arg):             # <<<<<<<<<<<<<<
 *         self.arg = arg
 * 
 */

static void __pyx_f_9bioscrape_5types_8StepTerm_set_arg(struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_arg) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_arg", 0);

  /* "bioscrape/types.pyx":659
 * cdef class StepTerm(Term):
 *     cdef void set_arg(self, Term arg):
 *         self.arg = arg             # <<<<<<<<<<<<<<
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_arg));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg));
  __Pyx_GOTREF(__pyx_v_self->arg);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->arg));
  __pyx_v_self->arg = __pyx_v_arg;

  /* "bioscrape/types.pyx":658
 * @cython.auto_pickle(True)
 * cdef class StepTerm(Term):
 *     cdef void set_arg(self, Term arg):             # <<<<<<<<<<<<<<
 *         self.arg = arg
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":661
 *         self.arg = arg
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         if self.arg.evaluate(species,params,time) >= 0:
 *             return 1.0
 */

static double __pyx_f_9bioscrape_5types_8StepTerm_evaluate(struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":662
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         if self.arg.evaluate(species,params,time) >= 0:             # <<<<<<<<<<<<<<
 *             return 1.0
 *         return 0
 */
  __pyx_t_1 = ((((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->arg->__pyx_vtab)->evaluate(__pyx_v_self->arg, __pyx_v_species, __pyx_v_params, __pyx_v_time) >= 0.0) != 0);
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":663
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         if self.arg.evaluate(species,params,time) >= 0:
 *             return 1.0             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __pyx_r = 1.0;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":662
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         if self.arg.evaluate(species,params,time) >= 0:             # <<<<<<<<<<<<<<
 *             return 1.0
 *         return 0
 */
  }

  /* "bioscrape/types.pyx":664
 *         if self.arg.evaluate(species,params,time) >= 0:
 *             return 1.0
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */
  __pyx_r = 0.0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":661
 *         self.arg = arg
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         if self.arg.evaluate(species,params,time) >= 0:
 *             return 1.0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":666
 *         return 0
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         if self.arg.volume_evaluate(species,params,vol,time) >= 0:
 *             return 1.0
 */

static double __pyx_f_9bioscrape_5types_8StepTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":667
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         if self.arg.volume_evaluate(species,params,vol,time) >= 0:             # <<<<<<<<<<<<<<
 *             return 1.0
 *         return 0
 */
  __pyx_t_1 = ((((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->arg->__pyx_vtab)->volume_evaluate(__pyx_v_self->arg, __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time) >= 0.0) != 0);
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":668
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         if self.arg.volume_evaluate(species,params,vol,time) >= 0:
 *             return 1.0             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __pyx_r = 1.0;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":667
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         if self.arg.volume_evaluate(species,params,vol,time) >= 0:             # <<<<<<<<<<<<<<
 *             return 1.0
 *         return 0
 */
  }

  /* "bioscrape/types.pyx":669
 *         if self.arg.volume_evaluate(species,params,vol,time) >= 0:
 *             return 1.0
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * @cython.auto_pickle(True)
 */
  __pyx_r = 0.0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":666
 *         return 0
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         if self.arg.volume_evaluate(species,params,vol,time) >= 0:
 *             return 1.0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_8StepTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_8StepTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_8StepTerm___reduce_cython__(((struct __pyx_obj_9bioscrape_5types_StepTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_8StepTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.arg,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->arg));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->arg));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->arg));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.arg is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.arg is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_StepTerm, (type(self), 0x61dd86c, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->arg) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.arg is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_StepTerm, (type(self), 0x61dd86c, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.arg is not None
 *     if use_setstate:
 *         return __pyx_unpickle_StepTerm, (type(self), 0x61dd86c, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_StepTerm, (type(self), 0x61dd86c, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_StepTerm); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_102619244);
    __Pyx_GIVEREF(__pyx_int_102619244);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_102619244);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.arg is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_StepTerm, (type(self), 0x61dd86c, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_StepTerm, (type(self), 0x61dd86c, None), state
 *     else:
 *         return __pyx_unpickle_StepTerm, (type(self), 0x61dd86c, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_StepTerm__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_StepTerm); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_102619244);
    __Pyx_GIVEREF(__pyx_int_102619244);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_102619244);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.StepTerm.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StepTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StepTerm__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_8StepTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_8StepTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_8StepTerm_2__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_StepTerm *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_8StepTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_StepTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_StepTerm__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_StepTerm__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StepTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StepTerm__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.StepTerm.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":673
 * @cython.auto_pickle(True)
 * cdef class AbsTerm(Term):
 *     cdef void set_arg(self, Term arg):             # <<<<<<<<<<<<<<
 *         self.arg = arg
 * 
 */

static void __pyx_f_9bioscrape_5types_7AbsTerm_set_arg(struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Term *__pyx_v_arg) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_arg", 0);

  /* "bioscrape/types.pyx":674
 * cdef class AbsTerm(Term):
 *     cdef void set_arg(self, Term arg):
 *         self.arg = arg             # <<<<<<<<<<<<<<
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_arg));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg));
  __Pyx_GOTREF(__pyx_v_self->arg);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->arg));
  __pyx_v_self->arg = __pyx_v_arg;

  /* "bioscrape/types.pyx":673
 * @cython.auto_pickle(True)
 * cdef class AbsTerm(Term):
 *     cdef void set_arg(self, Term arg):             # <<<<<<<<<<<<<<
 *         self.arg = arg
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":676
 *         self.arg = arg
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return fabs( self.arg.evaluate(species,params,time) )
 * 
 */

static double __pyx_f_9bioscrape_5types_7AbsTerm_evaluate(struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":677
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return fabs( self.arg.evaluate(species,params,time) )             # <<<<<<<<<<<<<<
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */
  __pyx_r = fabs(((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->arg->__pyx_vtab)->evaluate(__pyx_v_self->arg, __pyx_v_species, __pyx_v_params, __pyx_v_time));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":676
 *         self.arg = arg
 * 
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return fabs( self.arg.evaluate(species,params,time) )
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":679
 *         return fabs( self.arg.evaluate(species,params,time) )
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return fabs( self.arg.volume_evaluate(species,params,vol,time) )
 * 
 */

static double __pyx_f_9bioscrape_5types_7AbsTerm_volume_evaluate(struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v_self, double *__pyx_v_species, double *__pyx_v_params, double __pyx_v_vol, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":680
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return fabs( self.arg.volume_evaluate(species,params,vol,time) )             # <<<<<<<<<<<<<<
 * 
 * @cython.auto_pickle(True)
 */
  __pyx_r = fabs(((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->arg->__pyx_vtab)->volume_evaluate(__pyx_v_self->arg, __pyx_v_species, __pyx_v_params, __pyx_v_vol, __pyx_v_time));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":679
 *         return fabs( self.arg.evaluate(species,params,time) )
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return fabs( self.arg.volume_evaluate(species,params,vol,time) )
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7AbsTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7AbsTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7AbsTerm___reduce_cython__(((struct __pyx_obj_9bioscrape_5types_AbsTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7AbsTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.arg,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->arg));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->arg));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->arg));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.arg is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.arg,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.arg is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_AbsTerm, (type(self), 0x61dd86c, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->arg) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.arg is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_AbsTerm, (type(self), 0x61dd86c, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.arg is not None
 *     if use_setstate:
 *         return __pyx_unpickle_AbsTerm, (type(self), 0x61dd86c, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_AbsTerm, (type(self), 0x61dd86c, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_AbsTerm); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_102619244);
    __Pyx_GIVEREF(__pyx_int_102619244);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_102619244);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.arg is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_AbsTerm, (type(self), 0x61dd86c, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_AbsTerm, (type(self), 0x61dd86c, None), state
 *     else:
 *         return __pyx_unpickle_AbsTerm, (type(self), 0x61dd86c, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_AbsTerm__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_AbsTerm); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_102619244);
    __Pyx_GIVEREF(__pyx_int_102619244);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_102619244);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.AbsTerm.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_AbsTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_AbsTerm__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7AbsTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7AbsTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7AbsTerm_2__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_AbsTerm *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7AbsTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_AbsTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_AbsTerm__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_AbsTerm__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_AbsTerm, (type(self), 0x61dd86c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_AbsTerm__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.AbsTerm.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":684
 * @cython.auto_pickle(True)
 * cdef class TimeTerm(Term):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return time
 * 
 */

static double __pyx_f_9bioscrape_5types_8TimeTerm_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_TimeTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "bioscrape/types.pyx":685
 * cdef class TimeTerm(Term):
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         return time             # <<<<<<<<<<<<<<
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */
  __pyx_r = __pyx_v_time;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":684
 * @cython.auto_pickle(True)
 * cdef class TimeTerm(Term):
 *     cdef double evaluate(self, double *species, double *params, double time):             # <<<<<<<<<<<<<<
 *         return time
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":687
 *         return time
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return time
 * 
 */

static double __pyx_f_9bioscrape_5types_8TimeTerm_volume_evaluate(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_TimeTerm *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_species, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_vol, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume_evaluate", 0);

  /* "bioscrape/types.pyx":688
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 *         return time             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_time;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":687
 *         return time
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):             # <<<<<<<<<<<<<<
 *         return time
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_8TimeTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_8TimeTerm_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_8TimeTerm___reduce_cython__(((struct __pyx_obj_9bioscrape_5types_TimeTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_8TimeTerm___reduce_cython__(struct __pyx_obj_9bioscrape_5types_TimeTerm *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_TimeTerm, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_TimeTerm, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_TimeTerm, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_TimeTerm, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_TimeTerm); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_TimeTerm, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_TimeTerm, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_TimeTerm, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_TimeTerm__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_TimeTerm); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.TimeTerm.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_TimeTerm, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_TimeTerm__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_8TimeTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_8TimeTerm_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_8TimeTerm_2__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_TimeTerm *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_8TimeTerm_2__setstate_cython__(struct __pyx_obj_9bioscrape_5types_TimeTerm *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_TimeTerm, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_TimeTerm__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_TimeTerm__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_TimeTerm, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_TimeTerm__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.TimeTerm.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":691
 * 
 * 
 * def sympy_species_and_parameters(instring, species2index = None, params2index = None):             # <<<<<<<<<<<<<<
 *     instring = instring.replace('^','**')
 *     instring = instring.replace('|','_')
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_3sympy_species_and_parameters(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_3sympy_species_and_parameters = {"sympy_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_3sympy_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_3sympy_species_and_parameters(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_instring = 0;
  PyObject *__pyx_v_species2index = 0;
  CYTHON_UNUSED PyObject *__pyx_v_params2index = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sympy_species_and_parameters (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_instring,&__pyx_n_s_species2index,&__pyx_n_s_params2index,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_instring)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species2index);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params2index);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sympy_species_and_parameters") < 0)) __PYX_ERR(0, 691, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_instring = values[0];
    __pyx_v_species2index = values[1];
    __pyx_v_params2index = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sympy_species_and_parameters", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 691, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.sympy_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_2sympy_species_and_parameters(__pyx_self, __pyx_v_instring, __pyx_v_species2index, __pyx_v_params2index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_2sympy_species_and_parameters(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_instring, PyObject *__pyx_v_species2index, CYTHON_UNUSED PyObject *__pyx_v_params2index) {
  PyObject *__pyx_v_root = NULL;
  PyObject *__pyx_v_nodes = NULL;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_names = NULL;
  PyObject *__pyx_v_species_names = NULL;
  PyObject *__pyx_v_param_names = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("sympy_species_and_parameters", 0);
  __Pyx_INCREF(__pyx_v_instring);

  /* "bioscrape/types.pyx":692
 * 
 * def sympy_species_and_parameters(instring, species2index = None, params2index = None):
 *     instring = instring.replace('^','**')             # <<<<<<<<<<<<<<
 *     instring = instring.replace('|','_')
 *     root = sympy.sympify(instring, _clash1)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_instring, __pyx_n_s_replace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_instring, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":693
 * def sympy_species_and_parameters(instring, species2index = None, params2index = None):
 *     instring = instring.replace('^','**')
 *     instring = instring.replace('|','_')             # <<<<<<<<<<<<<<
 *     root = sympy.sympify(instring, _clash1)
 *     nodes = [root]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_instring, __pyx_n_s_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_instring, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":694
 *     instring = instring.replace('^','**')
 *     instring = instring.replace('|','_')
 *     root = sympy.sympify(instring, _clash1)             # <<<<<<<<<<<<<<
 *     nodes = [root]
 *     index = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sympy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sympify); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_clash1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_instring, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_instring, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_instring);
    __Pyx_GIVEREF(__pyx_v_instring);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_instring);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_root = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":695
 *     instring = instring.replace('|','_')
 *     root = sympy.sympify(instring, _clash1)
 *     nodes = [root]             # <<<<<<<<<<<<<<
 *     index = 0
 *     while index < len(nodes):
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_root);
  __Pyx_GIVEREF(__pyx_v_root);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_root);
  __pyx_v_nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":696
 *     root = sympy.sympify(instring, _clash1)
 *     nodes = [root]
 *     index = 0             # <<<<<<<<<<<<<<
 *     while index < len(nodes):
 *         node = nodes[index]
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_index = __pyx_int_0;

  /* "bioscrape/types.pyx":697
 *     nodes = [root]
 *     index = 0
 *     while index < len(nodes):             # <<<<<<<<<<<<<<
 *         node = nodes[index]
 *         index += 1
 */
  while (1) {
    __pyx_t_7 = PyList_GET_SIZE(__pyx_v_nodes); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 697, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_index, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_8) break;

    /* "bioscrape/types.pyx":698
 *     index = 0
 *     while index < len(nodes):
 *         node = nodes[index]             # <<<<<<<<<<<<<<
 *         index += 1
 *         nodes.extend(node.args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_nodes, __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":699
 *     while index < len(nodes):
 *         node = nodes[index]
 *         index += 1             # <<<<<<<<<<<<<<
 *         nodes.extend(node.args)
 *     names = [str(n) for n in nodes if type(n) == sympy.Symbol]\
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":700
 *         node = nodes[index]
 *         index += 1
 *         nodes.extend(node.args)             # <<<<<<<<<<<<<<
 *     names = [str(n) for n in nodes if type(n) == sympy.Symbol]\
 *             +[str(n)[1:] for n in nodes if type(n) == sympy.Symbol if str(n)[0] == "_"]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_nodes, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 700, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "bioscrape/types.pyx":701
 *         index += 1
 *         nodes.extend(node.args)
 *     names = [str(n) for n in nodes if type(n) == sympy.Symbol]\             # <<<<<<<<<<<<<<
 *             +[str(n)[1:] for n in nodes if type(n) == sympy.Symbol if str(n)[0] == "_"]
 *     species_names = [s for s in names if s in species2index]
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __pyx_v_nodes; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 701, __pyx_L1_error)
    #else
    __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_sympy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_Symbol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_n)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_8) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_n); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":702
 *         nodes.extend(node.args)
 *     names = [str(n) for n in nodes if type(n) == sympy.Symbol]\
 *             +[str(n)[1:] for n in nodes if type(n) == sympy.Symbol if str(n)[0] == "_"]             # <<<<<<<<<<<<<<
 *     species_names = [s for s in names if s in species2index]
 *     param_names = [s for s in names if (s not in species2index and s != 'volume' and s != 't')]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __pyx_v_nodes; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 702, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sympy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Symbol); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_n)), __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 702, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 702, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s__12, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 702, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 702, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_4, 1, 0, NULL, NULL, &__pyx_slice__14, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 702, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 702, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_names = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "bioscrape/types.pyx":703
 *     names = [str(n) for n in nodes if type(n) == sympy.Symbol]\
 *             +[str(n)[1:] for n in nodes if type(n) == sympy.Symbol if str(n)[0] == "_"]
 *     species_names = [s for s in names if s in species2index]             # <<<<<<<<<<<<<<
 *     param_names = [s for s in names if (s not in species2index and s != 'volume' and s != 't')]
 * 
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __pyx_v_names; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 703, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_s, __pyx_v_species2index, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 703, __pyx_L1_error)
    __pyx_t_10 = (__pyx_t_8 != 0);
    if (__pyx_t_10) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_v_s))) __PYX_ERR(0, 703, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_species_names = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "bioscrape/types.pyx":704
 *             +[str(n)[1:] for n in nodes if type(n) == sympy.Symbol if str(n)[0] == "_"]
 *     species_names = [s for s in names if s in species2index]
 *     param_names = [s for s in names if (s not in species2index and s != 'volume' and s != 't')]             # <<<<<<<<<<<<<<
 * 
 *     return species_names, param_names
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __pyx_v_names; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 704, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 704, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_s, __pyx_v_species2index, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 704, __pyx_L1_error)
    __pyx_t_11 = (__pyx_t_8 != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_v_s, __pyx_n_s_volume, Py_NE)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 704, __pyx_L1_error)
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_11 = (__Pyx_PyString_Equals(__pyx_v_s, __pyx_n_s_t, Py_NE)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 704, __pyx_L1_error)
    __pyx_t_10 = __pyx_t_11;
    __pyx_L18_bool_binop_done:;
    if (__pyx_t_10) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_v_s))) __PYX_ERR(0, 704, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_param_names = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "bioscrape/types.pyx":706
 *     param_names = [s for s in names if (s not in species2index and s != 'volume' and s != 't')]
 * 
 *     return species_names, param_names             # <<<<<<<<<<<<<<
 * 
 * def sympy_recursion(tree, species2index, params2index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_species_names);
  __Pyx_GIVEREF(__pyx_v_species_names);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_species_names);
  __Pyx_INCREF(__pyx_v_param_names);
  __Pyx_GIVEREF(__pyx_v_param_names);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_param_names);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":691
 * 
 * 
 * def sympy_species_and_parameters(instring, species2index = None, params2index = None):             # <<<<<<<<<<<<<<
 *     instring = instring.replace('^','**')
 *     instring = instring.replace('|','_')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bioscrape.types.sympy_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_root);
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_names);
  __Pyx_XDECREF(__pyx_v_species_names);
  __Pyx_XDECREF(__pyx_v_param_names);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_instring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":708
 *     return species_names, param_names
 * 
 * def sympy_recursion(tree, species2index, params2index):             # <<<<<<<<<<<<<<
 *     cdef SumTerm sumterm
 *     cdef ProductTerm productterm
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5sympy_recursion(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_5sympy_recursion = {"sympy_recursion", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5sympy_recursion, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_5sympy_recursion(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tree = 0;
  PyObject *__pyx_v_species2index = 0;
  PyObject *__pyx_v_params2index = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sympy_recursion (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_species2index,&__pyx_n_s_params2index,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tree)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sympy_recursion", 1, 3, 3, 1); __PYX_ERR(0, 708, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sympy_recursion", 1, 3, 3, 2); __PYX_ERR(0, 708, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sympy_recursion") < 0)) __PYX_ERR(0, 708, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_tree = values[0];
    __pyx_v_species2index = values[1];
    __pyx_v_params2index = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sympy_recursion", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 708, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.sympy_recursion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_4sympy_recursion(__pyx_self, __pyx_v_tree, __pyx_v_species2index, __pyx_v_params2index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4sympy_recursion(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index) {
  struct __pyx_obj_9bioscrape_5types_SumTerm *__pyx_v_sumterm = 0;
  struct __pyx_obj_9bioscrape_5types_ProductTerm *__pyx_v_productterm = 0;
  struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v_powerterm = 0;
  struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v_expterm = 0;
  struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v_logterm = 0;
  struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v_stepterm = 0;
  struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v_absterm = 0;
  struct __pyx_obj_9bioscrape_5types_MaxTerm *__pyx_v_maxterm = 0;
  struct __pyx_obj_9bioscrape_5types_MinTerm *__pyx_v_minterm = 0;
  CYTHON_UNUSED PyObject *__pyx_v_root = NULL;
  PyObject *__pyx_v_args = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  __Pyx_RefNannySetupContext("sympy_recursion", 0);

  /* "bioscrape/types.pyx":719
 *     cdef MinTerm minterm
 * 
 *     root = tree.func             # <<<<<<<<<<<<<<
 *     args = tree.args
 *     # check if symbol
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tree, __pyx_n_s_func); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_root = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":720
 * 
 *     root = tree.func
 *     args = tree.args             # <<<<<<<<<<<<<<
 *     # check if symbol
 *     if type(tree) == sympy.Symbol:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tree, __pyx_n_s_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_args = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":722
 *     args = tree.args
 *     # check if symbol
 *     if type(tree) == sympy.Symbol:             # <<<<<<<<<<<<<<
 *         name = str(tree)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Symbol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_tree)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "bioscrape/types.pyx":723
 *     # check if symbol
 *     if type(tree) == sympy.Symbol:
 *         name = str(tree)             # <<<<<<<<<<<<<<
 * 
 *         #remove initial underscores in names
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_name = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":726
 * 
 *         #remove initial underscores in names
 *         if name[0] == '_':             # <<<<<<<<<<<<<<
 *             name = name[1:]
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_name, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s__12, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {

      /* "bioscrape/types.pyx":727
 *         #remove initial underscores in names
 *         if name[0] == '_':
 *             name = name[1:]             # <<<<<<<<<<<<<<
 * 
 *         #New method: check params based upon being in the dictionary
 */
      __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_name, 1, 0, NULL, NULL, &__pyx_slice__14, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_name, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "bioscrape/types.pyx":726
 * 
 *         #remove initial underscores in names
 *         if name[0] == '_':             # <<<<<<<<<<<<<<
 *             name = name[1:]
 * 
 */
    }

    /* "bioscrape/types.pyx":730
 * 
 *         #New method: check params based upon being in the dictionary
 *         if name in species2index:             # <<<<<<<<<<<<<<
 *             return SpeciesTerm(species2index[ name ])
 *         elif name in params2index:
 */
    __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_name, __pyx_v_species2index, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 730, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {

      /* "bioscrape/types.pyx":731
 *         #New method: check params based upon being in the dictionary
 *         if name in species2index:
 *             return SpeciesTerm(species2index[ name ])             # <<<<<<<<<<<<<<
 *         elif name in params2index:
 *             return ParameterTerm(params2index[ name ])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_species2index, __pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9bioscrape_5types_SpeciesTerm), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 731, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "bioscrape/types.pyx":730
 * 
 *         #New method: check params based upon being in the dictionary
 *         if name in species2index:             # <<<<<<<<<<<<<<
 *             return SpeciesTerm(species2index[ name ])
 *         elif name in params2index:
 */
    }

    /* "bioscrape/types.pyx":732
 *         if name in species2index:
 *             return SpeciesTerm(species2index[ name ])
 *         elif name in params2index:             # <<<<<<<<<<<<<<
 *             return ParameterTerm(params2index[ name ])
 *         elif name == 'volume':
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_name, __pyx_v_params2index, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 732, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {

      /* "bioscrape/types.pyx":733
 *             return SpeciesTerm(species2index[ name ])
 *         elif name in params2index:
 *             return ParameterTerm(params2index[ name ])             # <<<<<<<<<<<<<<
 *         elif name == 'volume':
 *             return VolumeTerm()
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_params2index, __pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9bioscrape_5types_ParameterTerm), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "bioscrape/types.pyx":732
 *         if name in species2index:
 *             return SpeciesTerm(species2index[ name ])
 *         elif name in params2index:             # <<<<<<<<<<<<<<
 *             return ParameterTerm(params2index[ name ])
 *         elif name == 'volume':
 */
    }

    /* "bioscrape/types.pyx":734
 *         elif name in params2index:
 *             return ParameterTerm(params2index[ name ])
 *         elif name == 'volume':             # <<<<<<<<<<<<<<
 *             return VolumeTerm()
 *         elif name == 't':
 */
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_n_s_volume, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 734, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "bioscrape/types.pyx":735
 *             return ParameterTerm(params2index[ name ])
 *         elif name == 'volume':
 *             return VolumeTerm()             # <<<<<<<<<<<<<<
 *         elif name == 't':
 *             return TimeTerm()
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_VolumeTerm)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "bioscrape/types.pyx":734
 *         elif name in params2index:
 *             return ParameterTerm(params2index[ name ])
 *         elif name == 'volume':             # <<<<<<<<<<<<<<
 *             return VolumeTerm()
 *         elif name == 't':
 */
    }

    /* "bioscrape/types.pyx":736
 *         elif name == 'volume':
 *             return VolumeTerm()
 *         elif name == 't':             # <<<<<<<<<<<<<<
 *             return TimeTerm()
 *         else:
 */
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_n_s_t, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 736, __pyx_L1_error)
    if (likely(__pyx_t_3)) {

      /* "bioscrape/types.pyx":737
 *             return VolumeTerm()
 *         elif name == 't':
 *             return TimeTerm()             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"Unknown term {name} not found in Species, Parameters, or built-in-terms.")
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_TimeTerm)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "bioscrape/types.pyx":736
 *         elif name == 'volume':
 *             return VolumeTerm()
 *         elif name == 't':             # <<<<<<<<<<<<<<
 *             return TimeTerm()
 *         else:
 */
    }

    /* "bioscrape/types.pyx":739
 *             return TimeTerm()
 *         else:
 *             raise ValueError(f"Unknown term {name} not found in Species, Parameters, or built-in-terms.")             # <<<<<<<<<<<<<<
 *     # check if addition
 *     elif type(tree) == sympy.Add:
 */
    /*else*/ {
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = 0;
      __pyx_t_6 = 127;
      __Pyx_INCREF(__pyx_kp_u_Unknown_term);
      __pyx_t_5 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_Unknown_term);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Unknown_term);
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_6;
      __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_not_found_in_Species_Parameters);
      __pyx_t_5 += 53;
      __Pyx_GIVEREF(__pyx_kp_u_not_found_in_Species_Parameters);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_not_found_in_Species_Parameters);
      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 739, __pyx_L1_error)
    }

    /* "bioscrape/types.pyx":722
 *     args = tree.args
 *     # check if symbol
 *     if type(tree) == sympy.Symbol:             # <<<<<<<<<<<<<<
 *         name = str(tree)
 * 
 */
  }

  /* "bioscrape/types.pyx":741
 *             raise ValueError(f"Unknown term {name} not found in Species, Parameters, or built-in-terms.")
 *     # check if addition
 *     elif type(tree) == sympy.Add:             # <<<<<<<<<<<<<<
 *         sumterm = SumTerm()
 *         for a in args:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Add); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_tree)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "bioscrape/types.pyx":742
 *     # check if addition
 *     elif type(tree) == sympy.Add:
 *         sumterm = SumTerm()             # <<<<<<<<<<<<<<
 *         for a in args:
 *             sumterm.add_term(  sympy_recursion(a,species2index,params2index)   )
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_SumTerm)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_sumterm = ((struct __pyx_obj_9bioscrape_5types_SumTerm *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":743
 *     elif type(tree) == sympy.Add:
 *         sumterm = SumTerm()
 *         for a in args:             # <<<<<<<<<<<<<<
 *             sumterm.add_term(  sympy_recursion(a,species2index,params2index)   )
 *         return sumterm
 */
    if (likely(PyList_CheckExact(__pyx_v_args)) || PyTuple_CheckExact(__pyx_v_args)) {
      __pyx_t_1 = __pyx_v_args; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 743, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 743, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 743, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 743, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 743, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 743, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 743, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "bioscrape/types.pyx":744
 *         sumterm = SumTerm()
 *         for a in args:
 *             sumterm.add_term(  sympy_recursion(a,species2index,params2index)   )             # <<<<<<<<<<<<<<
 *         return sumterm
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_sympy_recursion); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_v_a, __pyx_v_species2index, __pyx_v_params2index};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 744, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_v_a, __pyx_v_species2index, __pyx_v_params2index};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 744, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 744, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_INCREF(__pyx_v_a);
        __Pyx_GIVEREF(__pyx_v_a);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_v_a);
        __Pyx_INCREF(__pyx_v_species2index);
        __Pyx_GIVEREF(__pyx_v_species2index);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v_species2index);
        __Pyx_INCREF(__pyx_v_params2index);
        __Pyx_GIVEREF(__pyx_v_params2index);
        PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_10, __pyx_v_params2index);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 744, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 744, __pyx_L1_error)
      ((struct __pyx_vtabstruct_9bioscrape_5types_SumTerm *)__pyx_v_sumterm->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.add_term(((struct __pyx_obj_9bioscrape_5types_BinaryTerm *)__pyx_v_sumterm), ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_2));
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "bioscrape/types.pyx":743
 *     elif type(tree) == sympy.Add:
 *         sumterm = SumTerm()
 *         for a in args:             # <<<<<<<<<<<<<<
 *             sumterm.add_term(  sympy_recursion(a,species2index,params2index)   )
 *         return sumterm
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":745
 *         for a in args:
 *             sumterm.add_term(  sympy_recursion(a,species2index,params2index)   )
 *         return sumterm             # <<<<<<<<<<<<<<
 * 
 *     # check multiplication
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_sumterm));
    __pyx_r = ((PyObject *)__pyx_v_sumterm);
    goto __pyx_L0;

    /* "bioscrape/types.pyx":741
 *             raise ValueError(f"Unknown term {name} not found in Species, Parameters, or built-in-terms.")
 *     # check if addition
 *     elif type(tree) == sympy.Add:             # <<<<<<<<<<<<<<
 *         sumterm = SumTerm()
 *         for a in args:
 */
  }

  /* "bioscrape/types.pyx":748
 * 
 *     # check multiplication
 *     elif type(tree) == sympy.Mul:             # <<<<<<<<<<<<<<
 *         productterm = ProductTerm()
 *         for a in args:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Mul); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_tree)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "bioscrape/types.pyx":749
 *     # check multiplication
 *     elif type(tree) == sympy.Mul:
 *         productterm = ProductTerm()             # <<<<<<<<<<<<<<
 *         for a in args:
 *             productterm.add_term(sympy_recursion(a,species2index,params2index))
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_ProductTerm)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_productterm = ((struct __pyx_obj_9bioscrape_5types_ProductTerm *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":750
 *     elif type(tree) == sympy.Mul:
 *         productterm = ProductTerm()
 *         for a in args:             # <<<<<<<<<<<<<<
 *             productterm.add_term(sympy_recursion(a,species2index,params2index))
 *         return productterm
 */
    if (likely(PyList_CheckExact(__pyx_v_args)) || PyTuple_CheckExact(__pyx_v_args)) {
      __pyx_t_1 = __pyx_v_args; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 750, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 750, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 750, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 750, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 750, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 750, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "bioscrape/types.pyx":751
 *         productterm = ProductTerm()
 *         for a in args:
 *             productterm.add_term(sympy_recursion(a,species2index,params2index))             # <<<<<<<<<<<<<<
 *         return productterm
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_sympy_recursion); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_v_a, __pyx_v_species2index, __pyx_v_params2index};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 751, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_v_a, __pyx_v_species2index, __pyx_v_params2index};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 751, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 751, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_11) {
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_11); __pyx_t_11 = NULL;
        }
        __Pyx_INCREF(__pyx_v_a);
        __Pyx_GIVEREF(__pyx_v_a);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_10, __pyx_v_a);
        __Pyx_INCREF(__pyx_v_species2index);
        __Pyx_GIVEREF(__pyx_v_species2index);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_10, __pyx_v_species2index);
        __Pyx_INCREF(__pyx_v_params2index);
        __Pyx_GIVEREF(__pyx_v_params2index);
        PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_10, __pyx_v_params2index);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 751, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 751, __pyx_L1_error)
      ((struct __pyx_vtabstruct_9bioscrape_5types_ProductTerm *)__pyx_v_productterm->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.add_term(((struct __pyx_obj_9bioscrape_5types_BinaryTerm *)__pyx_v_productterm), ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_2));
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "bioscrape/types.pyx":750
 *     elif type(tree) == sympy.Mul:
 *         productterm = ProductTerm()
 *         for a in args:             # <<<<<<<<<<<<<<
 *             productterm.add_term(sympy_recursion(a,species2index,params2index))
 *         return productterm
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":752
 *         for a in args:
 *             productterm.add_term(sympy_recursion(a,species2index,params2index))
 *         return productterm             # <<<<<<<<<<<<<<
 * 
 *     # check exponential
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_productterm));
    __pyx_r = ((PyObject *)__pyx_v_productterm);
    goto __pyx_L0;

    /* "bioscrape/types.pyx":748
 * 
 *     # check multiplication
 *     elif type(tree) == sympy.Mul:             # <<<<<<<<<<<<<<
 *         productterm = ProductTerm()
 *         for a in args:
 */
  }

  /* "bioscrape/types.pyx":756
 *     # check exponential
 * 
 *     elif type(tree) == sympy.Pow:             # <<<<<<<<<<<<<<
 *         powerterm = PowerTerm()
 *         powerterm.set_base( sympy_recursion(args[0],species2index,params2index) )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Pow); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_tree)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "bioscrape/types.pyx":757
 * 
 *     elif type(tree) == sympy.Pow:
 *         powerterm = PowerTerm()             # <<<<<<<<<<<<<<
 *         powerterm.set_base( sympy_recursion(args[0],species2index,params2index) )
 *         powerterm.set_exponent( sympy_recursion(args[1], species2index,params2index) )
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_PowerTerm)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_powerterm = ((struct __pyx_obj_9bioscrape_5types_PowerTerm *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":758
 *     elif type(tree) == sympy.Pow:
 *         powerterm = PowerTerm()
 *         powerterm.set_base( sympy_recursion(args[0],species2index,params2index) )             # <<<<<<<<<<<<<<
 *         powerterm.set_exponent( sympy_recursion(args[1], species2index,params2index) )
 *         return powerterm
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sympy_recursion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_8, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_8, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_8);
      __Pyx_INCREF(__pyx_v_species2index);
      __Pyx_GIVEREF(__pyx_v_species2index);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v_species2index);
      __Pyx_INCREF(__pyx_v_params2index);
      __Pyx_GIVEREF(__pyx_v_params2index);
      PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_10, __pyx_v_params2index);
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 758, __pyx_L1_error)
    ((struct __pyx_vtabstruct_9bioscrape_5types_PowerTerm *)__pyx_v_powerterm->__pyx_base.__pyx_vtab)->set_base(__pyx_v_powerterm, ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":759
 *         powerterm = PowerTerm()
 *         powerterm.set_base( sympy_recursion(args[0],species2index,params2index) )
 *         powerterm.set_exponent( sympy_recursion(args[1], species2index,params2index) )             # <<<<<<<<<<<<<<
 *         return powerterm
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sympy_recursion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_8 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_11, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 759, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_11, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 759, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_10, __pyx_t_11);
      __Pyx_INCREF(__pyx_v_species2index);
      __Pyx_GIVEREF(__pyx_v_species2index);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_10, __pyx_v_species2index);
      __Pyx_INCREF(__pyx_v_params2index);
      __Pyx_GIVEREF(__pyx_v_params2index);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_10, __pyx_v_params2index);
      __pyx_t_11 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 759, __pyx_L1_error)
    ((struct __pyx_vtabstruct_9bioscrape_5types_PowerTerm *)__pyx_v_powerterm->__pyx_base.__pyx_vtab)->set_exponent(__pyx_v_powerterm, ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":760
 *         powerterm.set_base( sympy_recursion(args[0],species2index,params2index) )
 *         powerterm.set_exponent( sympy_recursion(args[1], species2index,params2index) )
 *         return powerterm             # <<<<<<<<<<<<<<
 * 
 *     # check exp and log
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_powerterm));
    __pyx_r = ((PyObject *)__pyx_v_powerterm);
    goto __pyx_L0;

    /* "bioscrape/types.pyx":756
 *     # check exponential
 * 
 *     elif type(tree) == sympy.Pow:             # <<<<<<<<<<<<<<
 *         powerterm = PowerTerm()
 *         powerterm.set_base( sympy_recursion(args[0],species2index,params2index) )
 */
  }

  /* "bioscrape/types.pyx":763
 * 
 *     # check exp and log
 *     elif type(tree) == sympy.exp:             # <<<<<<<<<<<<<<
 *         expterm = ExpTerm()
 *         expterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_tree)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "bioscrape/types.pyx":764
 *     # check exp and log
 *     elif type(tree) == sympy.exp:
 *         expterm = ExpTerm()             # <<<<<<<<<<<<<<
 *         expterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 *         return expterm
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_ExpTerm)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_expterm = ((struct __pyx_obj_9bioscrape_5types_ExpTerm *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":765
 *     elif type(tree) == sympy.exp:
 *         expterm = ExpTerm()
 *         expterm.set_arg( sympy_recursion(args[0],species2index,params2index) )             # <<<<<<<<<<<<<<
 *         return expterm
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sympy_recursion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_t_9, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_t_9, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_11) {
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_11); __pyx_t_11 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_10, __pyx_t_9);
      __Pyx_INCREF(__pyx_v_species2index);
      __Pyx_GIVEREF(__pyx_v_species2index);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_10, __pyx_v_species2index);
      __Pyx_INCREF(__pyx_v_params2index);
      __Pyx_GIVEREF(__pyx_v_params2index);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_10, __pyx_v_params2index);
      __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 765, __pyx_L1_error)
    ((struct __pyx_vtabstruct_9bioscrape_5types_ExpTerm *)__pyx_v_expterm->__pyx_base.__pyx_vtab)->set_arg(__pyx_v_expterm, ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":766
 *         expterm = ExpTerm()
 *         expterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 *         return expterm             # <<<<<<<<<<<<<<
 * 
 *     elif type(tree) == sympy.log:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_expterm));
    __pyx_r = ((PyObject *)__pyx_v_expterm);
    goto __pyx_L0;

    /* "bioscrape/types.pyx":763
 * 
 *     # check exp and log
 *     elif type(tree) == sympy.exp:             # <<<<<<<<<<<<<<
 *         expterm = ExpTerm()
 *         expterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 */
  }

  /* "bioscrape/types.pyx":768
 *         return expterm
 * 
 *     elif type(tree) == sympy.log:             # <<<<<<<<<<<<<<
 *         logterm = LogTerm()
 *         logterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_log); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_tree)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "bioscrape/types.pyx":769
 * 
 *     elif type(tree) == sympy.log:
 *         logterm = LogTerm()             # <<<<<<<<<<<<<<
 *         logterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 *         return logterm
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_LogTerm)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_logterm = ((struct __pyx_obj_9bioscrape_5types_LogTerm *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":770
 *     elif type(tree) == sympy.log:
 *         logterm = LogTerm()
 *         logterm.set_arg( sympy_recursion(args[0],species2index,params2index) )             # <<<<<<<<<<<<<<
 *         return logterm
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sympy_recursion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_8, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_8, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_8);
      __Pyx_INCREF(__pyx_v_species2index);
      __Pyx_GIVEREF(__pyx_v_species2index);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v_species2index);
      __Pyx_INCREF(__pyx_v_params2index);
      __Pyx_GIVEREF(__pyx_v_params2index);
      PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_10, __pyx_v_params2index);
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 770, __pyx_L1_error)
    ((struct __pyx_vtabstruct_9bioscrape_5types_LogTerm *)__pyx_v_logterm->__pyx_base.__pyx_vtab)->set_arg(__pyx_v_logterm, ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":771
 *         logterm = LogTerm()
 *         logterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 *         return logterm             # <<<<<<<<<<<<<<
 * 
 *     # check Heaviside
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_logterm));
    __pyx_r = ((PyObject *)__pyx_v_logterm);
    goto __pyx_L0;

    /* "bioscrape/types.pyx":768
 *         return expterm
 * 
 *     elif type(tree) == sympy.log:             # <<<<<<<<<<<<<<
 *         logterm = LogTerm()
 *         logterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 */
  }

  /* "bioscrape/types.pyx":774
 * 
 *     # check Heaviside
 *     elif type(tree) == sympy.Heaviside:             # <<<<<<<<<<<<<<
 *         stepterm = StepTerm()
 *         stepterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Heaviside); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_tree)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "bioscrape/types.pyx":775
 *     # check Heaviside
 *     elif type(tree) == sympy.Heaviside:
 *         stepterm = StepTerm()             # <<<<<<<<<<<<<<
 *         stepterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 *         return stepterm
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_StepTerm)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_stepterm = ((struct __pyx_obj_9bioscrape_5types_StepTerm *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":776
 *     elif type(tree) == sympy.Heaviside:
 *         stepterm = StepTerm()
 *         stepterm.set_arg( sympy_recursion(args[0],species2index,params2index) )             # <<<<<<<<<<<<<<
 *         return stepterm
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sympy_recursion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_8 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_11, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_11, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_10, __pyx_t_11);
      __Pyx_INCREF(__pyx_v_species2index);
      __Pyx_GIVEREF(__pyx_v_species2index);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_10, __pyx_v_species2index);
      __Pyx_INCREF(__pyx_v_params2index);
      __Pyx_GIVEREF(__pyx_v_params2index);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_10, __pyx_v_params2index);
      __pyx_t_11 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 776, __pyx_L1_error)
    ((struct __pyx_vtabstruct_9bioscrape_5types_StepTerm *)__pyx_v_stepterm->__pyx_base.__pyx_vtab)->set_arg(__pyx_v_stepterm, ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":777
 *         stepterm = StepTerm()
 *         stepterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 *         return stepterm             # <<<<<<<<<<<<<<
 * 
 *     # check absolute value
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_stepterm));
    __pyx_r = ((PyObject *)__pyx_v_stepterm);
    goto __pyx_L0;

    /* "bioscrape/types.pyx":774
 * 
 *     # check Heaviside
 *     elif type(tree) == sympy.Heaviside:             # <<<<<<<<<<<<<<
 *         stepterm = StepTerm()
 *         stepterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 */
  }

  /* "bioscrape/types.pyx":781
 *     # check absolute value
 * 
 *     elif type(tree) == sympy.Abs:             # <<<<<<<<<<<<<<
 *         absterm = AbsTerm()
 *         absterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Abs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_tree)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "bioscrape/types.pyx":782
 * 
 *     elif type(tree) == sympy.Abs:
 *         absterm = AbsTerm()             # <<<<<<<<<<<<<<
 *         absterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 *         return absterm
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_AbsTerm)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_absterm = ((struct __pyx_obj_9bioscrape_5types_AbsTerm *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":783
 *     elif type(tree) == sympy.Abs:
 *         absterm = AbsTerm()
 *         absterm.set_arg( sympy_recursion(args[0],species2index,params2index) )             # <<<<<<<<<<<<<<
 *         return absterm
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sympy_recursion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_t_9, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_t_9, __pyx_v_species2index, __pyx_v_params2index};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_11) {
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_11); __pyx_t_11 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_10, __pyx_t_9);
      __Pyx_INCREF(__pyx_v_species2index);
      __Pyx_GIVEREF(__pyx_v_species2index);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_10, __pyx_v_species2index);
      __Pyx_INCREF(__pyx_v_params2index);
      __Pyx_GIVEREF(__pyx_v_params2index);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_10, __pyx_v_params2index);
      __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 783, __pyx_L1_error)
    ((struct __pyx_vtabstruct_9bioscrape_5types_AbsTerm *)__pyx_v_absterm->__pyx_base.__pyx_vtab)->set_arg(__pyx_v_absterm, ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":784
 *         absterm = AbsTerm()
 *         absterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 *         return absterm             # <<<<<<<<<<<<<<
 * 
 *     # check for min and max
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_absterm));
    __pyx_r = ((PyObject *)__pyx_v_absterm);
    goto __pyx_L0;

    /* "bioscrape/types.pyx":781
 *     # check absolute value
 * 
 *     elif type(tree) == sympy.Abs:             # <<<<<<<<<<<<<<
 *         absterm = AbsTerm()
 *         absterm.set_arg( sympy_recursion(args[0],species2index,params2index) )
 */
  }

  /* "bioscrape/types.pyx":788
 *     # check for min and max
 * 
 *     elif type(tree) == sympy.Max:             # <<<<<<<<<<<<<<
 *         maxterm = MaxTerm()
 *         for a in args:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Max); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_tree)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "bioscrape/types.pyx":789
 * 
 *     elif type(tree) == sympy.Max:
 *         maxterm = MaxTerm()             # <<<<<<<<<<<<<<
 *         for a in args:
 *             maxterm.add_term(sympy_recursion(a,species2index,params2index))
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_MaxTerm)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_maxterm = ((struct __pyx_obj_9bioscrape_5types_MaxTerm *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":790
 *     elif type(tree) == sympy.Max:
 *         maxterm = MaxTerm()
 *         for a in args:             # <<<<<<<<<<<<<<
 *             maxterm.add_term(sympy_recursion(a,species2index,params2index))
 *         return maxterm
 */
    if (likely(PyList_CheckExact(__pyx_v_args)) || PyTuple_CheckExact(__pyx_v_args)) {
      __pyx_t_1 = __pyx_v_args; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 790, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 790, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 790, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 790, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 790, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 790, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "bioscrape/types.pyx":791
 *         maxterm = MaxTerm()
 *         for a in args:
 *             maxterm.add_term(sympy_recursion(a,species2index,params2index))             # <<<<<<<<<<<<<<
 *         return maxterm
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_sympy_recursion); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 791, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_v_a, __pyx_v_species2index, __pyx_v_params2index};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_v_a, __pyx_v_species2index, __pyx_v_params2index};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_INCREF(__pyx_v_a);
        __Pyx_GIVEREF(__pyx_v_a);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_v_a);
        __Pyx_INCREF(__pyx_v_species2index);
        __Pyx_GIVEREF(__pyx_v_species2index);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v_species2index);
        __Pyx_INCREF(__pyx_v_params2index);
        __Pyx_GIVEREF(__pyx_v_params2index);
        PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_10, __pyx_v_params2index);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 791, __pyx_L1_error)
      ((struct __pyx_vtabstruct_9bioscrape_5types_MaxTerm *)__pyx_v_maxterm->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.add_term(((struct __pyx_obj_9bioscrape_5types_BinaryTerm *)__pyx_v_maxterm), ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_2));
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "bioscrape/types.pyx":790
 *     elif type(tree) == sympy.Max:
 *         maxterm = MaxTerm()
 *         for a in args:             # <<<<<<<<<<<<<<
 *             maxterm.add_term(sympy_recursion(a,species2index,params2index))
 *         return maxterm
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":792
 *         for a in args:
 *             maxterm.add_term(sympy_recursion(a,species2index,params2index))
 *         return maxterm             # <<<<<<<<<<<<<<
 * 
 *     elif type(tree) == sympy.Min:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_maxterm));
    __pyx_r = ((PyObject *)__pyx_v_maxterm);
    goto __pyx_L0;

    /* "bioscrape/types.pyx":788
 *     # check for min and max
 * 
 *     elif type(tree) == sympy.Max:             # <<<<<<<<<<<<<<
 *         maxterm = MaxTerm()
 *         for a in args:
 */
  }

  /* "bioscrape/types.pyx":794
 *         return maxterm
 * 
 *     elif type(tree) == sympy.Min:             # <<<<<<<<<<<<<<
 *         minterm = MinTerm()
 *         for a in args:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Min); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_tree)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "bioscrape/types.pyx":795
 * 
 *     elif type(tree) == sympy.Min:
 *         minterm = MinTerm()             # <<<<<<<<<<<<<<
 *         for a in args:
 *             minterm.add_term(sympy_recursion(a,species2index,params2index))
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_MinTerm)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_minterm = ((struct __pyx_obj_9bioscrape_5types_MinTerm *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":796
 *     elif type(tree) == sympy.Min:
 *         minterm = MinTerm()
 *         for a in args:             # <<<<<<<<<<<<<<
 *             minterm.add_term(sympy_recursion(a,species2index,params2index))
 *         return minterm
 */
    if (likely(PyList_CheckExact(__pyx_v_args)) || PyTuple_CheckExact(__pyx_v_args)) {
      __pyx_t_1 = __pyx_v_args; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 796, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 796, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 796, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 796, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 796, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 796, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "bioscrape/types.pyx":797
 *         minterm = MinTerm()
 *         for a in args:
 *             minterm.add_term(sympy_recursion(a,species2index,params2index))             # <<<<<<<<<<<<<<
 *         return minterm
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_sympy_recursion); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 797, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_v_a, __pyx_v_species2index, __pyx_v_params2index};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 797, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_v_a, __pyx_v_species2index, __pyx_v_params2index};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 797, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 797, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_11) {
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_11); __pyx_t_11 = NULL;
        }
        __Pyx_INCREF(__pyx_v_a);
        __Pyx_GIVEREF(__pyx_v_a);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_10, __pyx_v_a);
        __Pyx_INCREF(__pyx_v_species2index);
        __Pyx_GIVEREF(__pyx_v_species2index);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_10, __pyx_v_species2index);
        __Pyx_INCREF(__pyx_v_params2index);
        __Pyx_GIVEREF(__pyx_v_params2index);
        PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_10, __pyx_v_params2index);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 797, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 797, __pyx_L1_error)
      ((struct __pyx_vtabstruct_9bioscrape_5types_MinTerm *)__pyx_v_minterm->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.add_term(((struct __pyx_obj_9bioscrape_5types_BinaryTerm *)__pyx_v_minterm), ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_2));
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "bioscrape/types.pyx":796
 *     elif type(tree) == sympy.Min:
 *         minterm = MinTerm()
 *         for a in args:             # <<<<<<<<<<<<<<
 *             minterm.add_term(sympy_recursion(a,species2index,params2index))
 *         return minterm
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":798
 *         for a in args:
 *             minterm.add_term(sympy_recursion(a,species2index,params2index))
 *         return minterm             # <<<<<<<<<<<<<<
 * 
 *     # if nothing else, then it should be a number
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_minterm));
    __pyx_r = ((PyObject *)__pyx_v_minterm);
    goto __pyx_L0;

    /* "bioscrape/types.pyx":794
 *         return maxterm
 * 
 *     elif type(tree) == sympy.Min:             # <<<<<<<<<<<<<<
 *         minterm = MinTerm()
 *         for a in args:
 */
  }

  /* "bioscrape/types.pyx":803
 * 
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return ConstantTerm(float( tree.evalf() ))
 *         except:
 */
  /*else*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      /*try:*/ {

        /* "bioscrape/types.pyx":804
 *     else:
 *         try:
 *             return ConstantTerm(float( tree.evalf() ))             # <<<<<<<<<<<<<<
 *         except:
 *             raise SyntaxError('This should be a number: ' + str(tree))
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tree, __pyx_n_s_evalf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyNumber_Float(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9bioscrape_5types_ConstantTerm), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L18_try_return;

        /* "bioscrape/types.pyx":803
 * 
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return ConstantTerm(float( tree.evalf() ))
 *         except:
 */
      }
      __pyx_L14_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "bioscrape/types.pyx":805
 *         try:
 *             return ConstantTerm(float( tree.evalf() ))
 *         except:             # <<<<<<<<<<<<<<
 *             raise SyntaxError('This should be a number: ' + str(tree))
 * 
 */
      /*except:*/ {
        __Pyx_AddTraceback("bioscrape.types.sympy_recursion", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_8) < 0) __PYX_ERR(0, 805, __pyx_L16_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_8);

        /* "bioscrape/types.pyx":806
 *             return ConstantTerm(float( tree.evalf() ))
 *         except:
 *             raise SyntaxError('This should be a number: ' + str(tree))             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_tree); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 806, __pyx_L16_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_11 = PyNumber_Add(__pyx_kp_s_This_should_be_a_number, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 806, __pyx_L16_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 806, __pyx_L16_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __PYX_ERR(0, 806, __pyx_L16_except_error)
      }
      __pyx_L16_except_error:;

      /* "bioscrape/types.pyx":803
 * 
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return ConstantTerm(float( tree.evalf() ))
 *         except:
 */
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      goto __pyx_L1_error;
      __pyx_L18_try_return:;
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      goto __pyx_L0;
    }
  }

  /* "bioscrape/types.pyx":708
 *     return species_names, param_names
 * 
 * def sympy_recursion(tree, species2index, params2index):             # <<<<<<<<<<<<<<
 *     cdef SumTerm sumterm
 *     cdef ProductTerm productterm
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("bioscrape.types.sympy_recursion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_sumterm);
  __Pyx_XDECREF((PyObject *)__pyx_v_productterm);
  __Pyx_XDECREF((PyObject *)__pyx_v_powerterm);
  __Pyx_XDECREF((PyObject *)__pyx_v_expterm);
  __Pyx_XDECREF((PyObject *)__pyx_v_logterm);
  __Pyx_XDECREF((PyObject *)__pyx_v_stepterm);
  __Pyx_XDECREF((PyObject *)__pyx_v_absterm);
  __Pyx_XDECREF((PyObject *)__pyx_v_maxterm);
  __Pyx_XDECREF((PyObject *)__pyx_v_minterm);
  __Pyx_XDECREF(__pyx_v_root);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":810
 * 
 * 
 * def parse_expression(instring, species2index, params2index):             # <<<<<<<<<<<<<<
 *     instring = instring.strip()
 *     instring = instring.replace('^','**')
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7parse_expression(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_7parse_expression = {"parse_expression", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_7parse_expression, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_7parse_expression(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_instring = 0;
  PyObject *__pyx_v_species2index = 0;
  PyObject *__pyx_v_params2index = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_expression (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_instring,&__pyx_n_s_species2index,&__pyx_n_s_params2index,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_instring)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parse_expression", 1, 3, 3, 1); __PYX_ERR(0, 810, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parse_expression", 1, 3, 3, 2); __PYX_ERR(0, 810, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "parse_expression") < 0)) __PYX_ERR(0, 810, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_instring = values[0];
    __pyx_v_species2index = values[1];
    __pyx_v_params2index = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parse_expression", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 810, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.parse_expression", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_6parse_expression(__pyx_self, __pyx_v_instring, __pyx_v_species2index, __pyx_v_params2index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_6parse_expression(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_instring, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index) {
  PyObject *__pyx_v_parse_tree = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("parse_expression", 0);
  __Pyx_INCREF(__pyx_v_instring);

  /* "bioscrape/types.pyx":811
 * 
 * def parse_expression(instring, species2index, params2index):
 *     instring = instring.strip()             # <<<<<<<<<<<<<<
 *     instring = instring.replace('^','**')
 *     instring = instring.replace('|', '_')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_instring, __pyx_n_s_strip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_instring, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":812
 * def parse_expression(instring, species2index, params2index):
 *     instring = instring.strip()
 *     instring = instring.replace('^','**')             # <<<<<<<<<<<<<<
 *     instring = instring.replace('|', '_')
 *     instring = instring.replace('heaviside', 'Heaviside')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_instring, __pyx_n_s_replace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_instring, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":813
 *     instring = instring.strip()
 *     instring = instring.replace('^','**')
 *     instring = instring.replace('|', '_')             # <<<<<<<<<<<<<<
 *     instring = instring.replace('heaviside', 'Heaviside')
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_instring, __pyx_n_s_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_instring, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":814
 *     instring = instring.replace('^','**')
 *     instring = instring.replace('|', '_')
 *     instring = instring.replace('heaviside', 'Heaviside')             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_instring, __pyx_n_s_replace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_instring, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":816
 *     instring = instring.replace('heaviside', 'Heaviside')
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         parse_tree = sympy.sympify(instring, _clash1)
 *     except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "bioscrape/types.pyx":817
 * 
 *     try:
 *         parse_tree = sympy.sympify(instring, _clash1)             # <<<<<<<<<<<<<<
 *     except:
 *         raise SyntaxError('Sympy unable to parse: ' + instring)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sympify); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_clash1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_instring, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 817, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_instring, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 817, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 817, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(__pyx_v_instring);
        __Pyx_GIVEREF(__pyx_v_instring);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_instring);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 817, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_parse_tree = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "bioscrape/types.pyx":816
 *     instring = instring.replace('heaviside', 'Heaviside')
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         parse_tree = sympy.sympify(instring, _clash1)
 *     except:
 */
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "bioscrape/types.pyx":818
 *     try:
 *         parse_tree = sympy.sympify(instring, _clash1)
 *     except:             # <<<<<<<<<<<<<<
 *         raise SyntaxError('Sympy unable to parse: ' + instring)
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("bioscrape.types.parse_expression", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_9) < 0) __PYX_ERR(0, 818, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_9);

      /* "bioscrape/types.pyx":819
 *         parse_tree = sympy.sympify(instring, _clash1)
 *     except:
 *         raise SyntaxError('Sympy unable to parse: ' + instring)             # <<<<<<<<<<<<<<
 * 
 *     return sympy_recursion(parse_tree,species2index,params2index)
 */
      __pyx_t_1 = PyNumber_Add(__pyx_kp_s_Sympy_unable_to_parse, __pyx_v_instring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 819, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 819, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 819, __pyx_L5_except_error)
    }
    __pyx_L5_except_error:;

    /* "bioscrape/types.pyx":816
 *     instring = instring.replace('heaviside', 'Heaviside')
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         parse_tree = sympy.sympify(instring, _clash1)
 *     except:
 */
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "bioscrape/types.pyx":821
 *         raise SyntaxError('Sympy unable to parse: ' + instring)
 * 
 *     return sympy_recursion(parse_tree,species2index,params2index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sympy_recursion); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_parse_tree, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_9);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_parse_tree, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_9);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_parse_tree);
    __Pyx_GIVEREF(__pyx_v_parse_tree);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_v_parse_tree);
    __Pyx_INCREF(__pyx_v_species2index);
    __Pyx_GIVEREF(__pyx_v_species2index);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_v_species2index);
    __Pyx_INCREF(__pyx_v_params2index);
    __Pyx_GIVEREF(__pyx_v_params2index);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_8, __pyx_v_params2index);
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":810
 * 
 * 
 * def parse_expression(instring, species2index, params2index):             # <<<<<<<<<<<<<<
 *     instring = instring.strip()
 *     instring = instring.replace('^','**')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.parse_expression", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parse_tree);
  __Pyx_XDECREF(__pyx_v_instring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":826
 * cdef class GeneralPropensity(Propensity):
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         return self.term.evaluate(state,params,time)
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 */

static double __pyx_f_9bioscrape_5types_17GeneralPropensity_get_propensity(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propensity", 0);

  /* "bioscrape/types.pyx":827
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         return self.term.evaluate(state,params,time)             # <<<<<<<<<<<<<<
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         return self.term.volume_evaluate(state,params,volume,time)
 */
  __pyx_r = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->term->__pyx_vtab)->evaluate(__pyx_v_self->term, __pyx_v_state, __pyx_v_params, __pyx_v_time);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":826
 * cdef class GeneralPropensity(Propensity):
 * 
 *     cdef double get_propensity(self, double* state, double* params, double time):             # <<<<<<<<<<<<<<
 *         return self.term.evaluate(state,params,time)
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":828
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         return self.term.evaluate(state,params,time)
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return self.term.volume_evaluate(state,params,volume,time)
 * 
 */

static double __pyx_f_9bioscrape_5types_17GeneralPropensity_get_volume_propensity(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_propensity", 0);

  /* "bioscrape/types.pyx":829
 *         return self.term.evaluate(state,params,time)
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):
 *         return self.term.volume_evaluate(state,params,volume,time)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __pyx_r = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->term->__pyx_vtab)->volume_evaluate(__pyx_v_self->term, __pyx_v_state, __pyx_v_params, __pyx_v_volume, __pyx_v_time);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":828
 *     cdef double get_propensity(self, double* state, double* params, double time):
 *         return self.term.evaluate(state,params,time)
 *     cdef double get_volume_propensity(self, double *state, double *params, double volume, double time):             # <<<<<<<<<<<<<<
 *         return self.term.volume_evaluate(state,params,volume,time)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":831
 *         return self.term.volume_evaluate(state,params,volume,time)
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.general
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_17GeneralPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_17GeneralPropensity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_17GeneralPropensity___init__(((struct __pyx_obj_9bioscrape_5types_GeneralPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_17GeneralPropensity___init__(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":832
 * 
 *     def __init__(self):
 *         self.propensity_type = PropensityType.general             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, dict dictionary, dict species2index, dict params2index):
 */
  __pyx_v_self->__pyx_base.propensity_type = __pyx_e_9bioscrape_5types_general;

  /* "bioscrape/types.pyx":831
 *         return self.term.volume_evaluate(state,params,volume,time)
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.propensity_type = PropensityType.general
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":834
 *         self.propensity_type = PropensityType.general
 * 
 *     def initialize(self, dict dictionary, dict species2index, dict params2index):             # <<<<<<<<<<<<<<
 *         instring = dictionary['rate']
 *         self.term = parse_expression(instring, species2index, params2index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_17GeneralPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_17GeneralPropensity_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dictionary = 0;
  PyObject *__pyx_v_species2index = 0;
  PyObject *__pyx_v_params2index = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dictionary,&__pyx_n_s_species2index,&__pyx_n_s_params2index,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 834, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 834, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 834, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dictionary = ((PyObject*)values[0]);
    __pyx_v_species2index = ((PyObject*)values[1]);
    __pyx_v_params2index = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 834, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.GeneralPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dictionary), (&PyDict_Type), 1, "dictionary", 1))) __PYX_ERR(0, 834, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species2index), (&PyDict_Type), 1, "species2index", 1))) __PYX_ERR(0, 834, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params2index), (&PyDict_Type), 1, "params2index", 1))) __PYX_ERR(0, 834, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_17GeneralPropensity_2initialize(((struct __pyx_obj_9bioscrape_5types_GeneralPropensity *)__pyx_v_self), __pyx_v_dictionary, __pyx_v_species2index, __pyx_v_params2index);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_17GeneralPropensity_2initialize(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self, PyObject *__pyx_v_dictionary, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index) {
  PyObject *__pyx_v_instring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":835
 * 
 *     def initialize(self, dict dictionary, dict species2index, dict params2index):
 *         instring = dictionary['rate']             # <<<<<<<<<<<<<<
 *         self.term = parse_expression(instring, species2index, params2index)
 * 
 */
  if (unlikely(__pyx_v_dictionary == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 835, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictionary, __pyx_n_s_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_instring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":836
 *     def initialize(self, dict dictionary, dict species2index, dict params2index):
 *         instring = dictionary['rate']
 *         self.term = parse_expression(instring, species2index, params2index)             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_parse_expression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_instring, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_instring, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_instring);
    __Pyx_GIVEREF(__pyx_v_instring);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_instring);
    __Pyx_INCREF(__pyx_v_species2index);
    __Pyx_GIVEREF(__pyx_v_species2index);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_species2index);
    __Pyx_INCREF(__pyx_v_params2index);
    __Pyx_GIVEREF(__pyx_v_params2index);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_params2index);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->term);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->term));
  __pyx_v_self->term = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":834
 *         self.propensity_type = PropensityType.general
 * 
 *     def initialize(self, dict dictionary, dict species2index, dict params2index):             # <<<<<<<<<<<<<<
 *         instring = dictionary['rate']
 *         self.term = parse_expression(instring, species2index, params2index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.GeneralPropensity.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_instring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":838
 *         self.term = parse_expression(instring, species2index, params2index)
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):             # <<<<<<<<<<<<<<
 *         instring = fields['rate'].strip()
 *         return sympy_species_and_parameters(instring, species2index, params2index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_17GeneralPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_17GeneralPropensity_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_species2index = 0;
  PyObject *__pyx_v_params2index = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_species2index,&__pyx_n_s_params2index,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 3, 3, 1); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 3, 3, 2); __PYX_ERR(0, 838, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 838, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
    __pyx_v_species2index = ((PyObject*)values[1]);
    __pyx_v_params2index = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 838, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.GeneralPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 838, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species2index), (&PyDict_Type), 1, "species2index", 1))) __PYX_ERR(0, 838, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params2index), (&PyDict_Type), 1, "params2index", 1))) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_17GeneralPropensity_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_GeneralPropensity *)__pyx_v_self), __pyx_v_fields, __pyx_v_species2index, __pyx_v_params2index);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_17GeneralPropensity_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index) {
  PyObject *__pyx_v_instring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":839
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):
 *         instring = fields['rate'].strip()             # <<<<<<<<<<<<<<
 *         return sympy_species_and_parameters(instring, species2index, params2index)
 * 
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 839, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_instring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":840
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):
 *         instring = fields['rate'].strip()
 *         return sympy_species_and_parameters(instring, species2index, params2index)             # <<<<<<<<<<<<<<
 * 
 *     def py_get_term(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sympy_species_and_parameters); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_instring, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_instring, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_instring);
    __Pyx_GIVEREF(__pyx_v_instring);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_instring);
    __Pyx_INCREF(__pyx_v_species2index);
    __Pyx_GIVEREF(__pyx_v_species2index);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_species2index);
    __Pyx_INCREF(__pyx_v_params2index);
    __Pyx_GIVEREF(__pyx_v_params2index);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_params2index);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":838
 *         self.term = parse_expression(instring, species2index, params2index)
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):             # <<<<<<<<<<<<<<
 *         instring = fields['rate'].strip()
 *         return sympy_species_and_parameters(instring, species2index, params2index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.GeneralPropensity.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_instring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":842
 *         return sympy_species_and_parameters(instring, species2index, params2index)
 * 
 *     def py_get_term(self):             # <<<<<<<<<<<<<<
 *         return self.term
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_17GeneralPropensity_7py_get_term(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_17GeneralPropensity_7py_get_term(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_term (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_17GeneralPropensity_6py_get_term(((struct __pyx_obj_9bioscrape_5types_GeneralPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_17GeneralPropensity_6py_get_term(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_term", 0);

  /* "bioscrape/types.pyx":843
 * 
 *     def py_get_term(self):
 *         return self.term             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->term));
  __pyx_r = ((PyObject *)__pyx_v_self->term);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":842
 *         return sympy_species_and_parameters(instring, species2index, params2index)
 * 
 *     def py_get_term(self):             # <<<<<<<<<<<<<<
 *         return self.term
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_17GeneralPropensity_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_17GeneralPropensity_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_17GeneralPropensity_8__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_GeneralPropensity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_17GeneralPropensity_8__reduce_cython__(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.propensity_type, self.term)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_v_self->__pyx_base.propensity_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->term));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->term));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->term));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.propensity_type, self.term)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.propensity_type, self.term)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.term is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.propensity_type, self.term)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.term is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_GeneralPropensity, (type(self), 0x688789b, None), state
 */
  /*else*/ {
    __pyx_t_4 = (((PyObject *)__pyx_v_self->term) != Py_None);
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.term is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GeneralPropensity, (type(self), 0x688789b, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self.term is not None
 *     if use_setstate:
 *         return __pyx_unpickle_GeneralPropensity, (type(self), 0x688789b, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_GeneralPropensity, (type(self), 0x688789b, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_GeneralPropensity); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_109607067);
    __Pyx_GIVEREF(__pyx_int_109607067);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_109607067);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.term is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GeneralPropensity, (type(self), 0x688789b, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_GeneralPropensity, (type(self), 0x688789b, None), state
 *     else:
 *         return __pyx_unpickle_GeneralPropensity, (type(self), 0x688789b, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GeneralPropensity__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_GeneralPropensity); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_109607067);
    __Pyx_GIVEREF(__pyx_int_109607067);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_109607067);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.GeneralPropensity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GeneralPropensity, (type(self), 0x688789b, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GeneralPropensity__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_17GeneralPropensity_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_17GeneralPropensity_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_17GeneralPropensity_10__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_GeneralPropensity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_17GeneralPropensity_10__setstate_cython__(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_GeneralPropensity, (type(self), 0x688789b, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GeneralPropensity__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_GeneralPropensity__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GeneralPropensity, (type(self), 0x688789b, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GeneralPropensity__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.GeneralPropensity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":852
 * 
 * cdef class Delay:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the delay_type attribute to the appropriate enum value.
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_5Delay_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Delay___init__[] = "\n        Set the delay_type attribute to the appropriate enum value.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9bioscrape_5types_5Delay___init__;
#endif
static int __pyx_pw_9bioscrape_5types_5Delay_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Delay___init__(((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_5Delay___init__(struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":856
 *         Set the delay_type attribute to the appropriate enum value.
 *         """
 *         self.delay_type = DelayType.unset_delay             # <<<<<<<<<<<<<<
 * 
 *     def py_get_delay(self, np.ndarray[np.double_t,ndim=1] state,
 */
  __pyx_v_self->delay_type = __pyx_e_9bioscrape_5types_unset_delay;

  /* "bioscrape/types.pyx":852
 * 
 * cdef class Delay:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the delay_type attribute to the appropriate enum value.
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":858
 *         self.delay_type = DelayType.unset_delay
 * 
 *     def py_get_delay(self, np.ndarray[np.double_t,ndim=1] state,             # <<<<<<<<<<<<<<
 *                      np.ndarray[np.double_t,ndim=1] params):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_3py_get_delay(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Delay_2py_get_delay[] = "\n        Return the delay given the state and parameter vector\n        :param state: (np.ndarray) the state vector\n        :param params: (np.ndarray) the parameters vector\n        :return: (double) the computed delay\n\n        This function should NOT be overridden by subclases. It is just a Python\n        wrapped of the cython delay function.\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_3py_get_delay(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_state = 0;
  PyArrayObject *__pyx_v_params = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_delay (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_state,&__pyx_n_s_params,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_get_delay", 1, 2, 2, 1); __PYX_ERR(0, 858, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_get_delay") < 0)) __PYX_ERR(0, 858, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_state = ((PyArrayObject *)values[0]);
    __pyx_v_params = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_get_delay", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 858, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Delay.py_get_delay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_state), __pyx_ptype_5numpy_ndarray, 1, "state", 0))) __PYX_ERR(0, 858, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), __pyx_ptype_5numpy_ndarray, 1, "params", 0))) __PYX_ERR(0, 859, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_5Delay_2py_get_delay(((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_v_self), __pyx_v_state, __pyx_v_params);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Delay_2py_get_delay(struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_params;
  __Pyx_Buffer __pyx_pybuffer_params;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_state;
  __Pyx_Buffer __pyx_pybuffer_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_get_delay", 0);
  __pyx_pybuffer_state.pybuffer.buf = NULL;
  __pyx_pybuffer_state.refcount = 0;
  __pyx_pybuffernd_state.data = NULL;
  __pyx_pybuffernd_state.rcbuffer = &__pyx_pybuffer_state;
  __pyx_pybuffer_params.pybuffer.buf = NULL;
  __pyx_pybuffer_params.refcount = 0;
  __pyx_pybuffernd_params.data = NULL;
  __pyx_pybuffernd_params.rcbuffer = &__pyx_pybuffer_params;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_state.rcbuffer->pybuffer, (PyObject*)__pyx_v_state, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 858, __pyx_L1_error)
  }
  __pyx_pybuffernd_state.diminfo[0].strides = __pyx_pybuffernd_state.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_state.diminfo[0].shape = __pyx_pybuffernd_state.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_params.rcbuffer->pybuffer, (PyObject*)__pyx_v_params, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 858, __pyx_L1_error)
  }
  __pyx_pybuffernd_params.diminfo[0].strides = __pyx_pybuffernd_params.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_params.diminfo[0].shape = __pyx_pybuffernd_params.rcbuffer->pybuffer.shape[0];

  /* "bioscrape/types.pyx":869
 *         wrapped of the cython delay function.
 *         """
 *         return self.get_delay(<double*> state.data, <double*> params.data)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, Delay other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9bioscrape_5types_Delay *)__pyx_v_self->__pyx_vtab)->get_delay(__pyx_v_self, ((double *)__pyx_v_state->data), ((double *)__pyx_v_params->data))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":858
 *         self.delay_type = DelayType.unset_delay
 * 
 *     def py_get_delay(self, np.ndarray[np.double_t,ndim=1] state,             # <<<<<<<<<<<<<<
 *                      np.ndarray[np.double_t,ndim=1] params):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("bioscrape.types.Delay.py_get_delay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":871
 *         return self.get_delay(<double*> state.data, <double*> params.data)
 * 
 *     def __eq__(self, Delay other):             # <<<<<<<<<<<<<<
 *         return self.delay_type == other.delay_type
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_5__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9bioscrape_5types_Delay, 1, "other", 0))) __PYX_ERR(0, 871, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_5Delay_4__eq__(((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_v_self), ((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Delay_4__eq__(struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "bioscrape/types.pyx":872
 * 
 *     def __eq__(self, Delay other):
 *         return self.delay_type == other.delay_type             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_delay(self, double* state, double* params):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->delay_type == __pyx_v_other->delay_type)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":871
 *         return self.get_delay(<double*> state.data, <double*> params.data)
 * 
 *     def __eq__(self, Delay other):             # <<<<<<<<<<<<<<
 *         return self.delay_type == other.delay_type
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Delay.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":874
 *         return self.delay_type == other.delay_type
 * 
 *     cdef double get_delay(self, double* state, double* params):             # <<<<<<<<<<<<<<
 *         """
 *         Compute a delay given the state and parameters vectors.
 */

static double __pyx_f_9bioscrape_5types_5Delay_get_delay(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_delay", 0);

  /* "bioscrape/types.pyx":884
 *         """
 * 
 *         return -1.0             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices,
 */
  __pyx_r = -1.0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":874
 *         return self.delay_type == other.delay_type
 * 
 *     cdef double get_delay(self, double* state, double* params):             # <<<<<<<<<<<<<<
 *         """
 *         Compute a delay given the state and parameters vectors.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":886
 *         return -1.0
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices,             # <<<<<<<<<<<<<<
 *                    dict parameter_indices):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_7initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Delay_6initialize[] = "\n        Initializes the parameters and species to look at the right indices in\n            the state\n        :param dictionary: (dict:str--> str) the fields for the propensity 'k',\n                                            's1' etc map to the actual parameter\n                                             and species names\n        :param species_indices: (dict:str-->int) map species names to entry in\n                                species vector\n        :param parameter_indices: (dict:str-->int) map param names to entry in\n                                  param vector\n        :return: nothing\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_7initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_param_dictionary = 0;
  CYTHON_UNUSED PyObject *__pyx_v_species_indices = 0;
  CYTHON_UNUSED PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 886, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 886, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 886, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 886, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Delay.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 886, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 886, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 887, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_5Delay_6initialize(((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Delay_6initialize(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, CYTHON_UNUSED PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":903
 *         pass
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         """
 *         get which fields are species and which are parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_9get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Delay_8get_species_and_parameters[] = "\n        get which fields are species and which are parameters\n        :return: (list(string), list(string)) First entry is the fields that are\n                                            species, second entry is the fields\n                                            that are parameters\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_9get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 903, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 903, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.Delay.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 903, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_5Delay_8get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Delay_8get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":910
 *                                             that are parameters
 *         """
 *         return [],[]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":903
 *         pass
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         """
 *         get which fields are species and which are parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.Delay.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Delay_10__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Delay_10__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.delay_type,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_DelayType(__pyx_v_self->delay_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.delay_type,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.delay_type,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.delay_type,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Delay, (type(self), 0x808fbba, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Delay, (type(self), 0x808fbba, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Delay, (type(self), 0x808fbba, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Delay, (type(self), 0x808fbba, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_Delay); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_134806458);
    __Pyx_GIVEREF(__pyx_int_134806458);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_134806458);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Delay, (type(self), 0x808fbba, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Delay, (type(self), 0x808fbba, None), state
 *     else:
 *         return __pyx_unpickle_Delay, (type(self), 0x808fbba, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Delay__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Delay); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_134806458);
    __Pyx_GIVEREF(__pyx_int_134806458);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_134806458);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Delay.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Delay, (type(self), 0x808fbba, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Delay__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Delay_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Delay_12__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Delay_12__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Delay, (type(self), 0x808fbba, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Delay__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_Delay__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Delay, (type(self), 0x808fbba, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Delay__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Delay.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":914
 * 
 * cdef class NoDelay(Delay):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.delay_type = DelayType.none
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_7NoDelay_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_7NoDelay_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_7NoDelay___init__(((struct __pyx_obj_9bioscrape_5types_NoDelay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_7NoDelay___init__(struct __pyx_obj_9bioscrape_5types_NoDelay *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":915
 * cdef class NoDelay(Delay):
 *     def __init__(self):
 *         self.delay_type = DelayType.none             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_delay(self, double* state, double* params):
 */
  __pyx_v_self->__pyx_base.delay_type = __pyx_e_9bioscrape_5types_none;

  /* "bioscrape/types.pyx":914
 * 
 * cdef class NoDelay(Delay):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.delay_type = DelayType.none
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":917
 *         self.delay_type = DelayType.none
 * 
 *     cdef double get_delay(self, double* state, double* params):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */

static double __pyx_f_9bioscrape_5types_7NoDelay_get_delay(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_NoDelay *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_delay", 0);

  /* "bioscrape/types.pyx":918
 * 
 *     cdef double get_delay(self, double* state, double* params):
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 * cdef class FixedDelay(Delay):
 */
  __pyx_r = 0.0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":917
 *         self.delay_type = DelayType.none
 * 
 *     cdef double get_delay(self, double* state, double* params):             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7NoDelay_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7NoDelay_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7NoDelay_2__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_NoDelay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7NoDelay_2__reduce_cython__(struct __pyx_obj_9bioscrape_5types_NoDelay *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.delay_type,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_DelayType(__pyx_v_self->__pyx_base.delay_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.delay_type,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.delay_type,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.delay_type,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_NoDelay, (type(self), 0x808fbba, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_NoDelay, (type(self), 0x808fbba, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_NoDelay, (type(self), 0x808fbba, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_NoDelay, (type(self), 0x808fbba, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_NoDelay); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_134806458);
    __Pyx_GIVEREF(__pyx_int_134806458);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_134806458);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_NoDelay, (type(self), 0x808fbba, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_NoDelay, (type(self), 0x808fbba, None), state
 *     else:
 *         return __pyx_unpickle_NoDelay, (type(self), 0x808fbba, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_NoDelay__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_NoDelay); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_134806458);
    __Pyx_GIVEREF(__pyx_int_134806458);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_134806458);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.NoDelay.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NoDelay, (type(self), 0x808fbba, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NoDelay__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7NoDelay_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7NoDelay_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7NoDelay_4__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_NoDelay *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7NoDelay_4__setstate_cython__(struct __pyx_obj_9bioscrape_5types_NoDelay *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_NoDelay, (type(self), 0x808fbba, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_NoDelay__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_NoDelay__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_NoDelay, (type(self), 0x808fbba, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_NoDelay__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.NoDelay.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":922
 * cdef class FixedDelay(Delay):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.delay_type = DelayType.fixed
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_10FixedDelay_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_10FixedDelay_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_10FixedDelay___init__(((struct __pyx_obj_9bioscrape_5types_FixedDelay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_10FixedDelay___init__(struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":923
 * 
 *     def __init__(self):
 *         self.delay_type = DelayType.fixed             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_delay(self, double* state, double* params):
 */
  __pyx_v_self->__pyx_base.delay_type = __pyx_e_9bioscrape_5types_fixed;

  /* "bioscrape/types.pyx":922
 * cdef class FixedDelay(Delay):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.delay_type = DelayType.fixed
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":925
 *         self.delay_type = DelayType.fixed
 * 
 *     cdef double get_delay(self, double* state, double* params):             # <<<<<<<<<<<<<<
 *         return params[self.delay_index]
 * 
 */

static double __pyx_f_9bioscrape_5types_10FixedDelay_get_delay(struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, double *__pyx_v_params) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_delay", 0);

  /* "bioscrape/types.pyx":926
 * 
 *     cdef double get_delay(self, double* state, double* params):
 *         return params[self.delay_index]             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices,
 */
  __pyx_r = (__pyx_v_params[__pyx_v_self->delay_index]);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":925
 *         self.delay_type = DelayType.fixed
 * 
 *     cdef double get_delay(self, double* state, double* params):             # <<<<<<<<<<<<<<
 *         return params[self.delay_index]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":928
 *         return params[self.delay_index]
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices,             # <<<<<<<<<<<<<<
 *                    dict parameter_indices):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10FixedDelay_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10FixedDelay_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_dictionary = 0;
  CYTHON_UNUSED PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 928, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 928, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 928, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 928, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.FixedDelay.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 928, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 928, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 929, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_10FixedDelay_2initialize(((struct __pyx_obj_9bioscrape_5types_FixedDelay *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10FixedDelay_2initialize(struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self, PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":931
 *                    dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'delay':
 *                 self.delay_index = parameter_indices[value]
 */
  if (unlikely(__pyx_v_param_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 931, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_param_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 931, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 931, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 931, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 931, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 931, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 931, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 931, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 931, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 931, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 931, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":932
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 'delay':             # <<<<<<<<<<<<<<
 *                 self.delay_index = parameter_indices[value]
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_delay, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 932, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":933
 *         for key,value in param_dictionary.items():
 *             if key == 'delay':
 *                 self.delay_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             else:
 *                 logging.info('Warning! Useless field for fixed delay', key)
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 933, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->delay_index = __pyx_t_10;

      /* "bioscrape/types.pyx":932
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 'delay':             # <<<<<<<<<<<<<<
 *                 self.delay_index = parameter_indices[value]
 *             else:
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":935
 *                 self.delay_index = parameter_indices[value]
 *             else:
 *                 logging.info('Warning! Useless field for fixed delay', key)             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_kp_s_Warning_Useless_field_for_fixed, __pyx_v_key};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 935, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_kp_s_Warning_Useless_field_for_fixed, __pyx_v_key};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 935, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 935, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_s_Warning_Useless_field_for_fixed);
        __Pyx_GIVEREF(__pyx_kp_s_Warning_Useless_field_for_fixed);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_kp_s_Warning_Useless_field_for_fixed);
        __Pyx_INCREF(__pyx_v_key);
        __Pyx_GIVEREF(__pyx_v_key);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_v_key);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 935, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "bioscrape/types.pyx":931
 *                    dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'delay':
 *                 self.delay_index = parameter_indices[value]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":928
 *         return params[self.delay_index]
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices,             # <<<<<<<<<<<<<<
 *                    dict parameter_indices):
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.FixedDelay.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":937
 *                 logging.info('Warning! Useless field for fixed delay', key)
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return [], [fields['delay']]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10FixedDelay_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10FixedDelay_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 937, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 937, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.FixedDelay.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 937, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_10FixedDelay_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_FixedDelay *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10FixedDelay_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":938
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         return [], [fields['delay']]             # <<<<<<<<<<<<<<
 * 
 * cdef class GaussianDelay(Delay):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 938, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_delay); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":937
 *                 logging.info('Warning! Useless field for fixed delay', key)
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return [], [fields['delay']]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.FixedDelay.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10FixedDelay_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10FixedDelay_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_10FixedDelay_6__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_FixedDelay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10FixedDelay_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.delay_index, self.delay_type)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->delay_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_DelayType(__pyx_v_self->__pyx_base.delay_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.delay_index, self.delay_type)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_3 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v__dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":7
 *     state = (self.delay_index, self.delay_type)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_4 = (__pyx_v__dict != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v__dict);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.delay_index, self.delay_type)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_FixedDelay, (type(self), 0x286babc, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_FixedDelay, (type(self), 0x286babc, None), state
 *     else:
 */
  __pyx_t_5 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_FixedDelay, (type(self), 0x286babc, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_FixedDelay, (type(self), 0x286babc, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_FixedDelay); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_42384060);
    __Pyx_GIVEREF(__pyx_int_42384060);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_42384060);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_FixedDelay, (type(self), 0x286babc, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_FixedDelay, (type(self), 0x286babc, None), state
 *     else:
 *         return __pyx_unpickle_FixedDelay, (type(self), 0x286babc, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_FixedDelay__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_FixedDelay); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_42384060);
    __Pyx_GIVEREF(__pyx_int_42384060);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_42384060);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.FixedDelay.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FixedDelay, (type(self), 0x286babc, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FixedDelay__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10FixedDelay_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10FixedDelay_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_10FixedDelay_8__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_FixedDelay *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10FixedDelay_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_FixedDelay, (type(self), 0x286babc, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_FixedDelay__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_FixedDelay__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FixedDelay, (type(self), 0x286babc, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FixedDelay__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.FixedDelay.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":942
 * cdef class GaussianDelay(Delay):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.delay_type = DelayType.gaussian
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_13GaussianDelay_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_13GaussianDelay_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_13GaussianDelay___init__(((struct __pyx_obj_9bioscrape_5types_GaussianDelay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_13GaussianDelay___init__(struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":943
 * 
 *     def __init__(self):
 *         self.delay_type = DelayType.gaussian             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_delay(self, double* state, double* params):
 */
  __pyx_v_self->__pyx_base.delay_type = __pyx_e_9bioscrape_5types_gaussian;

  /* "bioscrape/types.pyx":942
 * cdef class GaussianDelay(Delay):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.delay_type = DelayType.gaussian
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":945
 *         self.delay_type = DelayType.gaussian
 * 
 *     cdef double get_delay(self, double* state, double* params):             # <<<<<<<<<<<<<<
 *         return cyrandom.normal_rv(params[self.mean_index],params[self.std_index])
 * 
 */

static double __pyx_f_9bioscrape_5types_13GaussianDelay_get_delay(struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, double *__pyx_v_params) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_delay", 0);

  /* "bioscrape/types.pyx":946
 * 
 *     cdef double get_delay(self, double* state, double* params):
 *         return cyrandom.normal_rv(params[self.mean_index],params[self.std_index])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_9bioscrape_6random_normal_rv((__pyx_v_params[__pyx_v_self->mean_index]), (__pyx_v_params[__pyx_v_self->std_index]));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":945
 *         self.delay_type = DelayType.gaussian
 * 
 *     cdef double get_delay(self, double* state, double* params):             # <<<<<<<<<<<<<<
 *         return cyrandom.normal_rv(params[self.mean_index],params[self.std_index])
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":949
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices,             # <<<<<<<<<<<<<<
 *                    dict parameter_indices):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_13GaussianDelay_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_13GaussianDelay_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_dictionary = 0;
  CYTHON_UNUSED PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 949, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 949, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 949, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 949, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.GaussianDelay.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 949, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 949, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 950, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_13GaussianDelay_2initialize(((struct __pyx_obj_9bioscrape_5types_GaussianDelay *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_13GaussianDelay_2initialize(struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self, PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":952
 *                    dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'mean':
 *                 self.mean_index = parameter_indices[value]
 */
  if (unlikely(__pyx_v_param_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 952, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_param_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 952, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 952, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 952, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 952, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 952, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 952, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 952, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 952, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 952, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 952, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 952, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":953
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 'mean':             # <<<<<<<<<<<<<<
 *                 self.mean_index = parameter_indices[value]
 *             elif key == 'std':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_mean, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 953, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":954
 *         for key,value in param_dictionary.items():
 *             if key == 'mean':
 *                 self.mean_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'std':
 *                 self.std_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 954, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->mean_index = __pyx_t_10;

      /* "bioscrape/types.pyx":953
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 'mean':             # <<<<<<<<<<<<<<
 *                 self.mean_index = parameter_indices[value]
 *             elif key == 'std':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":955
 *             if key == 'mean':
 *                 self.mean_index = parameter_indices[value]
 *             elif key == 'std':             # <<<<<<<<<<<<<<
 *                 self.std_index = parameter_indices[value]
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_std, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 955, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":956
 *                 self.mean_index = parameter_indices[value]
 *             elif key == 'std':
 *                 self.std_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             else:
 *                 logging.info('Warning! Useless field for gaussian delay', key)
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 956, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 956, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->std_index = __pyx_t_10;

      /* "bioscrape/types.pyx":955
 *             if key == 'mean':
 *                 self.mean_index = parameter_indices[value]
 *             elif key == 'std':             # <<<<<<<<<<<<<<
 *                 self.std_index = parameter_indices[value]
 *             else:
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":958
 *                 self.std_index = parameter_indices[value]
 *             else:
 *                 logging.info('Warning! Useless field for gaussian delay', key)             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 958, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 958, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_kp_s_Warning_Useless_field_for_gaussi, __pyx_v_key};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 958, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_kp_s_Warning_Useless_field_for_gaussi, __pyx_v_key};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 958, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 958, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_s_Warning_Useless_field_for_gaussi);
        __Pyx_GIVEREF(__pyx_kp_s_Warning_Useless_field_for_gaussi);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_kp_s_Warning_Useless_field_for_gaussi);
        __Pyx_INCREF(__pyx_v_key);
        __Pyx_GIVEREF(__pyx_v_key);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_v_key);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 958, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "bioscrape/types.pyx":952
 *                    dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'mean':
 *                 self.mean_index = parameter_indices[value]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":949
 * 
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices,             # <<<<<<<<<<<<<<
 *                    dict parameter_indices):
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.GaussianDelay.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":960
 *                 logging.info('Warning! Useless field for gaussian delay', key)
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return [],[fields['mean'], fields['std']]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_13GaussianDelay_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_13GaussianDelay_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 960, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 960, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.GaussianDelay.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 960, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_13GaussianDelay_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_GaussianDelay *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_13GaussianDelay_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":961
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         return [],[fields['mean'], fields['std']]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 961, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_mean); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 961, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_std); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":960
 *                 logging.info('Warning! Useless field for gaussian delay', key)
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return [],[fields['mean'], fields['std']]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.GaussianDelay.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_13GaussianDelay_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_13GaussianDelay_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_13GaussianDelay_6__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_GaussianDelay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_13GaussianDelay_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.delay_type, self.mean_index, self.std_index)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_DelayType(__pyx_v_self->__pyx_base.delay_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->mean_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->std_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.delay_type, self.mean_index, self.std_index)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.delay_type, self.mean_index, self.std_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.delay_type, self.mean_index, self.std_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_GaussianDelay, (type(self), 0x90b60d2, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GaussianDelay, (type(self), 0x90b60d2, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_GaussianDelay, (type(self), 0x90b60d2, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_GaussianDelay, (type(self), 0x90b60d2, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_GaussianDelay); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_151740626);
    __Pyx_GIVEREF(__pyx_int_151740626);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_151740626);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GaussianDelay, (type(self), 0x90b60d2, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_GaussianDelay, (type(self), 0x90b60d2, None), state
 *     else:
 *         return __pyx_unpickle_GaussianDelay, (type(self), 0x90b60d2, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GaussianDelay__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_GaussianDelay); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_151740626);
    __Pyx_GIVEREF(__pyx_int_151740626);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_151740626);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.GaussianDelay.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GaussianDelay, (type(self), 0x90b60d2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GaussianDelay__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_13GaussianDelay_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_13GaussianDelay_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_13GaussianDelay_8__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_GaussianDelay *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_13GaussianDelay_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_GaussianDelay, (type(self), 0x90b60d2, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GaussianDelay__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_GaussianDelay__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GaussianDelay, (type(self), 0x90b60d2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GaussianDelay__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.GaussianDelay.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":967
 * cdef class GammaDelay(Delay):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.delay_type = DelayType.gamma
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_10GammaDelay_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_10GammaDelay_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_10GammaDelay___init__(((struct __pyx_obj_9bioscrape_5types_GammaDelay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_10GammaDelay___init__(struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":968
 * 
 *     def __init__(self):
 *         self.delay_type = DelayType.gamma             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_delay(self, double* state, double* params):
 */
  __pyx_v_self->__pyx_base.delay_type = __pyx_e_9bioscrape_5types_gamma;

  /* "bioscrape/types.pyx":967
 * cdef class GammaDelay(Delay):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.delay_type = DelayType.gamma
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":970
 *         self.delay_type = DelayType.gamma
 * 
 *     cdef double get_delay(self, double* state, double* params):             # <<<<<<<<<<<<<<
 *         return cyrandom.gamma_rv(params[self.k_index],params[self.theta_index])
 * 
 */

static double __pyx_f_9bioscrape_5types_10GammaDelay_get_delay(struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, double *__pyx_v_params) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_delay", 0);

  /* "bioscrape/types.pyx":971
 * 
 *     cdef double get_delay(self, double* state, double* params):
 *         return cyrandom.gamma_rv(params[self.k_index],params[self.theta_index])             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices,
 */
  __pyx_r = __pyx_f_9bioscrape_6random_gamma_rv((__pyx_v_params[__pyx_v_self->k_index]), (__pyx_v_params[__pyx_v_self->theta_index]));
  goto __pyx_L0;

  /* "bioscrape/types.pyx":970
 *         self.delay_type = DelayType.gamma
 * 
 *     cdef double get_delay(self, double* state, double* params):             # <<<<<<<<<<<<<<
 *         return cyrandom.gamma_rv(params[self.k_index],params[self.theta_index])
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":973
 *         return cyrandom.gamma_rv(params[self.k_index],params[self.theta_index])
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices,             # <<<<<<<<<<<<<<
 *                    dict parameter_indices):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10GammaDelay_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10GammaDelay_3initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_dictionary = 0;
  CYTHON_UNUSED PyObject *__pyx_v_species_indices = 0;
  PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 973, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 973, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 973, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_param_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 973, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.GammaDelay.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param_dictionary), (&PyDict_Type), 1, "param_dictionary", 1))) __PYX_ERR(0, 973, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 973, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 974, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_10GammaDelay_2initialize(((struct __pyx_obj_9bioscrape_5types_GammaDelay *)__pyx_v_self), __pyx_v_param_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10GammaDelay_2initialize(struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self, PyObject *__pyx_v_param_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, PyObject *__pyx_v_parameter_indices) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  unsigned int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":976
 *                    dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'k':
 *                 self.k_index = parameter_indices[value]
 */
  if (unlikely(__pyx_v_param_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 976, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_param_dictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 976, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 976, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 976, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 976, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 976, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 976, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 976, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":977
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 'k':             # <<<<<<<<<<<<<<
 *                 self.k_index = parameter_indices[value]
 *             elif key == 'theta':
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_k, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 977, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":978
 *         for key,value in param_dictionary.items():
 *             if key == 'k':
 *                 self.k_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             elif key == 'theta':
 *                 self.theta_index = parameter_indices[value]
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 978, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 978, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->k_index = __pyx_t_10;

      /* "bioscrape/types.pyx":977
 * 
 *         for key,value in param_dictionary.items():
 *             if key == 'k':             # <<<<<<<<<<<<<<
 *                 self.k_index = parameter_indices[value]
 *             elif key == 'theta':
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":979
 *             if key == 'k':
 *                 self.k_index = parameter_indices[value]
 *             elif key == 'theta':             # <<<<<<<<<<<<<<
 *                 self.theta_index = parameter_indices[value]
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_key, __pyx_n_s_theta, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 979, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":980
 *                 self.k_index = parameter_indices[value]
 *             elif key == 'theta':
 *                 self.theta_index = parameter_indices[value]             # <<<<<<<<<<<<<<
 *             else:
 *                 logging.info('Warning! Useless field for gamma delay', key)
 */
      if (unlikely(__pyx_v_parameter_indices == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 980, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_parameter_indices, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 980, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_self->theta_index = __pyx_t_10;

      /* "bioscrape/types.pyx":979
 *             if key == 'k':
 *                 self.k_index = parameter_indices[value]
 *             elif key == 'theta':             # <<<<<<<<<<<<<<
 *                 self.theta_index = parameter_indices[value]
 *             else:
 */
      goto __pyx_L7;
    }

    /* "bioscrape/types.pyx":982
 *                 self.theta_index = parameter_indices[value]
 *             else:
 *                 logging.info('Warning! Useless field for gamma delay', key)             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 982, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 982, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_kp_s_Warning_Useless_field_for_gamma, __pyx_v_key};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 982, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_kp_s_Warning_Useless_field_for_gamma, __pyx_v_key};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 982, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 982, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_kp_s_Warning_Useless_field_for_gamma);
        __Pyx_GIVEREF(__pyx_kp_s_Warning_Useless_field_for_gamma);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_kp_s_Warning_Useless_field_for_gamma);
        __Pyx_INCREF(__pyx_v_key);
        __Pyx_GIVEREF(__pyx_v_key);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_v_key);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 982, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "bioscrape/types.pyx":976
 *                    dict parameter_indices):
 * 
 *         for key,value in param_dictionary.items():             # <<<<<<<<<<<<<<
 *             if key == 'k':
 *                 self.k_index = parameter_indices[value]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":973
 *         return cyrandom.gamma_rv(params[self.k_index],params[self.theta_index])
 * 
 *     def initialize(self, dict param_dictionary, dict species_indices,             # <<<<<<<<<<<<<<
 *                    dict parameter_indices):
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.GammaDelay.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":984
 *                 logging.info('Warning! Useless field for gamma delay', key)
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return [],[fields['k'], fields['theta']]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10GammaDelay_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10GammaDelay_5get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 984, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 984, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.GammaDelay.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 984, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_10GammaDelay_4get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_GammaDelay *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10GammaDelay_4get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":985
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         return [],[fields['k'], fields['theta']]             # <<<<<<<<<<<<<<
 * 
 * ##################################################                ####################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 985, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 985, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_theta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":984
 *                 logging.info('Warning! Useless field for gamma delay', key)
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         return [],[fields['k'], fields['theta']]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.GammaDelay.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10GammaDelay_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10GammaDelay_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_10GammaDelay_6__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_GammaDelay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10GammaDelay_6__reduce_cython__(struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.delay_type, self.k_index, self.theta_index)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From___pyx_t_9bioscrape_5types_DelayType(__pyx_v_self->__pyx_base.delay_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->k_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->theta_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.delay_type, self.k_index, self.theta_index)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.delay_type, self.k_index, self.theta_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.delay_type, self.k_index, self.theta_index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_GammaDelay, (type(self), 0xe2181f8, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GammaDelay, (type(self), 0xe2181f8, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_GammaDelay, (type(self), 0xe2181f8, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_GammaDelay, (type(self), 0xe2181f8, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_GammaDelay); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_237076984);
    __Pyx_GIVEREF(__pyx_int_237076984);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_237076984);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GammaDelay, (type(self), 0xe2181f8, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_GammaDelay, (type(self), 0xe2181f8, None), state
 *     else:
 *         return __pyx_unpickle_GammaDelay, (type(self), 0xe2181f8, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GammaDelay__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_GammaDelay); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_237076984);
    __Pyx_GIVEREF(__pyx_int_237076984);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_237076984);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.GammaDelay.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GammaDelay, (type(self), 0xe2181f8, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GammaDelay__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_10GammaDelay_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_10GammaDelay_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_10GammaDelay_8__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_GammaDelay *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10GammaDelay_8__setstate_cython__(struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_GammaDelay, (type(self), 0xe2181f8, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GammaDelay__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_GammaDelay__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GammaDelay, (type(self), 0xe2181f8, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GammaDelay__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.GammaDelay.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":996
 *     the simulation.
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('Creating base Rule class. This should be subclassed.')
 * 
 */

static void __pyx_f_9bioscrape_5types_4Rule_rule_operation(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, CYTHON_UNUSED double __pyx_v_dt) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rule_operation", 0);

  /* "bioscrape/types.pyx":997
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):
 *         raise NotImplementedError('Creating base Rule class. This should be subclassed.')             # <<<<<<<<<<<<<<
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 997, __pyx_L1_error)

  /* "bioscrape/types.pyx":996
 *     the simulation.
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('Creating base Rule class. This should be subclassed.')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("bioscrape.types.Rule.rule_operation", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":999
 *         raise NotImplementedError('Creating base Rule class. This should be subclassed.')
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):             # <<<<<<<<<<<<<<
 *         self.rule_operation(state, params, time, dt)
 * 
 */

static void __pyx_f_9bioscrape_5types_4Rule_rule_volume_operation(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_volume, double __pyx_v_time, double __pyx_v_dt) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rule_volume_operation", 0);

  /* "bioscrape/types.pyx":1000
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):
 *         self.rule_operation(state, params, time, dt)             # <<<<<<<<<<<<<<
 * 
 *     cdef void execute_rule(self, double *state, double *params, double time, double dt, unsigned rule_step):
 */
  ((struct __pyx_vtabstruct_9bioscrape_5types_Rule *)__pyx_v_self->__pyx_vtab)->rule_operation(__pyx_v_self, __pyx_v_state, __pyx_v_params, __pyx_v_time, __pyx_v_dt);

  /* "bioscrape/types.pyx":999
 *         raise NotImplementedError('Creating base Rule class. This should be subclassed.')
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):             # <<<<<<<<<<<<<<
 *         self.rule_operation(state, params, time, dt)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1002
 *         self.rule_operation(state, params, time, dt)
 * 
 *     cdef void execute_rule(self, double *state, double *params, double time, double dt, unsigned rule_step):             # <<<<<<<<<<<<<<
 *         if self.frequency_flag == -1 or self.frequency_flag == time or (rule_step and self.frequency_flag == -2):
 *             self.rule_operation(state, params, time, dt)
 */

static void __pyx_f_9bioscrape_5types_4Rule_execute_rule(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time, double __pyx_v_dt, unsigned int __pyx_v_rule_step) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("execute_rule", 0);

  /* "bioscrape/types.pyx":1003
 * 
 *     cdef void execute_rule(self, double *state, double *params, double time, double dt, unsigned rule_step):
 *         if self.frequency_flag == -1 or self.frequency_flag == time or (rule_step and self.frequency_flag == -2):             # <<<<<<<<<<<<<<
 *             self.rule_operation(state, params, time, dt)
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->frequency_flag == -1.0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->frequency_flag == __pyx_v_time) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_rule_step != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->frequency_flag == -2.0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1004
 *     cdef void execute_rule(self, double *state, double *params, double time, double dt, unsigned rule_step):
 *         if self.frequency_flag == -1 or self.frequency_flag == time or (rule_step and self.frequency_flag == -2):
 *             self.rule_operation(state, params, time, dt)             # <<<<<<<<<<<<<<
 * 
 *     cdef void execute_volume_rule(self, double *state, double *params, double volume, double time, double dt, unsigned rule_step):
 */
    ((struct __pyx_vtabstruct_9bioscrape_5types_Rule *)__pyx_v_self->__pyx_vtab)->rule_operation(__pyx_v_self, __pyx_v_state, __pyx_v_params, __pyx_v_time, __pyx_v_dt);

    /* "bioscrape/types.pyx":1003
 * 
 *     cdef void execute_rule(self, double *state, double *params, double time, double dt, unsigned rule_step):
 *         if self.frequency_flag == -1 or self.frequency_flag == time or (rule_step and self.frequency_flag == -2):             # <<<<<<<<<<<<<<
 *             self.rule_operation(state, params, time, dt)
 * 
 */
  }

  /* "bioscrape/types.pyx":1002
 *         self.rule_operation(state, params, time, dt)
 * 
 *     cdef void execute_rule(self, double *state, double *params, double time, double dt, unsigned rule_step):             # <<<<<<<<<<<<<<
 *         if self.frequency_flag == -1 or self.frequency_flag == time or (rule_step and self.frequency_flag == -2):
 *             self.rule_operation(state, params, time, dt)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1006
 *             self.rule_operation(state, params, time, dt)
 * 
 *     cdef void execute_volume_rule(self, double *state, double *params, double volume, double time, double dt, unsigned rule_step):             # <<<<<<<<<<<<<<
 *         if self.frequency_flag == -1 or self.frequency_flag == time or (rule_step and self.frequency_flag == -2):
 *             self.rule_volume_operation(state, params, volume, time, dt)
 */

static void __pyx_f_9bioscrape_5types_4Rule_execute_volume_rule(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time, double __pyx_v_dt, unsigned int __pyx_v_rule_step) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("execute_volume_rule", 0);

  /* "bioscrape/types.pyx":1007
 * 
 *     cdef void execute_volume_rule(self, double *state, double *params, double volume, double time, double dt, unsigned rule_step):
 *         if self.frequency_flag == -1 or self.frequency_flag == time or (rule_step and self.frequency_flag == -2):             # <<<<<<<<<<<<<<
 *             self.rule_volume_operation(state, params, volume, time, dt)
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->frequency_flag == -1.0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->frequency_flag == __pyx_v_time) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_rule_step != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->frequency_flag == -2.0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1008
 *     cdef void execute_volume_rule(self, double *state, double *params, double volume, double time, double dt, unsigned rule_step):
 *         if self.frequency_flag == -1 or self.frequency_flag == time or (rule_step and self.frequency_flag == -2):
 *             self.rule_volume_operation(state, params, volume, time, dt)             # <<<<<<<<<<<<<<
 * 
 *     def py_execute_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 */
    ((struct __pyx_vtabstruct_9bioscrape_5types_Rule *)__pyx_v_self->__pyx_vtab)->rule_volume_operation(__pyx_v_self, __pyx_v_state, __pyx_v_params, __pyx_v_volume, __pyx_v_time, __pyx_v_dt);

    /* "bioscrape/types.pyx":1007
 * 
 *     cdef void execute_volume_rule(self, double *state, double *params, double volume, double time, double dt, unsigned rule_step):
 *         if self.frequency_flag == -1 or self.frequency_flag == time or (rule_step and self.frequency_flag == -2):             # <<<<<<<<<<<<<<
 *             self.rule_volume_operation(state, params, volume, time, dt)
 * 
 */
  }

  /* "bioscrape/types.pyx":1006
 *             self.rule_operation(state, params, time, dt)
 * 
 *     cdef void execute_volume_rule(self, double *state, double *params, double volume, double time, double dt, unsigned rule_step):             # <<<<<<<<<<<<<<
 *         if self.frequency_flag == -1 or self.frequency_flag == time or (rule_step and self.frequency_flag == -2):
 *             self.rule_volume_operation(state, params, volume, time, dt)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1010
 *             self.rule_volume_operation(state, params, volume, time, dt)
 * 
 *     def py_execute_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                         double time = 0.0, double dt = .01, rule_step = True):
 *         self.execute_rule(<double*> state.data, <double*> params.data,time, dt, rule_step)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_1py_execute_rule(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_1py_execute_rule(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_state = 0;
  PyArrayObject *__pyx_v_params = 0;
  double __pyx_v_time;
  double __pyx_v_dt;
  PyObject *__pyx_v_rule_step = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_execute_rule (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_state,&__pyx_n_s_params,&__pyx_n_s_time,&__pyx_n_s_dt,&__pyx_n_s_rule_step,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "bioscrape/types.pyx":1011
 * 
 *     def py_execute_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 *                         double time = 0.0, double dt = .01, rule_step = True):             # <<<<<<<<<<<<<<
 *         self.execute_rule(<double*> state.data, <double*> params.data,time, dt, rule_step)
 * 
 */
    values[4] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_execute_rule", 0, 2, 5, 1); __PYX_ERR(0, 1010, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rule_step);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_execute_rule") < 0)) __PYX_ERR(0, 1010, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_state = ((PyArrayObject *)values[0]);
    __pyx_v_params = ((PyArrayObject *)values[1]);
    if (values[2]) {
      __pyx_v_time = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1011, __pyx_L3_error)
    } else {
      __pyx_v_time = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_dt = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1011, __pyx_L3_error)
    } else {
      __pyx_v_dt = ((double).01);
    }
    __pyx_v_rule_step = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_execute_rule", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1010, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Rule.py_execute_rule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_state), __pyx_ptype_5numpy_ndarray, 1, "state", 0))) __PYX_ERR(0, 1010, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), __pyx_ptype_5numpy_ndarray, 1, "params", 0))) __PYX_ERR(0, 1010, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_4Rule_py_execute_rule(((struct __pyx_obj_9bioscrape_5types_Rule *)__pyx_v_self), __pyx_v_state, __pyx_v_params, __pyx_v_time, __pyx_v_dt, __pyx_v_rule_step);

  /* "bioscrape/types.pyx":1010
 *             self.rule_volume_operation(state, params, volume, time, dt)
 * 
 *     def py_execute_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                         double time = 0.0, double dt = .01, rule_step = True):
 *         self.execute_rule(<double*> state.data, <double*> params.data,time, dt, rule_step)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4Rule_py_execute_rule(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_time, double __pyx_v_dt, PyObject *__pyx_v_rule_step) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_params;
  __Pyx_Buffer __pyx_pybuffer_params;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_state;
  __Pyx_Buffer __pyx_pybuffer_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __Pyx_RefNannySetupContext("py_execute_rule", 0);
  __pyx_pybuffer_state.pybuffer.buf = NULL;
  __pyx_pybuffer_state.refcount = 0;
  __pyx_pybuffernd_state.data = NULL;
  __pyx_pybuffernd_state.rcbuffer = &__pyx_pybuffer_state;
  __pyx_pybuffer_params.pybuffer.buf = NULL;
  __pyx_pybuffer_params.refcount = 0;
  __pyx_pybuffernd_params.data = NULL;
  __pyx_pybuffernd_params.rcbuffer = &__pyx_pybuffer_params;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_state.rcbuffer->pybuffer, (PyObject*)__pyx_v_state, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1010, __pyx_L1_error)
  }
  __pyx_pybuffernd_state.diminfo[0].strides = __pyx_pybuffernd_state.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_state.diminfo[0].shape = __pyx_pybuffernd_state.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_params.rcbuffer->pybuffer, (PyObject*)__pyx_v_params, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1010, __pyx_L1_error)
  }
  __pyx_pybuffernd_params.diminfo[0].strides = __pyx_pybuffernd_params.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_params.diminfo[0].shape = __pyx_pybuffernd_params.rcbuffer->pybuffer.shape[0];

  /* "bioscrape/types.pyx":1012
 *     def py_execute_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 *                         double time = 0.0, double dt = .01, rule_step = True):
 *         self.execute_rule(<double*> state.data, <double*> params.data,time, dt, rule_step)             # <<<<<<<<<<<<<<
 * 
 *     def py_execute_volume_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_rule_step); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1012, __pyx_L1_error)
  ((struct __pyx_vtabstruct_9bioscrape_5types_Rule *)__pyx_v_self->__pyx_vtab)->execute_rule(__pyx_v_self, ((double *)__pyx_v_state->data), ((double *)__pyx_v_params->data), __pyx_v_time, __pyx_v_dt, __pyx_t_1);

  /* "bioscrape/types.pyx":1010
 *             self.rule_volume_operation(state, params, volume, time, dt)
 * 
 *     def py_execute_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                         double time = 0.0, double dt = .01, rule_step = True):
 *         self.execute_rule(<double*> state.data, <double*> params.data,time, dt, rule_step)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("bioscrape.types.Rule.py_execute_rule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1014
 *         self.execute_rule(<double*> state.data, <double*> params.data,time, dt, rule_step)
 * 
 *     def py_execute_volume_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                                double volume, double time=0.0, double dt = .01, rule_step = True):
 *         self.execute_volume_rule(<double*> state.data, <double*> params.data, volume,time, dt, rule_step)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_3py_execute_volume_rule(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_3py_execute_volume_rule(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_state = 0;
  PyArrayObject *__pyx_v_params = 0;
  double __pyx_v_volume;
  double __pyx_v_time;
  double __pyx_v_dt;
  PyObject *__pyx_v_rule_step = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_execute_volume_rule (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_state,&__pyx_n_s_params,&__pyx_n_s_volume,&__pyx_n_s_time,&__pyx_n_s_dt,&__pyx_n_s_rule_step,0};
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "bioscrape/types.pyx":1015
 * 
 *     def py_execute_volume_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 *                                double volume, double time=0.0, double dt = .01, rule_step = True):             # <<<<<<<<<<<<<<
 *         self.execute_volume_rule(<double*> state.data, <double*> params.data, volume,time, dt, rule_step)
 * 
 */
    values[5] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_execute_volume_rule", 0, 3, 6, 1); __PYX_ERR(0, 1014, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_execute_volume_rule", 0, 3, 6, 2); __PYX_ERR(0, 1014, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rule_step);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_execute_volume_rule") < 0)) __PYX_ERR(0, 1014, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_state = ((PyArrayObject *)values[0]);
    __pyx_v_params = ((PyArrayObject *)values[1]);
    __pyx_v_volume = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_volume == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_time = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L3_error)
    } else {
      __pyx_v_time = ((double)0.0);
    }
    if (values[4]) {
      __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L3_error)
    } else {
      __pyx_v_dt = ((double).01);
    }
    __pyx_v_rule_step = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_execute_volume_rule", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1014, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Rule.py_execute_volume_rule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_state), __pyx_ptype_5numpy_ndarray, 1, "state", 0))) __PYX_ERR(0, 1014, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), __pyx_ptype_5numpy_ndarray, 1, "params", 0))) __PYX_ERR(0, 1014, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_4Rule_2py_execute_volume_rule(((struct __pyx_obj_9bioscrape_5types_Rule *)__pyx_v_self), __pyx_v_state, __pyx_v_params, __pyx_v_volume, __pyx_v_time, __pyx_v_dt, __pyx_v_rule_step);

  /* "bioscrape/types.pyx":1014
 *         self.execute_rule(<double*> state.data, <double*> params.data,time, dt, rule_step)
 * 
 *     def py_execute_volume_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                                double volume, double time=0.0, double dt = .01, rule_step = True):
 *         self.execute_volume_rule(<double*> state.data, <double*> params.data, volume,time, dt, rule_step)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4Rule_2py_execute_volume_rule(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time, double __pyx_v_dt, PyObject *__pyx_v_rule_step) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_params;
  __Pyx_Buffer __pyx_pybuffer_params;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_state;
  __Pyx_Buffer __pyx_pybuffer_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __Pyx_RefNannySetupContext("py_execute_volume_rule", 0);
  __pyx_pybuffer_state.pybuffer.buf = NULL;
  __pyx_pybuffer_state.refcount = 0;
  __pyx_pybuffernd_state.data = NULL;
  __pyx_pybuffernd_state.rcbuffer = &__pyx_pybuffer_state;
  __pyx_pybuffer_params.pybuffer.buf = NULL;
  __pyx_pybuffer_params.refcount = 0;
  __pyx_pybuffernd_params.data = NULL;
  __pyx_pybuffernd_params.rcbuffer = &__pyx_pybuffer_params;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_state.rcbuffer->pybuffer, (PyObject*)__pyx_v_state, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1014, __pyx_L1_error)
  }
  __pyx_pybuffernd_state.diminfo[0].strides = __pyx_pybuffernd_state.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_state.diminfo[0].shape = __pyx_pybuffernd_state.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_params.rcbuffer->pybuffer, (PyObject*)__pyx_v_params, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1014, __pyx_L1_error)
  }
  __pyx_pybuffernd_params.diminfo[0].strides = __pyx_pybuffernd_params.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_params.diminfo[0].shape = __pyx_pybuffernd_params.rcbuffer->pybuffer.shape[0];

  /* "bioscrape/types.pyx":1016
 *     def py_execute_volume_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 *                                double volume, double time=0.0, double dt = .01, rule_step = True):
 *         self.execute_volume_rule(<double*> state.data, <double*> params.data, volume,time, dt, rule_step)             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, dict dictionary, dict species_indices, dict parameter_indices, rule_frequency = "repeat"):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_rule_step); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1016, __pyx_L1_error)
  ((struct __pyx_vtabstruct_9bioscrape_5types_Rule *)__pyx_v_self->__pyx_vtab)->execute_volume_rule(__pyx_v_self, ((double *)__pyx_v_state->data), ((double *)__pyx_v_params->data), __pyx_v_volume, __pyx_v_time, __pyx_v_dt, __pyx_t_1);

  /* "bioscrape/types.pyx":1014
 *         self.execute_rule(<double*> state.data, <double*> params.data,time, dt, rule_step)
 * 
 *     def py_execute_volume_rule(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                                double volume, double time=0.0, double dt = .01, rule_step = True):
 *         self.execute_volume_rule(<double*> state.data, <double*> params.data, volume,time, dt, rule_step)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("bioscrape.types.Rule.py_execute_volume_rule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1018
 *         self.execute_volume_rule(<double*> state.data, <double*> params.data, volume,time, dt, rule_step)
 * 
 *     def initialize(self, dict dictionary, dict species_indices, dict parameter_indices, rule_frequency = "repeat"):             # <<<<<<<<<<<<<<
 *         """
 *         Initializes the parameters and species to look at the right indices in the state
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_4Rule_4initialize[] = "\n        Initializes the parameters and species to look at the right indices in the state\n        :param dictionary: (dict:str--> str) the fields for the propensity 'k','s1' etc map to the actual parameter\n                                             and species names\n        :param species_indices: (dict:str-->int) map species names to entry in species vector\n        :param parameter_indices: (dict:str-->int) map param names to entry in param vector\n        :return: nothing\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_dictionary = 0;
  CYTHON_UNUSED PyObject *__pyx_v_species_indices = 0;
  CYTHON_UNUSED PyObject *__pyx_v_parameter_indices = 0;
  CYTHON_UNUSED PyObject *__pyx_v_rule_frequency = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,&__pyx_n_s_rule_frequency,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_repeat);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, 1); __PYX_ERR(0, 1018, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, 2); __PYX_ERR(0, 1018, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rule_frequency);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 1018, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
    __pyx_v_rule_frequency = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1018, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Rule.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dictionary), (&PyDict_Type), 1, "dictionary", 1))) __PYX_ERR(0, 1018, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 1018, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 1018, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_4Rule_4initialize(((struct __pyx_obj_9bioscrape_5types_Rule *)__pyx_v_self), __pyx_v_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices, __pyx_v_rule_frequency);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4Rule_4initialize(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_dictionary, CYTHON_UNUSED PyObject *__pyx_v_species_indices, CYTHON_UNUSED PyObject *__pyx_v_parameter_indices, CYTHON_UNUSED PyObject *__pyx_v_rule_frequency) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1029
 *         pass
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         """
 *         get which fields are species and which are parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_7get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_4Rule_6get_species_and_parameters[] = "\n        get which fields are species and which are parameters\n        :param dict(str-->str) dictionary containing the propensity to process.\n        :return: (list(string), list(string)) First entry is the names of species, second entry is the names of parameters\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_7get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 1029, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1029, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.Rule.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 1029, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_4Rule_6get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_Rule *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4Rule_6get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":1035
 *         :return: (list(string), list(string)) First entry is the names of species, second entry is the names of parameters
 *         """
 *         return (None,None)             # <<<<<<<<<<<<<<
 * 
 *     def set_frequency_flag(self, rule_frequency):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple_);
  __pyx_r = __pyx_tuple_;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1029
 *         pass
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         """
 *         get which fields are species and which are parameters
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1037
 *         return (None,None)
 * 
 *     def set_frequency_flag(self, rule_frequency):             # <<<<<<<<<<<<<<
 *         if rule_frequency == "start":
 *             self.frequency_flag = 0.0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_9set_frequency_flag(PyObject *__pyx_v_self, PyObject *__pyx_v_rule_frequency); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_9set_frequency_flag(PyObject *__pyx_v_self, PyObject *__pyx_v_rule_frequency) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_frequency_flag (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_4Rule_8set_frequency_flag(((struct __pyx_obj_9bioscrape_5types_Rule *)__pyx_v_self), ((PyObject *)__pyx_v_rule_frequency));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4Rule_8set_frequency_flag(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, PyObject *__pyx_v_rule_frequency) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("set_frequency_flag", 0);

  /* "bioscrape/types.pyx":1038
 * 
 *     def set_frequency_flag(self, rule_frequency):
 *         if rule_frequency == "start":             # <<<<<<<<<<<<<<
 *             self.frequency_flag = 0.0
 * 
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_rule_frequency, __pyx_n_s_start, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1038, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1039
 *     def set_frequency_flag(self, rule_frequency):
 *         if rule_frequency == "start":
 *             self.frequency_flag = 0.0             # <<<<<<<<<<<<<<
 * 
 *         elif rule_frequency == "repeat" or rule_frequency == "repeated":
 */
    __pyx_v_self->frequency_flag = 0.0;

    /* "bioscrape/types.pyx":1038
 * 
 *     def set_frequency_flag(self, rule_frequency):
 *         if rule_frequency == "start":             # <<<<<<<<<<<<<<
 *             self.frequency_flag = 0.0
 * 
 */
    goto __pyx_L3;
  }

  /* "bioscrape/types.pyx":1041
 *             self.frequency_flag = 0.0
 * 
 *         elif rule_frequency == "repeat" or rule_frequency == "repeated":             # <<<<<<<<<<<<<<
 *             self.frequency_flag = -1.0
 * 
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_rule_frequency, __pyx_n_s_repeat, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1041, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_rule_frequency, __pyx_n_s_repeated, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1042
 * 
 *         elif rule_frequency == "repeat" or rule_frequency == "repeated":
 *             self.frequency_flag = -1.0             # <<<<<<<<<<<<<<
 * 
 *         elif rule_frequency == "dt":
 */
    __pyx_v_self->frequency_flag = -1.0;

    /* "bioscrape/types.pyx":1041
 *             self.frequency_flag = 0.0
 * 
 *         elif rule_frequency == "repeat" or rule_frequency == "repeated":             # <<<<<<<<<<<<<<
 *             self.frequency_flag = -1.0
 * 
 */
    goto __pyx_L3;
  }

  /* "bioscrape/types.pyx":1044
 *             self.frequency_flag = -1.0
 * 
 *         elif rule_frequency == "dt":             # <<<<<<<<<<<<<<
 *             self.frequency_flag = -2.0
 * 
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_rule_frequency, __pyx_n_s_dt, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1044, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1045
 * 
 *         elif rule_frequency == "dt":
 *             self.frequency_flag = -2.0             # <<<<<<<<<<<<<<
 * 
 *         elif float(rule_frequency) >= 0:
 */
    __pyx_v_self->frequency_flag = -2.0;

    /* "bioscrape/types.pyx":1044
 *             self.frequency_flag = -1.0
 * 
 *         elif rule_frequency == "dt":             # <<<<<<<<<<<<<<
 *             self.frequency_flag = -2.0
 * 
 */
    goto __pyx_L3;
  }

  /* "bioscrape/types.pyx":1047
 *             self.frequency_flag = -2.0
 * 
 *         elif float(rule_frequency) >= 0:             # <<<<<<<<<<<<<<
 *             self.frequency_flag = float(rule_frequency)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_AsDouble(__pyx_v_rule_frequency); if (unlikely(__pyx_t_3 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1047, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_3 >= 0.0) != 0);
  if (likely(__pyx_t_1)) {

    /* "bioscrape/types.pyx":1048
 * 
 *         elif float(rule_frequency) >= 0:
 *             self.frequency_flag = float(rule_frequency)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_AsDouble(__pyx_v_rule_frequency); if (unlikely(__pyx_t_3 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1048, __pyx_L1_error)
    __pyx_v_self->frequency_flag = __pyx_t_3;

    /* "bioscrape/types.pyx":1047
 *             self.frequency_flag = -2.0
 * 
 *         elif float(rule_frequency) >= 0:             # <<<<<<<<<<<<<<
 *             self.frequency_flag = float(rule_frequency)
 * 
 */
    goto __pyx_L3;
  }

  /* "bioscrape/types.pyx":1051
 * 
 *         else:
 *             raise ValueError(f"Invalid rule frequency: {rule_frequency} for {self}.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_4 = PyTuple_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1051, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = 0;
    __pyx_t_6 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_rule_frequency);
    __pyx_t_5 += 24;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_rule_frequency);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Invalid_rule_frequency);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_rule_frequency, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1051, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_for);
    __pyx_t_5 += 5;
    __Pyx_GIVEREF(__pyx_kp_u_for);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_for);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(((PyObject *)__pyx_v_self), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1051, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__17);
    __pyx_t_5 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__17);
    PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u__17);
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 5, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1051, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1051, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1051, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "bioscrape/types.pyx":1037
 *         return (None,None)
 * 
 *     def set_frequency_flag(self, rule_frequency):             # <<<<<<<<<<<<<<
 *         if rule_frequency == "start":
 *             self.frequency_flag = 0.0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.Rule.set_frequency_flag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_4Rule_10__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_Rule *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4Rule_10__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.frequency_flag,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->frequency_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.frequency_flag,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.frequency_flag,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.frequency_flag,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Rule, (type(self), 0x1ce7080, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Rule, (type(self), 0x1ce7080, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Rule, (type(self), 0x1ce7080, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Rule, (type(self), 0x1ce7080, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_Rule); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_30306432);
    __Pyx_GIVEREF(__pyx_int_30306432);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_30306432);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Rule, (type(self), 0x1ce7080, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Rule, (type(self), 0x1ce7080, None), state
 *     else:
 *         return __pyx_unpickle_Rule, (type(self), 0x1ce7080, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Rule__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Rule); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_30306432);
    __Pyx_GIVEREF(__pyx_int_30306432);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_30306432);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Rule.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Rule, (type(self), 0x1ce7080, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Rule__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_4Rule_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_4Rule_12__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_Rule *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_4Rule_12__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Rule, (type(self), 0x1ce7080, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Rule__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_Rule__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Rule, (type(self), 0x1ce7080, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Rule__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Rule.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1059
 *     """
 * 
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):             # <<<<<<<<<<<<<<
 *         cdef unsigned i = 0
 *         cdef double answer = 0.0
 */

static void __pyx_f_9bioscrape_5types_22AdditiveAssignmentRule_rule_operation(struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *__pyx_v_self, double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, CYTHON_UNUSED double __pyx_v_dt) {
  unsigned int __pyx_v_i;
  double __pyx_v_answer;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  unsigned int __pyx_t_3;
  __Pyx_RefNannySetupContext("rule_operation", 0);

  /* "bioscrape/types.pyx":1060
 * 
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):
 *         cdef unsigned i = 0             # <<<<<<<<<<<<<<
 *         cdef double answer = 0.0
 *         for i in range(self.species_source_indices.size()):
 */
  __pyx_v_i = 0;

  /* "bioscrape/types.pyx":1061
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):
 *         cdef unsigned i = 0
 *         cdef double answer = 0.0             # <<<<<<<<<<<<<<
 *         for i in range(self.species_source_indices.size()):
 *             answer += state[ self.species_source_indices[i] ]
 */
  __pyx_v_answer = 0.0;

  /* "bioscrape/types.pyx":1062
 *         cdef unsigned i = 0
 *         cdef double answer = 0.0
 *         for i in range(self.species_source_indices.size()):             # <<<<<<<<<<<<<<
 *             answer += state[ self.species_source_indices[i] ]
 * 
 */
  __pyx_t_1 = __pyx_v_self->species_source_indices.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "bioscrape/types.pyx":1063
 *         cdef double answer = 0.0
 *         for i in range(self.species_source_indices.size()):
 *             answer += state[ self.species_source_indices[i] ]             # <<<<<<<<<<<<<<
 * 
 *         state[self.dest_index] = answer
 */
    __pyx_v_answer = (__pyx_v_answer + (__pyx_v_state[(__pyx_v_self->species_source_indices[__pyx_v_i])]));
  }

  /* "bioscrape/types.pyx":1065
 *             answer += state[ self.species_source_indices[i] ]
 * 
 *         state[self.dest_index] = answer             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, dict dictionary, dict species_indices, dict parameter_indices, rule_frequency = "repeat"):
 */
  (__pyx_v_state[__pyx_v_self->dest_index]) = __pyx_v_answer;

  /* "bioscrape/types.pyx":1059
 *     """
 * 
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):             # <<<<<<<<<<<<<<
 *         cdef unsigned i = 0
 *         cdef double answer = 0.0
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1067
 *         state[self.dest_index] = answer
 * 
 *     def initialize(self, dict dictionary, dict species_indices, dict parameter_indices, rule_frequency = "repeat"):             # <<<<<<<<<<<<<<
 *         self.set_frequency_flag(rule_frequency)
 *         equation = dictionary['equation']
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_1initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_1initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dictionary = 0;
  PyObject *__pyx_v_species_indices = 0;
  CYTHON_UNUSED PyObject *__pyx_v_parameter_indices = 0;
  PyObject *__pyx_v_rule_frequency = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dictionary,&__pyx_n_s_species_indices,&__pyx_n_s_parameter_indices,&__pyx_n_s_rule_frequency,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_repeat);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dictionary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, 1); __PYX_ERR(0, 1067, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, 2); __PYX_ERR(0, 1067, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rule_frequency);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 1067, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dictionary = ((PyObject*)values[0]);
    __pyx_v_species_indices = ((PyObject*)values[1]);
    __pyx_v_parameter_indices = ((PyObject*)values[2]);
    __pyx_v_rule_frequency = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1067, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.AdditiveAssignmentRule.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dictionary), (&PyDict_Type), 1, "dictionary", 1))) __PYX_ERR(0, 1067, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 1067, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parameter_indices), (&PyDict_Type), 1, "parameter_indices", 1))) __PYX_ERR(0, 1067, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_initialize(((struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *)__pyx_v_self), __pyx_v_dictionary, __pyx_v_species_indices, __pyx_v_parameter_indices, __pyx_v_rule_frequency);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_initialize(struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *__pyx_v_self, PyObject *__pyx_v_dictionary, PyObject *__pyx_v_species_indices, CYTHON_UNUSED PyObject *__pyx_v_parameter_indices, PyObject *__pyx_v_rule_frequency) {
  PyObject *__pyx_v_equation = NULL;
  PyObject *__pyx_v_split_eqn = NULL;
  PyObject *__pyx_v_dest_name = NULL;
  PyObject *__pyx_v_src_names = NULL;
  PyObject *__pyx_v_string = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":1068
 * 
 *     def initialize(self, dict dictionary, dict species_indices, dict parameter_indices, rule_frequency = "repeat"):
 *         self.set_frequency_flag(rule_frequency)             # <<<<<<<<<<<<<<
 *         equation = dictionary['equation']
 *         split_eqn = [s.strip() for s in equation.split('=') ]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_frequency_flag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_rule_frequency) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_rule_frequency);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1069
 *     def initialize(self, dict dictionary, dict species_indices, dict parameter_indices, rule_frequency = "repeat"):
 *         self.set_frequency_flag(rule_frequency)
 *         equation = dictionary['equation']             # <<<<<<<<<<<<<<
 *         split_eqn = [s.strip() for s in equation.split('=') ]
 *         assert(len(split_eqn) == 2)
 */
  if (unlikely(__pyx_v_dictionary == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1069, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_dictionary, __pyx_n_s_equation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_equation = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1070
 *         self.set_frequency_flag(rule_frequency)
 *         equation = dictionary['equation']
 *         split_eqn = [s.strip() for s in equation.split('=') ]             # <<<<<<<<<<<<<<
 *         assert(len(split_eqn) == 2)
 *         dest_name = split_eqn[0]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_equation, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_kp_s__18) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s__18);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1070, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1070, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1070, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1070, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1070, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1070, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_strip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 1070, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_split_eqn = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1071
 *         equation = dictionary['equation']
 *         split_eqn = [s.strip() for s in equation.split('=') ]
 *         assert(len(split_eqn) == 2)             # <<<<<<<<<<<<<<
 *         dest_name = split_eqn[0]
 *         src_names = [s.strip() for s in split_eqn[1].split('+')]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = PyList_GET_SIZE(__pyx_v_split_eqn); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1071, __pyx_L1_error)
    if (unlikely(!((__pyx_t_5 == 2) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1071, __pyx_L1_error)
    }
  }
  #endif

  /* "bioscrape/types.pyx":1072
 *         split_eqn = [s.strip() for s in equation.split('=') ]
 *         assert(len(split_eqn) == 2)
 *         dest_name = split_eqn[0]             # <<<<<<<<<<<<<<
 *         src_names = [s.strip() for s in split_eqn[1].split('+')]
 * 
 */
  __pyx_t_1 = PyList_GET_ITEM(__pyx_v_split_eqn, 0);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_dest_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1073
 *         assert(len(split_eqn) == 2)
 *         dest_name = split_eqn[0]
 *         src_names = [s.strip() for s in split_eqn[1].split('+')]             # <<<<<<<<<<<<<<
 * 
 *         self.dest_index = species_indices[dest_name]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_split_eqn, 1), __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_kp_s__4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s__4);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1073, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1073, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1073, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1073, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_strip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_src_names = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1075
 *         src_names = [s.strip() for s in split_eqn[1].split('+')]
 * 
 *         self.dest_index = species_indices[dest_name]             # <<<<<<<<<<<<<<
 * 
 *         for string in src_names:
 */
  if (unlikely(__pyx_v_species_indices == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1075, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, __pyx_v_dest_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->dest_index = __pyx_t_8;

  /* "bioscrape/types.pyx":1077
 *         self.dest_index = species_indices[dest_name]
 * 
 *         for string in src_names:             # <<<<<<<<<<<<<<
 *             self.species_source_indices.push_back(  species_indices[string]  )
 * 
 */
  __pyx_t_1 = __pyx_v_src_names; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1077, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_string, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1078
 * 
 *         for string in src_names:
 *             self.species_source_indices.push_back(  species_indices[string]  )             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):
 */
    if (unlikely(__pyx_v_species_indices == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1078, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_species_indices, __pyx_v_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->species_source_indices.push_back(__pyx_t_9);

    /* "bioscrape/types.pyx":1077
 *         self.dest_index = species_indices[dest_name]
 * 
 *         for string in src_names:             # <<<<<<<<<<<<<<
 *             self.species_source_indices.push_back(  species_indices[string]  )
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1067
 *         state[self.dest_index] = answer
 * 
 *     def initialize(self, dict dictionary, dict species_indices, dict parameter_indices, rule_frequency = "repeat"):             # <<<<<<<<<<<<<<
 *         self.set_frequency_flag(rule_frequency)
 *         equation = dictionary['equation']
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.AdditiveAssignmentRule.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_equation);
  __Pyx_XDECREF(__pyx_v_split_eqn);
  __Pyx_XDECREF(__pyx_v_dest_name);
  __Pyx_XDECREF(__pyx_v_src_names);
  __Pyx_XDECREF(__pyx_v_string);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1080
 *             self.species_source_indices.push_back(  species_indices[string]  )
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         # Add the species names
 *         equation = fields['equation']
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_3get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_3get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 1080, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1080, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.AdditiveAssignmentRule.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_2get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *)__pyx_v_self), __pyx_v_fields, __pyx_v_keywords);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_2get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *__pyx_v_self, PyObject *__pyx_v_fields, CYTHON_UNUSED PyObject *__pyx_v_keywords) {
  PyObject *__pyx_v_equation = NULL;
  PyObject *__pyx_v_split_eqn = NULL;
  PyObject *__pyx_v_dest_name = NULL;
  PyObject *__pyx_v_species_names = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":1082
 *     def get_species_and_parameters(self, dict fields, **keywords):
 *         # Add the species names
 *         equation = fields['equation']             # <<<<<<<<<<<<<<
 *         split_eqn = [s.strip() for s in equation.split('=') ]
 *         assert(len(split_eqn) == 2)
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1082, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_equation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_equation = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1083
 *         # Add the species names
 *         equation = fields['equation']
 *         split_eqn = [s.strip() for s in equation.split('=') ]             # <<<<<<<<<<<<<<
 *         assert(len(split_eqn) == 2)
 *         dest_name = split_eqn[0]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_equation, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_kp_s__18) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s__18);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1083, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1083, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1083, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1083, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_strip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 1083, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_split_eqn = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1084
 *         equation = fields['equation']
 *         split_eqn = [s.strip() for s in equation.split('=') ]
 *         assert(len(split_eqn) == 2)             # <<<<<<<<<<<<<<
 *         dest_name = split_eqn[0]
 *         species_names = [s.strip() for s in split_eqn[1].split('+')]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = PyList_GET_SIZE(__pyx_v_split_eqn); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1084, __pyx_L1_error)
    if (unlikely(!((__pyx_t_5 == 2) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1084, __pyx_L1_error)
    }
  }
  #endif

  /* "bioscrape/types.pyx":1085
 *         split_eqn = [s.strip() for s in equation.split('=') ]
 *         assert(len(split_eqn) == 2)
 *         dest_name = split_eqn[0]             # <<<<<<<<<<<<<<
 *         species_names = [s.strip() for s in split_eqn[1].split('+')]
 *         species_names.append(dest_name)
 */
  __pyx_t_1 = PyList_GET_ITEM(__pyx_v_split_eqn, 0);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_dest_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1086
 *         assert(len(split_eqn) == 2)
 *         dest_name = split_eqn[0]
 *         species_names = [s.strip() for s in split_eqn[1].split('+')]             # <<<<<<<<<<<<<<
 *         species_names.append(dest_name)
 *         return species_names, []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(PyList_GET_ITEM(__pyx_v_split_eqn, 1), __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_kp_s__4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s__4);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1086, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1086, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1086, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1086, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_strip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_species_names = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1087
 *         dest_name = split_eqn[0]
 *         species_names = [s.strip() for s in split_eqn[1].split('+')]
 *         species_names.append(dest_name)             # <<<<<<<<<<<<<<
 *         return species_names, []
 * 
 */
  __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_species_names, __pyx_v_dest_name); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1087, __pyx_L1_error)

  /* "bioscrape/types.pyx":1088
 *         species_names = [s.strip() for s in split_eqn[1].split('+')]
 *         species_names.append(dest_name)
 *         return species_names, []             # <<<<<<<<<<<<<<
 * 
 * cdef class GeneralAssignmentRule(Rule):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_species_names);
  __Pyx_GIVEREF(__pyx_v_species_names);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_species_names);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1080
 *             self.species_source_indices.push_back(  species_indices[string]  )
 * 
 *     def get_species_and_parameters(self, dict fields, **keywords):             # <<<<<<<<<<<<<<
 *         # Add the species names
 *         equation = fields['equation']
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.AdditiveAssignmentRule.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_equation);
  __Pyx_XDECREF(__pyx_v_split_eqn);
  __Pyx_XDECREF(__pyx_v_dest_name);
  __Pyx_XDECREF(__pyx_v_species_names);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_4__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_4__reduce_cython__(struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.dest_index, self.frequency_flag, self.species_source_indices)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->dest_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.frequency_flag); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_vector_to_py_int(__pyx_v_self->species_source_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.dest_index, self.frequency_flag, self.species_source_indices)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.dest_index, self.frequency_flag, self.species_source_indices)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.dest_index, self.frequency_flag, self.species_source_indices)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_AdditiveAssignmentRule, (type(self), 0xf8da774, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_AdditiveAssignmentRule, (type(self), 0xf8da774, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_AdditiveAssignmentRule, (type(self), 0xf8da774, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_AdditiveAssignmentRule, (type(self), 0xf8da774, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_AdditiveAssignmen); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_260941684);
    __Pyx_GIVEREF(__pyx_int_260941684);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_260941684);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_AdditiveAssignmentRule, (type(self), 0xf8da774, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_AdditiveAssignmentRule, (type(self), 0xf8da774, None), state
 *     else:
 *         return __pyx_unpickle_AdditiveAssignmentRule, (type(self), 0xf8da774, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_AdditiveAssignmentRule__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_AdditiveAssignmen); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_260941684);
    __Pyx_GIVEREF(__pyx_int_260941684);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_260941684);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.AdditiveAssignmentRule.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_AdditiveAssignmentRule, (type(self), 0xf8da774, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_AdditiveAssignmentRule__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_6__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22AdditiveAssignmentRule_6__setstate_cython__(struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_AdditiveAssignmentRule, (type(self), 0xf8da774, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_AdditiveAssignmentRule__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_AdditiveAssignmentRule__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_AdditiveAssignmentRule, (type(self), 0xf8da774, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_AdditiveAssignmentRule__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.AdditiveAssignmentRule.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1095
 *     the simulation.
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):             # <<<<<<<<<<<<<<
 *         if self.param_flag > 0:
 *             params[self.dest_index] = self.rhs.evaluate(state,params,time)
 */

static void __pyx_f_9bioscrape_5types_21GeneralAssignmentRule_rule_operation(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time, CYTHON_UNUSED double __pyx_v_dt) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("rule_operation", 0);

  /* "bioscrape/types.pyx":1096
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):
 *         if self.param_flag > 0:             # <<<<<<<<<<<<<<
 *             params[self.dest_index] = self.rhs.evaluate(state,params,time)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->param_flag > 0) != 0);
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1097
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):
 *         if self.param_flag > 0:
 *             params[self.dest_index] = self.rhs.evaluate(state,params,time)             # <<<<<<<<<<<<<<
 *         else:
 *             state[self.dest_index] = self.rhs.evaluate(state,params,time)
 */
    (__pyx_v_params[__pyx_v_self->dest_index]) = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->rhs->__pyx_vtab)->evaluate(__pyx_v_self->rhs, __pyx_v_state, __pyx_v_params, __pyx_v_time);

    /* "bioscrape/types.pyx":1096
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):
 *         if self.param_flag > 0:             # <<<<<<<<<<<<<<
 *             params[self.dest_index] = self.rhs.evaluate(state,params,time)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "bioscrape/types.pyx":1099
 *             params[self.dest_index] = self.rhs.evaluate(state,params,time)
 *         else:
 *             state[self.dest_index] = self.rhs.evaluate(state,params,time)             # <<<<<<<<<<<<<<
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):
 */
  /*else*/ {
    (__pyx_v_state[__pyx_v_self->dest_index]) = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->rhs->__pyx_vtab)->evaluate(__pyx_v_self->rhs, __pyx_v_state, __pyx_v_params, __pyx_v_time);
  }
  __pyx_L3:;

  /* "bioscrape/types.pyx":1095
 *     the simulation.
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):             # <<<<<<<<<<<<<<
 *         if self.param_flag > 0:
 *             params[self.dest_index] = self.rhs.evaluate(state,params,time)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1101
 *             state[self.dest_index] = self.rhs.evaluate(state,params,time)
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):             # <<<<<<<<<<<<<<
 *         if self.param_flag > 0:
 *             params[self.dest_index] = self.rhs.volume_evaluate(state,params,volume, time)
 */

static void __pyx_f_9bioscrape_5types_21GeneralAssignmentRule_rule_volume_operation(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time, CYTHON_UNUSED double __pyx_v_dt) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("rule_volume_operation", 0);

  /* "bioscrape/types.pyx":1102
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):
 *         if self.param_flag > 0:             # <<<<<<<<<<<<<<
 *             params[self.dest_index] = self.rhs.volume_evaluate(state,params,volume, time)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->param_flag > 0) != 0);
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1103
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):
 *         if self.param_flag > 0:
 *             params[self.dest_index] = self.rhs.volume_evaluate(state,params,volume, time)             # <<<<<<<<<<<<<<
 *         else:
 *             state[self.dest_index] = self.rhs.volume_evaluate(state,params,volume, time)
 */
    (__pyx_v_params[__pyx_v_self->dest_index]) = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->rhs->__pyx_vtab)->volume_evaluate(__pyx_v_self->rhs, __pyx_v_state, __pyx_v_params, __pyx_v_volume, __pyx_v_time);

    /* "bioscrape/types.pyx":1102
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):
 *         if self.param_flag > 0:             # <<<<<<<<<<<<<<
 *             params[self.dest_index] = self.rhs.volume_evaluate(state,params,volume, time)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "bioscrape/types.pyx":1105
 *             params[self.dest_index] = self.rhs.volume_evaluate(state,params,volume, time)
 *         else:
 *             state[self.dest_index] = self.rhs.volume_evaluate(state,params,volume, time)             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, dict fields, species2index, params2index, rule_frequency = "repeat"):
 */
  /*else*/ {
    (__pyx_v_state[__pyx_v_self->dest_index]) = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->rhs->__pyx_vtab)->volume_evaluate(__pyx_v_self->rhs, __pyx_v_state, __pyx_v_params, __pyx_v_volume, __pyx_v_time);
  }
  __pyx_L3:;

  /* "bioscrape/types.pyx":1101
 *             state[self.dest_index] = self.rhs.evaluate(state,params,time)
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):             # <<<<<<<<<<<<<<
 *         if self.param_flag > 0:
 *             params[self.dest_index] = self.rhs.volume_evaluate(state,params,volume, time)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1107
 *             state[self.dest_index] = self.rhs.volume_evaluate(state,params,volume, time)
 * 
 *     def initialize(self, dict fields, species2index, params2index, rule_frequency = "repeat"):             # <<<<<<<<<<<<<<
 *         self.set_frequency_flag(rule_frequency)
 *         self.rhs = parse_expression(fields['equation'].split('=')[1], species2index, params2index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_1initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_1initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_species2index = 0;
  PyObject *__pyx_v_params2index = 0;
  PyObject *__pyx_v_rule_frequency = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_species2index,&__pyx_n_s_params2index,&__pyx_n_s_rule_frequency,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_repeat);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, 1); __PYX_ERR(0, 1107, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, 2); __PYX_ERR(0, 1107, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rule_frequency);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 1107, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fields = ((PyObject*)values[0]);
    __pyx_v_species2index = values[1];
    __pyx_v_params2index = values[2];
    __pyx_v_rule_frequency = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1107, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.GeneralAssignmentRule.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 1107, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_initialize(((struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *)__pyx_v_self), __pyx_v_fields, __pyx_v_species2index, __pyx_v_params2index, __pyx_v_rule_frequency);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_initialize(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index, PyObject *__pyx_v_rule_frequency) {
  PyObject *__pyx_v_dest_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  unsigned int __pyx_t_9;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":1108
 * 
 *     def initialize(self, dict fields, species2index, params2index, rule_frequency = "repeat"):
 *         self.set_frequency_flag(rule_frequency)             # <<<<<<<<<<<<<<
 *         self.rhs = parse_expression(fields['equation'].split('=')[1], species2index, params2index)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_frequency_flag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_rule_frequency) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_rule_frequency);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1109
 *     def initialize(self, dict fields, species2index, params2index, rule_frequency = "repeat"):
 *         self.set_frequency_flag(rule_frequency)
 *         self.rhs = parse_expression(fields['equation'].split('=')[1], species2index, params2index)             # <<<<<<<<<<<<<<
 * 
 *         dest_name = fields['equation'].split('=')[0].strip()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_parse_expression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1109, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_equation); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_kp_s__18) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s__18);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_5, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_5, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_species2index);
    __Pyx_GIVEREF(__pyx_v_species2index);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_v_species2index);
    __Pyx_INCREF(__pyx_v_params2index);
    __Pyx_GIVEREF(__pyx_v_params2index);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_v_params2index);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rhs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rhs));
  __pyx_v_self->rhs = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1111
 *         self.rhs = parse_expression(fields['equation'].split('=')[1], species2index, params2index)
 * 
 *         dest_name = fields['equation'].split('=')[0].strip()             # <<<<<<<<<<<<<<
 * 
 *         #if dest_name[0] == '_' or dest_name[0] == '|':
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1111, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_equation); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_kp_s__18) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s__18);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_strip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dest_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1114
 * 
 *         #if dest_name[0] == '_' or dest_name[0] == '|':
 *         if dest_name[0] == '_':             # <<<<<<<<<<<<<<
 *             dest_name = dest_name[1:]
 *         if dest_name in params2index:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_dest_name, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s__12, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "bioscrape/types.pyx":1115
 *         #if dest_name[0] == '_' or dest_name[0] == '|':
 *         if dest_name[0] == '_':
 *             dest_name = dest_name[1:]             # <<<<<<<<<<<<<<
 *         if dest_name in params2index:
 *             self.param_flag = 1
 */
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_dest_name, 1, 0, NULL, NULL, &__pyx_slice__14, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_dest_name, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":1114
 * 
 *         #if dest_name[0] == '_' or dest_name[0] == '|':
 *         if dest_name[0] == '_':             # <<<<<<<<<<<<<<
 *             dest_name = dest_name[1:]
 *         if dest_name in params2index:
 */
  }

  /* "bioscrape/types.pyx":1116
 *         if dest_name[0] == '_':
 *             dest_name = dest_name[1:]
 *         if dest_name in params2index:             # <<<<<<<<<<<<<<
 *             self.param_flag = 1
 *             self.dest_index = params2index[dest_name]
 */
  __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_dest_name, __pyx_v_params2index, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "bioscrape/types.pyx":1117
 *             dest_name = dest_name[1:]
 *         if dest_name in params2index:
 *             self.param_flag = 1             # <<<<<<<<<<<<<<
 *             self.dest_index = params2index[dest_name]
 *         else:
 */
    __pyx_v_self->param_flag = 1;

    /* "bioscrape/types.pyx":1118
 *         if dest_name in params2index:
 *             self.param_flag = 1
 *             self.dest_index = params2index[dest_name]             # <<<<<<<<<<<<<<
 *         else:
 *             self.param_flag = 0
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_params2index, __pyx_v_dest_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->dest_index = __pyx_t_9;

    /* "bioscrape/types.pyx":1116
 *         if dest_name[0] == '_':
 *             dest_name = dest_name[1:]
 *         if dest_name in params2index:             # <<<<<<<<<<<<<<
 *             self.param_flag = 1
 *             self.dest_index = params2index[dest_name]
 */
    goto __pyx_L4;
  }

  /* "bioscrape/types.pyx":1120
 *             self.dest_index = params2index[dest_name]
 *         else:
 *             self.param_flag = 0             # <<<<<<<<<<<<<<
 *             self.dest_index = species2index[dest_name]
 * 
 */
  /*else*/ {
    __pyx_v_self->param_flag = 0;

    /* "bioscrape/types.pyx":1121
 *         else:
 *             self.param_flag = 0
 *             self.dest_index = species2index[dest_name]             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_species2index, __pyx_v_dest_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1121, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->dest_index = __pyx_t_9;
  }
  __pyx_L4:;

  /* "bioscrape/types.pyx":1107
 *             state[self.dest_index] = self.rhs.volume_evaluate(state,params,volume, time)
 * 
 *     def initialize(self, dict fields, species2index, params2index, rule_frequency = "repeat"):             # <<<<<<<<<<<<<<
 *         self.set_frequency_flag(rule_frequency)
 *         self.rhs = parse_expression(fields['equation'].split('=')[1], species2index, params2index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.GeneralAssignmentRule.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dest_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1123
 *             self.dest_index = species2index[dest_name]
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):             # <<<<<<<<<<<<<<
 *         instring = fields['equation'].strip()
 *         dest_name = instring.split('=')[0].strip()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_3get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_3get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_species2index = 0;
  PyObject *__pyx_v_params2index = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_species2index,&__pyx_n_s_params2index,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 3, 3, 1); __PYX_ERR(0, 1123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 3, 3, 2); __PYX_ERR(0, 1123, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 1123, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
    __pyx_v_species2index = ((PyObject*)values[1]);
    __pyx_v_params2index = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1123, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.GeneralAssignmentRule.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 1123, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species2index), (&PyDict_Type), 1, "species2index", 1))) __PYX_ERR(0, 1123, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params2index), (&PyDict_Type), 1, "params2index", 1))) __PYX_ERR(0, 1123, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_2get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *)__pyx_v_self), __pyx_v_fields, __pyx_v_species2index, __pyx_v_params2index);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_2get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index) {
  PyObject *__pyx_v_instring = NULL;
  PyObject *__pyx_v_dest_name = NULL;
  PyObject *__pyx_v_species_names = NULL;
  PyObject *__pyx_v_param_names = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":1124
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):
 *         instring = fields['equation'].strip()             # <<<<<<<<<<<<<<
 *         dest_name = instring.split('=')[0].strip()
 *         instring = instring.split('=')[1]
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1124, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_equation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_instring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1125
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):
 *         instring = fields['equation'].strip()
 *         dest_name = instring.split('=')[0].strip()             # <<<<<<<<<<<<<<
 *         instring = instring.split('=')[1]
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_instring, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_kp_s__18) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s__18);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dest_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1126
 *         instring = fields['equation'].strip()
 *         dest_name = instring.split('=')[0].strip()
 *         instring = instring.split('=')[1]             # <<<<<<<<<<<<<<
 * 
 *         species_names, param_names = sympy_species_and_parameters(instring, species2index, params2index)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_instring, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_kp_s__18) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s__18);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_instring, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":1128
 *         instring = instring.split('=')[1]
 * 
 *         species_names, param_names = sympy_species_and_parameters(instring, species2index, params2index)             # <<<<<<<<<<<<<<
 * 
 *         if dest_name[0] == '_' or dest_name[0] == '|':
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sympy_species_and_parameters); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_instring, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_instring, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_instring);
    __Pyx_GIVEREF(__pyx_v_instring);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_instring);
    __Pyx_INCREF(__pyx_v_species2index);
    __Pyx_GIVEREF(__pyx_v_species2index);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_v_species2index);
    __Pyx_INCREF(__pyx_v_params2index);
    __Pyx_GIVEREF(__pyx_v_params2index);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_5, __pyx_v_params2index);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1128, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1128, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1128, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_species_names = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_param_names = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":1130
 *         species_names, param_names = sympy_species_and_parameters(instring, species2index, params2index)
 * 
 *         if dest_name[0] == '_' or dest_name[0] == '|':             # <<<<<<<<<<<<<<
 *             dest_name = dest_name[1:]
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dest_name, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s__12, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dest_name, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__11, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __pyx_t_8;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_7) {

    /* "bioscrape/types.pyx":1131
 * 
 *         if dest_name[0] == '_' or dest_name[0] == '|':
 *             dest_name = dest_name[1:]             # <<<<<<<<<<<<<<
 * 
 *         if dest_name in species2index:
 */
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_dest_name, 1, 0, NULL, NULL, &__pyx_slice__14, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_dest_name, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":1130
 *         species_names, param_names = sympy_species_and_parameters(instring, species2index, params2index)
 * 
 *         if dest_name[0] == '_' or dest_name[0] == '|':             # <<<<<<<<<<<<<<
 *             dest_name = dest_name[1:]
 * 
 */
  }

  /* "bioscrape/types.pyx":1133
 *             dest_name = dest_name[1:]
 * 
 *         if dest_name in species2index:             # <<<<<<<<<<<<<<
 *             species_names.append(dest_name)
 *         else:
 */
  if (unlikely(__pyx_v_species2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1133, __pyx_L1_error)
  }
  __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_v_dest_name, __pyx_v_species2index, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "bioscrape/types.pyx":1134
 * 
 *         if dest_name in species2index:
 *             species_names.append(dest_name)             # <<<<<<<<<<<<<<
 *         else:
 *             param_names.append(dest_name)
 */
    __pyx_t_9 = __Pyx_PyObject_Append(__pyx_v_species_names, __pyx_v_dest_name); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 1134, __pyx_L1_error)

    /* "bioscrape/types.pyx":1133
 *             dest_name = dest_name[1:]
 * 
 *         if dest_name in species2index:             # <<<<<<<<<<<<<<
 *             species_names.append(dest_name)
 *         else:
 */
    goto __pyx_L8;
  }

  /* "bioscrape/types.pyx":1136
 *             species_names.append(dest_name)
 *         else:
 *             param_names.append(dest_name)             # <<<<<<<<<<<<<<
 * 
 *         return species_names, param_names
 */
  /*else*/ {
    __pyx_t_9 = __Pyx_PyObject_Append(__pyx_v_param_names, __pyx_v_dest_name); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 1136, __pyx_L1_error)
  }
  __pyx_L8:;

  /* "bioscrape/types.pyx":1138
 *             param_names.append(dest_name)
 * 
 *         return species_names, param_names             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_species_names);
  __Pyx_GIVEREF(__pyx_v_species_names);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_species_names);
  __Pyx_INCREF(__pyx_v_param_names);
  __Pyx_GIVEREF(__pyx_v_param_names);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_param_names);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1123
 *             self.dest_index = species2index[dest_name]
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):             # <<<<<<<<<<<<<<
 *         instring = fields['equation'].strip()
 *         dest_name = instring.split('=')[0].strip()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.GeneralAssignmentRule.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_instring);
  __Pyx_XDECREF(__pyx_v_dest_name);
  __Pyx_XDECREF(__pyx_v_species_names);
  __Pyx_XDECREF(__pyx_v_param_names);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_4__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_4__reduce_cython__(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.dest_index, self.frequency_flag, self.param_flag, self.rhs)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->dest_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.frequency_flag); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->param_flag); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->rhs));
  PyTuple_SET_ITEM(__pyx_t_4, 3, ((PyObject *)__pyx_v_self->rhs));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.dest_index, self.frequency_flag, self.param_flag, self.rhs)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.dest_index, self.frequency_flag, self.param_flag, self.rhs)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.rhs is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.dest_index, self.frequency_flag, self.param_flag, self.rhs)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.rhs is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_GeneralAssignmentRule, (type(self), 0xceb974e, None), state
 */
  /*else*/ {
    __pyx_t_6 = (((PyObject *)__pyx_v_self->rhs) != Py_None);
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.rhs is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GeneralAssignmentRule, (type(self), 0xceb974e, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self.rhs is not None
 *     if use_setstate:
 *         return __pyx_unpickle_GeneralAssignmentRule, (type(self), 0xceb974e, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_GeneralAssignmentRule, (type(self), 0xceb974e, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_GeneralAssignment); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_216766286);
    __Pyx_GIVEREF(__pyx_int_216766286);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_216766286);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.rhs is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GeneralAssignmentRule, (type(self), 0xceb974e, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_GeneralAssignmentRule, (type(self), 0xceb974e, None), state
 *     else:
 *         return __pyx_unpickle_GeneralAssignmentRule, (type(self), 0xceb974e, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GeneralAssignmentRule__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_GeneralAssignment); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_216766286);
    __Pyx_GIVEREF(__pyx_int_216766286);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_216766286);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.GeneralAssignmentRule.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GeneralAssignmentRule, (type(self), 0xceb974e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GeneralAssignmentRule__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_6__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_21GeneralAssignmentRule_6__setstate_cython__(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_GeneralAssignmentRule, (type(self), 0xceb974e, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GeneralAssignmentRule__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_GeneralAssignmentRule__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GeneralAssignmentRule, (type(self), 0xceb974e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GeneralAssignmentRule__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.GeneralAssignmentRule.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1145
 *     A class for rules that implement Euler's method every dt. These rules are of the form dest = dest + f(state, params, time)*dt
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):             # <<<<<<<<<<<<<<
 *         if self.param_flag > 0:
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.evaluate(state,params,time)*dt
 */

static void __pyx_f_9bioscrape_5types_14GeneralODERule_rule_operation(struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time, double __pyx_v_dt) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("rule_operation", 0);

  /* "bioscrape/types.pyx":1146
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):
 *         if self.param_flag > 0:             # <<<<<<<<<<<<<<
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.evaluate(state,params,time)*dt
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->param_flag > 0) != 0);
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1147
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):
 *         if self.param_flag > 0:
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.evaluate(state,params,time)*dt             # <<<<<<<<<<<<<<
 *         else:
 *             state[self.dest_index] = state[self.dest_index] + self.rhs.evaluate(state,params,time)*dt
 */
    (__pyx_v_params[__pyx_v_self->dest_index]) = ((__pyx_v_params[__pyx_v_self->dest_index]) + (((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->rhs->__pyx_vtab)->evaluate(__pyx_v_self->rhs, __pyx_v_state, __pyx_v_params, __pyx_v_time) * __pyx_v_dt));

    /* "bioscrape/types.pyx":1146
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):
 *         if self.param_flag > 0:             # <<<<<<<<<<<<<<
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.evaluate(state,params,time)*dt
 *         else:
 */
    goto __pyx_L3;
  }

  /* "bioscrape/types.pyx":1149
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.evaluate(state,params,time)*dt
 *         else:
 *             state[self.dest_index] = state[self.dest_index] + self.rhs.evaluate(state,params,time)*dt             # <<<<<<<<<<<<<<
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):
 */
  /*else*/ {
    (__pyx_v_state[__pyx_v_self->dest_index]) = ((__pyx_v_state[__pyx_v_self->dest_index]) + (((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->rhs->__pyx_vtab)->evaluate(__pyx_v_self->rhs, __pyx_v_state, __pyx_v_params, __pyx_v_time) * __pyx_v_dt));
  }
  __pyx_L3:;

  /* "bioscrape/types.pyx":1145
 *     A class for rules that implement Euler's method every dt. These rules are of the form dest = dest + f(state, params, time)*dt
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):             # <<<<<<<<<<<<<<
 *         if self.param_flag > 0:
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.evaluate(state,params,time)*dt
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1151
 *             state[self.dest_index] = state[self.dest_index] + self.rhs.evaluate(state,params,time)*dt
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):             # <<<<<<<<<<<<<<
 *         if self.param_flag > 0:
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.volume_evaluate(state,params,volume, time)*dt
 */

static void __pyx_f_9bioscrape_5types_14GeneralODERule_rule_volume_operation(struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_volume, double __pyx_v_time, double __pyx_v_dt) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("rule_volume_operation", 0);

  /* "bioscrape/types.pyx":1152
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):
 *         if self.param_flag > 0:             # <<<<<<<<<<<<<<
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.volume_evaluate(state,params,volume, time)*dt
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->param_flag > 0) != 0);
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1153
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):
 *         if self.param_flag > 0:
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.volume_evaluate(state,params,volume, time)*dt             # <<<<<<<<<<<<<<
 *         else:
 *             state[self.dest_index] = state[self.dest_index] + self.rhs.volume_evaluate(state,params,volume, time)*dt
 */
    (__pyx_v_params[__pyx_v_self->dest_index]) = ((__pyx_v_params[__pyx_v_self->dest_index]) + (((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->rhs->__pyx_vtab)->volume_evaluate(__pyx_v_self->rhs, __pyx_v_state, __pyx_v_params, __pyx_v_volume, __pyx_v_time) * __pyx_v_dt));

    /* "bioscrape/types.pyx":1152
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):
 *         if self.param_flag > 0:             # <<<<<<<<<<<<<<
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.volume_evaluate(state,params,volume, time)*dt
 *         else:
 */
    goto __pyx_L3;
  }

  /* "bioscrape/types.pyx":1155
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.volume_evaluate(state,params,volume, time)*dt
 *         else:
 *             state[self.dest_index] = state[self.dest_index] + self.rhs.volume_evaluate(state,params,volume, time)*dt             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, dict fields, species2index, params2index, rule_frequency = "dt"):
 */
  /*else*/ {
    (__pyx_v_state[__pyx_v_self->dest_index]) = ((__pyx_v_state[__pyx_v_self->dest_index]) + (((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->rhs->__pyx_vtab)->volume_evaluate(__pyx_v_self->rhs, __pyx_v_state, __pyx_v_params, __pyx_v_volume, __pyx_v_time) * __pyx_v_dt));
  }
  __pyx_L3:;

  /* "bioscrape/types.pyx":1151
 *             state[self.dest_index] = state[self.dest_index] + self.rhs.evaluate(state,params,time)*dt
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):             # <<<<<<<<<<<<<<
 *         if self.param_flag > 0:
 *             params[self.dest_index] = params[self.dest_index] + self.rhs.volume_evaluate(state,params,volume, time)*dt
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1157
 *             state[self.dest_index] = state[self.dest_index] + self.rhs.volume_evaluate(state,params,volume, time)*dt
 * 
 *     def initialize(self, dict fields, species2index, params2index, rule_frequency = "dt"):             # <<<<<<<<<<<<<<
 *         print("Initializing ODE Rule")
 *         self.set_frequency_flag(rule_frequency)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_14GeneralODERule_1initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_14GeneralODERule_1initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_species2index = 0;
  PyObject *__pyx_v_params2index = 0;
  PyObject *__pyx_v_rule_frequency = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_species2index,&__pyx_n_s_params2index,&__pyx_n_s_rule_frequency,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_dt);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, 1); __PYX_ERR(0, 1157, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, 2); __PYX_ERR(0, 1157, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rule_frequency);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 1157, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fields = ((PyObject*)values[0]);
    __pyx_v_species2index = values[1];
    __pyx_v_params2index = values[2];
    __pyx_v_rule_frequency = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1157, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.GeneralODERule.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 1157, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_14GeneralODERule_initialize(((struct __pyx_obj_9bioscrape_5types_GeneralODERule *)__pyx_v_self), __pyx_v_fields, __pyx_v_species2index, __pyx_v_params2index, __pyx_v_rule_frequency);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_14GeneralODERule_initialize(struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index, PyObject *__pyx_v_rule_frequency) {
  PyObject *__pyx_v_dest_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  unsigned int __pyx_t_9;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":1158
 * 
 *     def initialize(self, dict fields, species2index, params2index, rule_frequency = "dt"):
 *         print("Initializing ODE Rule")             # <<<<<<<<<<<<<<
 *         self.set_frequency_flag(rule_frequency)
 *         self.rhs = parse_expression(fields['equation'], species2index, params2index)
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_Initializing_ODE_Rule) < 0) __PYX_ERR(0, 1158, __pyx_L1_error)

  /* "bioscrape/types.pyx":1159
 *     def initialize(self, dict fields, species2index, params2index, rule_frequency = "dt"):
 *         print("Initializing ODE Rule")
 *         self.set_frequency_flag(rule_frequency)             # <<<<<<<<<<<<<<
 *         self.rhs = parse_expression(fields['equation'], species2index, params2index)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_frequency_flag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_rule_frequency) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_rule_frequency);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1160
 *         print("Initializing ODE Rule")
 *         self.set_frequency_flag(rule_frequency)
 *         self.rhs = parse_expression(fields['equation'], species2index, params2index)             # <<<<<<<<<<<<<<
 * 
 *         dest_name = fields['target'].strip()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_parse_expression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1160, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_equation); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_t_3, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_t_3, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_species2index);
    __Pyx_GIVEREF(__pyx_v_species2index);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_species2index);
    __Pyx_INCREF(__pyx_v_params2index);
    __Pyx_GIVEREF(__pyx_v_params2index);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_params2index);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rhs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rhs));
  __pyx_v_self->rhs = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1162
 *         self.rhs = parse_expression(fields['equation'], species2index, params2index)
 * 
 *         dest_name = fields['target'].strip()             # <<<<<<<<<<<<<<
 * 
 *         #if dest_name[0] == '_' or dest_name[0] == '|':
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1162, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_target); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_strip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_dest_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1165
 * 
 *         #if dest_name[0] == '_' or dest_name[0] == '|':
 *         if dest_name[0] == '_':             # <<<<<<<<<<<<<<
 *             dest_name = dest_name[1:]
 *         if dest_name in params2index:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_dest_name, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s__12, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "bioscrape/types.pyx":1166
 *         #if dest_name[0] == '_' or dest_name[0] == '|':
 *         if dest_name[0] == '_':
 *             dest_name = dest_name[1:]             # <<<<<<<<<<<<<<
 *         if dest_name in params2index:
 *             self.param_flag = 1
 */
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_dest_name, 1, 0, NULL, NULL, &__pyx_slice__14, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_dest_name, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":1165
 * 
 *         #if dest_name[0] == '_' or dest_name[0] == '|':
 *         if dest_name[0] == '_':             # <<<<<<<<<<<<<<
 *             dest_name = dest_name[1:]
 *         if dest_name in params2index:
 */
  }

  /* "bioscrape/types.pyx":1167
 *         if dest_name[0] == '_':
 *             dest_name = dest_name[1:]
 *         if dest_name in params2index:             # <<<<<<<<<<<<<<
 *             self.param_flag = 1
 *             self.dest_index = params2index[dest_name]
 */
  __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_dest_name, __pyx_v_params2index, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "bioscrape/types.pyx":1168
 *             dest_name = dest_name[1:]
 *         if dest_name in params2index:
 *             self.param_flag = 1             # <<<<<<<<<<<<<<
 *             self.dest_index = params2index[dest_name]
 *         else:
 */
    __pyx_v_self->param_flag = 1;

    /* "bioscrape/types.pyx":1169
 *         if dest_name in params2index:
 *             self.param_flag = 1
 *             self.dest_index = params2index[dest_name]             # <<<<<<<<<<<<<<
 *         else:
 *             self.param_flag = 0
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_params2index, __pyx_v_dest_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->dest_index = __pyx_t_9;

    /* "bioscrape/types.pyx":1167
 *         if dest_name[0] == '_':
 *             dest_name = dest_name[1:]
 *         if dest_name in params2index:             # <<<<<<<<<<<<<<
 *             self.param_flag = 1
 *             self.dest_index = params2index[dest_name]
 */
    goto __pyx_L4;
  }

  /* "bioscrape/types.pyx":1171
 *             self.dest_index = params2index[dest_name]
 *         else:
 *             self.param_flag = 0             # <<<<<<<<<<<<<<
 *             self.dest_index = species2index[dest_name]
 * 
 */
  /*else*/ {
    __pyx_v_self->param_flag = 0;

    /* "bioscrape/types.pyx":1172
 *         else:
 *             self.param_flag = 0
 *             self.dest_index = species2index[dest_name]             # <<<<<<<<<<<<<<
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_species2index, __pyx_v_dest_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->dest_index = __pyx_t_9;
  }
  __pyx_L4:;

  /* "bioscrape/types.pyx":1157
 *             state[self.dest_index] = state[self.dest_index] + self.rhs.volume_evaluate(state,params,volume, time)*dt
 * 
 *     def initialize(self, dict fields, species2index, params2index, rule_frequency = "dt"):             # <<<<<<<<<<<<<<
 *         print("Initializing ODE Rule")
 *         self.set_frequency_flag(rule_frequency)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bioscrape.types.GeneralODERule.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dest_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1174
 *             self.dest_index = species2index[dest_name]
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):             # <<<<<<<<<<<<<<
 *         dest_name = fields['target'].strip()
 *         instring = fields['equation']
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_14GeneralODERule_3get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_14GeneralODERule_3get_species_and_parameters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_species2index = 0;
  PyObject *__pyx_v_params2index = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_and_parameters (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_species2index,&__pyx_n_s_params2index,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 3, 3, 1); __PYX_ERR(0, 1174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params2index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 3, 3, 2); __PYX_ERR(0, 1174, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_species_and_parameters") < 0)) __PYX_ERR(0, 1174, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_fields = ((PyObject*)values[0]);
    __pyx_v_species2index = ((PyObject*)values[1]);
    __pyx_v_params2index = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_species_and_parameters", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.GeneralODERule.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyDict_Type), 1, "fields", 1))) __PYX_ERR(0, 1174, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species2index), (&PyDict_Type), 1, "species2index", 1))) __PYX_ERR(0, 1174, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params2index), (&PyDict_Type), 1, "params2index", 1))) __PYX_ERR(0, 1174, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_14GeneralODERule_2get_species_and_parameters(((struct __pyx_obj_9bioscrape_5types_GeneralODERule *)__pyx_v_self), __pyx_v_fields, __pyx_v_species2index, __pyx_v_params2index);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_14GeneralODERule_2get_species_and_parameters(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_species2index, PyObject *__pyx_v_params2index) {
  PyObject *__pyx_v_dest_name = NULL;
  PyObject *__pyx_v_instring = NULL;
  PyObject *__pyx_v_species_names = NULL;
  PyObject *__pyx_v_param_names = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("get_species_and_parameters", 0);

  /* "bioscrape/types.pyx":1175
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):
 *         dest_name = fields['target'].strip()             # <<<<<<<<<<<<<<
 *         instring = fields['equation']
 * 
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1175, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_target); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dest_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1176
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):
 *         dest_name = fields['target'].strip()
 *         instring = fields['equation']             # <<<<<<<<<<<<<<
 * 
 *         species_names, param_names = sympy_species_and_parameters(instring, species2index, params2index)
 */
  if (unlikely(__pyx_v_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1176, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fields, __pyx_n_s_equation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_instring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1178
 *         instring = fields['equation']
 * 
 *         species_names, param_names = sympy_species_and_parameters(instring, species2index, params2index)             # <<<<<<<<<<<<<<
 * 
 *         if dest_name[0] == '_' or dest_name[0] == '|':
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sympy_species_and_parameters); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_instring, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_instring, __pyx_v_species2index, __pyx_v_params2index};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_instring);
    __Pyx_GIVEREF(__pyx_v_instring);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_instring);
    __Pyx_INCREF(__pyx_v_species2index);
    __Pyx_GIVEREF(__pyx_v_species2index);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_species2index);
    __Pyx_INCREF(__pyx_v_params2index);
    __Pyx_GIVEREF(__pyx_v_params2index);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_params2index);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1178, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_5 = __pyx_t_6(__pyx_t_2); if (unlikely(!__pyx_t_5)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1178, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1178, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_species_names = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_param_names = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":1180
 *         species_names, param_names = sympy_species_and_parameters(instring, species2index, params2index)
 * 
 *         if dest_name[0] == '_' or dest_name[0] == '|':             # <<<<<<<<<<<<<<
 *             dest_name = dest_name[1:]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_dest_name, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s__12, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_dest_name, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__11, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __pyx_t_8;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_7) {

    /* "bioscrape/types.pyx":1181
 * 
 *         if dest_name[0] == '_' or dest_name[0] == '|':
 *             dest_name = dest_name[1:]             # <<<<<<<<<<<<<<
 * 
 *         if dest_name in species2index:
 */
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_dest_name, 1, 0, NULL, NULL, &__pyx_slice__14, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_dest_name, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":1180
 *         species_names, param_names = sympy_species_and_parameters(instring, species2index, params2index)
 * 
 *         if dest_name[0] == '_' or dest_name[0] == '|':             # <<<<<<<<<<<<<<
 *             dest_name = dest_name[1:]
 * 
 */
  }

  /* "bioscrape/types.pyx":1183
 *             dest_name = dest_name[1:]
 * 
 *         if dest_name in species2index:             # <<<<<<<<<<<<<<
 *             species_names.append(dest_name)
 *         else:
 */
  if (unlikely(__pyx_v_species2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1183, __pyx_L1_error)
  }
  __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_v_dest_name, __pyx_v_species2index, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "bioscrape/types.pyx":1184
 * 
 *         if dest_name in species2index:
 *             species_names.append(dest_name)             # <<<<<<<<<<<<<<
 *         else:
 *             param_names.append(dest_name)
 */
    __pyx_t_9 = __Pyx_PyObject_Append(__pyx_v_species_names, __pyx_v_dest_name); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 1184, __pyx_L1_error)

    /* "bioscrape/types.pyx":1183
 *             dest_name = dest_name[1:]
 * 
 *         if dest_name in species2index:             # <<<<<<<<<<<<<<
 *             species_names.append(dest_name)
 *         else:
 */
    goto __pyx_L8;
  }

  /* "bioscrape/types.pyx":1186
 *             species_names.append(dest_name)
 *         else:
 *             param_names.append(dest_name)             # <<<<<<<<<<<<<<
 * 
 *         return species_names, param_names
 */
  /*else*/ {
    __pyx_t_9 = __Pyx_PyObject_Append(__pyx_v_param_names, __pyx_v_dest_name); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 1186, __pyx_L1_error)
  }
  __pyx_L8:;

  /* "bioscrape/types.pyx":1188
 *             param_names.append(dest_name)
 * 
 *         return species_names, param_names             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_species_names);
  __Pyx_GIVEREF(__pyx_v_species_names);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_species_names);
  __Pyx_INCREF(__pyx_v_param_names);
  __Pyx_GIVEREF(__pyx_v_param_names);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_param_names);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1174
 *             self.dest_index = species2index[dest_name]
 * 
 *     def get_species_and_parameters(self, dict fields, dict species2index, dict params2index):             # <<<<<<<<<<<<<<
 *         dest_name = fields['target'].strip()
 *         instring = fields['equation']
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.GeneralODERule.get_species_and_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dest_name);
  __Pyx_XDECREF(__pyx_v_instring);
  __Pyx_XDECREF(__pyx_v_species_names);
  __Pyx_XDECREF(__pyx_v_param_names);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_14GeneralODERule_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_14GeneralODERule_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_14GeneralODERule_4__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_GeneralODERule *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_14GeneralODERule_4__reduce_cython__(struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.dest_index, self.frequency_flag, self.param_flag, self.rhs)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->dest_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.frequency_flag); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->param_flag); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->rhs));
  PyTuple_SET_ITEM(__pyx_t_4, 3, ((PyObject *)__pyx_v_self->rhs));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.dest_index, self.frequency_flag, self.param_flag, self.rhs)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.dest_index, self.frequency_flag, self.param_flag, self.rhs)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.rhs is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.dest_index, self.frequency_flag, self.param_flag, self.rhs)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.rhs is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_GeneralODERule, (type(self), 0xceb974e, None), state
 */
  /*else*/ {
    __pyx_t_6 = (((PyObject *)__pyx_v_self->rhs) != Py_None);
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.rhs is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GeneralODERule, (type(self), 0xceb974e, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self.rhs is not None
 *     if use_setstate:
 *         return __pyx_unpickle_GeneralODERule, (type(self), 0xceb974e, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_GeneralODERule, (type(self), 0xceb974e, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_GeneralODERule); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_216766286);
    __Pyx_GIVEREF(__pyx_int_216766286);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_216766286);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.rhs is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_GeneralODERule, (type(self), 0xceb974e, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_GeneralODERule, (type(self), 0xceb974e, None), state
 *     else:
 *         return __pyx_unpickle_GeneralODERule, (type(self), 0xceb974e, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GeneralODERule__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_GeneralODERule); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_216766286);
    __Pyx_GIVEREF(__pyx_int_216766286);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_216766286);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.GeneralODERule.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GeneralODERule, (type(self), 0xceb974e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GeneralODERule__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_14GeneralODERule_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_14GeneralODERule_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_14GeneralODERule_6__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_GeneralODERule *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_14GeneralODERule_6__setstate_cython__(struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_GeneralODERule, (type(self), 0xceb974e, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_GeneralODERule__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_GeneralODERule__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_GeneralODERule, (type(self), 0xceb974e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_GeneralODERule__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.GeneralODERule.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1197
 * 
 * cdef class Volume:
 *     cdef double get_volume_step(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         """
 *         Return the volume change in a time step of dt ending at time t given the state, parameters, and volume at t-d
 */

static double __pyx_f_9bioscrape_5types_6Volume_get_volume_step(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, CYTHON_UNUSED double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_dt) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_step", 0);

  /* "bioscrape/types.pyx":1211
 *         """
 * 
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef Volume copy(self):
 */
  __pyx_r = 0.0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1197
 * 
 * cdef class Volume:
 *     cdef double get_volume_step(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         """
 *         Return the volume change in a time step of dt ending at time t given the state, parameters, and volume at t-d
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1213
 *         return 0.0
 * 
 *     cdef Volume copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a deep copy of the volume object
 */

static struct __pyx_obj_9bioscrape_5types_Volume *__pyx_f_9bioscrape_5types_6Volume_copy(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self) {
  struct __pyx_obj_9bioscrape_5types_Volume *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "bioscrape/types.pyx":1217
 *         Returns a deep copy of the volume object
 *         """
 *         raise NotImplementedError('Need to implement copy for population simulations')             # <<<<<<<<<<<<<<
 * 
 *     def py_copy(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1217, __pyx_L1_error)

  /* "bioscrape/types.pyx":1213
 *         return 0.0
 * 
 *     cdef Volume copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns a deep copy of the volume object
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Volume.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1219
 *         raise NotImplementedError('Need to implement copy for population simulations')
 * 
 *     def py_copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Copy function for deep copying
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_1py_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9bioscrape_5types_6Volume_py_copy[] = "\n        Copy function for deep copying\n        :return: a deep copy of the volume object\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_1py_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_copy (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_6Volume_py_copy(((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_6Volume_py_copy(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_copy", 0);

  /* "bioscrape/types.pyx":1224
 *         :return: a deep copy of the volume object
 *         """
 *         return self.copy()             # <<<<<<<<<<<<<<
 * 
 *     def py_get_volume_step(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_9bioscrape_5types_Volume *)__pyx_v_self->__pyx_vtab)->copy(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1219
 *         raise NotImplementedError('Need to implement copy for population simulations')
 * 
 *     def py_copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Copy function for deep copying
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Volume.py_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1226
 *         return self.copy()
 * 
 *     def py_get_volume_step(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                            double time, double volume, double dt):
 *         return self.get_volume_step(<double*> state.data, <double*> params.data, time, volume, dt)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_3py_get_volume_step(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_3py_get_volume_step(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_state = 0;
  PyArrayObject *__pyx_v_params = 0;
  double __pyx_v_time;
  double __pyx_v_volume;
  double __pyx_v_dt;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_volume_step (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_state,&__pyx_n_s_params,&__pyx_n_s_time,&__pyx_n_s_volume,&__pyx_n_s_dt,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_get_volume_step", 1, 5, 5, 1); __PYX_ERR(0, 1226, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_get_volume_step", 1, 5, 5, 2); __PYX_ERR(0, 1226, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_get_volume_step", 1, 5, 5, 3); __PYX_ERR(0, 1226, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_get_volume_step", 1, 5, 5, 4); __PYX_ERR(0, 1226, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_get_volume_step") < 0)) __PYX_ERR(0, 1226, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_state = ((PyArrayObject *)values[0]);
    __pyx_v_params = ((PyArrayObject *)values[1]);
    __pyx_v_time = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1227, __pyx_L3_error)
    __pyx_v_volume = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_volume == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1227, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1227, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_get_volume_step", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1226, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Volume.py_get_volume_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_state), __pyx_ptype_5numpy_ndarray, 1, "state", 0))) __PYX_ERR(0, 1226, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), __pyx_ptype_5numpy_ndarray, 1, "params", 0))) __PYX_ERR(0, 1226, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_6Volume_2py_get_volume_step(((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v_self), __pyx_v_state, __pyx_v_params, __pyx_v_time, __pyx_v_volume, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_6Volume_2py_get_volume_step(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_time, double __pyx_v_volume, double __pyx_v_dt) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_params;
  __Pyx_Buffer __pyx_pybuffer_params;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_state;
  __Pyx_Buffer __pyx_pybuffer_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_get_volume_step", 0);
  __pyx_pybuffer_state.pybuffer.buf = NULL;
  __pyx_pybuffer_state.refcount = 0;
  __pyx_pybuffernd_state.data = NULL;
  __pyx_pybuffernd_state.rcbuffer = &__pyx_pybuffer_state;
  __pyx_pybuffer_params.pybuffer.buf = NULL;
  __pyx_pybuffer_params.refcount = 0;
  __pyx_pybuffernd_params.data = NULL;
  __pyx_pybuffernd_params.rcbuffer = &__pyx_pybuffer_params;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_state.rcbuffer->pybuffer, (PyObject*)__pyx_v_state, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1226, __pyx_L1_error)
  }
  __pyx_pybuffernd_state.diminfo[0].strides = __pyx_pybuffernd_state.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_state.diminfo[0].shape = __pyx_pybuffernd_state.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_params.rcbuffer->pybuffer, (PyObject*)__pyx_v_params, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1226, __pyx_L1_error)
  }
  __pyx_pybuffernd_params.diminfo[0].strides = __pyx_pybuffernd_params.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_params.diminfo[0].shape = __pyx_pybuffernd_params.rcbuffer->pybuffer.shape[0];

  /* "bioscrape/types.pyx":1228
 *     def py_get_volume_step(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 *                            double time, double volume, double dt):
 *         return self.get_volume_step(<double*> state.data, <double*> params.data, time, volume, dt)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_9bioscrape_5types_Volume *)__pyx_v_self->__pyx_vtab)->get_volume_step(__pyx_v_self, ((double *)__pyx_v_state->data), ((double *)__pyx_v_params->data), __pyx_v_time, __pyx_v_volume, __pyx_v_dt)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1226
 *         return self.copy()
 * 
 *     def py_get_volume_step(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                            double time, double volume, double dt):
 *         return self.get_volume_step(<double*> state.data, <double*> params.data, time, volume, dt)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("bioscrape.types.Volume.py_get_volume_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1231
 * 
 * 
 *     cdef void initialize(self, double *state, double *params, double time, double volume):             # <<<<<<<<<<<<<<
 *         """
 *         Initialize the volume object given a new initial time and volume and the current state and parameters.
 */

static void __pyx_f_9bioscrape_5types_6Volume_initialize(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, CYTHON_UNUSED double __pyx_v_volume) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1249
 *         pass
 * 
 *     def py_initialize(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                       double time, double volume):
 *         self.initialize(<double*> state.data, <double*> params.data, time, volume)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_5py_initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_5py_initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_state = 0;
  PyArrayObject *__pyx_v_params = 0;
  double __pyx_v_time;
  double __pyx_v_volume;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_state,&__pyx_n_s_params,&__pyx_n_s_time,&__pyx_n_s_volume,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_initialize", 1, 4, 4, 1); __PYX_ERR(0, 1249, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_initialize", 1, 4, 4, 2); __PYX_ERR(0, 1249, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_initialize", 1, 4, 4, 3); __PYX_ERR(0, 1249, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_initialize") < 0)) __PYX_ERR(0, 1249, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_state = ((PyArrayObject *)values[0]);
    __pyx_v_params = ((PyArrayObject *)values[1]);
    __pyx_v_time = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1250, __pyx_L3_error)
    __pyx_v_volume = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_volume == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1250, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_initialize", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1249, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Volume.py_initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_state), __pyx_ptype_5numpy_ndarray, 1, "state", 0))) __PYX_ERR(0, 1249, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), __pyx_ptype_5numpy_ndarray, 1, "params", 0))) __PYX_ERR(0, 1249, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_6Volume_4py_initialize(((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v_self), __pyx_v_state, __pyx_v_params, __pyx_v_time, __pyx_v_volume);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_6Volume_4py_initialize(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_time, double __pyx_v_volume) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_params;
  __Pyx_Buffer __pyx_pybuffer_params;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_state;
  __Pyx_Buffer __pyx_pybuffer_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_initialize", 0);
  __pyx_pybuffer_state.pybuffer.buf = NULL;
  __pyx_pybuffer_state.refcount = 0;
  __pyx_pybuffernd_state.data = NULL;
  __pyx_pybuffernd_state.rcbuffer = &__pyx_pybuffer_state;
  __pyx_pybuffer_params.pybuffer.buf = NULL;
  __pyx_pybuffer_params.refcount = 0;
  __pyx_pybuffernd_params.data = NULL;
  __pyx_pybuffernd_params.rcbuffer = &__pyx_pybuffer_params;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_state.rcbuffer->pybuffer, (PyObject*)__pyx_v_state, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1249, __pyx_L1_error)
  }
  __pyx_pybuffernd_state.diminfo[0].strides = __pyx_pybuffernd_state.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_state.diminfo[0].shape = __pyx_pybuffernd_state.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_params.rcbuffer->pybuffer, (PyObject*)__pyx_v_params, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1249, __pyx_L1_error)
  }
  __pyx_pybuffernd_params.diminfo[0].strides = __pyx_pybuffernd_params.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_params.diminfo[0].shape = __pyx_pybuffernd_params.rcbuffer->pybuffer.shape[0];

  /* "bioscrape/types.pyx":1251
 *     def py_initialize(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,
 *                       double time, double volume):
 *         self.initialize(<double*> state.data, <double*> params.data, time, volume)             # <<<<<<<<<<<<<<
 * 
 *     cdef unsigned cell_divided(self, double *state, double *params, double time, double volume, double dt):
 */
  ((struct __pyx_vtabstruct_9bioscrape_5types_Volume *)__pyx_v_self->__pyx_vtab)->initialize(__pyx_v_self, ((double *)__pyx_v_state->data), ((double *)__pyx_v_params->data), __pyx_v_time, __pyx_v_volume);

  /* "bioscrape/types.pyx":1249
 *         pass
 * 
 *     def py_initialize(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params,             # <<<<<<<<<<<<<<
 *                       double time, double volume):
 *         self.initialize(<double*> state.data, <double*> params.data, time, volume)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("bioscrape.types.Volume.py_initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1253
 *         self.initialize(<double*> state.data, <double*> params.data, time, volume)
 * 
 *     cdef unsigned cell_divided(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         """
 *         Return true or false if the cell divided during the time interval between time-dt and time. Note, in order
 */

static unsigned int __pyx_f_9bioscrape_5types_6Volume_cell_divided(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, CYTHON_UNUSED double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_dt) {
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cell_divided", 0);

  /* "bioscrape/types.pyx":1268
 *         """
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def py_cell_divided(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params, double time,
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1253
 *         self.initialize(<double*> state.data, <double*> params.data, time, volume)
 * 
 *     cdef unsigned cell_divided(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         """
 *         Return true or false if the cell divided during the time interval between time-dt and time. Note, in order
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1270
 *         return 0
 * 
 *     def py_cell_divided(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params, double time,             # <<<<<<<<<<<<<<
 *                         double volume, double dt):
 *         return self.cell_divided(<double*> state.data, <double*> params.data, time, volume, dt)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_7py_cell_divided(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_7py_cell_divided(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_state = 0;
  PyArrayObject *__pyx_v_params = 0;
  double __pyx_v_time;
  double __pyx_v_volume;
  double __pyx_v_dt;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_cell_divided (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_state,&__pyx_n_s_params,&__pyx_n_s_time,&__pyx_n_s_volume,&__pyx_n_s_dt,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_cell_divided", 1, 5, 5, 1); __PYX_ERR(0, 1270, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_cell_divided", 1, 5, 5, 2); __PYX_ERR(0, 1270, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_cell_divided", 1, 5, 5, 3); __PYX_ERR(0, 1270, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_cell_divided", 1, 5, 5, 4); __PYX_ERR(0, 1270, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_cell_divided") < 0)) __PYX_ERR(0, 1270, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_state = ((PyArrayObject *)values[0]);
    __pyx_v_params = ((PyArrayObject *)values[1]);
    __pyx_v_time = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1270, __pyx_L3_error)
    __pyx_v_volume = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_volume == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1271, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1271, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_cell_divided", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1270, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Volume.py_cell_divided", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_state), __pyx_ptype_5numpy_ndarray, 1, "state", 0))) __PYX_ERR(0, 1270, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), __pyx_ptype_5numpy_ndarray, 1, "params", 0))) __PYX_ERR(0, 1270, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_6Volume_6py_cell_divided(((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v_self), __pyx_v_state, __pyx_v_params, __pyx_v_time, __pyx_v_volume, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_6Volume_6py_cell_divided(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, PyArrayObject *__pyx_v_state, PyArrayObject *__pyx_v_params, double __pyx_v_time, double __pyx_v_volume, double __pyx_v_dt) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_params;
  __Pyx_Buffer __pyx_pybuffer_params;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_state;
  __Pyx_Buffer __pyx_pybuffer_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_cell_divided", 0);
  __pyx_pybuffer_state.pybuffer.buf = NULL;
  __pyx_pybuffer_state.refcount = 0;
  __pyx_pybuffernd_state.data = NULL;
  __pyx_pybuffernd_state.rcbuffer = &__pyx_pybuffer_state;
  __pyx_pybuffer_params.pybuffer.buf = NULL;
  __pyx_pybuffer_params.refcount = 0;
  __pyx_pybuffernd_params.data = NULL;
  __pyx_pybuffernd_params.rcbuffer = &__pyx_pybuffer_params;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_state.rcbuffer->pybuffer, (PyObject*)__pyx_v_state, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1270, __pyx_L1_error)
  }
  __pyx_pybuffernd_state.diminfo[0].strides = __pyx_pybuffernd_state.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_state.diminfo[0].shape = __pyx_pybuffernd_state.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_params.rcbuffer->pybuffer, (PyObject*)__pyx_v_params, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1270, __pyx_L1_error)
  }
  __pyx_pybuffernd_params.diminfo[0].strides = __pyx_pybuffernd_params.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_params.diminfo[0].shape = __pyx_pybuffernd_params.rcbuffer->pybuffer.shape[0];

  /* "bioscrape/types.pyx":1272
 *     def py_cell_divided(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params, double time,
 *                         double volume, double dt):
 *         return self.cell_divided(<double*> state.data, <double*> params.data, time, volume, dt)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(((struct __pyx_vtabstruct_9bioscrape_5types_Volume *)__pyx_v_self->__pyx_vtab)->cell_divided(__pyx_v_self, ((double *)__pyx_v_state->data), ((double *)__pyx_v_params->data), __pyx_v_time, __pyx_v_volume, __pyx_v_dt)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1270
 *         return 0
 * 
 *     def py_cell_divided(self, np.ndarray[np.double_t,ndim=1] state, np.ndarray[np.double_t,ndim=1] params, double time,             # <<<<<<<<<<<<<<
 *                         double volume, double dt):
 *         return self.cell_divided(<double*> state.data, <double*> params.data, time, volume, dt)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("bioscrape.types.Volume.py_cell_divided", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_params.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1275
 * 
 * 
 *     def py_set_volume(self, double v):             # <<<<<<<<<<<<<<
 *         self.set_volume(v)
 *     def py_get_volume(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_9py_set_volume(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_9py_set_volume(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_set_volume (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1275, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Volume.py_set_volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_6Volume_8py_set_volume(((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_6Volume_8py_set_volume(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, double __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_set_volume", 0);

  /* "bioscrape/types.pyx":1276
 * 
 *     def py_set_volume(self, double v):
 *         self.set_volume(v)             # <<<<<<<<<<<<<<
 *     def py_get_volume(self):
 *         return self.get_volume()
 */
  __pyx_f_9bioscrape_5types_6Volume_set_volume(__pyx_v_self, __pyx_v_v);

  /* "bioscrape/types.pyx":1275
 * 
 * 
 *     def py_set_volume(self, double v):             # <<<<<<<<<<<<<<
 *         self.set_volume(v)
 *     def py_get_volume(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1277
 *     def py_set_volume(self, double v):
 *         self.set_volume(v)
 *     def py_get_volume(self):             # <<<<<<<<<<<<<<
 *         return self.get_volume()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_11py_get_volume(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_11py_get_volume(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_volume (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_6Volume_10py_get_volume(((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_6Volume_10py_get_volume(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_get_volume", 0);

  /* "bioscrape/types.pyx":1278
 *         self.set_volume(v)
 *     def py_get_volume(self):
 *         return self.get_volume()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_9bioscrape_5types_6Volume_get_volume(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1277
 *     def py_set_volume(self, double v):
 *         self.set_volume(v)
 *     def py_get_volume(self):             # <<<<<<<<<<<<<<
 *         return self.get_volume()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Volume.py_get_volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_6Volume_12__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_6Volume_12__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.current_volume,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->current_volume); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.current_volume,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.current_volume,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.current_volume,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Volume, (type(self), 0x8ded253, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Volume, (type(self), 0x8ded253, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Volume, (type(self), 0x8ded253, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Volume, (type(self), 0x8ded253, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_Volume); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_148820563);
    __Pyx_GIVEREF(__pyx_int_148820563);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_148820563);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Volume, (type(self), 0x8ded253, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Volume, (type(self), 0x8ded253, None), state
 *     else:
 *         return __pyx_unpickle_Volume, (type(self), 0x8ded253, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Volume__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Volume); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_148820563);
    __Pyx_GIVEREF(__pyx_int_148820563);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_148820563);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Volume.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Volume, (type(self), 0x8ded253, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Volume__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_6Volume_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_6Volume_14__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_6Volume_14__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Volume, (type(self), 0x8ded253, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Volume__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_Volume__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Volume, (type(self), 0x8ded253, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Volume__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Volume.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1284
 * 
 * cdef class StochasticTimeThresholdVolume(Volume):
 *     def __init__(self, double cell_cycle_time, double average_division_volume, double division_noise):             # <<<<<<<<<<<<<<
 *         """
 *         Initialize the class with the cell cycle time, average division volume, and noise parameter.
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_29StochasticTimeThresholdVolume_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_29StochasticTimeThresholdVolume___init__[] = "\n        Initialize the class with the cell cycle time, average division volume, and noise parameter.\n\n        :param cell_cycle_time: (double) cell cycle time on average\n        :param average_division_volume: (double) average volume at division\n        :param division_noise: (double) noise in the cell cycle time as a relative c.o.v.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9bioscrape_5types_29StochasticTimeThresholdVolume___init__;
#endif
static int __pyx_pw_9bioscrape_5types_29StochasticTimeThresholdVolume_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_cell_cycle_time;
  double __pyx_v_average_division_volume;
  double __pyx_v_division_noise;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cell_cycle_time,&__pyx_n_s_average_division_volume,&__pyx_n_s_division_noise,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cell_cycle_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_average_division_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 1284, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_division_noise)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 1284, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1284, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cell_cycle_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_cell_cycle_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1284, __pyx_L3_error)
    __pyx_v_average_division_volume = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_average_division_volume == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1284, __pyx_L3_error)
    __pyx_v_division_noise = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_division_noise == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1284, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1284, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.StochasticTimeThresholdVolume.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_29StochasticTimeThresholdVolume___init__(((struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *)__pyx_v_self), __pyx_v_cell_cycle_time, __pyx_v_average_division_volume, __pyx_v_division_noise);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_29StochasticTimeThresholdVolume___init__(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self, double __pyx_v_cell_cycle_time, double __pyx_v_average_division_volume, double __pyx_v_division_noise) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":1292
 *         :param division_noise: (double) noise in the cell cycle time as a relative c.o.v.
 *         """
 *         self.cell_cycle_time = cell_cycle_time             # <<<<<<<<<<<<<<
 *         self.average_division_volume = average_division_volume
 *         self.division_noise = division_noise
 */
  __pyx_v_self->cell_cycle_time = __pyx_v_cell_cycle_time;

  /* "bioscrape/types.pyx":1293
 *         """
 *         self.cell_cycle_time = cell_cycle_time
 *         self.average_division_volume = average_division_volume             # <<<<<<<<<<<<<<
 *         self.division_noise = division_noise
 *         self.division_time = -1.0
 */
  __pyx_v_self->average_division_volume = __pyx_v_average_division_volume;

  /* "bioscrape/types.pyx":1294
 *         self.cell_cycle_time = cell_cycle_time
 *         self.average_division_volume = average_division_volume
 *         self.division_noise = division_noise             # <<<<<<<<<<<<<<
 *         self.division_time = -1.0
 * 
 */
  __pyx_v_self->division_noise = __pyx_v_division_noise;

  /* "bioscrape/types.pyx":1295
 *         self.average_division_volume = average_division_volume
 *         self.division_noise = division_noise
 *         self.division_time = -1.0             # <<<<<<<<<<<<<<
 * 
 *         # Compute growth rate yourself.
 */
  __pyx_v_self->division_time = -1.0;

  /* "bioscrape/types.pyx":1298
 * 
 *         # Compute growth rate yourself.
 *         self.growth_rate = 0.69314718056 / cell_cycle_time # log(2) / cycle time             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->growth_rate = (0.69314718056 / __pyx_v_cell_cycle_time);

  /* "bioscrape/types.pyx":1284
 * 
 * cdef class StochasticTimeThresholdVolume(Volume):
 *     def __init__(self, double cell_cycle_time, double average_division_volume, double division_noise):             # <<<<<<<<<<<<<<
 *         """
 *         Initialize the class with the cell cycle time, average division volume, and noise parameter.
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1301
 * 
 * 
 *     cdef Volume copy(self):             # <<<<<<<<<<<<<<
 *         cdef StochasticTimeThresholdVolume v = StochasticTimeThresholdVolume(self.cell_cycle_time,
 *                                                                              self.average_division_volume,
 */

static struct __pyx_obj_9bioscrape_5types_Volume *__pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_copy(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self) {
  struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_v = 0;
  struct __pyx_obj_9bioscrape_5types_Volume *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "bioscrape/types.pyx":1302
 * 
 *     cdef Volume copy(self):
 *         cdef StochasticTimeThresholdVolume v = StochasticTimeThresholdVolume(self.cell_cycle_time,             # <<<<<<<<<<<<<<
 *                                                                              self.average_division_volume,
 *                                                                              self.division_noise)
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->cell_cycle_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "bioscrape/types.pyx":1303
 *     cdef Volume copy(self):
 *         cdef StochasticTimeThresholdVolume v = StochasticTimeThresholdVolume(self.cell_cycle_time,
 *                                                                              self.average_division_volume,             # <<<<<<<<<<<<<<
 *                                                                              self.division_noise)
 *         v.division_time = self.division_time
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->average_division_volume); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "bioscrape/types.pyx":1304
 *         cdef StochasticTimeThresholdVolume v = StochasticTimeThresholdVolume(self.cell_cycle_time,
 *                                                                              self.average_division_volume,
 *                                                                              self.division_noise)             # <<<<<<<<<<<<<<
 *         v.division_time = self.division_time
 *         v.current_volume = self.current_volume
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->division_noise); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "bioscrape/types.pyx":1302
 * 
 *     cdef Volume copy(self):
 *         cdef StochasticTimeThresholdVolume v = StochasticTimeThresholdVolume(self.cell_cycle_time,             # <<<<<<<<<<<<<<
 *                                                                              self.average_division_volume,
 *                                                                              self.division_noise)
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9bioscrape_5types_StochasticTimeThresholdVolume), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_v = ((struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":1305
 *                                                                              self.average_division_volume,
 *                                                                              self.division_noise)
 *         v.division_time = self.division_time             # <<<<<<<<<<<<<<
 *         v.current_volume = self.current_volume
 *         return v
 */
  __pyx_t_5 = __pyx_v_self->division_time;
  __pyx_v_v->division_time = __pyx_t_5;

  /* "bioscrape/types.pyx":1306
 *                                                                              self.division_noise)
 *         v.division_time = self.division_time
 *         v.current_volume = self.current_volume             # <<<<<<<<<<<<<<
 *         return v
 * 
 */
  __pyx_t_5 = __pyx_v_self->__pyx_base.current_volume;
  __pyx_v_v->__pyx_base.current_volume = __pyx_t_5;

  /* "bioscrape/types.pyx":1307
 *         v.division_time = self.division_time
 *         v.current_volume = self.current_volume
 *         return v             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_volume_step(self, double *state, double *params, double time, double volume, double dt):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = ((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v_v);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1301
 * 
 * 
 *     cdef Volume copy(self):             # <<<<<<<<<<<<<<
 *         cdef StochasticTimeThresholdVolume v = StochasticTimeThresholdVolume(self.cell_cycle_time,
 *                                                                              self.average_division_volume,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.StochasticTimeThresholdVolume.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1309
 *         return v
 * 
 *     cdef double get_volume_step(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         """
 *         Compute a deterministic volume step that is independent of state and parameters.
 */

static double __pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_get_volume_step(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, double __pyx_v_volume, double __pyx_v_dt) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_step", 0);

  /* "bioscrape/types.pyx":1321
 *         """
 * 
 *         return ( exp(self.growth_rate*dt) - 1.0) * volume             # <<<<<<<<<<<<<<
 * 
 *     cdef void initialize(self, double *state, double *params, double time, double volume):
 */
  __pyx_r = ((exp((__pyx_v_self->growth_rate * __pyx_v_dt)) - 1.0) * __pyx_v_volume);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1309
 *         return v
 * 
 *     cdef double get_volume_step(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         """
 *         Compute a deterministic volume step that is independent of state and parameters.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1323
 *         return ( exp(self.growth_rate*dt) - 1.0) * volume
 * 
 *     cdef void initialize(self, double *state, double *params, double time, double volume):             # <<<<<<<<<<<<<<
 *         """
 *         Initialize the volume by setting initial time and volume and sampling the division time ahead of time with
 */

static void __pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_initialize(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, double __pyx_v_time, double __pyx_v_volume) {
  double __pyx_v_time_left;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":1337
 *         """
 * 
 *         self.set_volume(volume)             # <<<<<<<<<<<<<<
 *         cdef double time_left = log(self.average_division_volume / volume) / self.growth_rate
 *         time_left = cyrandom.normal_rv(1.0, self.division_noise) * time_left
 */
  __pyx_f_9bioscrape_5types_6Volume_set_volume(((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v_self), __pyx_v_volume);

  /* "bioscrape/types.pyx":1338
 * 
 *         self.set_volume(volume)
 *         cdef double time_left = log(self.average_division_volume / volume) / self.growth_rate             # <<<<<<<<<<<<<<
 *         time_left = cyrandom.normal_rv(1.0, self.division_noise) * time_left
 *         self.division_time = time + time_left
 */
  __pyx_v_time_left = (log((__pyx_v_self->average_division_volume / __pyx_v_volume)) / __pyx_v_self->growth_rate);

  /* "bioscrape/types.pyx":1339
 *         self.set_volume(volume)
 *         cdef double time_left = log(self.average_division_volume / volume) / self.growth_rate
 *         time_left = cyrandom.normal_rv(1.0, self.division_noise) * time_left             # <<<<<<<<<<<<<<
 *         self.division_time = time + time_left
 *         #print("Volume:", volume, "Division Time:", self.division_time )
 */
  __pyx_v_time_left = (__pyx_f_9bioscrape_6random_normal_rv(1.0, __pyx_v_self->division_noise) * __pyx_v_time_left);

  /* "bioscrape/types.pyx":1340
 *         cdef double time_left = log(self.average_division_volume / volume) / self.growth_rate
 *         time_left = cyrandom.normal_rv(1.0, self.division_noise) * time_left
 *         self.division_time = time + time_left             # <<<<<<<<<<<<<<
 *         #print("Volume:", volume, "Division Time:", self.division_time )
 * 
 */
  __pyx_v_self->division_time = (__pyx_v_time + __pyx_v_time_left);

  /* "bioscrape/types.pyx":1323
 *         return ( exp(self.growth_rate*dt) - 1.0) * volume
 * 
 *     cdef void initialize(self, double *state, double *params, double time, double volume):             # <<<<<<<<<<<<<<
 *         """
 *         Initialize the volume by setting initial time and volume and sampling the division time ahead of time with
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1343
 *         #print("Volume:", volume, "Division Time:", self.division_time )
 * 
 *     cdef unsigned  cell_divided(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         """
 *         Check if the cell has divided in the interval time-dt to time. Does not depend on any of the parameters for
 */

static unsigned int __pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_cell_divided(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, double __pyx_v_time, CYTHON_UNUSED double __pyx_v_volume, double __pyx_v_dt) {
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("cell_divided", 0);

  /* "bioscrape/types.pyx":1357
 * 
 * 
 *         if self.division_time > time - dt and self.division_time <= time:             # <<<<<<<<<<<<<<
 *             return 1
 *         return 0
 */
  __pyx_t_2 = ((__pyx_v_self->division_time > (__pyx_v_time - __pyx_v_dt)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->division_time <= __pyx_v_time) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1358
 * 
 *         if self.division_time > time - dt and self.division_time <= time:
 *             return 1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":1357
 * 
 * 
 *         if self.division_time > time - dt and self.division_time <= time:             # <<<<<<<<<<<<<<
 *             return 1
 *         return 0
 */
  }

  /* "bioscrape/types.pyx":1359
 *         if self.division_time > time - dt and self.division_time <= time:
 *             return 1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * cdef class StateDependentVolume(Volume):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1343
 *         #print("Volume:", volume, "Division Time:", self.division_time )
 * 
 *     cdef unsigned  cell_divided(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         """
 *         Check if the cell has divided in the interval time-dt to time. Does not depend on any of the parameters for
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_29StochasticTimeThresholdVolume_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_29StochasticTimeThresholdVolume_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_29StochasticTimeThresholdVolume_2__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_29StochasticTimeThresholdVolume_2__reduce_cython__(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.average_division_volume, self.cell_cycle_time, self.current_volume, self.division_noise, self.division_time, self.growth_rate)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->average_division_volume); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->cell_cycle_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.current_volume); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->division_noise); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->division_time); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->growth_rate); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.average_division_volume, self.cell_cycle_time, self.current_volume, self.division_noise, self.division_time, self.growth_rate)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_7 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v__dict = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "(tree fragment)":7
 *     state = (self.average_division_volume, self.cell_cycle_time, self.current_volume, self.division_noise, self.division_time, self.growth_rate)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_8 = (__pyx_v__dict != Py_None);
  __pyx_t_9 = (__pyx_t_8 != 0);
  if (__pyx_t_9) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v__dict);
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.average_division_volume, self.cell_cycle_time, self.current_volume, self.division_noise, self.division_time, self.growth_rate)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_StochasticTimeThresholdVolume, (type(self), 0x0a0ee63, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_StochasticTimeThresholdVolume, (type(self), 0x0a0ee63, None), state
 *     else:
 */
  __pyx_t_9 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_9) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_StochasticTimeThresholdVolume, (type(self), 0x0a0ee63, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_StochasticTimeThresholdVolume, (type(self), 0x0a0ee63, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_StochasticTimeThr); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_10546787);
    __Pyx_GIVEREF(__pyx_int_10546787);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_10546787);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_7, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_StochasticTimeThresholdVolume, (type(self), 0x0a0ee63, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_StochasticTimeThresholdVolume, (type(self), 0x0a0ee63, None), state
 *     else:
 *         return __pyx_unpickle_StochasticTimeThresholdVolume, (type(self), 0x0a0ee63, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_StochasticTimeThresholdVolume__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_StochasticTimeThr); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_10546787);
    __Pyx_GIVEREF(__pyx_int_10546787);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_10546787);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_state);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.StochasticTimeThresholdVolume.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StochasticTimeThresholdVolume, (type(self), 0x0a0ee63, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StochasticTimeThresholdVolume__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_29StochasticTimeThresholdVolume_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_29StochasticTimeThresholdVolume_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_29StochasticTimeThresholdVolume_4__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_29StochasticTimeThresholdVolume_4__setstate_cython__(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_StochasticTimeThresholdVolume, (type(self), 0x0a0ee63, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_StochasticTimeThresholdVolume__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_StochasticTimeThresholdVolume__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StochasticTimeThresholdVolume, (type(self), 0x0a0ee63, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StochasticTimeThresholdVolume__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.StochasticTimeThresholdVolume.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1373
 *     """
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_20StateDependentVolume_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_20StateDependentVolume_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_20StateDependentVolume___init__(((struct __pyx_obj_9bioscrape_5types_StateDependentVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_20StateDependentVolume___init__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1376
 *         pass
 * 
 *     def setup(self, double average_division_volume, double division_noise, growth_rate, Model m):             # <<<<<<<<<<<<<<
 *         self.average_division_volume = average_division_volume
 *         self.division_noise = division_noise
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_20StateDependentVolume_3setup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_20StateDependentVolume_3setup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_average_division_volume;
  double __pyx_v_division_noise;
  PyObject *__pyx_v_growth_rate = 0;
  struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_m = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_average_division_volume,&__pyx_n_s_division_noise,&__pyx_n_s_growth_rate,&__pyx_n_s_m,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_average_division_volume)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_division_noise)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setup", 1, 4, 4, 1); __PYX_ERR(0, 1376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_growth_rate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setup", 1, 4, 4, 2); __PYX_ERR(0, 1376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setup", 1, 4, 4, 3); __PYX_ERR(0, 1376, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setup") < 0)) __PYX_ERR(0, 1376, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_average_division_volume = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_average_division_volume == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1376, __pyx_L3_error)
    __pyx_v_division_noise = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_division_noise == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1376, __pyx_L3_error)
    __pyx_v_growth_rate = values[2];
    __pyx_v_m = ((struct __pyx_obj_9bioscrape_5types_Model *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setup", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1376, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.StateDependentVolume.setup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m), __pyx_ptype_9bioscrape_5types_Model, 1, "m", 0))) __PYX_ERR(0, 1376, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_20StateDependentVolume_2setup(((struct __pyx_obj_9bioscrape_5types_StateDependentVolume *)__pyx_v_self), __pyx_v_average_division_volume, __pyx_v_division_noise, __pyx_v_growth_rate, __pyx_v_m);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_20StateDependentVolume_2setup(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self, double __pyx_v_average_division_volume, double __pyx_v_division_noise, PyObject *__pyx_v_growth_rate, struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("setup", 0);

  /* "bioscrape/types.pyx":1377
 * 
 *     def setup(self, double average_division_volume, double division_noise, growth_rate, Model m):
 *         self.average_division_volume = average_division_volume             # <<<<<<<<<<<<<<
 *         self.division_noise = division_noise
 *         self.growth_rate = m.parse_general_expression(growth_rate)
 */
  __pyx_v_self->average_division_volume = __pyx_v_average_division_volume;

  /* "bioscrape/types.pyx":1378
 *     def setup(self, double average_division_volume, double division_noise, growth_rate, Model m):
 *         self.average_division_volume = average_division_volume
 *         self.division_noise = division_noise             # <<<<<<<<<<<<<<
 *         self.growth_rate = m.parse_general_expression(growth_rate)
 * 
 */
  __pyx_v_self->division_noise = __pyx_v_division_noise;

  /* "bioscrape/types.pyx":1379
 *         self.average_division_volume = average_division_volume
 *         self.division_noise = division_noise
 *         self.growth_rate = m.parse_general_expression(growth_rate)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_m), __pyx_n_s_parse_general_expression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_growth_rate) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_growth_rate);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->growth_rate);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->growth_rate));
  __pyx_v_self->growth_rate = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1376
 *         pass
 * 
 *     def setup(self, double average_division_volume, double division_noise, growth_rate, Model m):             # <<<<<<<<<<<<<<
 *         self.average_division_volume = average_division_volume
 *         self.division_noise = division_noise
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.StateDependentVolume.setup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1382
 * 
 * 
 *     cdef double get_volume_step(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         cdef double gr = self.growth_rate.evaluate(state,params, time)
 *         return ( exp(gr*dt) - 1.0) * volume
 */

static double __pyx_f_9bioscrape_5types_20StateDependentVolume_get_volume_step(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self, double *__pyx_v_state, double *__pyx_v_params, double __pyx_v_time, double __pyx_v_volume, double __pyx_v_dt) {
  double __pyx_v_gr;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume_step", 0);

  /* "bioscrape/types.pyx":1383
 * 
 *     cdef double get_volume_step(self, double *state, double *params, double time, double volume, double dt):
 *         cdef double gr = self.growth_rate.evaluate(state,params, time)             # <<<<<<<<<<<<<<
 *         return ( exp(gr*dt) - 1.0) * volume
 * 
 */
  __pyx_v_gr = ((struct __pyx_vtabstruct_9bioscrape_5types_Term *)__pyx_v_self->growth_rate->__pyx_vtab)->evaluate(__pyx_v_self->growth_rate, __pyx_v_state, __pyx_v_params, __pyx_v_time);

  /* "bioscrape/types.pyx":1384
 *     cdef double get_volume_step(self, double *state, double *params, double time, double volume, double dt):
 *         cdef double gr = self.growth_rate.evaluate(state,params, time)
 *         return ( exp(gr*dt) - 1.0) * volume             # <<<<<<<<<<<<<<
 * 
 *     cdef void initialize(self, double *state, double *params, double time, double volume):
 */
  __pyx_r = ((exp((__pyx_v_gr * __pyx_v_dt)) - 1.0) * __pyx_v_volume);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1382
 * 
 * 
 *     cdef double get_volume_step(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         cdef double gr = self.growth_rate.evaluate(state,params, time)
 *         return ( exp(gr*dt) - 1.0) * volume
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1386
 *         return ( exp(gr*dt) - 1.0) * volume
 * 
 *     cdef void initialize(self, double *state, double *params, double time, double volume):             # <<<<<<<<<<<<<<
 *         self.py_set_volume(volume)
 *         # Must choose division volume.
 */

static void __pyx_f_9bioscrape_5types_20StateDependentVolume_initialize(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, double __pyx_v_volume) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "bioscrape/types.pyx":1387
 * 
 *     cdef void initialize(self, double *state, double *params, double time, double volume):
 *         self.py_set_volume(volume)             # <<<<<<<<<<<<<<
 *         # Must choose division volume.
 *         self.division_volume = self.average_division_volume * cyrandom.normal_rv(1.0, self.division_noise)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_py_set_volume); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_volume); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1389
 *         self.py_set_volume(volume)
 *         # Must choose division volume.
 *         self.division_volume = self.average_division_volume * cyrandom.normal_rv(1.0, self.division_noise)             # <<<<<<<<<<<<<<
 *         if self.division_noise > volume:
 *             raise RuntimeError('Division occurs before initial volume - change your parameters!')
 */
  __pyx_v_self->division_volume = (__pyx_v_self->average_division_volume * __pyx_f_9bioscrape_6random_normal_rv(1.0, __pyx_v_self->division_noise));

  /* "bioscrape/types.pyx":1390
 *         # Must choose division volume.
 *         self.division_volume = self.average_division_volume * cyrandom.normal_rv(1.0, self.division_noise)
 *         if self.division_noise > volume:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Division occurs before initial volume - change your parameters!')
 * 
 */
  __pyx_t_5 = ((__pyx_v_self->division_noise > __pyx_v_volume) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "bioscrape/types.pyx":1391
 *         self.division_volume = self.average_division_volume * cyrandom.normal_rv(1.0, self.division_noise)
 *         if self.division_noise > volume:
 *             raise RuntimeError('Division occurs before initial volume - change your parameters!')             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1391, __pyx_L1_error)

    /* "bioscrape/types.pyx":1390
 *         # Must choose division volume.
 *         self.division_volume = self.average_division_volume * cyrandom.normal_rv(1.0, self.division_noise)
 *         if self.division_noise > volume:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Division occurs before initial volume - change your parameters!')
 * 
 */
  }

  /* "bioscrape/types.pyx":1386
 *         return ( exp(gr*dt) - 1.0) * volume
 * 
 *     cdef void initialize(self, double *state, double *params, double time, double volume):             # <<<<<<<<<<<<<<
 *         self.py_set_volume(volume)
 *         # Must choose division volume.
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("bioscrape.types.StateDependentVolume.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1394
 * 
 * 
 *     cdef unsigned cell_divided(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         if volume > self.division_volume:
 *             return 1
 */

static unsigned int __pyx_f_9bioscrape_5types_20StateDependentVolume_cell_divided(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self, CYTHON_UNUSED double *__pyx_v_state, CYTHON_UNUSED double *__pyx_v_params, CYTHON_UNUSED double __pyx_v_time, double __pyx_v_volume, CYTHON_UNUSED double __pyx_v_dt) {
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("cell_divided", 0);

  /* "bioscrape/types.pyx":1395
 * 
 *     cdef unsigned cell_divided(self, double *state, double *params, double time, double volume, double dt):
 *         if volume > self.division_volume:             # <<<<<<<<<<<<<<
 *             return 1
 *         return 0
 */
  __pyx_t_1 = ((__pyx_v_volume > __pyx_v_self->division_volume) != 0);
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1396
 *     cdef unsigned cell_divided(self, double *state, double *params, double time, double volume, double dt):
 *         if volume > self.division_volume:
 *             return 1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":1395
 * 
 *     cdef unsigned cell_divided(self, double *state, double *params, double time, double volume, double dt):
 *         if volume > self.division_volume:             # <<<<<<<<<<<<<<
 *             return 1
 *         return 0
 */
  }

  /* "bioscrape/types.pyx":1397
 *         if volume > self.division_volume:
 *             return 1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cdef Volume copy(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1394
 * 
 * 
 *     cdef unsigned cell_divided(self, double *state, double *params, double time, double volume, double dt):             # <<<<<<<<<<<<<<
 *         if volume > self.division_volume:
 *             return 1
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1399
 *         return 0
 * 
 *     cdef Volume copy(self):             # <<<<<<<<<<<<<<
 *         cdef StateDependentVolume sv = StateDependentVolume()
 *         sv.division_noise = self.division_noise
 */

static struct __pyx_obj_9bioscrape_5types_Volume *__pyx_f_9bioscrape_5types_20StateDependentVolume_copy(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self) {
  struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_sv = 0;
  struct __pyx_obj_9bioscrape_5types_Volume *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "bioscrape/types.pyx":1400
 * 
 *     cdef Volume copy(self):
 *         cdef StateDependentVolume sv = StateDependentVolume()             # <<<<<<<<<<<<<<
 *         sv.division_noise = self.division_noise
 *         sv.division_volume = self.division_volume
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_StateDependentVolume)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sv = ((struct __pyx_obj_9bioscrape_5types_StateDependentVolume *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1401
 *     cdef Volume copy(self):
 *         cdef StateDependentVolume sv = StateDependentVolume()
 *         sv.division_noise = self.division_noise             # <<<<<<<<<<<<<<
 *         sv.division_volume = self.division_volume
 *         sv.growth_rate = self.growth_rate
 */
  __pyx_t_2 = __pyx_v_self->division_noise;
  __pyx_v_sv->division_noise = __pyx_t_2;

  /* "bioscrape/types.pyx":1402
 *         cdef StateDependentVolume sv = StateDependentVolume()
 *         sv.division_noise = self.division_noise
 *         sv.division_volume = self.division_volume             # <<<<<<<<<<<<<<
 *         sv.growth_rate = self.growth_rate
 *         sv.average_division_volume = self.average_division_volume
 */
  __pyx_t_2 = __pyx_v_self->division_volume;
  __pyx_v_sv->division_volume = __pyx_t_2;

  /* "bioscrape/types.pyx":1403
 *         sv.division_noise = self.division_noise
 *         sv.division_volume = self.division_volume
 *         sv.growth_rate = self.growth_rate             # <<<<<<<<<<<<<<
 *         sv.average_division_volume = self.average_division_volume
 *         sv.current_volume = self.current_volume
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->growth_rate);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_sv->growth_rate);
  __Pyx_DECREF(((PyObject *)__pyx_v_sv->growth_rate));
  __pyx_v_sv->growth_rate = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1404
 *         sv.division_volume = self.division_volume
 *         sv.growth_rate = self.growth_rate
 *         sv.average_division_volume = self.average_division_volume             # <<<<<<<<<<<<<<
 *         sv.current_volume = self.current_volume
 *         return sv
 */
  __pyx_t_2 = __pyx_v_self->average_division_volume;
  __pyx_v_sv->average_division_volume = __pyx_t_2;

  /* "bioscrape/types.pyx":1405
 *         sv.growth_rate = self.growth_rate
 *         sv.average_division_volume = self.average_division_volume
 *         sv.current_volume = self.current_volume             # <<<<<<<<<<<<<<
 *         return sv
 * 
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.current_volume;
  __pyx_v_sv->__pyx_base.current_volume = __pyx_t_2;

  /* "bioscrape/types.pyx":1406
 *         sv.average_division_volume = self.average_division_volume
 *         sv.current_volume = self.current_volume
 *         return sv             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_sv));
  __pyx_r = ((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v_sv);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1399
 *         return 0
 * 
 *     cdef Volume copy(self):             # <<<<<<<<<<<<<<
 *         cdef StateDependentVolume sv = StateDependentVolume()
 *         sv.division_noise = self.division_noise
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.StateDependentVolume.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_sv);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_20StateDependentVolume_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_20StateDependentVolume_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_20StateDependentVolume_4__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_StateDependentVolume *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_20StateDependentVolume_4__reduce_cython__(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.average_division_volume, self.current_volume, self.division_noise, self.division_volume, self.growth_rate)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->average_division_volume); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.current_volume); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->division_noise); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->division_volume); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->growth_rate));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->growth_rate));
  PyTuple_SET_ITEM(__pyx_t_5, 4, ((PyObject *)__pyx_v_self->growth_rate));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.average_division_volume, self.current_volume, self.division_noise, self.division_volume, self.growth_rate)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_5 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v__dict = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "(tree fragment)":7
 *     state = (self.average_division_volume, self.current_volume, self.division_noise, self.division_volume, self.growth_rate)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_6 = (__pyx_v__dict != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.growth_rate is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.average_division_volume, self.current_volume, self.division_noise, self.division_volume, self.growth_rate)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.growth_rate is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_StateDependentVolume, (type(self), 0x2b6d7b7, None), state
 */
  /*else*/ {
    __pyx_t_7 = (((PyObject *)__pyx_v_self->growth_rate) != Py_None);
    __pyx_v_use_setstate = __pyx_t_7;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.growth_rate is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_StateDependentVolume, (type(self), 0x2b6d7b7, None), state
 *     else:
 */
  __pyx_t_7 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":13
 *         use_setstate = self.growth_rate is not None
 *     if use_setstate:
 *         return __pyx_unpickle_StateDependentVolume, (type(self), 0x2b6d7b7, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_StateDependentVolume, (type(self), 0x2b6d7b7, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_StateDependentVol); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_45537207);
    __Pyx_GIVEREF(__pyx_int_45537207);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_45537207);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 2, Py_None);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.growth_rate is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_StateDependentVolume, (type(self), 0x2b6d7b7, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_StateDependentVolume, (type(self), 0x2b6d7b7, None), state
 *     else:
 *         return __pyx_unpickle_StateDependentVolume, (type(self), 0x2b6d7b7, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_StateDependentVolume__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_StateDependentVol); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_45537207);
    __Pyx_GIVEREF(__pyx_int_45537207);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_45537207);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.StateDependentVolume.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StateDependentVolume, (type(self), 0x2b6d7b7, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StateDependentVolume__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_20StateDependentVolume_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_20StateDependentVolume_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_20StateDependentVolume_6__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_StateDependentVolume *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_20StateDependentVolume_6__setstate_cython__(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_StateDependentVolume, (type(self), 0x2b6d7b7, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_StateDependentVolume__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_StateDependentVolume__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StateDependentVolume, (type(self), 0x2b6d7b7, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StateDependentVolume__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.StateDependentVolume.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1414
 * 
 * cdef class Model:
 *     def __init__(self, filename = None, species = [], reactions = [],             # <<<<<<<<<<<<<<
 *                  parameters = [], rules = [], initial_condition_dict = None,
 *                  sbml_filename = None, input_printout = False,
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_5Model_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model___init__[] = "\n        Read in a model from a file using old bioscrape XML format (now deprecated), SBML format, or by \n        specifying the model programmatically using the API.\n\n        :param filename: (str) the file to read the model\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9bioscrape_5types_5Model___init__;
#endif
static int __pyx_pw_9bioscrape_5types_5Model_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_species = 0;
  PyObject *__pyx_v_reactions = 0;
  PyObject *__pyx_v_parameters = 0;
  PyObject *__pyx_v_rules = 0;
  PyObject *__pyx_v_initial_condition_dict = 0;
  PyObject *__pyx_v_sbml_filename = 0;
  PyObject *__pyx_v_input_printout = 0;
  PyObject *__pyx_v_initialize_model = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_species,&__pyx_n_s_reactions,&__pyx_n_s_parameters,&__pyx_n_s_rules,&__pyx_n_s_initial_condition_dict,&__pyx_n_s_sbml_filename,&__pyx_n_s_input_printout,&__pyx_n_s_initialize_model,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = __pyx_k__21;
    values[2] = __pyx_k__22;
    values[3] = __pyx_k__23;
    values[4] = __pyx_k__24;

    /* "bioscrape/types.pyx":1415
 * cdef class Model:
 *     def __init__(self, filename = None, species = [], reactions = [],
 *                  parameters = [], rules = [], initial_condition_dict = None,             # <<<<<<<<<<<<<<
 *                  sbml_filename = None, input_printout = False,
 *                  initialize_model = True, **kwargs):
 */
    values[5] = ((PyObject *)Py_None);

    /* "bioscrape/types.pyx":1416
 *     def __init__(self, filename = None, species = [], reactions = [],
 *                  parameters = [], rules = [], initial_condition_dict = None,
 *                  sbml_filename = None, input_printout = False,             # <<<<<<<<<<<<<<
 *                  initialize_model = True, **kwargs):
 *         """
 */
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_False);

    /* "bioscrape/types.pyx":1417
 *                  parameters = [], rules = [], initial_condition_dict = None,
 *                  sbml_filename = None, input_printout = False,
 *                  initialize_model = True, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         Read in a model from a file using old bioscrape XML format (now deprecated), SBML format, or by
 */
    values[8] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reactions);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameters);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rules);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initial_condition_dict);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sbml_filename);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input_printout);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initialize_model);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1414, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_species = values[1];
    __pyx_v_reactions = values[2];
    __pyx_v_parameters = values[3];
    __pyx_v_rules = values[4];
    __pyx_v_initial_condition_dict = values[5];
    __pyx_v_sbml_filename = values[6];
    __pyx_v_input_printout = values[7];
    __pyx_v_initialize_model = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1414, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("bioscrape.types.Model.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model___init__(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_filename, __pyx_v_species, __pyx_v_reactions, __pyx_v_parameters, __pyx_v_rules, __pyx_v_initial_condition_dict, __pyx_v_sbml_filename, __pyx_v_input_printout, __pyx_v_initialize_model, __pyx_v_kwargs);

  /* "bioscrape/types.pyx":1414
 * 
 * cdef class Model:
 *     def __init__(self, filename = None, species = [], reactions = [],             # <<<<<<<<<<<<<<
 *                  parameters = [], rules = [], initial_condition_dict = None,
 *                  sbml_filename = None, input_printout = False,
 */

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_5Model___init__(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_species, PyObject *__pyx_v_reactions, PyObject *__pyx_v_parameters, PyObject *__pyx_v_rules, PyObject *__pyx_v_initial_condition_dict, PyObject *__pyx_v_sbml_filename, PyObject *__pyx_v_input_printout, PyObject *__pyx_v_initialize_model, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_rxn = NULL;
  PyObject *__pyx_v_reactants = NULL;
  PyObject *__pyx_v_products = NULL;
  PyObject *__pyx_v_propensity_type = NULL;
  PyObject *__pyx_v_propensity_param_dict = NULL;
  PyObject *__pyx_v_delay_type = NULL;
  PyObject *__pyx_v_delay_reactants = NULL;
  PyObject *__pyx_v_delay_products = NULL;
  PyObject *__pyx_v_delay_param_dict = NULL;
  PyObject *__pyx_v_param = NULL;
  PyObject *__pyx_v_param_val = NULL;
  PyObject *__pyx_v_rule = NULL;
  PyObject *__pyx_v_rule_type = NULL;
  PyObject *__pyx_v_rule_attributes = NULL;
  PyObject *__pyx_v_rule_frequency = NULL;
  PyObject *__pyx_v_specie = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_species);
  __Pyx_INCREF(__pyx_v_parameters);

  /* "bioscrape/types.pyx":1442
 *         # to use a Model in multiple threads/processes with multiprocessing.
 *         ########################################################################
 *         self._next_species_index = 0             # <<<<<<<<<<<<<<
 *         self._next_params_index = 0
 *         self._dummy_param_counter = 0
 */
  __pyx_v_self->_next_species_index = 0;

  /* "bioscrape/types.pyx":1443
 *         ########################################################################
 *         self._next_species_index = 0
 *         self._next_params_index = 0             # <<<<<<<<<<<<<<
 *         self._dummy_param_counter = 0
 * 
 */
  __pyx_v_self->_next_params_index = 0;

  /* "bioscrape/types.pyx":1444
 *         self._next_species_index = 0
 *         self._next_params_index = 0
 *         self._dummy_param_counter = 0             # <<<<<<<<<<<<<<
 * 
 *         self.has_delay = False #Does the Model contain any delay reactions?
 */
  __pyx_v_self->_dummy_param_counter = 0;

  /* "bioscrape/types.pyx":1446
 *         self._dummy_param_counter = 0
 * 
 *         self.has_delay = False #Does the Model contain any delay reactions?             # <<<<<<<<<<<<<<
 *                                #Updated in _add_reaction.
 * 
 */
  __pyx_v_self->has_delay = 0;

  /* "bioscrape/types.pyx":1449
 *                                #Updated in _add_reaction.
 * 
 *         self.species2index = {}             # <<<<<<<<<<<<<<
 *         self.params2index = {}
 *         self.propensities = []
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->species2index);
  __Pyx_DECREF(__pyx_v_self->species2index);
  __pyx_v_self->species2index = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1450
 * 
 *         self.species2index = {}
 *         self.params2index = {}             # <<<<<<<<<<<<<<
 *         self.propensities = []
 *         self.delays = []
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->params2index);
  __Pyx_DECREF(__pyx_v_self->params2index);
  __pyx_v_self->params2index = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1451
 *         self.species2index = {}
 *         self.params2index = {}
 *         self.propensities = []             # <<<<<<<<<<<<<<
 *         self.delays = []
 *         self.repeat_rules = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->propensities);
  __Pyx_DECREF(__pyx_v_self->propensities);
  __pyx_v_self->propensities = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1452
 *         self.params2index = {}
 *         self.propensities = []
 *         self.delays = []             # <<<<<<<<<<<<<<
 *         self.repeat_rules = []
 *         self.params_values = np.array([])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->delays);
  __Pyx_DECREF(__pyx_v_self->delays);
  __pyx_v_self->delays = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1453
 *         self.propensities = []
 *         self.delays = []
 *         self.repeat_rules = []             # <<<<<<<<<<<<<<
 *         self.params_values = np.array([])
 *         self.species_values = np.array([])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->repeat_rules);
  __Pyx_DECREF(__pyx_v_self->repeat_rules);
  __pyx_v_self->repeat_rules = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1454
 *         self.delays = []
 *         self.repeat_rules = []
 *         self.params_values = np.array([])             # <<<<<<<<<<<<<<
 *         self.species_values = np.array([])
 *         self.reaction_definitions = [] # List of reaction tuples useful for writing SBML
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->params_values);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->params_values));
  __pyx_v_self->params_values = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1455
 *         self.repeat_rules = []
 *         self.params_values = np.array([])
 *         self.species_values = np.array([])             # <<<<<<<<<<<<<<
 *         self.reaction_definitions = [] # List of reaction tuples useful for writing SBML
 *         self.rule_definitions = [] #A list of rule tuples useful for writing SBML
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1455, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->species_values);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->species_values));
  __pyx_v_self->species_values = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1456
 *         self.params_values = np.array([])
 *         self.species_values = np.array([])
 *         self.reaction_definitions = [] # List of reaction tuples useful for writing SBML             # <<<<<<<<<<<<<<
 *         self.rule_definitions = [] #A list of rule tuples useful for writing SBML
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->reaction_definitions);
  __Pyx_DECREF(__pyx_v_self->reaction_definitions);
  __pyx_v_self->reaction_definitions = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1457
 *         self.species_values = np.array([])
 *         self.reaction_definitions = [] # List of reaction tuples useful for writing SBML
 *         self.rule_definitions = [] #A list of rule tuples useful for writing SBML             # <<<<<<<<<<<<<<
 * 
 *         # These must be updated later
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->rule_definitions);
  __Pyx_DECREF(__pyx_v_self->rule_definitions);
  __pyx_v_self->rule_definitions = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1460
 * 
 *         # These must be updated later
 *         self.update_array = None             # <<<<<<<<<<<<<<
 *         self.delay_update_array = None
 *         self.reaction_updates = []
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->update_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->update_array));
  __pyx_v_self->update_array = ((PyArrayObject *)Py_None);

  /* "bioscrape/types.pyx":1461
 *         # These must be updated later
 *         self.update_array = None
 *         self.delay_update_array = None             # <<<<<<<<<<<<<<
 *         self.reaction_updates = []
 *         self.delay_reaction_updates = []
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->delay_update_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->delay_update_array));
  __pyx_v_self->delay_update_array = ((PyArrayObject *)Py_None);

  /* "bioscrape/types.pyx":1462
 *         self.update_array = None
 *         self.delay_update_array = None
 *         self.reaction_updates = []             # <<<<<<<<<<<<<<
 *         self.delay_reaction_updates = []
 *         # Set to True when the stochiometric matrices are created and model
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->reaction_updates);
  __Pyx_DECREF(__pyx_v_self->reaction_updates);
  __pyx_v_self->reaction_updates = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1463
 *         self.delay_update_array = None
 *         self.reaction_updates = []
 *         self.delay_reaction_updates = []             # <<<<<<<<<<<<<<
 *         # Set to True when the stochiometric matrices are created and model
 *         # checked by the initialize() function
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->delay_reaction_updates);
  __Pyx_DECREF(__pyx_v_self->delay_reaction_updates);
  __pyx_v_self->delay_reaction_updates = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1466
 *         # Set to True when the stochiometric matrices are created and model
 *         # checked by the initialize() function
 *         self.initialized = False             # <<<<<<<<<<<<<<
 *         self.reaction_list = [] # A list used to store tuples (propensity,
 *                                 # delay, update_array, delay_update_array) for
 */
  __pyx_v_self->initialized = 0;

  /* "bioscrape/types.pyx":1467
 *         # checked by the initialize() function
 *         self.initialized = False
 *         self.reaction_list = [] # A list used to store tuples (propensity,             # <<<<<<<<<<<<<<
 *                                 # delay, update_array, delay_update_array) for
 *                                 # each reaction
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->reaction_list);
  __Pyx_DECREF(__pyx_v_self->reaction_list);
  __pyx_v_self->reaction_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1471
 *                                 # each reaction
 * 
 *         if filename != None and sbml_filename != None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot load both a bioSCRAPE xml file and an "
 *                              "SBML file. Please choose just one.")
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_filename, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_sbml_filename, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_5)) {

    /* "bioscrape/types.pyx":1472
 * 
 *         if filename != None and sbml_filename != None:
 *             raise ValueError("Cannot load both a bioSCRAPE xml file and an "             # <<<<<<<<<<<<<<
 *                              "SBML file. Please choose just one.")
 *         elif filename != None:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1472, __pyx_L1_error)

    /* "bioscrape/types.pyx":1471
 *                                 # each reaction
 * 
 *         if filename != None and sbml_filename != None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot load both a bioSCRAPE xml file and an "
 *                              "SBML file. Please choose just one.")
 */
  }

  /* "bioscrape/types.pyx":1474
 *             raise ValueError("Cannot load both a bioSCRAPE xml file and an "
 *                              "SBML file. Please choose just one.")
 *         elif filename != None:             # <<<<<<<<<<<<<<
 *             self.parse_model(filename, input_printout = input_printout)
 *         elif sbml_filename != None:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_filename, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1475
 *                              "SBML file. Please choose just one.")
 *         elif filename != None:
 *             self.parse_model(filename, input_printout = input_printout)             # <<<<<<<<<<<<<<
 *         elif sbml_filename != None:
 *             import_sbml(sbml_filename, bioscrape_model = self, input_printout = input_printout, **kwargs)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_parse_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_filename);
    __Pyx_GIVEREF(__pyx_v_filename);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_filename);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_input_printout, __pyx_v_input_printout) < 0) __PYX_ERR(0, 1475, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1474
 *             raise ValueError("Cannot load both a bioSCRAPE xml file and an "
 *                              "SBML file. Please choose just one.")
 *         elif filename != None:             # <<<<<<<<<<<<<<
 *             self.parse_model(filename, input_printout = input_printout)
 *         elif sbml_filename != None:
 */
    goto __pyx_L3;
  }

  /* "bioscrape/types.pyx":1476
 *         elif filename != None:
 *             self.parse_model(filename, input_printout = input_printout)
 *         elif sbml_filename != None:             # <<<<<<<<<<<<<<
 *             import_sbml(sbml_filename, bioscrape_model = self, input_printout = input_printout, **kwargs)
 * 
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_sbml_filename, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1477
 *             self.parse_model(filename, input_printout = input_printout)
 *         elif sbml_filename != None:
 *             import_sbml(sbml_filename, bioscrape_model = self, input_printout = input_printout, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         for species in species:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_import_sbml); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_sbml_filename);
    __Pyx_GIVEREF(__pyx_v_sbml_filename);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_sbml_filename);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_bioscrape_model, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 1477, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_input_printout, __pyx_v_input_printout) < 0) __PYX_ERR(0, 1477, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
    if (__Pyx_MergeKeywords(__pyx_t_2, __pyx_v_kwargs) < 0) __PYX_ERR(0, 1477, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":1476
 *         elif filename != None:
 *             self.parse_model(filename, input_printout = input_printout)
 *         elif sbml_filename != None:             # <<<<<<<<<<<<<<
 *             import_sbml(sbml_filename, bioscrape_model = self, input_printout = input_printout, **kwargs)
 * 
 */
  }
  __pyx_L3:;

  /* "bioscrape/types.pyx":1479
 *             import_sbml(sbml_filename, bioscrape_model = self, input_printout = input_printout, **kwargs)
 * 
 *         for species in species:             # <<<<<<<<<<<<<<
 *             self._add_species(species)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_species)) || PyTuple_CheckExact(__pyx_v_species)) {
    __pyx_t_1 = __pyx_v_species; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_species); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1479, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1479, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1479, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1479, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1479, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1479, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_DECREF_SET(__pyx_v_species, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1480
 * 
 *         for species in species:
 *             self._add_species(species)             # <<<<<<<<<<<<<<
 * 
 *         for rxn in reactions:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_species) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_species);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1479
 *             import_sbml(sbml_filename, bioscrape_model = self, input_printout = input_printout, **kwargs)
 * 
 *         for species in species:             # <<<<<<<<<<<<<<
 *             self._add_species(species)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1482
 *             self._add_species(species)
 * 
 *         for rxn in reactions:             # <<<<<<<<<<<<<<
 *             if len(rxn) == 4:
 *                 reactants, products, propensity_type, propensity_param_dict = rxn
 */
  if (likely(PyList_CheckExact(__pyx_v_reactions)) || PyTuple_CheckExact(__pyx_v_reactions)) {
    __pyx_t_1 = __pyx_v_reactions; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_reactions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1482, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1482, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1482, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1482, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_rxn, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1483
 * 
 *         for rxn in reactions:
 *             if len(rxn) == 4:             # <<<<<<<<<<<<<<
 *                 reactants, products, propensity_type, propensity_param_dict = rxn
 *                 delay_type, delay_reactants, delay_products, delay_param_dict =\
 */
    __pyx_t_9 = PyObject_Length(__pyx_v_rxn); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1483, __pyx_L1_error)
    __pyx_t_5 = ((__pyx_t_9 == 4) != 0);
    if (__pyx_t_5) {

      /* "bioscrape/types.pyx":1484
 *         for rxn in reactions:
 *             if len(rxn) == 4:
 *                 reactants, products, propensity_type, propensity_param_dict = rxn             # <<<<<<<<<<<<<<
 *                 delay_type, delay_reactants, delay_products, delay_param_dict =\
 *                         None, None,  None, None
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_rxn))) || (PyList_CheckExact(__pyx_v_rxn))) {
        PyObject* sequence = __pyx_v_rxn;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 4)) {
          if (size > 4) __Pyx_RaiseTooManyValuesError(4);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1484, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 3); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_10);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_10};
          for (i=0; i < 4; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1484, __pyx_L1_error)
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_10};
        __pyx_t_11 = PyObject_GetIter(__pyx_v_rxn); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
        for (index=0; index < 4; index++) {
          PyObject* item = __pyx_t_12(__pyx_t_11); if (unlikely(!item)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 4) < 0) __PYX_ERR(0, 1484, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1484, __pyx_L1_error)
        __pyx_L12_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_reactants, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_products, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_propensity_type, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_propensity_param_dict, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "bioscrape/types.pyx":1486
 *                 reactants, products, propensity_type, propensity_param_dict = rxn
 *                 delay_type, delay_reactants, delay_products, delay_param_dict =\
 *                         None, None,  None, None             # <<<<<<<<<<<<<<
 *             elif len(rxn) == 8:
 *                 reactants, products, propensity_type, propensity_param_dict, \
 */
      __pyx_t_10 = Py_None;
      __Pyx_INCREF(__pyx_t_10);
      __pyx_t_4 = Py_None;
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_3 = Py_None;
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_2 = Py_None;
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_delay_type, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_delay_reactants, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_delay_products, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_delay_param_dict, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "bioscrape/types.pyx":1483
 * 
 *         for rxn in reactions:
 *             if len(rxn) == 4:             # <<<<<<<<<<<<<<
 *                 reactants, products, propensity_type, propensity_param_dict = rxn
 *                 delay_type, delay_reactants, delay_products, delay_param_dict =\
 */
      goto __pyx_L10;
    }

    /* "bioscrape/types.pyx":1487
 *                 delay_type, delay_reactants, delay_products, delay_param_dict =\
 *                         None, None,  None, None
 *             elif len(rxn) == 8:             # <<<<<<<<<<<<<<
 *                 reactants, products, propensity_type, propensity_param_dict, \
 *                 delay_type, delay_reactants, delay_products, delay_param_dict = rxn
 */
    __pyx_t_9 = PyObject_Length(__pyx_v_rxn); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1487, __pyx_L1_error)
    __pyx_t_5 = ((__pyx_t_9 == 8) != 0);
    if (likely(__pyx_t_5)) {

      /* "bioscrape/types.pyx":1489
 *             elif len(rxn) == 8:
 *                 reactants, products, propensity_type, propensity_param_dict, \
 *                 delay_type, delay_reactants, delay_products, delay_param_dict = rxn             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Reaction Tuple of the wrong length! Must be "
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_rxn))) || (PyList_CheckExact(__pyx_v_rxn))) {
        PyObject* sequence = __pyx_v_rxn;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 8)) {
          if (size > 8) __Pyx_RaiseTooManyValuesError(8);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1488, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 4); 
          __pyx_t_13 = PyTuple_GET_ITEM(sequence, 5); 
          __pyx_t_14 = PyTuple_GET_ITEM(sequence, 6); 
          __pyx_t_15 = PyTuple_GET_ITEM(sequence, 7); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 4); 
          __pyx_t_13 = PyList_GET_ITEM(sequence, 5); 
          __pyx_t_14 = PyList_GET_ITEM(sequence, 6); 
          __pyx_t_15 = PyList_GET_ITEM(sequence, 7); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_15);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[8] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_10,&__pyx_t_11,&__pyx_t_13,&__pyx_t_14,&__pyx_t_15};
          for (i=0; i < 8; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1488, __pyx_L1_error)
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[8] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_10,&__pyx_t_11,&__pyx_t_13,&__pyx_t_14,&__pyx_t_15};
        __pyx_t_16 = PyObject_GetIter(__pyx_v_rxn); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1488, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_12 = Py_TYPE(__pyx_t_16)->tp_iternext;
        for (index=0; index < 8; index++) {
          PyObject* item = __pyx_t_12(__pyx_t_16); if (unlikely(!item)) goto __pyx_L13_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_16), 8) < 0) __PYX_ERR(0, 1488, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        goto __pyx_L14_unpacking_done;
        __pyx_L13_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1488, __pyx_L1_error)
        __pyx_L14_unpacking_done:;
      }

      /* "bioscrape/types.pyx":1488
 *                         None, None,  None, None
 *             elif len(rxn) == 8:
 *                 reactants, products, propensity_type, propensity_param_dict, \             # <<<<<<<<<<<<<<
 *                 delay_type, delay_reactants, delay_products, delay_param_dict = rxn
 *             else:
 */
      __Pyx_XDECREF_SET(__pyx_v_reactants, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_products, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_propensity_type, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_propensity_param_dict, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_delay_type, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_delay_reactants, __pyx_t_13);
      __pyx_t_13 = 0;
      __Pyx_XDECREF_SET(__pyx_v_delay_products, __pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_XDECREF_SET(__pyx_v_delay_param_dict, __pyx_t_15);
      __pyx_t_15 = 0;

      /* "bioscrape/types.pyx":1487
 *                 delay_type, delay_reactants, delay_products, delay_param_dict =\
 *                         None, None,  None, None
 *             elif len(rxn) == 8:             # <<<<<<<<<<<<<<
 *                 reactants, products, propensity_type, propensity_param_dict, \
 *                 delay_type, delay_reactants, delay_products, delay_param_dict = rxn
 */
      goto __pyx_L10;
    }

    /* "bioscrape/types.pyx":1491
 *                 delay_type, delay_reactants, delay_products, delay_param_dict = rxn
 *             else:
 *                 raise ValueError("Reaction Tuple of the wrong length! Must be "             # <<<<<<<<<<<<<<
 *                                  "of length 4 (no delay) or 8 (with delays). "
 *                                  "See BioSCRAPE Model API for details.")
 */
    /*else*/ {
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_Raise(__pyx_t_15, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __PYX_ERR(0, 1491, __pyx_L1_error)
    }
    __pyx_L10:;

    /* "bioscrape/types.pyx":1494
 *                                  "of length 4 (no delay) or 8 (with delays). "
 *                                  "See BioSCRAPE Model API for details.")
 *             self.create_reaction(reactants, products, propensity_type,             # <<<<<<<<<<<<<<
 *                                  propensity_param_dict, delay_type,
 *                                  delay_reactants, delay_products,
 */
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_create_reaction); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);

    /* "bioscrape/types.pyx":1497
 *                                  propensity_param_dict, delay_type,
 *                                  delay_reactants, delay_products,
 *                                  delay_param_dict,             # <<<<<<<<<<<<<<
 *                                  input_printout = input_printout)
 * 
 */
    __pyx_t_14 = PyTuple_New(8); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_INCREF(__pyx_v_reactants);
    __Pyx_GIVEREF(__pyx_v_reactants);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_reactants);
    __Pyx_INCREF(__pyx_v_products);
    __Pyx_GIVEREF(__pyx_v_products);
    PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_products);
    __Pyx_INCREF(__pyx_v_propensity_type);
    __Pyx_GIVEREF(__pyx_v_propensity_type);
    PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_v_propensity_type);
    __Pyx_INCREF(__pyx_v_propensity_param_dict);
    __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
    PyTuple_SET_ITEM(__pyx_t_14, 3, __pyx_v_propensity_param_dict);
    __Pyx_INCREF(__pyx_v_delay_type);
    __Pyx_GIVEREF(__pyx_v_delay_type);
    PyTuple_SET_ITEM(__pyx_t_14, 4, __pyx_v_delay_type);
    __Pyx_INCREF(__pyx_v_delay_reactants);
    __Pyx_GIVEREF(__pyx_v_delay_reactants);
    PyTuple_SET_ITEM(__pyx_t_14, 5, __pyx_v_delay_reactants);
    __Pyx_INCREF(__pyx_v_delay_products);
    __Pyx_GIVEREF(__pyx_v_delay_products);
    PyTuple_SET_ITEM(__pyx_t_14, 6, __pyx_v_delay_products);
    __Pyx_INCREF(__pyx_v_delay_param_dict);
    __Pyx_GIVEREF(__pyx_v_delay_param_dict);
    PyTuple_SET_ITEM(__pyx_t_14, 7, __pyx_v_delay_param_dict);

    /* "bioscrape/types.pyx":1498
 *                                  delay_reactants, delay_products,
 *                                  delay_param_dict,
 *                                  input_printout = input_printout)             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(parameters, dict):
 */
    __pyx_t_13 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_input_printout, __pyx_v_input_printout) < 0) __PYX_ERR(0, 1498, __pyx_L1_error)

    /* "bioscrape/types.pyx":1494
 *                                  "of length 4 (no delay) or 8 (with delays). "
 *                                  "See BioSCRAPE Model API for details.")
 *             self.create_reaction(reactants, products, propensity_type,             # <<<<<<<<<<<<<<
 *                                  propensity_param_dict, delay_type,
 *                                  delay_reactants, delay_products,
 */
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_14, __pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "bioscrape/types.pyx":1482
 *             self._add_species(species)
 * 
 *         for rxn in reactions:             # <<<<<<<<<<<<<<
 *             if len(rxn) == 4:
 *                 reactants, products, propensity_type, propensity_param_dict = rxn
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1500
 *                                  input_printout = input_printout)
 * 
 *         if isinstance(parameters, dict):             # <<<<<<<<<<<<<<
 *             parameters = parameters.items()
 * 
 */
  __pyx_t_5 = PyDict_Check(__pyx_v_parameters); 
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "bioscrape/types.pyx":1501
 * 
 *         if isinstance(parameters, dict):
 *             parameters = parameters.items()             # <<<<<<<<<<<<<<
 * 
 *         for param, param_val in parameters:
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_parameters, __pyx_n_s_items); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_13 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_1 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF_SET(__pyx_v_parameters, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":1500
 *                                  input_printout = input_printout)
 * 
 *         if isinstance(parameters, dict):             # <<<<<<<<<<<<<<
 *             parameters = parameters.items()
 * 
 */
  }

  /* "bioscrape/types.pyx":1503
 *             parameters = parameters.items()
 * 
 *         for param, param_val in parameters:             # <<<<<<<<<<<<<<
 *                 self._add_param(param)
 *                 self.set_parameter(param, param_val)
 */
  if (likely(PyList_CheckExact(__pyx_v_parameters)) || PyTuple_CheckExact(__pyx_v_parameters)) {
    __pyx_t_1 = __pyx_v_parameters; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_parameters); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1503, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_11 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_11); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1503, __pyx_L1_error)
        #else
        __pyx_t_11 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1503, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_11); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1503, __pyx_L1_error)
        #else
        __pyx_t_11 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1503, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
      }
    } else {
      __pyx_t_11 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_11)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1503, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_11);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
      PyObject* sequence = __pyx_t_11;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1503, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_14);
      #else
      __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      #endif
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_15 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_15)->tp_iternext;
      index = 0; __pyx_t_13 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_13)) goto __pyx_L18_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_13);
      index = 1; __pyx_t_14 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_14)) goto __pyx_L18_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_14);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_15), 2) < 0) __PYX_ERR(0, 1503, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      goto __pyx_L19_unpacking_done;
      __pyx_L18_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1503, __pyx_L1_error)
      __pyx_L19_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_param, __pyx_t_13);
    __pyx_t_13 = 0;
    __Pyx_XDECREF_SET(__pyx_v_param_val, __pyx_t_14);
    __pyx_t_14 = 0;

    /* "bioscrape/types.pyx":1504
 * 
 *         for param, param_val in parameters:
 *                 self._add_param(param)             # <<<<<<<<<<<<<<
 *                 self.set_parameter(param, param_val)
 * 
 */
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_param); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_13 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    __pyx_t_11 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_13, __pyx_v_param) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_param);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "bioscrape/types.pyx":1505
 *         for param, param_val in parameters:
 *                 self._add_param(param)
 *                 self.set_parameter(param, param_val)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_parameter); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_13 = NULL;
    __pyx_t_17 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_17 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_param, __pyx_v_param_val};
      __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1505, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_11);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_param, __pyx_v_param_val};
      __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1505, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_11);
    } else
    #endif
    {
      __pyx_t_15 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      if (__pyx_t_13) {
        __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_13); __pyx_t_13 = NULL;
      }
      __Pyx_INCREF(__pyx_v_param);
      __Pyx_GIVEREF(__pyx_v_param);
      PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_17, __pyx_v_param);
      __Pyx_INCREF(__pyx_v_param_val);
      __Pyx_GIVEREF(__pyx_v_param_val);
      PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_17, __pyx_v_param_val);
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_15, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "bioscrape/types.pyx":1503
 *             parameters = parameters.items()
 * 
 *         for param, param_val in parameters:             # <<<<<<<<<<<<<<
 *                 self._add_param(param)
 *                 self.set_parameter(param, param_val)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1508
 * 
 * 
 *         for rule in rules:             # <<<<<<<<<<<<<<
 *             if len(rule) == 2:
 *                 rule_type, rule_attributes = rule
 */
  if (likely(PyList_CheckExact(__pyx_v_rules)) || PyTuple_CheckExact(__pyx_v_rules)) {
    __pyx_t_1 = __pyx_v_rules; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_rules); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1508, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_11 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_11); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1508, __pyx_L1_error)
        #else
        __pyx_t_11 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_11); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1508, __pyx_L1_error)
        #else
        __pyx_t_11 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
      }
    } else {
      __pyx_t_11 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_11)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1508, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_11);
    }
    __Pyx_XDECREF_SET(__pyx_v_rule, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "bioscrape/types.pyx":1509
 * 
 *         for rule in rules:
 *             if len(rule) == 2:             # <<<<<<<<<<<<<<
 *                 rule_type, rule_attributes = rule
 *                 self.create_rule(rule_type, rule_attributes,
 */
    __pyx_t_9 = PyObject_Length(__pyx_v_rule); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1509, __pyx_L1_error)
    __pyx_t_6 = ((__pyx_t_9 == 2) != 0);
    if (__pyx_t_6) {

      /* "bioscrape/types.pyx":1510
 *         for rule in rules:
 *             if len(rule) == 2:
 *                 rule_type, rule_attributes = rule             # <<<<<<<<<<<<<<
 *                 self.create_rule(rule_type, rule_attributes,
 *                                  input_printout = input_printout)
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_rule))) || (PyList_CheckExact(__pyx_v_rule))) {
        PyObject* sequence = __pyx_v_rule;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1510, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_14);
        #else
        __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_15 = PyObject_GetIter(__pyx_v_rule); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_12 = Py_TYPE(__pyx_t_15)->tp_iternext;
        index = 0; __pyx_t_11 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_11)) goto __pyx_L23_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        index = 1; __pyx_t_14 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_14)) goto __pyx_L23_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_14);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_15), 2) < 0) __PYX_ERR(0, 1510, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        goto __pyx_L24_unpacking_done;
        __pyx_L23_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1510, __pyx_L1_error)
        __pyx_L24_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_rule_type, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_rule_attributes, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "bioscrape/types.pyx":1511
 *             if len(rule) == 2:
 *                 rule_type, rule_attributes = rule
 *                 self.create_rule(rule_type, rule_attributes,             # <<<<<<<<<<<<<<
 *                                  input_printout = input_printout)
 *             elif len(rule) == 3:
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_create_rule); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1511, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1511, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_v_rule_type);
      __Pyx_GIVEREF(__pyx_v_rule_type);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_rule_type);
      __Pyx_INCREF(__pyx_v_rule_attributes);
      __Pyx_GIVEREF(__pyx_v_rule_attributes);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_rule_attributes);

      /* "bioscrape/types.pyx":1512
 *                 rule_type, rule_attributes = rule
 *                 self.create_rule(rule_type, rule_attributes,
 *                                  input_printout = input_printout)             # <<<<<<<<<<<<<<
 *             elif len(rule) == 3:
 *                 rule_type, rule_attributes, rule_frequency = rule
 */
      __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_input_printout, __pyx_v_input_printout) < 0) __PYX_ERR(0, 1512, __pyx_L1_error)

      /* "bioscrape/types.pyx":1511
 *             if len(rule) == 2:
 *                 rule_type, rule_attributes = rule
 *                 self.create_rule(rule_type, rule_attributes,             # <<<<<<<<<<<<<<
 *                                  input_printout = input_printout)
 *             elif len(rule) == 3:
 */
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_11, __pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1511, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "bioscrape/types.pyx":1509
 * 
 *         for rule in rules:
 *             if len(rule) == 2:             # <<<<<<<<<<<<<<
 *                 rule_type, rule_attributes = rule
 *                 self.create_rule(rule_type, rule_attributes,
 */
      goto __pyx_L22;
    }

    /* "bioscrape/types.pyx":1513
 *                 self.create_rule(rule_type, rule_attributes,
 *                                  input_printout = input_printout)
 *             elif len(rule) == 3:             # <<<<<<<<<<<<<<
 *                 rule_type, rule_attributes, rule_frequency = rule
 *                 self.create_rule(rule_type, rule_attributes,
 */
    __pyx_t_9 = PyObject_Length(__pyx_v_rule); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1513, __pyx_L1_error)
    __pyx_t_6 = ((__pyx_t_9 == 3) != 0);
    if (likely(__pyx_t_6)) {

      /* "bioscrape/types.pyx":1514
 *                                  input_printout = input_printout)
 *             elif len(rule) == 3:
 *                 rule_type, rule_attributes, rule_frequency = rule             # <<<<<<<<<<<<<<
 *                 self.create_rule(rule_type, rule_attributes,
 *                                  rule_frequency = rule_frequency,
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_rule))) || (PyList_CheckExact(__pyx_v_rule))) {
        PyObject* sequence = __pyx_v_rule;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1514, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_15 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_15 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_11);
        #else
        __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1514, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_15 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1514, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_11 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1514, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_14 = PyObject_GetIter(__pyx_v_rule); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1514, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_12 = Py_TYPE(__pyx_t_14)->tp_iternext;
        index = 0; __pyx_t_13 = __pyx_t_12(__pyx_t_14); if (unlikely(!__pyx_t_13)) goto __pyx_L25_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_13);
        index = 1; __pyx_t_15 = __pyx_t_12(__pyx_t_14); if (unlikely(!__pyx_t_15)) goto __pyx_L25_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_15);
        index = 2; __pyx_t_11 = __pyx_t_12(__pyx_t_14); if (unlikely(!__pyx_t_11)) goto __pyx_L25_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_14), 3) < 0) __PYX_ERR(0, 1514, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L26_unpacking_done;
        __pyx_L25_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1514, __pyx_L1_error)
        __pyx_L26_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_rule_type, __pyx_t_13);
      __pyx_t_13 = 0;
      __Pyx_XDECREF_SET(__pyx_v_rule_attributes, __pyx_t_15);
      __pyx_t_15 = 0;
      __Pyx_XDECREF_SET(__pyx_v_rule_frequency, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "bioscrape/types.pyx":1515
 *             elif len(rule) == 3:
 *                 rule_type, rule_attributes, rule_frequency = rule
 *                 self.create_rule(rule_type, rule_attributes,             # <<<<<<<<<<<<<<
 *                                  rule_frequency = rule_frequency,
 *                                  input_printout = input_printout)
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_create_rule); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1515, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1515, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_v_rule_type);
      __Pyx_GIVEREF(__pyx_v_rule_type);
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_v_rule_type);
      __Pyx_INCREF(__pyx_v_rule_attributes);
      __Pyx_GIVEREF(__pyx_v_rule_attributes);
      PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_v_rule_attributes);

      /* "bioscrape/types.pyx":1516
 *                 rule_type, rule_attributes, rule_frequency = rule
 *                 self.create_rule(rule_type, rule_attributes,
 *                                  rule_frequency = rule_frequency,             # <<<<<<<<<<<<<<
 *                                  input_printout = input_printout)
 *             else:
 */
      __pyx_t_13 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_rule_frequency, __pyx_v_rule_frequency) < 0) __PYX_ERR(0, 1516, __pyx_L1_error)

      /* "bioscrape/types.pyx":1517
 *                 self.create_rule(rule_type, rule_attributes,
 *                                  rule_frequency = rule_frequency,
 *                                  input_printout = input_printout)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Rules must be a tuple: (rule_type (string), "
 */
      if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_input_printout, __pyx_v_input_printout) < 0) __PYX_ERR(0, 1516, __pyx_L1_error)

      /* "bioscrape/types.pyx":1515
 *             elif len(rule) == 3:
 *                 rule_type, rule_attributes, rule_frequency = rule
 *                 self.create_rule(rule_type, rule_attributes,             # <<<<<<<<<<<<<<
 *                                  rule_frequency = rule_frequency,
 *                                  input_printout = input_printout)
 */
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_15, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1515, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "bioscrape/types.pyx":1513
 *                 self.create_rule(rule_type, rule_attributes,
 *                                  input_printout = input_printout)
 *             elif len(rule) == 3:             # <<<<<<<<<<<<<<
 *                 rule_type, rule_attributes, rule_frequency = rule
 *                 self.create_rule(rule_type, rule_attributes,
 */
      goto __pyx_L22;
    }

    /* "bioscrape/types.pyx":1519
 *                                  input_printout = input_printout)
 *             else:
 *                 raise ValueError("Rules must be a tuple: (rule_type (string), "             # <<<<<<<<<<<<<<
 *                                  "rule_attributes (dict), rule_frequency "
 *                                  "(optional))")
 */
    /*else*/ {
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_Raise(__pyx_t_14, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __PYX_ERR(0, 1519, __pyx_L1_error)
    }
    __pyx_L22:;

    /* "bioscrape/types.pyx":1508
 * 
 * 
 *         for rule in rules:             # <<<<<<<<<<<<<<
 *             if len(rule) == 2:
 *                 rule_type, rule_attributes = rule
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1523
 *                                  "(optional))")
 * 
 *         if initial_condition_dict != None:             # <<<<<<<<<<<<<<
 *             for specie in initial_condition_dict:
 *                 self._add_species(specie)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_initial_condition_dict, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "bioscrape/types.pyx":1524
 * 
 *         if initial_condition_dict != None:
 *             for specie in initial_condition_dict:             # <<<<<<<<<<<<<<
 *                 self._add_species(specie)
 *             self.set_species(initial_condition_dict)
 */
    if (likely(PyList_CheckExact(__pyx_v_initial_condition_dict)) || PyTuple_CheckExact(__pyx_v_initial_condition_dict)) {
      __pyx_t_1 = __pyx_v_initial_condition_dict; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_initial_condition_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1524, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1524, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_14 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_14); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1524, __pyx_L1_error)
          #else
          __pyx_t_14 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1524, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_14); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1524, __pyx_L1_error)
          #else
          __pyx_t_14 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1524, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          #endif
        }
      } else {
        __pyx_t_14 = __pyx_t_8(__pyx_t_1);
        if (unlikely(!__pyx_t_14)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1524, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_14);
      }
      __Pyx_XDECREF_SET(__pyx_v_specie, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "bioscrape/types.pyx":1525
 *         if initial_condition_dict != None:
 *             for specie in initial_condition_dict:
 *                 self._add_species(specie)             # <<<<<<<<<<<<<<
 *             self.set_species(initial_condition_dict)
 * 
 */
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_species); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1525, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_15 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_14 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_15, __pyx_v_specie) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_specie);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1525, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "bioscrape/types.pyx":1524
 * 
 *         if initial_condition_dict != None:
 *             for specie in initial_condition_dict:             # <<<<<<<<<<<<<<
 *                 self._add_species(specie)
 *             self.set_species(initial_condition_dict)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":1526
 *             for specie in initial_condition_dict:
 *                 self._add_species(specie)
 *             self.set_species(initial_condition_dict)             # <<<<<<<<<<<<<<
 * 
 *         if initialize_model:
 */
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_species); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_13 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    __pyx_t_1 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_13, __pyx_v_initial_condition_dict) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_initial_condition_dict);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":1523
 *                                  "(optional))")
 * 
 *         if initial_condition_dict != None:             # <<<<<<<<<<<<<<
 *             for specie in initial_condition_dict:
 *                 self._add_species(specie)
 */
  }

  /* "bioscrape/types.pyx":1528
 *             self.set_species(initial_condition_dict)
 * 
 *         if initialize_model:             # <<<<<<<<<<<<<<
 *             self._initialize()
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_initialize_model); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1528, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "bioscrape/types.pyx":1529
 * 
 *         if initialize_model:
 *             self._initialize()             # <<<<<<<<<<<<<<
 * 
 *     cdef void _initialize(self):
 */
    ((struct __pyx_vtabstruct_9bioscrape_5types_Model *)__pyx_v_self->__pyx_vtab)->_initialize(__pyx_v_self);

    /* "bioscrape/types.pyx":1528
 *             self.set_species(initial_condition_dict)
 * 
 *         if initialize_model:             # <<<<<<<<<<<<<<
 *             self._initialize()
 * 
 */
  }

  /* "bioscrape/types.pyx":1414
 * 
 * cdef class Model:
 *     def __init__(self, filename = None, species = [], reactions = [],             # <<<<<<<<<<<<<<
 *                  parameters = [], rules = [], initial_condition_dict = None,
 *                  sbml_filename = None, input_printout = False,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("bioscrape.types.Model.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rxn);
  __Pyx_XDECREF(__pyx_v_reactants);
  __Pyx_XDECREF(__pyx_v_products);
  __Pyx_XDECREF(__pyx_v_propensity_type);
  __Pyx_XDECREF(__pyx_v_propensity_param_dict);
  __Pyx_XDECREF(__pyx_v_delay_type);
  __Pyx_XDECREF(__pyx_v_delay_reactants);
  __Pyx_XDECREF(__pyx_v_delay_products);
  __Pyx_XDECREF(__pyx_v_delay_param_dict);
  __Pyx_XDECREF(__pyx_v_param);
  __Pyx_XDECREF(__pyx_v_param_val);
  __Pyx_XDECREF(__pyx_v_rule);
  __Pyx_XDECREF(__pyx_v_rule_type);
  __Pyx_XDECREF(__pyx_v_rule_attributes);
  __Pyx_XDECREF(__pyx_v_rule_frequency);
  __Pyx_XDECREF(__pyx_v_specie);
  __Pyx_XDECREF(__pyx_v_species);
  __Pyx_XDECREF(__pyx_v_parameters);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1531
 *             self._initialize()
 * 
 *     cdef void _initialize(self):             # <<<<<<<<<<<<<<
 *         #creates C vector objects
 *         self._create_vectors()
 */

static void __pyx_f_9bioscrape_5types_5Model__initialize(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_initialize", 0);

  /* "bioscrape/types.pyx":1533
 *     cdef void _initialize(self):
 *         #creates C vector objects
 *         self._create_vectors()             # <<<<<<<<<<<<<<
 * 
 *         #Create Stochiometric Matrices
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_create_vectors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1536
 * 
 *         #Create Stochiometric Matrices
 *         self._create_stochiometric_matrices()             # <<<<<<<<<<<<<<
 * 
 *         #Check for unspecified parameters
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_create_stochiometric_matrices); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1539
 * 
 *         #Check for unspecified parameters
 *         self.check_parameters()             # <<<<<<<<<<<<<<
 * 
 *         #Check for species without intial conditions.
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1543
 *         #Check for species without intial conditions.
 *         #Set these initial conditions to 0 and issue a warning.
 *         self.check_species()             # <<<<<<<<<<<<<<
 * 
 *         self.initialized = True
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_species); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1545
 *         self.check_species()
 * 
 *         self.initialized = True             # <<<<<<<<<<<<<<
 * 
 *     def py_initialize(self):
 */
  __pyx_v_self->initialized = 1;

  /* "bioscrape/types.pyx":1531
 *             self._initialize()
 * 
 *     cdef void _initialize(self):             # <<<<<<<<<<<<<<
 *         #creates C vector objects
 *         self._create_vectors()
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("bioscrape.types.Model._initialize", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pyx":1547
 *         self.initialized = True
 * 
 *     def py_initialize(self):             # <<<<<<<<<<<<<<
 *         self._initialize()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_3py_initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_3py_initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_2py_initialize(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_2py_initialize(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_initialize", 0);

  /* "bioscrape/types.pyx":1548
 * 
 *     def py_initialize(self):
 *         self._initialize()             # <<<<<<<<<<<<<<
 * 
 *     def _create_vectors(self):
 */
  ((struct __pyx_vtabstruct_9bioscrape_5types_Model *)__pyx_v_self->__pyx_vtab)->_initialize(__pyx_v_self);

  /* "bioscrape/types.pyx":1547
 *         self.initialized = True
 * 
 *     def py_initialize(self):             # <<<<<<<<<<<<<<
 *         self._initialize()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1550
 *         self._initialize()
 * 
 *     def _create_vectors(self):             # <<<<<<<<<<<<<<
 *         #Create c-vectors of different objects
 *         self.propensities = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_5_create_vectors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_5_create_vectors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_create_vectors (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_4_create_vectors(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_4_create_vectors(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_v_rxn = NULL;
  PyObject *__pyx_v_prop_object = NULL;
  PyObject *__pyx_v_delay_object = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_update_array = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_delay_update_array = NULL;
  PyObject *__pyx_v_rule_object = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("_create_vectors", 0);

  /* "bioscrape/types.pyx":1552
 *     def _create_vectors(self):
 *         #Create c-vectors of different objects
 *         self.propensities = []             # <<<<<<<<<<<<<<
 *         self.c_propensities.clear()
 *         self.delays = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->propensities);
  __Pyx_DECREF(__pyx_v_self->propensities);
  __pyx_v_self->propensities = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1553
 *         #Create c-vectors of different objects
 *         self.propensities = []
 *         self.c_propensities.clear()             # <<<<<<<<<<<<<<
 *         self.delays = []
 *         self.c_delays.clear()
 */
  __pyx_v_self->c_propensities.clear();

  /* "bioscrape/types.pyx":1554
 *         self.propensities = []
 *         self.c_propensities.clear()
 *         self.delays = []             # <<<<<<<<<<<<<<
 *         self.c_delays.clear()
 *         for rxn in self.reaction_list:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->delays);
  __Pyx_DECREF(__pyx_v_self->delays);
  __pyx_v_self->delays = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1555
 *         self.c_propensities.clear()
 *         self.delays = []
 *         self.c_delays.clear()             # <<<<<<<<<<<<<<
 *         for rxn in self.reaction_list:
 *             prop_object, delay_object, update_array, delay_update_array = rxn
 */
  __pyx_v_self->c_delays.clear();

  /* "bioscrape/types.pyx":1556
 *         self.delays = []
 *         self.c_delays.clear()
 *         for rxn in self.reaction_list:             # <<<<<<<<<<<<<<
 *             prop_object, delay_object, update_array, delay_update_array = rxn
 *             self.propensities.append(prop_object)
 */
  if (unlikely(__pyx_v_self->reaction_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1556, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->reaction_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1556, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_rxn, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":1557
 *         self.c_delays.clear()
 *         for rxn in self.reaction_list:
 *             prop_object, delay_object, update_array, delay_update_array = rxn             # <<<<<<<<<<<<<<
 *             self.propensities.append(prop_object)
 *             self.c_propensities.push_back(<void*> prop_object)
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_rxn))) || (PyList_CheckExact(__pyx_v_rxn))) {
      PyObject* sequence = __pyx_v_rxn;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1557, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1557, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
      __pyx_t_7 = PyObject_GetIter(__pyx_v_rxn); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_8(__pyx_t_7); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 4) < 0) __PYX_ERR(0, 1557, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1557, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_prop_object, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_delay_object, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_update_array, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_delay_update_array, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":1558
 *         for rxn in self.reaction_list:
 *             prop_object, delay_object, update_array, delay_update_array = rxn
 *             self.propensities.append(prop_object)             # <<<<<<<<<<<<<<
 *             self.c_propensities.push_back(<void*> prop_object)
 *             self.delays.append(delay_object)
 */
    if (unlikely(__pyx_v_self->propensities == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 1558, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_self->propensities, __pyx_v_prop_object); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 1558, __pyx_L1_error)

    /* "bioscrape/types.pyx":1559
 *             prop_object, delay_object, update_array, delay_update_array = rxn
 *             self.propensities.append(prop_object)
 *             self.c_propensities.push_back(<void*> prop_object)             # <<<<<<<<<<<<<<
 *             self.delays.append(delay_object)
 *             self.c_delays.push_back(<void*> delay_object)
 */
    __pyx_v_self->c_propensities.push_back(((void *)__pyx_v_prop_object));

    /* "bioscrape/types.pyx":1560
 *             self.propensities.append(prop_object)
 *             self.c_propensities.push_back(<void*> prop_object)
 *             self.delays.append(delay_object)             # <<<<<<<<<<<<<<
 *             self.c_delays.push_back(<void*> delay_object)
 * 
 */
    if (unlikely(__pyx_v_self->delays == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 1560, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_self->delays, __pyx_v_delay_object); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 1560, __pyx_L1_error)

    /* "bioscrape/types.pyx":1561
 *             self.c_propensities.push_back(<void*> prop_object)
 *             self.delays.append(delay_object)
 *             self.c_delays.push_back(<void*> delay_object)             # <<<<<<<<<<<<<<
 * 
 *         self.c_repeat_rules.clear()
 */
    __pyx_v_self->c_delays.push_back(((void *)__pyx_v_delay_object));

    /* "bioscrape/types.pyx":1556
 *         self.delays = []
 *         self.c_delays.clear()
 *         for rxn in self.reaction_list:             # <<<<<<<<<<<<<<
 *             prop_object, delay_object, update_array, delay_update_array = rxn
 *             self.propensities.append(prop_object)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1563
 *             self.c_delays.push_back(<void*> delay_object)
 * 
 *         self.c_repeat_rules.clear()             # <<<<<<<<<<<<<<
 *         for rule_object in self.repeat_rules:
 *             self.c_repeat_rules.push_back(<void*> rule_object)
 */
  __pyx_v_self->c_repeat_rules.clear();

  /* "bioscrape/types.pyx":1564
 * 
 *         self.c_repeat_rules.clear()
 *         for rule_object in self.repeat_rules:             # <<<<<<<<<<<<<<
 *             self.c_repeat_rules.push_back(<void*> rule_object)
 * 
 */
  if (unlikely(__pyx_v_self->repeat_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1564, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->repeat_rules; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1564, __pyx_L1_error)
    #else
    __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_rule_object, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":1565
 *         self.c_repeat_rules.clear()
 *         for rule_object in self.repeat_rules:
 *             self.c_repeat_rules.push_back(<void*> rule_object)             # <<<<<<<<<<<<<<
 * 
 *     def py_initialize(self):
 */
    __pyx_v_self->c_repeat_rules.push_back(((void *)__pyx_v_rule_object));

    /* "bioscrape/types.pyx":1564
 * 
 *         self.c_repeat_rules.clear()
 *         for rule_object in self.repeat_rules:             # <<<<<<<<<<<<<<
 *             self.c_repeat_rules.push_back(<void*> rule_object)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1550
 *         self._initialize()
 * 
 *     def _create_vectors(self):             # <<<<<<<<<<<<<<
 *         #Create c-vectors of different objects
 *         self.propensities = []
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.Model._create_vectors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rxn);
  __Pyx_XDECREF(__pyx_v_prop_object);
  __Pyx_XDECREF(__pyx_v_delay_object);
  __Pyx_XDECREF(__pyx_v_update_array);
  __Pyx_XDECREF(__pyx_v_delay_update_array);
  __Pyx_XDECREF(__pyx_v_rule_object);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1567
 *             self.c_repeat_rules.push_back(<void*> rule_object)
 * 
 *     def py_initialize(self):             # <<<<<<<<<<<<<<
 *         self._initialize()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_7py_initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_7py_initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_6py_initialize(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_6py_initialize(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_initialize", 0);

  /* "bioscrape/types.pyx":1568
 * 
 *     def py_initialize(self):
 *         self._initialize()             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, Model other):
 */
  ((struct __pyx_vtabstruct_9bioscrape_5types_Model *)__pyx_v_self->__pyx_vtab)->_initialize(__pyx_v_self);

  /* "bioscrape/types.pyx":1567
 *             self.c_repeat_rules.push_back(<void*> rule_object)
 * 
 *     def py_initialize(self):             # <<<<<<<<<<<<<<
 *         self._initialize()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1570
 *         self._initialize()
 * 
 *     def __eq__(self, Model other):             # <<<<<<<<<<<<<<
 *         if other is None or not isinstance(other, Model):
 *             return False
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_9__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_9__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9bioscrape_5types_Model, 1, "other", 0))) __PYX_ERR(0, 1570, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_8__eq__(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_8__eq__(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "bioscrape/types.pyx":1571
 * 
 *     def __eq__(self, Model other):
 *         if other is None or not isinstance(other, Model):             # <<<<<<<<<<<<<<
 *             return False
 *         # Casting as a set means order doesn't matter.
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_other) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(((PyObject *)__pyx_v_other), __pyx_ptype_9bioscrape_5types_Model); 
  __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1572
 *     def __eq__(self, Model other):
 *         if other is None or not isinstance(other, Model):
 *             return False             # <<<<<<<<<<<<<<
 *         # Casting as a set means order doesn't matter.
 *         # Sets can only hold an element once, so this could give weird results
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":1571
 * 
 *     def __eq__(self, Model other):
 *         if other is None or not isinstance(other, Model):             # <<<<<<<<<<<<<<
 *             return False
 *         # Casting as a set means order doesn't matter.
 */
  }

  /* "bioscrape/types.pyx":1579
 *         # If reaction/rule definitions are the same, that implies that many of
 *         # the other attributes of the Model must be the same.
 *         if sorted(self.reaction_definitions) != sorted(other.reaction_definitions):             # <<<<<<<<<<<<<<
 *             return False
 *         if sorted(self.rule_definitions) != sorted(other.rule_definitions):
 */
  __pyx_t_5 = __pyx_v_self->reaction_definitions;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_6 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_7 = PyList_Sort(__pyx_t_4); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1579, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_other->reaction_definitions;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_8 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_7 = PyList_Sort(__pyx_t_6); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1579, __pyx_L1_error)
  __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1580
 *         # the other attributes of the Model must be the same.
 *         if sorted(self.reaction_definitions) != sorted(other.reaction_definitions):
 *             return False             # <<<<<<<<<<<<<<
 *         if sorted(self.rule_definitions) != sorted(other.rule_definitions):
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":1579
 *         # If reaction/rule definitions are the same, that implies that many of
 *         # the other attributes of the Model must be the same.
 *         if sorted(self.reaction_definitions) != sorted(other.reaction_definitions):             # <<<<<<<<<<<<<<
 *             return False
 *         if sorted(self.rule_definitions) != sorted(other.rule_definitions):
 */
  }

  /* "bioscrape/types.pyx":1581
 *         if sorted(self.reaction_definitions) != sorted(other.reaction_definitions):
 *             return False
 *         if sorted(self.rule_definitions) != sorted(other.rule_definitions):             # <<<<<<<<<<<<<<
 *             return False
 *         if self.species2index != other.species2index:
 */
  __pyx_t_6 = __pyx_v_self->rule_definitions;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_4 = PySequence_List(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_7 = PyList_Sort(__pyx_t_8); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1581, __pyx_L1_error)
  __pyx_t_6 = __pyx_v_other->rule_definitions;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_5 = PySequence_List(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_4 = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_7 = PyList_Sort(__pyx_t_4); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1581, __pyx_L1_error)
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_8, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1582
 *             return False
 *         if sorted(self.rule_definitions) != sorted(other.rule_definitions):
 *             return False             # <<<<<<<<<<<<<<
 *         if self.species2index != other.species2index:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":1581
 *         if sorted(self.reaction_definitions) != sorted(other.reaction_definitions):
 *             return False
 *         if sorted(self.rule_definitions) != sorted(other.rule_definitions):             # <<<<<<<<<<<<<<
 *             return False
 *         if self.species2index != other.species2index:
 */
  }

  /* "bioscrape/types.pyx":1583
 *         if sorted(self.rule_definitions) != sorted(other.rule_definitions):
 *             return False
 *         if self.species2index != other.species2index:             # <<<<<<<<<<<<<<
 *             return False
 *         if not np.array_equal(self.species_values, other.species_values):
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_self->species2index, __pyx_v_other->species2index, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1583, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1584
 *             return False
 *         if self.species2index != other.species2index:
 *             return False             # <<<<<<<<<<<<<<
 *         if not np.array_equal(self.species_values, other.species_values):
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":1583
 *         if sorted(self.rule_definitions) != sorted(other.rule_definitions):
 *             return False
 *         if self.species2index != other.species2index:             # <<<<<<<<<<<<<<
 *             return False
 *         if not np.array_equal(self.species_values, other.species_values):
 */
  }

  /* "bioscrape/types.pyx":1585
 *         if self.species2index != other.species2index:
 *             return False
 *         if not np.array_equal(self.species_values, other.species_values):             # <<<<<<<<<<<<<<
 *             return False
 *         return True
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array_equal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->species_values), ((PyObject *)__pyx_v_other->species_values)};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1585, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_self->species_values), ((PyObject *)__pyx_v_other->species_values)};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1585, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self->species_values));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->species_values));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_9, ((PyObject *)__pyx_v_self->species_values));
    __Pyx_INCREF(((PyObject *)__pyx_v_other->species_values));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_other->species_values));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_9, ((PyObject *)__pyx_v_other->species_values));
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1585, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "bioscrape/types.pyx":1586
 *             return False
 *         if not np.array_equal(self.species_values, other.species_values):
 *             return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":1585
 *         if self.species2index != other.species2index:
 *             return False
 *         if not np.array_equal(self.species_values, other.species_values):             # <<<<<<<<<<<<<<
 *             return False
 *         return True
 */
  }

  /* "bioscrape/types.pyx":1587
 *         if not np.array_equal(self.species_values, other.species_values):
 *             return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def __neq__(self, Model other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1570
 *         self._initialize()
 * 
 *     def __eq__(self, Model other):             # <<<<<<<<<<<<<<
 *         if other is None or not isinstance(other, Model):
 *             return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.Model.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1589
 *         return True
 * 
 *     def __neq__(self, Model other):             # <<<<<<<<<<<<<<
 *         return not self.__eq__(other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_11__neq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_11__neq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neq__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_9bioscrape_5types_Model, 1, "other", 0))) __PYX_ERR(0, 1589, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_10__neq__(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_10__neq__(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__neq__", 0);

  /* "bioscrape/types.pyx":1590
 * 
 *     def __neq__(self, Model other):
 *         return not self.__eq__(other)             # <<<<<<<<<<<<<<
 * 
 *     def _add_species(self, species):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_eq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_other)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_other));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1589
 *         return True
 * 
 *     def __neq__(self, Model other):             # <<<<<<<<<<<<<<
 *         return not self.__eq__(other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.Model.__neq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1592
 *         return not self.__eq__(other)
 * 
 *     def _add_species(self, species):             # <<<<<<<<<<<<<<
 *         """
 *         Helper function for putting together the species vector (converting species names to indices in vector)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_13_add_species(PyObject *__pyx_v_self, PyObject *__pyx_v_species); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_12_add_species[] = "\n        Helper function for putting together the species vector (converting species names to indices in vector)\n\n        If the species has already been added, then do nothing. otherwise give it a new index, and increase\n        the next_species_index by 1\n\n        :param species: (str) the species name\n        :return: None\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_13_add_species(PyObject *__pyx_v_self, PyObject *__pyx_v_species) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_species (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_12_add_species(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((PyObject *)__pyx_v_species));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_12_add_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_species) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("_add_species", 0);

  /* "bioscrape/types.pyx":1602
 *         :return: None
 *         """
 *         self.initialized = False             # <<<<<<<<<<<<<<
 *         if species not in self.species2index and species is not None and species != '':
 *             self.species2index[species] = self._next_species_index
 */
  __pyx_v_self->initialized = 0;

  /* "bioscrape/types.pyx":1603
 *         """
 *         self.initialized = False
 *         if species not in self.species2index and species is not None and species != '':             # <<<<<<<<<<<<<<
 *             self.species2index[species] = self._next_species_index
 *             self._next_species_index += 1
 */
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1603, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_species, __pyx_v_self->species2index, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_species != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_species, __pyx_kp_s__3, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1604
 *         self.initialized = False
 *         if species not in self.species2index and species is not None and species != '':
 *             self.species2index[species] = self._next_species_index             # <<<<<<<<<<<<<<
 *             self._next_species_index += 1
 *             self.species_values = np.concatenate((self.species_values, np.array([-1])))
 */
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_next_species_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_v_self->species2index == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1604, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->species2index, __pyx_v_species, __pyx_t_4) < 0)) __PYX_ERR(0, 1604, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1605
 *         if species not in self.species2index and species is not None and species != '':
 *             self.species2index[species] = self._next_species_index
 *             self._next_species_index += 1             # <<<<<<<<<<<<<<
 *             self.species_values = np.concatenate((self.species_values, np.array([-1])))
 * 
 */
    __pyx_v_self->_next_species_index = (__pyx_v_self->_next_species_index + 1);

    /* "bioscrape/types.pyx":1606
 *             self.species2index[species] = self._next_species_index
 *             self._next_species_index += 1
 *             self.species_values = np.concatenate((self.species_values, np.array([-1])))             # <<<<<<<<<<<<<<
 * 
 *     def _set_species_value(self, specie, value):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_int_neg_1);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->species_values));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->species_values));
    PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_self->species_values));
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->species_values);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->species_values));
    __pyx_v_self->species_values = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1603
 *         """
 *         self.initialized = False
 *         if species not in self.species2index and species is not None and species != '':             # <<<<<<<<<<<<<<
 *             self.species2index[species] = self._next_species_index
 *             self._next_species_index += 1
 */
  }

  /* "bioscrape/types.pyx":1592
 *         return not self.__eq__(other)
 * 
 *     def _add_species(self, species):             # <<<<<<<<<<<<<<
 *         """
 *         Helper function for putting together the species vector (converting species names to indices in vector)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.Model._add_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1608
 *             self.species_values = np.concatenate((self.species_values, np.array([-1])))
 * 
 *     def _set_species_value(self, specie, value):             # <<<<<<<<<<<<<<
 *         if specie not in self.species2index:
 *             self._add_species(specie)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_15_set_species_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_15_set_species_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_specie = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_species_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_specie,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_specie)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_set_species_value", 1, 2, 2, 1); __PYX_ERR(0, 1608, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_set_species_value") < 0)) __PYX_ERR(0, 1608, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_specie = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_set_species_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1608, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Model._set_species_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_14_set_species_value(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_specie, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_14_set_species_value(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_specie, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_set_species_value", 0);

  /* "bioscrape/types.pyx":1609
 * 
 *     def _set_species_value(self, specie, value):
 *         if specie not in self.species2index:             # <<<<<<<<<<<<<<
 *             self._add_species(specie)
 *         self.species_values[self.species2index[specie]] = value
 */
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1609, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_specie, __pyx_v_self->species2index, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "bioscrape/types.pyx":1610
 *     def _set_species_value(self, specie, value):
 *         if specie not in self.species2index:
 *             self._add_species(specie)             # <<<<<<<<<<<<<<
 *         self.species_values[self.species2index[specie]] = value
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_specie) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_specie);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":1609
 * 
 *     def _set_species_value(self, specie, value):
 *         if specie not in self.species2index:             # <<<<<<<<<<<<<<
 *             self._add_species(specie)
 *         self.species_values[self.species2index[specie]] = value
 */
  }

  /* "bioscrape/types.pyx":1611
 *         if specie not in self.species2index:
 *             self._add_species(specie)
 *         self.species_values[self.species2index[specie]] = value             # <<<<<<<<<<<<<<
 * 
 *     #Helper function to add a reaction to the model
 */
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1611, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->species2index, __pyx_v_specie); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->species_values), __pyx_t_3, __pyx_v_value) < 0)) __PYX_ERR(0, 1611, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":1608
 *             self.species_values = np.concatenate((self.species_values, np.array([-1])))
 * 
 *     def _set_species_value(self, specie, value):             # <<<<<<<<<<<<<<
 *         if specie not in self.species2index:
 *             self._add_species(specie)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Model._set_species_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1622
 *     #   delay_param_dict: a dictionary containing the parameters of the delay distribution
 * 
 *     def _add_reaction(self, reaction_update_dict, propensity_object, propensity_param_dict,             # <<<<<<<<<<<<<<
 *         delay_reaction_update_dict = {}, delay_object = None, delay_param_dict = {}):
 *         self.initialized = False
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_17_add_reaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_17_add_reaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_reaction_update_dict = 0;
  PyObject *__pyx_v_propensity_object = 0;
  PyObject *__pyx_v_propensity_param_dict = 0;
  PyObject *__pyx_v_delay_reaction_update_dict = 0;
  PyObject *__pyx_v_delay_object = 0;
  PyObject *__pyx_v_delay_param_dict = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_reaction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_reaction_update_dict,&__pyx_n_s_propensity_object,&__pyx_n_s_propensity_param_dict,&__pyx_n_s_delay_reaction_update_dict,&__pyx_n_s_delay_object,&__pyx_n_s_delay_param_dict,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = __pyx_k__28;

    /* "bioscrape/types.pyx":1623
 * 
 *     def _add_reaction(self, reaction_update_dict, propensity_object, propensity_param_dict,
 *         delay_reaction_update_dict = {}, delay_object = None, delay_param_dict = {}):             # <<<<<<<<<<<<<<
 *         self.initialized = False
 * 
 */
    values[4] = ((PyObject *)Py_None);
    values[5] = __pyx_k__29;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reaction_update_dict)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_propensity_object)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_reaction", 0, 3, 6, 1); __PYX_ERR(0, 1622, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_propensity_param_dict)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_reaction", 0, 3, 6, 2); __PYX_ERR(0, 1622, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delay_reaction_update_dict);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delay_object);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delay_param_dict);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_add_reaction") < 0)) __PYX_ERR(0, 1622, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_reaction_update_dict = values[0];
    __pyx_v_propensity_object = values[1];
    __pyx_v_propensity_param_dict = values[2];
    __pyx_v_delay_reaction_update_dict = values[3];
    __pyx_v_delay_object = values[4];
    __pyx_v_delay_param_dict = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add_reaction", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1622, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Model._add_reaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_16_add_reaction(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_reaction_update_dict, __pyx_v_propensity_object, __pyx_v_propensity_param_dict, __pyx_v_delay_reaction_update_dict, __pyx_v_delay_object, __pyx_v_delay_param_dict);

  /* "bioscrape/types.pyx":1622
 *     #   delay_param_dict: a dictionary containing the parameters of the delay distribution
 * 
 *     def _add_reaction(self, reaction_update_dict, propensity_object, propensity_param_dict,             # <<<<<<<<<<<<<<
 *         delay_reaction_update_dict = {}, delay_object = None, delay_param_dict = {}):
 *         self.initialized = False
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_16_add_reaction(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_reaction_update_dict, PyObject *__pyx_v_propensity_object, PyObject *__pyx_v_propensity_param_dict, PyObject *__pyx_v_delay_reaction_update_dict, PyObject *__pyx_v_delay_object, PyObject *__pyx_v_delay_param_dict) {
  PyObject *__pyx_v_species_names = NULL;
  PyObject *__pyx_v_param_names = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_species_name = NULL;
  PyObject *__pyx_v_param_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("_add_reaction", 0);
  __Pyx_INCREF(__pyx_v_delay_object);

  /* "bioscrape/types.pyx":1624
 *     def _add_reaction(self, reaction_update_dict, propensity_object, propensity_param_dict,
 *         delay_reaction_update_dict = {}, delay_object = None, delay_param_dict = {}):
 *         self.initialized = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->initialized = 0;

  /* "bioscrape/types.pyx":1627
 * 
 * 
 *         species_names, param_names = propensity_object.get_species_and_parameters(propensity_param_dict, species2index = self.species2index, params2index = self.params2index)             # <<<<<<<<<<<<<<
 * 
 *         for species_name in species_names:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_propensity_object, __pyx_n_s_get_species_and_parameters); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_propensity_param_dict);
  __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_propensity_param_dict);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_species2index, __pyx_v_self->species2index) < 0) __PYX_ERR(0, 1627, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_params2index, __pyx_v_self->params2index) < 0) __PYX_ERR(0, 1627, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1627, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_5(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_1), 2) < 0) __PYX_ERR(0, 1627, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1627, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_species_names = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_param_names = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":1629
 *         species_names, param_names = propensity_object.get_species_and_parameters(propensity_param_dict, species2index = self.species2index, params2index = self.params2index)
 * 
 *         for species_name in species_names:             # <<<<<<<<<<<<<<
 *             #Now no species should be added here
 *             pass
 */
  if (likely(PyList_CheckExact(__pyx_v_species_names)) || PyTuple_CheckExact(__pyx_v_species_names)) {
    __pyx_t_4 = __pyx_v_species_names; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_species_names); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1629, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1629, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1629, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1629, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_species_name, __pyx_t_2);
    __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":1632
 *             #Now no species should be added here
 *             pass
 *         for param_name in param_names:             # <<<<<<<<<<<<<<
 *             self._add_param(param_name)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_param_names)) || PyTuple_CheckExact(__pyx_v_param_names)) {
    __pyx_t_4 = __pyx_v_param_names; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_param_names); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1632, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1632, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1632, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1632, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1632, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1632, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_param_name, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1633
 *             pass
 *         for param_name in param_names:
 *             self._add_param(param_name)             # <<<<<<<<<<<<<<
 * 
 *         self.reaction_updates.append(reaction_update_dict)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_param); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_v_param_name) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_param_name);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1632
 *             #Now no species should be added here
 *             pass
 *         for param_name in param_names:             # <<<<<<<<<<<<<<
 *             self._add_param(param_name)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":1635
 *             self._add_param(param_name)
 * 
 *         self.reaction_updates.append(reaction_update_dict)             # <<<<<<<<<<<<<<
 *         propensity_object.initialize(propensity_param_dict, self.species2index, self.params2index)
 * 
 */
  if (unlikely(__pyx_v_self->reaction_updates == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 1635, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_self->reaction_updates, __pyx_v_reaction_update_dict); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1635, __pyx_L1_error)

  /* "bioscrape/types.pyx":1636
 * 
 *         self.reaction_updates.append(reaction_update_dict)
 *         propensity_object.initialize(propensity_param_dict, self.species2index, self.params2index)             # <<<<<<<<<<<<<<
 * 
 *         if delay_object == None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_propensity_object, __pyx_n_s_initialize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_propensity_param_dict, __pyx_v_self->species2index, __pyx_v_self->params2index};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1636, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_propensity_param_dict, __pyx_v_self->species2index, __pyx_v_self->params2index};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1636, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_propensity_param_dict);
    __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_9, __pyx_v_propensity_param_dict);
    __Pyx_INCREF(__pyx_v_self->species2index);
    __Pyx_GIVEREF(__pyx_v_self->species2index);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_9, __pyx_v_self->species2index);
    __Pyx_INCREF(__pyx_v_self->params2index);
    __Pyx_GIVEREF(__pyx_v_self->params2index);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_9, __pyx_v_self->params2index);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":1638
 *         propensity_object.initialize(propensity_param_dict, self.species2index, self.params2index)
 * 
 *         if delay_object == None:             # <<<<<<<<<<<<<<
 *            delay_object = NoDelay()
 *         elif not type(delay_object) == type(NoDelay()):
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_delay_object, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1638, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_10) {

    /* "bioscrape/types.pyx":1639
 * 
 *         if delay_object == None:
 *            delay_object = NoDelay()             # <<<<<<<<<<<<<<
 *         elif not type(delay_object) == type(NoDelay()):
 *             self.has_delay = True
 */
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_NoDelay)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_delay_object, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1638
 *         propensity_object.initialize(propensity_param_dict, self.species2index, self.params2index)
 * 
 *         if delay_object == None:             # <<<<<<<<<<<<<<
 *            delay_object = NoDelay()
 *         elif not type(delay_object) == type(NoDelay()):
 */
    goto __pyx_L9;
  }

  /* "bioscrape/types.pyx":1640
 *         if delay_object == None:
 *            delay_object = NoDelay()
 *         elif not type(delay_object) == type(NoDelay()):             # <<<<<<<<<<<<<<
 *             self.has_delay = True
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_NoDelay)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_delay_object)), ((PyObject *)Py_TYPE(__pyx_t_4)), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1640, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1640, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_11 = ((!__pyx_t_10) != 0);
  if (__pyx_t_11) {

    /* "bioscrape/types.pyx":1641
 *            delay_object = NoDelay()
 *         elif not type(delay_object) == type(NoDelay()):
 *             self.has_delay = True             # <<<<<<<<<<<<<<
 * 
 *         species_names, param_names = delay_object.get_species_and_parameters(delay_param_dict, species2index = self.species2index, params2index = self.params2index)
 */
    __pyx_v_self->has_delay = 1;

    /* "bioscrape/types.pyx":1640
 *         if delay_object == None:
 *            delay_object = NoDelay()
 *         elif not type(delay_object) == type(NoDelay()):             # <<<<<<<<<<<<<<
 *             self.has_delay = True
 * 
 */
  }
  __pyx_L9:;

  /* "bioscrape/types.pyx":1643
 *             self.has_delay = True
 * 
 *         species_names, param_names = delay_object.get_species_and_parameters(delay_param_dict, species2index = self.species2index, params2index = self.params2index)             # <<<<<<<<<<<<<<
 * 
 *         for species_name in species_names:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_delay_object, __pyx_n_s_get_species_and_parameters); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_delay_param_dict);
  __Pyx_GIVEREF(__pyx_v_delay_param_dict);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_delay_param_dict);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_species2index, __pyx_v_self->species2index) < 0) __PYX_ERR(0, 1643, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_params2index, __pyx_v_self->params2index) < 0) __PYX_ERR(0, 1643, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1643, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L10_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_4 = __pyx_t_5(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L10_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1643, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L11_unpacking_done;
    __pyx_L10_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1643, __pyx_L1_error)
    __pyx_L11_unpacking_done:;
  }
  __Pyx_DECREF_SET(__pyx_v_species_names, __pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_param_names, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":1645
 *         species_names, param_names = delay_object.get_species_and_parameters(delay_param_dict, species2index = self.species2index, params2index = self.params2index)
 * 
 *         for species_name in species_names:             # <<<<<<<<<<<<<<
 *             #Now anything not declared as a Species will be interpreted as a parameter
 *             pass
 */
  if (likely(PyList_CheckExact(__pyx_v_species_names)) || PyTuple_CheckExact(__pyx_v_species_names)) {
    __pyx_t_3 = __pyx_v_species_names; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_species_names); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1645, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1645, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1645, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1645, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1645, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1645, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_species_name, __pyx_t_4);
    __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":1648
 *             #Now anything not declared as a Species will be interpreted as a parameter
 *             pass
 *         for param_name in param_names:             # <<<<<<<<<<<<<<
 *             self._add_param(param_name)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_param_names)) || PyTuple_CheckExact(__pyx_v_param_names)) {
    __pyx_t_3 = __pyx_v_param_names; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_param_names); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1648, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1648, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1648, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1648, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1648, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1648, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_param_name, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1649
 *             pass
 *         for param_name in param_names:
 *             self._add_param(param_name)             # <<<<<<<<<<<<<<
 * 
 *         #Moved to Model._initialize
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_param); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_param_name) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_param_name);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1648
 *             #Now anything not declared as a Species will be interpreted as a parameter
 *             pass
 *         for param_name in param_names:             # <<<<<<<<<<<<<<
 *             self._add_param(param_name)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":1652
 * 
 *         #Moved to Model._initialize
 *         self.delay_reaction_updates.append(delay_reaction_update_dict)             # <<<<<<<<<<<<<<
 *         delay_object.initialize(delay_param_dict, self.species2index, self.params2index)
 *         self.reaction_list.append((propensity_object, delay_object, reaction_update_dict, delay_reaction_update_dict))
 */
  if (unlikely(__pyx_v_self->delay_reaction_updates == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 1652, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_self->delay_reaction_updates, __pyx_v_delay_reaction_update_dict); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1652, __pyx_L1_error)

  /* "bioscrape/types.pyx":1653
 *         #Moved to Model._initialize
 *         self.delay_reaction_updates.append(delay_reaction_update_dict)
 *         delay_object.initialize(delay_param_dict, self.species2index, self.params2index)             # <<<<<<<<<<<<<<
 *         self.reaction_list.append((propensity_object, delay_object, reaction_update_dict, delay_reaction_update_dict))
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_delay_object, __pyx_n_s_initialize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_delay_param_dict, __pyx_v_self->species2index, __pyx_v_self->params2index};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_delay_param_dict, __pyx_v_self->species2index, __pyx_v_self->params2index};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_delay_param_dict);
    __Pyx_GIVEREF(__pyx_v_delay_param_dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_9, __pyx_v_delay_param_dict);
    __Pyx_INCREF(__pyx_v_self->species2index);
    __Pyx_GIVEREF(__pyx_v_self->species2index);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_9, __pyx_v_self->species2index);
    __Pyx_INCREF(__pyx_v_self->params2index);
    __Pyx_GIVEREF(__pyx_v_self->params2index);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_9, __pyx_v_self->params2index);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":1654
 *         self.delay_reaction_updates.append(delay_reaction_update_dict)
 *         delay_object.initialize(delay_param_dict, self.species2index, self.params2index)
 *         self.reaction_list.append((propensity_object, delay_object, reaction_update_dict, delay_reaction_update_dict))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->reaction_list == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 1654, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_propensity_object);
  __Pyx_GIVEREF(__pyx_v_propensity_object);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_propensity_object);
  __Pyx_INCREF(__pyx_v_delay_object);
  __Pyx_GIVEREF(__pyx_v_delay_object);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_delay_object);
  __Pyx_INCREF(__pyx_v_reaction_update_dict);
  __Pyx_GIVEREF(__pyx_v_reaction_update_dict);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_reaction_update_dict);
  __Pyx_INCREF(__pyx_v_delay_reaction_update_dict);
  __Pyx_GIVEREF(__pyx_v_delay_reaction_update_dict);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_delay_reaction_update_dict);
  __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_self->reaction_list, __pyx_t_3); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1654, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":1622
 *     #   delay_param_dict: a dictionary containing the parameters of the delay distribution
 * 
 *     def _add_reaction(self, reaction_update_dict, propensity_object, propensity_param_dict,             # <<<<<<<<<<<<<<
 *         delay_reaction_update_dict = {}, delay_object = None, delay_param_dict = {}):
 *         self.initialized = False
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.Model._add_reaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_species_names);
  __Pyx_XDECREF(__pyx_v_param_names);
  __Pyx_XDECREF(__pyx_v_species_name);
  __Pyx_XDECREF(__pyx_v_param_name);
  __Pyx_XDECREF(__pyx_v_delay_object);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1657
 * 
 * 
 *     def create_propensity(self, propensity_type, propensity_param_dict, input_printout = False):             # <<<<<<<<<<<<<<
 *         if input_printout:
 *             print("Creating Propensity: prop_type="+str(propensity_type)+" params="+str(propensity_param_dict))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_19create_propensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_19create_propensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_propensity_type = 0;
  PyObject *__pyx_v_propensity_param_dict = 0;
  PyObject *__pyx_v_input_printout = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_propensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_propensity_type,&__pyx_n_s_propensity_param_dict,&__pyx_n_s_input_printout,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_propensity_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_propensity_param_dict)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_propensity", 0, 2, 3, 1); __PYX_ERR(0, 1657, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input_printout);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_propensity") < 0)) __PYX_ERR(0, 1657, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_propensity_type = values[0];
    __pyx_v_propensity_param_dict = values[1];
    __pyx_v_input_printout = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_propensity", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1657, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Model.create_propensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_18create_propensity(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_propensity_type, __pyx_v_propensity_param_dict, __pyx_v_input_printout);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_18create_propensity(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_propensity_type, PyObject *__pyx_v_propensity_param_dict, PyObject *__pyx_v_input_printout) {
  struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v_prop_object = NULL;
  PyObject *__pyx_v_species_string = NULL;
  PyObject *__pyx_v_species_names = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("create_propensity", 0);

  /* "bioscrape/types.pyx":1658
 * 
 *     def create_propensity(self, propensity_type, propensity_param_dict, input_printout = False):
 *         if input_printout:             # <<<<<<<<<<<<<<
 *             print("Creating Propensity: prop_type="+str(propensity_type)+" params="+str(propensity_param_dict))
 *         if 'type' in propensity_param_dict:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_input_printout); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1658, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1659
 *     def create_propensity(self, propensity_type, propensity_param_dict, input_printout = False):
 *         if input_printout:
 *             print("Creating Propensity: prop_type="+str(propensity_type)+" params="+str(propensity_param_dict))             # <<<<<<<<<<<<<<
 *         if 'type' in propensity_param_dict:
 *             propensity_param_dict.pop('type')
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_propensity_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1659, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Creating_Propensity_prop_type, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1659, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_params_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1659, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_propensity_param_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1659, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1659, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_4) < 0) __PYX_ERR(0, 1659, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1658
 * 
 *     def create_propensity(self, propensity_type, propensity_param_dict, input_printout = False):
 *         if input_printout:             # <<<<<<<<<<<<<<
 *             print("Creating Propensity: prop_type="+str(propensity_type)+" params="+str(propensity_param_dict))
 *         if 'type' in propensity_param_dict:
 */
  }

  /* "bioscrape/types.pyx":1660
 *         if input_printout:
 *             print("Creating Propensity: prop_type="+str(propensity_type)+" params="+str(propensity_param_dict))
 *         if 'type' in propensity_param_dict:             # <<<<<<<<<<<<<<
 *             propensity_param_dict.pop('type')
 *         #Create propensity object
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_type, __pyx_v_propensity_param_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1660, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1661
 *             print("Creating Propensity: prop_type="+str(propensity_type)+" params="+str(propensity_param_dict))
 *         if 'type' in propensity_param_dict:
 *             propensity_param_dict.pop('type')             # <<<<<<<<<<<<<<
 *         #Create propensity object
 *         if propensity_type == 'hillpositive':
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_propensity_param_dict, __pyx_n_s_pop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_n_s_type) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_s_type);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1660
 *         if input_printout:
 *             print("Creating Propensity: prop_type="+str(propensity_type)+" params="+str(propensity_param_dict))
 *         if 'type' in propensity_param_dict:             # <<<<<<<<<<<<<<
 *             propensity_param_dict.pop('type')
 *         #Create propensity object
 */
  }

  /* "bioscrape/types.pyx":1663
 *             propensity_param_dict.pop('type')
 *         #Create propensity object
 *         if propensity_type == 'hillpositive':             # <<<<<<<<<<<<<<
 *             #Check required propensity parameters and convert numeric parameters to dummy variables.
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_PositiveHillPropensity")
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_propensity_type, __pyx_n_s_hillpositive, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1663, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1665
 *         if propensity_type == 'hillpositive':
 *             #Check required propensity parameters and convert numeric parameters to dummy variables.
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_PositiveHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_PositiveHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_PositiveHillPropensity")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_PositiveHillPropensity};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1665, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_PositiveHillPropensity};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1665, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1665, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_k);
      __Pyx_GIVEREF(__pyx_n_s_k);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_k);
      __Pyx_INCREF(__pyx_n_s_DummyVar_PositiveHillPropensity);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_PositiveHillPropensity);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_n_s_DummyVar_PositiveHillPropensity);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1665, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1666
 *             #Check required propensity parameters and convert numeric parameters to dummy variables.
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_PositiveHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_PositiveHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_PositiveHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_PositiveHillPropensity")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_K, __pyx_n_s_DummyVar_PositiveHillPropensity};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1666, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_K, __pyx_n_s_DummyVar_PositiveHillPropensity};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1666, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_K);
      __Pyx_GIVEREF(__pyx_n_s_K);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_K);
      __Pyx_INCREF(__pyx_n_s_DummyVar_PositiveHillPropensity);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_PositiveHillPropensity);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_n_s_DummyVar_PositiveHillPropensity);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1667
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_PositiveHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_PositiveHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_PositiveHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_PositiveHillPropensity")
 *             prop_object = PositiveHillPropensity()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_s1, __pyx_n_s_DummyVar_PositiveHillPropensity};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1667, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_s1, __pyx_n_s_DummyVar_PositiveHillPropensity};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1667, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1667, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_s1);
      __Pyx_GIVEREF(__pyx_n_s_s1);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_s1);
      __Pyx_INCREF(__pyx_n_s_DummyVar_PositiveHillPropensity);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_PositiveHillPropensity);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_n_s_DummyVar_PositiveHillPropensity);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1667, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1668
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_PositiveHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_PositiveHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_PositiveHillPropensity")             # <<<<<<<<<<<<<<
 *             prop_object = PositiveHillPropensity()
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_n, __pyx_n_s_DummyVar_PositiveHillPropensity};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1668, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_n, __pyx_n_s_DummyVar_PositiveHillPropensity};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1668, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_n);
      __Pyx_GIVEREF(__pyx_n_s_n);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_n);
      __Pyx_INCREF(__pyx_n_s_DummyVar_PositiveHillPropensity);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_PositiveHillPropensity);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_n_s_DummyVar_PositiveHillPropensity);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1669
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_PositiveHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_PositiveHillPropensity")
 *             prop_object = PositiveHillPropensity()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_PositiveHillPropensity)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_prop_object = ((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1663
 *             propensity_param_dict.pop('type')
 *         #Create propensity object
 *         if propensity_type == 'hillpositive':             # <<<<<<<<<<<<<<
 *             #Check required propensity parameters and convert numeric parameters to dummy variables.
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_PositiveHillPropensity")
 */
    goto __pyx_L5;
  }

  /* "bioscrape/types.pyx":1672
 * 
 * 
 *         elif propensity_type == 'proportionalhillpositive':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_PositiveProportionalHillPropensity")
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_propensity_type, __pyx_n_s_proportionalhillpositive, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1672, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1673
 * 
 *         elif propensity_type == 'proportionalhillpositive':
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_PositiveProportionalHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_PositiveProportionalHillPropensity")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_PositiveProportionalHil};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1673, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_PositiveProportionalHil};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1673, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_k);
      __Pyx_GIVEREF(__pyx_n_s_k);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_k);
      __Pyx_INCREF(__pyx_n_s_DummyVar_PositiveProportionalHil);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_PositiveProportionalHil);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_n_s_DummyVar_PositiveProportionalHil);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1674
 *         elif propensity_type == 'proportionalhillpositive':
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_PositiveProportionalHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "d", "DummyVar_PositiveProportionalHillPropensity")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_K, __pyx_n_s_DummyVar_PositiveProportionalHil};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1674, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_K, __pyx_n_s_DummyVar_PositiveProportionalHil};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1674, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1674, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_K);
      __Pyx_GIVEREF(__pyx_n_s_K);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_K);
      __Pyx_INCREF(__pyx_n_s_DummyVar_PositiveProportionalHil);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_PositiveProportionalHil);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_n_s_DummyVar_PositiveProportionalHil);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1674, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1675
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_PositiveProportionalHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "d", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_PositiveProportionalHillPropensity")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_s1, __pyx_n_s_DummyVar_PositiveProportionalHil};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_s1, __pyx_n_s_DummyVar_PositiveProportionalHil};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_s1);
      __Pyx_GIVEREF(__pyx_n_s_s1);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_s1);
      __Pyx_INCREF(__pyx_n_s_DummyVar_PositiveProportionalHil);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_PositiveProportionalHil);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_n_s_DummyVar_PositiveProportionalHil);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1676
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "d", "DummyVar_PositiveProportionalHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_PositiveProportionalHillPropensity")
 *             prop_object = PositiveProportionalHillPropensity()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_d, __pyx_n_s_DummyVar_PositiveProportionalHil};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1676, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_d, __pyx_n_s_DummyVar_PositiveProportionalHil};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1676, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1676, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_d);
      __Pyx_GIVEREF(__pyx_n_s_d);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_d);
      __Pyx_INCREF(__pyx_n_s_DummyVar_PositiveProportionalHil);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_PositiveProportionalHil);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_n_s_DummyVar_PositiveProportionalHil);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1676, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1677
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "d", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_PositiveProportionalHillPropensity")             # <<<<<<<<<<<<<<
 *             prop_object = PositiveProportionalHillPropensity()
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_n, __pyx_n_s_DummyVar_PositiveProportionalHil};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1677, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_n, __pyx_n_s_DummyVar_PositiveProportionalHil};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1677, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1677, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_n);
      __Pyx_GIVEREF(__pyx_n_s_n);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_n);
      __Pyx_INCREF(__pyx_n_s_DummyVar_PositiveProportionalHil);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_PositiveProportionalHil);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_n_s_DummyVar_PositiveProportionalHil);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1677, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1678
 *             self._param_dict_check(propensity_param_dict, "d", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_PositiveProportionalHillPropensity")
 *             prop_object = PositiveProportionalHillPropensity()             # <<<<<<<<<<<<<<
 * 
 *         elif propensity_type == 'hillnegative':
 */
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_PositiveProportionalHillPropensity)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_prop_object = ((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1672
 * 
 * 
 *         elif propensity_type == 'proportionalhillpositive':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_PositiveProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_PositiveProportionalHillPropensity")
 */
    goto __pyx_L5;
  }

  /* "bioscrape/types.pyx":1680
 *             prop_object = PositiveProportionalHillPropensity()
 * 
 *         elif propensity_type == 'hillnegative':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_NegativeHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeHillPropensity")
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_propensity_type, __pyx_n_s_hillnegative, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1680, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1681
 * 
 *         elif propensity_type == 'hillnegative':
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_NegativeHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_NegativeHillPropensity")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_NegativeHillPropensity};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1681, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_NegativeHillPropensity};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1681, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1681, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_k);
      __Pyx_GIVEREF(__pyx_n_s_k);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_k);
      __Pyx_INCREF(__pyx_n_s_DummyVar_NegativeHillPropensity);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_NegativeHillPropensity);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_n_s_DummyVar_NegativeHillPropensity);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1681, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1682
 *         elif propensity_type == 'hillnegative':
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_NegativeHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_NegativeHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_NegativeHillPropensity")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_K, __pyx_n_s_DummyVar_NegativeHillPropensity};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1682, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_K, __pyx_n_s_DummyVar_NegativeHillPropensity};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1682, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1682, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_K);
      __Pyx_GIVEREF(__pyx_n_s_K);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_K);
      __Pyx_INCREF(__pyx_n_s_DummyVar_NegativeHillPropensity);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_NegativeHillPropensity);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_n_s_DummyVar_NegativeHillPropensity);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1682, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1683
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_NegativeHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_NegativeHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_NegativeHillPropensity")
 *             prop_object = NegativeHillPropensity()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_s1, __pyx_n_s_DummyVar_NegativeHillPropensity};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1683, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_s1, __pyx_n_s_DummyVar_NegativeHillPropensity};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1683, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1683, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_s1);
      __Pyx_GIVEREF(__pyx_n_s_s1);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_s1);
      __Pyx_INCREF(__pyx_n_s_DummyVar_NegativeHillPropensity);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_NegativeHillPropensity);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_n_s_DummyVar_NegativeHillPropensity);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1683, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1684
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_NegativeHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_NegativeHillPropensity")             # <<<<<<<<<<<<<<
 *             prop_object = NegativeHillPropensity()
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_n, __pyx_n_s_DummyVar_NegativeHillPropensity};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1684, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_n, __pyx_n_s_DummyVar_NegativeHillPropensity};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1684, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1684, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_n);
      __Pyx_GIVEREF(__pyx_n_s_n);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_n);
      __Pyx_INCREF(__pyx_n_s_DummyVar_NegativeHillPropensity);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_NegativeHillPropensity);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_n_s_DummyVar_NegativeHillPropensity);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1684, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1685
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_NegativeHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_NegativeHillPropensity")
 *             prop_object = NegativeHillPropensity()             # <<<<<<<<<<<<<<
 * 
 *         elif propensity_type == 'proportionalhillnegative':
 */
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_NegativeHillPropensity)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_prop_object = ((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1680
 *             prop_object = PositiveProportionalHillPropensity()
 * 
 *         elif propensity_type == 'hillnegative':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_NegativeHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeHillPropensity")
 */
    goto __pyx_L5;
  }

  /* "bioscrape/types.pyx":1687
 *             prop_object = NegativeHillPropensity()
 * 
 *         elif propensity_type == 'proportionalhillnegative':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeProportionalHillPropensity")
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_propensity_type, __pyx_n_s_proportionalhillnegative, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1687, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1688
 * 
 *         elif propensity_type == 'proportionalhillnegative':
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_NegativeProportionalHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_NegativeProportionalHillPropensity")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_NegativeProportionalHil};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_NegativeProportionalHil};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1688, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_k);
      __Pyx_GIVEREF(__pyx_n_s_k);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_k);
      __Pyx_INCREF(__pyx_n_s_DummyVar_NegativeProportionalHil);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_NegativeProportionalHil);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_n_s_DummyVar_NegativeProportionalHil);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1689
 *         elif propensity_type == 'proportionalhillnegative':
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeProportionalHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "d", "DummyVar_NegativeProportionalHillPropensity")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_K, __pyx_n_s_DummyVar_NegativeProportionalHil};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1689, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_K, __pyx_n_s_DummyVar_NegativeProportionalHil};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1689, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1689, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_K);
      __Pyx_GIVEREF(__pyx_n_s_K);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_K);
      __Pyx_INCREF(__pyx_n_s_DummyVar_NegativeProportionalHil);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_NegativeProportionalHil);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_n_s_DummyVar_NegativeProportionalHil);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1689, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1690
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_NegativeProportionalHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "d", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_NegativeProportionalHillPropensity")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_s1, __pyx_n_s_DummyVar_NegativeProportionalHil};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1690, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_s1, __pyx_n_s_DummyVar_NegativeProportionalHil};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1690, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_s1);
      __Pyx_GIVEREF(__pyx_n_s_s1);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_s1);
      __Pyx_INCREF(__pyx_n_s_DummyVar_NegativeProportionalHil);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_NegativeProportionalHil);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_n_s_DummyVar_NegativeProportionalHil);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1691
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "d", "DummyVar_NegativeProportionalHillPropensity")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_NegativeProportionalHillPropensity")
 *             prop_object = NegativeProportionalHillPropensity()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_d, __pyx_n_s_DummyVar_NegativeProportionalHil};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1691, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_d, __pyx_n_s_DummyVar_NegativeProportionalHil};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1691, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1691, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_d);
      __Pyx_GIVEREF(__pyx_n_s_d);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_d);
      __Pyx_INCREF(__pyx_n_s_DummyVar_NegativeProportionalHil);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_NegativeProportionalHil);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_n_s_DummyVar_NegativeProportionalHil);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1691, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1692
 *             self._param_dict_check(propensity_param_dict, "s1", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "d", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_NegativeProportionalHillPropensity")             # <<<<<<<<<<<<<<
 *             prop_object = NegativeProportionalHillPropensity()
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_n, __pyx_n_s_DummyVar_NegativeProportionalHil};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1692, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_propensity_param_dict, __pyx_n_s_n, __pyx_n_s_DummyVar_NegativeProportionalHil};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1692, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_propensity_param_dict);
      __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
      __Pyx_INCREF(__pyx_n_s_n);
      __Pyx_GIVEREF(__pyx_n_s_n);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_n);
      __Pyx_INCREF(__pyx_n_s_DummyVar_NegativeProportionalHil);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_NegativeProportionalHil);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_n_s_DummyVar_NegativeProportionalHil);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1693
 *             self._param_dict_check(propensity_param_dict, "d", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "n", "DummyVar_NegativeProportionalHillPropensity")
 *             prop_object = NegativeProportionalHillPropensity()             # <<<<<<<<<<<<<<
 * 
 *         elif propensity_type == 'massaction':
 */
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_NegativeProportionalHillPropensity)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_prop_object = ((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1687
 *             prop_object = NegativeHillPropensity()
 * 
 *         elif propensity_type == 'proportionalhillnegative':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(propensity_param_dict, "k", "DummyVar_NegativeProportionalHillPropensity")
 *             self._param_dict_check(propensity_param_dict, "K", "DummyVar_NegativeProportionalHillPropensity")
 */
    goto __pyx_L5;
  }

  /* "bioscrape/types.pyx":1695
 *             prop_object = NegativeProportionalHillPropensity()
 * 
 *         elif propensity_type == 'massaction':             # <<<<<<<<<<<<<<
 *             species_string = propensity_param_dict['species']
 * 
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_propensity_type, __pyx_n_s_massaction, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1695, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1696
 * 
 *         elif propensity_type == 'massaction':
 *             species_string = propensity_param_dict['species']             # <<<<<<<<<<<<<<
 * 
 *             # if mass action propensity has less than 3 things, then use consitutitve, uni, bimolecular for speed.
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_propensity_param_dict, __pyx_n_s_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_species_string = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1699
 * 
 *             # if mass action propensity has less than 3 things, then use consitutitve, uni, bimolecular for speed.
 *             if species_string in ["0", "", '', None, 0]:             # <<<<<<<<<<<<<<
 *                 prop_object = ConstitutivePropensity()
 *                 self._param_dict_check(propensity_param_dict, "k", "DummyVar_ConstitutivePropensity")
 */
    __Pyx_INCREF(__pyx_v_species_string);
    __pyx_t_4 = __pyx_v_species_string;
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_kp_s_0, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1699, __pyx_L1_error)
    if (!__pyx_t_1) {
    } else {
      __pyx_t_5 = __pyx_t_1;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_kp_s__3, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1699, __pyx_L1_error)
    if (!__pyx_t_1) {
    } else {
      __pyx_t_5 = __pyx_t_1;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_kp_s__3, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1699, __pyx_L1_error)
    if (!__pyx_t_1) {
    } else {
      __pyx_t_5 = __pyx_t_1;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1699, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1699, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_1) {
    } else {
      __pyx_t_5 = __pyx_t_1;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1699, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __pyx_t_1;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_5 != 0);
    if (__pyx_t_1) {

      /* "bioscrape/types.pyx":1700
 *             # if mass action propensity has less than 3 things, then use consitutitve, uni, bimolecular for speed.
 *             if species_string in ["0", "", '', None, 0]:
 *                 prop_object = ConstitutivePropensity()             # <<<<<<<<<<<<<<
 *                 self._param_dict_check(propensity_param_dict, "k", "DummyVar_ConstitutivePropensity")
 *             else:
 */
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_ConstitutivePropensity)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1700, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_prop_object = ((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1701
 *             if species_string in ["0", "", '', None, 0]:
 *                 prop_object = ConstitutivePropensity()
 *                 self._param_dict_check(propensity_param_dict, "k", "DummyVar_ConstitutivePropensity")             # <<<<<<<<<<<<<<
 *             else:
 *                 species_names = species_names = [x.strip() for x in species_string.split('*') if x.strip() not in ["", '']]
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_ConstitutivePropensity};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1701, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_ConstitutivePropensity};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1701, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1701, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_2) {
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
        }
        __Pyx_INCREF(__pyx_v_propensity_param_dict);
        __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
        __Pyx_INCREF(__pyx_n_s_k);
        __Pyx_GIVEREF(__pyx_n_s_k);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_k);
        __Pyx_INCREF(__pyx_n_s_DummyVar_ConstitutivePropensity);
        __Pyx_GIVEREF(__pyx_n_s_DummyVar_ConstitutivePropensity);
        PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_n_s_DummyVar_ConstitutivePropensity);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1701, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1699
 * 
 *             # if mass action propensity has less than 3 things, then use consitutitve, uni, bimolecular for speed.
 *             if species_string in ["0", "", '', None, 0]:             # <<<<<<<<<<<<<<
 *                 prop_object = ConstitutivePropensity()
 *                 self._param_dict_check(propensity_param_dict, "k", "DummyVar_ConstitutivePropensity")
 */
      goto __pyx_L6;
    }

    /* "bioscrape/types.pyx":1703
 *                 self._param_dict_check(propensity_param_dict, "k", "DummyVar_ConstitutivePropensity")
 *             else:
 *                 species_names = species_names = [x.strip() for x in species_string.split('*') if x.strip() not in ["", '']]             # <<<<<<<<<<<<<<
 * 
 *                 if len(species_names) == 1:
 */
    /*else*/ {
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_species_string, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_kp_s__2) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_s__2);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_7 = __pyx_t_3; __Pyx_INCREF(__pyx_t_7); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1703, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1703, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1703, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1703, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1703, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1703, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_9(__pyx_t_7);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1703, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_strip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1703, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1703, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__3, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1703, __pyx_L1_error)
        if (__pyx_t_5) {
        } else {
          __pyx_t_1 = __pyx_t_5;
          goto __pyx_L15_bool_binop_done;
        }
        __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__3, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1703, __pyx_L1_error)
        __pyx_t_1 = __pyx_t_5;
        __pyx_L15_bool_binop_done:;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = (__pyx_t_1 != 0);
        if (__pyx_t_5) {
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_strip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1703, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_t_4);
      __pyx_v_species_names = __pyx_t_4;
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_species_names, __pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1705
 *                 species_names = species_names = [x.strip() for x in species_string.split('*') if x.strip() not in ["", '']]
 * 
 *                 if len(species_names) == 1:             # <<<<<<<<<<<<<<
 *                     prop_object = UnimolecularPropensity()
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_UnimolecularPropensity")
 */
      __pyx_t_8 = PyList_GET_SIZE(__pyx_v_species_names); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1705, __pyx_L1_error)
      __pyx_t_5 = ((__pyx_t_8 == 1) != 0);
      if (__pyx_t_5) {

        /* "bioscrape/types.pyx":1706
 * 
 *                 if len(species_names) == 1:
 *                     prop_object = UnimolecularPropensity()             # <<<<<<<<<<<<<<
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_UnimolecularPropensity")
 * 
 */
        __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_UnimolecularPropensity)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1706, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_v_prop_object = ((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_t_4);
        __pyx_t_4 = 0;

        /* "bioscrape/types.pyx":1707
 *                 if len(species_names) == 1:
 *                     prop_object = UnimolecularPropensity()
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_UnimolecularPropensity")             # <<<<<<<<<<<<<<
 * 
 *                 elif len(species_names) == 2:
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1707, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_UnimolecularPropensity};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1707, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_UnimolecularPropensity};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1707, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        {
          __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1707, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (__pyx_t_3) {
            __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
          }
          __Pyx_INCREF(__pyx_v_propensity_param_dict);
          __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
          PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
          __Pyx_INCREF(__pyx_n_s_k);
          __Pyx_GIVEREF(__pyx_n_s_k);
          PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_k);
          __Pyx_INCREF(__pyx_n_s_DummyVar_UnimolecularPropensity);
          __Pyx_GIVEREF(__pyx_n_s_DummyVar_UnimolecularPropensity);
          PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_n_s_DummyVar_UnimolecularPropensity);
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1707, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "bioscrape/types.pyx":1705
 *                 species_names = species_names = [x.strip() for x in species_string.split('*') if x.strip() not in ["", '']]
 * 
 *                 if len(species_names) == 1:             # <<<<<<<<<<<<<<
 *                     prop_object = UnimolecularPropensity()
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_UnimolecularPropensity")
 */
        goto __pyx_L17;
      }

      /* "bioscrape/types.pyx":1709
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_UnimolecularPropensity")
 * 
 *                 elif len(species_names) == 2:             # <<<<<<<<<<<<<<
 *                     prop_object = BimolecularPropensity()
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_BimolecularPropensity")
 */
      __pyx_t_8 = PyList_GET_SIZE(__pyx_v_species_names); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1709, __pyx_L1_error)
      __pyx_t_5 = ((__pyx_t_8 == 2) != 0);
      if (__pyx_t_5) {

        /* "bioscrape/types.pyx":1710
 * 
 *                 elif len(species_names) == 2:
 *                     prop_object = BimolecularPropensity()             # <<<<<<<<<<<<<<
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_BimolecularPropensity")
 * 
 */
        __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_BimolecularPropensity)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1710, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_v_prop_object = ((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_t_4);
        __pyx_t_4 = 0;

        /* "bioscrape/types.pyx":1711
 *                 elif len(species_names) == 2:
 *                     prop_object = BimolecularPropensity()
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_BimolecularPropensity")             # <<<<<<<<<<<<<<
 * 
 *                 else:
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1711, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_2 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_BimolecularPropensity};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1711, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_BimolecularPropensity};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1711, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        {
          __pyx_t_3 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1711, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (__pyx_t_2) {
            __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
          }
          __Pyx_INCREF(__pyx_v_propensity_param_dict);
          __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
          PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
          __Pyx_INCREF(__pyx_n_s_k);
          __Pyx_GIVEREF(__pyx_n_s_k);
          PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_n_s_k);
          __Pyx_INCREF(__pyx_n_s_DummyVar_BimolecularPropensity);
          __Pyx_GIVEREF(__pyx_n_s_DummyVar_BimolecularPropensity);
          PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_6, __pyx_n_s_DummyVar_BimolecularPropensity);
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1711, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "bioscrape/types.pyx":1709
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_UnimolecularPropensity")
 * 
 *                 elif len(species_names) == 2:             # <<<<<<<<<<<<<<
 *                     prop_object = BimolecularPropensity()
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_BimolecularPropensity")
 */
        goto __pyx_L17;
      }

      /* "bioscrape/types.pyx":1714
 * 
 *                 else:
 *                     prop_object = MassActionPropensity()             # <<<<<<<<<<<<<<
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_MassActionPropensity")
 * 
 */
      /*else*/ {
        __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_MassActionPropensity)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1714, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_v_prop_object = ((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_t_4);
        __pyx_t_4 = 0;

        /* "bioscrape/types.pyx":1715
 *                 else:
 *                     prop_object = MassActionPropensity()
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_MassActionPropensity")             # <<<<<<<<<<<<<<
 * 
 *         elif propensity_type == 'general':
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1715, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_MassActionPropensity};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1715, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_propensity_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_MassActionPropensity};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1715, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        {
          __pyx_t_2 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1715, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (__pyx_t_3) {
            __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
          }
          __Pyx_INCREF(__pyx_v_propensity_param_dict);
          __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
          PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_v_propensity_param_dict);
          __Pyx_INCREF(__pyx_n_s_k);
          __Pyx_GIVEREF(__pyx_n_s_k);
          PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_k);
          __Pyx_INCREF(__pyx_n_s_DummyVar_MassActionPropensity);
          __Pyx_GIVEREF(__pyx_n_s_DummyVar_MassActionPropensity);
          PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_6, __pyx_n_s_DummyVar_MassActionPropensity);
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1715, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_L17:;
    }
    __pyx_L6:;

    /* "bioscrape/types.pyx":1695
 *             prop_object = NegativeProportionalHillPropensity()
 * 
 *         elif propensity_type == 'massaction':             # <<<<<<<<<<<<<<
 *             species_string = propensity_param_dict['species']
 * 
 */
    goto __pyx_L5;
  }

  /* "bioscrape/types.pyx":1717
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_MassActionPropensity")
 * 
 *         elif propensity_type == 'general':             # <<<<<<<<<<<<<<
 *             prop_object = GeneralPropensity()
 *         else:
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_propensity_type, __pyx_n_s_general, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1717, __pyx_L1_error)
  if (likely(__pyx_t_5)) {

    /* "bioscrape/types.pyx":1718
 * 
 *         elif propensity_type == 'general':
 *             prop_object = GeneralPropensity()             # <<<<<<<<<<<<<<
 *         else:
 *             raise SyntaxError('Propensity Type is not supported: ' + propensity_type)
 */
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_GeneralPropensity)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_prop_object = ((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1717
 *                     self._param_dict_check(propensity_param_dict, "k", "DummyVar_MassActionPropensity")
 * 
 *         elif propensity_type == 'general':             # <<<<<<<<<<<<<<
 *             prop_object = GeneralPropensity()
 *         else:
 */
    goto __pyx_L5;
  }

  /* "bioscrape/types.pyx":1720
 *             prop_object = GeneralPropensity()
 *         else:
 *             raise SyntaxError('Propensity Type is not supported: ' + propensity_type)             # <<<<<<<<<<<<<<
 * 
 *         return prop_object
 */
  /*else*/ {
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Propensity_Type_is_not_supported, __pyx_v_propensity_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 1720, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "bioscrape/types.pyx":1722
 *             raise SyntaxError('Propensity Type is not supported: ' + propensity_type)
 * 
 *         return prop_object             # <<<<<<<<<<<<<<
 *     #A function to programatically create a reaction (and automatically add it to the model).
 *     #   Supports all native propensity types and delay types.
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_prop_object));
  __pyx_r = ((PyObject *)__pyx_v_prop_object);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1657
 * 
 * 
 *     def create_propensity(self, propensity_type, propensity_param_dict, input_printout = False):             # <<<<<<<<<<<<<<
 *         if input_printout:
 *             print("Creating Propensity: prop_type="+str(propensity_type)+" params="+str(propensity_param_dict))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("bioscrape.types.Model.create_propensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_prop_object);
  __Pyx_XDECREF(__pyx_v_species_string);
  __Pyx_XDECREF(__pyx_v_species_names);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1736
 *     #   delay_products: a list of delay reaction products specie names (strings)
 *     #   delay_param_dict: a dictionary of the parameters for the delay distribution
 *     def create_reaction(self, reactants, products, propensity_type,             # <<<<<<<<<<<<<<
 *                         propensity_param_dict, delay_type = None,
 *                         delay_reactants = None, delay_products = None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_21create_reaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_21create_reaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_reactants = 0;
  PyObject *__pyx_v_products = 0;
  PyObject *__pyx_v_propensity_type = 0;
  PyObject *__pyx_v_propensity_param_dict = 0;
  PyObject *__pyx_v_delay_type = 0;
  PyObject *__pyx_v_delay_reactants = 0;
  PyObject *__pyx_v_delay_products = 0;
  PyObject *__pyx_v_delay_param_dict = 0;
  PyObject *__pyx_v_input_printout = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_reaction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_reactants,&__pyx_n_s_products,&__pyx_n_s_propensity_type,&__pyx_n_s_propensity_param_dict,&__pyx_n_s_delay_type,&__pyx_n_s_delay_reactants,&__pyx_n_s_delay_products,&__pyx_n_s_delay_param_dict,&__pyx_n_s_input_printout,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "bioscrape/types.pyx":1737
 *     #   delay_param_dict: a dictionary of the parameters for the delay distribution
 *     def create_reaction(self, reactants, products, propensity_type,
 *                         propensity_param_dict, delay_type = None,             # <<<<<<<<<<<<<<
 *                         delay_reactants = None, delay_products = None,
 *                         delay_param_dict = None, input_printout = False):
 */
    values[4] = ((PyObject *)Py_None);

    /* "bioscrape/types.pyx":1738
 *     def create_reaction(self, reactants, products, propensity_type,
 *                         propensity_param_dict, delay_type = None,
 *                         delay_reactants = None, delay_products = None,             # <<<<<<<<<<<<<<
 *                         delay_param_dict = None, input_printout = False):
 * 
 */
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);

    /* "bioscrape/types.pyx":1739
 *                         propensity_param_dict, delay_type = None,
 *                         delay_reactants = None, delay_products = None,
 *                         delay_param_dict = None, input_printout = False):             # <<<<<<<<<<<<<<
 * 
 *         if input_printout:
 */
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reactants)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_products)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_reaction", 0, 4, 9, 1); __PYX_ERR(0, 1736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_propensity_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_reaction", 0, 4, 9, 2); __PYX_ERR(0, 1736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_propensity_param_dict)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_reaction", 0, 4, 9, 3); __PYX_ERR(0, 1736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delay_type);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delay_reactants);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delay_products);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delay_param_dict);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input_printout);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_reaction") < 0)) __PYX_ERR(0, 1736, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_reactants = values[0];
    __pyx_v_products = values[1];
    __pyx_v_propensity_type = values[2];
    __pyx_v_propensity_param_dict = values[3];
    __pyx_v_delay_type = values[4];
    __pyx_v_delay_reactants = values[5];
    __pyx_v_delay_products = values[6];
    __pyx_v_delay_param_dict = values[7];
    __pyx_v_input_printout = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_reaction", 0, 4, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1736, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Model.create_reaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_20create_reaction(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_reactants, __pyx_v_products, __pyx_v_propensity_type, __pyx_v_propensity_param_dict, __pyx_v_delay_type, __pyx_v_delay_reactants, __pyx_v_delay_products, __pyx_v_delay_param_dict, __pyx_v_input_printout);

  /* "bioscrape/types.pyx":1736
 *     #   delay_products: a list of delay reaction products specie names (strings)
 *     #   delay_param_dict: a dictionary of the parameters for the delay distribution
 *     def create_reaction(self, reactants, products, propensity_type,             # <<<<<<<<<<<<<<
 *                         propensity_param_dict, delay_type = None,
 *                         delay_reactants = None, delay_products = None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_20create_reaction(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_reactants, PyObject *__pyx_v_products, PyObject *__pyx_v_propensity_type, PyObject *__pyx_v_propensity_param_dict, PyObject *__pyx_v_delay_type, PyObject *__pyx_v_delay_reactants, PyObject *__pyx_v_delay_products, PyObject *__pyx_v_delay_param_dict, PyObject *__pyx_v_input_printout) {
  PyObject *__pyx_v_reaction_update_dict = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_reactant_string = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_prop_object = NULL;
  PyObject *__pyx_v_delay_reaction_update_dict = NULL;
  struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v_delay_object = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("create_reaction", 0);
  __Pyx_INCREF(__pyx_v_propensity_param_dict);
  __Pyx_INCREF(__pyx_v_delay_reactants);
  __Pyx_INCREF(__pyx_v_delay_products);
  __Pyx_INCREF(__pyx_v_delay_param_dict);

  /* "bioscrape/types.pyx":1741
 *                         delay_param_dict = None, input_printout = False):
 * 
 *         if input_printout:             # <<<<<<<<<<<<<<
 *             print("creating reaction with:"+
 *                 "\n\tPropensity_type="+str(propensity_type)+" Inputs="+str(reactants)+" Outputs="+str(products)+
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_input_printout); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1741, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1742
 * 
 *         if input_printout:
 *             print("creating reaction with:"+             # <<<<<<<<<<<<<<
 *                 "\n\tPropensity_type="+str(propensity_type)+" Inputs="+str(reactants)+" Outputs="+str(products)+
 *                 "\n\tpropensity_param_dict="+str(propensity_param_dict)+
 */
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_creating_reaction_with, __pyx_kp_s_Propensity_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "bioscrape/types.pyx":1743
 *         if input_printout:
 *             print("creating reaction with:"+
 *                 "\n\tPropensity_type="+str(propensity_type)+" Inputs="+str(reactants)+" Outputs="+str(products)+             # <<<<<<<<<<<<<<
 *                 "\n\tpropensity_param_dict="+str(propensity_param_dict)+
 *                 "\n\tdelay type="+str(delay_type)+" delay inputs="+str(delay_reactants)+" delay outputs="+str(delay_products)+
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_propensity_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_Inputs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_reactants); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_Outputs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_products); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_propensity_param_dict_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":1744
 *             print("creating reaction with:"+
 *                 "\n\tPropensity_type="+str(propensity_type)+" Inputs="+str(reactants)+" Outputs="+str(products)+
 *                 "\n\tpropensity_param_dict="+str(propensity_param_dict)+             # <<<<<<<<<<<<<<
 *                 "\n\tdelay type="+str(delay_type)+" delay inputs="+str(delay_reactants)+" delay outputs="+str(delay_products)+
 *                 "\n\tdelay parameters="+str(delay_param_dict))
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_propensity_param_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_delay_type_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1745
 *                 "\n\tPropensity_type="+str(propensity_type)+" Inputs="+str(reactants)+" Outputs="+str(products)+
 *                 "\n\tpropensity_param_dict="+str(propensity_param_dict)+
 *                 "\n\tdelay type="+str(delay_type)+" delay inputs="+str(delay_reactants)+" delay outputs="+str(delay_products)+             # <<<<<<<<<<<<<<
 *                 "\n\tdelay parameters="+str(delay_param_dict))
 *         self.initialized = False
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_delay_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_delay_inputs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_delay_reactants); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_delay_outputs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_delay_products); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_delay_parameters); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1746
 *                 "\n\tpropensity_param_dict="+str(propensity_param_dict)+
 *                 "\n\tdelay type="+str(delay_type)+" delay inputs="+str(delay_reactants)+" delay outputs="+str(delay_products)+
 *                 "\n\tdelay parameters="+str(delay_param_dict))             # <<<<<<<<<<<<<<
 *         self.initialized = False
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_delay_param_dict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1741
 *                         delay_param_dict = None, input_printout = False):
 * 
 *         if input_printout:             # <<<<<<<<<<<<<<
 *             print("creating reaction with:"+
 *                 "\n\tPropensity_type="+str(propensity_type)+" Inputs="+str(reactants)+" Outputs="+str(products)+
 */
  }

  /* "bioscrape/types.pyx":1747
 *                 "\n\tdelay type="+str(delay_type)+" delay inputs="+str(delay_reactants)+" delay outputs="+str(delay_products)+
 *                 "\n\tdelay parameters="+str(delay_param_dict))
 *         self.initialized = False             # <<<<<<<<<<<<<<
 * 
 *         #Copy dictionaries so they aren't altered if they are being used by external code
 */
  __pyx_v_self->initialized = 0;

  /* "bioscrape/types.pyx":1750
 * 
 *         #Copy dictionaries so they aren't altered if they are being used by external code
 *         propensity_param_dict = dict(propensity_param_dict)             # <<<<<<<<<<<<<<
 * 
 *         #Remove "propensity_type" key which may be leftover from SBML annotations
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_v_propensity_param_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_propensity_param_dict, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":1753
 * 
 *         #Remove "propensity_type" key which may be leftover from SBML annotations
 *         if 'propensity_type' in propensity_param_dict:             # <<<<<<<<<<<<<<
 *             propensity_param_dict.pop("propensity_type")
 * 
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_propensity_type, __pyx_v_propensity_param_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1753, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1754
 *         #Remove "propensity_type" key which may be leftover from SBML annotations
 *         if 'propensity_type' in propensity_param_dict:
 *             propensity_param_dict.pop("propensity_type")             # <<<<<<<<<<<<<<
 * 
 *         if delay_param_dict != None:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_propensity_param_dict, __pyx_n_s_pop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_n_s_propensity_type) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_s_propensity_type);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1753
 * 
 *         #Remove "propensity_type" key which may be leftover from SBML annotations
 *         if 'propensity_type' in propensity_param_dict:             # <<<<<<<<<<<<<<
 *             propensity_param_dict.pop("propensity_type")
 * 
 */
  }

  /* "bioscrape/types.pyx":1756
 *             propensity_param_dict.pop("propensity_type")
 * 
 *         if delay_param_dict != None:             # <<<<<<<<<<<<<<
 *             delay_param_dict = dict(delay_param_dict)
 * 
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_delay_param_dict, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1756, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1756, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1757
 * 
 *         if delay_param_dict != None:
 *             delay_param_dict = dict(delay_param_dict)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_v_delay_param_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_delay_param_dict, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1756
 *             propensity_param_dict.pop("propensity_type")
 * 
 *         if delay_param_dict != None:             # <<<<<<<<<<<<<<
 *             delay_param_dict = dict(delay_param_dict)
 * 
 */
  }

  /* "bioscrape/types.pyx":1761
 * 
 *         #Reaction Reactants and Products stored in a dictionary
 *         reaction_update_dict = {}             # <<<<<<<<<<<<<<
 *         for r in reactants:
 *             # if the species hasn't been seen add it to the index
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_reaction_update_dict = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":1762
 *         #Reaction Reactants and Products stored in a dictionary
 *         reaction_update_dict = {}
 *         for r in reactants:             # <<<<<<<<<<<<<<
 *             # if the species hasn't been seen add it to the index
 *             self._add_species(r)
 */
  if (likely(PyList_CheckExact(__pyx_v_reactants)) || PyTuple_CheckExact(__pyx_v_reactants)) {
    __pyx_t_2 = __pyx_v_reactants; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_reactants); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1762, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1762, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1762, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1762, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1764
 *         for r in reactants:
 *             # if the species hasn't been seen add it to the index
 *             self._add_species(r)             # <<<<<<<<<<<<<<
 * 
 *             # update the update array
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_v_r) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_r);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1767
 * 
 *             # update the update array
 *             if r not in reaction_update_dict:             # <<<<<<<<<<<<<<
 *                 reaction_update_dict[r] = 0
 * 
 */
    __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_r, __pyx_v_reaction_update_dict, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_5 != 0);
    if (__pyx_t_1) {

      /* "bioscrape/types.pyx":1768
 *             # update the update array
 *             if r not in reaction_update_dict:
 *                 reaction_update_dict[r] = 0             # <<<<<<<<<<<<<<
 * 
 *             reaction_update_dict[r]  -= 1
 */
      if (unlikely(PyDict_SetItem(__pyx_v_reaction_update_dict, __pyx_v_r, __pyx_int_0) < 0)) __PYX_ERR(0, 1768, __pyx_L1_error)

      /* "bioscrape/types.pyx":1767
 * 
 *             # update the update array
 *             if r not in reaction_update_dict:             # <<<<<<<<<<<<<<
 *                 reaction_update_dict[r] = 0
 * 
 */
    }

    /* "bioscrape/types.pyx":1770
 *                 reaction_update_dict[r] = 0
 * 
 *             reaction_update_dict[r]  -= 1             # <<<<<<<<<<<<<<
 * 
 *         for p in products:
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_4 = __pyx_v_r;
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_reaction_update_dict, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_reaction_update_dict, __pyx_t_4, __pyx_t_8) < 0)) __PYX_ERR(0, 1770, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1762
 *         #Reaction Reactants and Products stored in a dictionary
 *         reaction_update_dict = {}
 *         for r in reactants:             # <<<<<<<<<<<<<<
 *             # if the species hasn't been seen add it to the index
 *             self._add_species(r)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":1772
 *             reaction_update_dict[r]  -= 1
 * 
 *         for p in products:             # <<<<<<<<<<<<<<
 *             # if the species hasn't been seen add it to the index
 *             self._add_species(p)
 */
  if (likely(PyList_CheckExact(__pyx_v_products)) || PyTuple_CheckExact(__pyx_v_products)) {
    __pyx_t_2 = __pyx_v_products; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_products); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1772, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1772, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1772, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1772, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1774
 *         for p in products:
 *             # if the species hasn't been seen add it to the index
 *             self._add_species(p)             # <<<<<<<<<<<<<<
 *             # update the update array
 *             if p not in reaction_update_dict:
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_species); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_v_p) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_p);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1776
 *             self._add_species(p)
 *             # update the update array
 *             if p not in reaction_update_dict:             # <<<<<<<<<<<<<<
 *                 reaction_update_dict[p] = 0
 *             reaction_update_dict[p]  += 1
 */
    __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_p, __pyx_v_reaction_update_dict, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1776, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_1 != 0);
    if (__pyx_t_5) {

      /* "bioscrape/types.pyx":1777
 *             # update the update array
 *             if p not in reaction_update_dict:
 *                 reaction_update_dict[p] = 0             # <<<<<<<<<<<<<<
 *             reaction_update_dict[p]  += 1
 * 
 */
      if (unlikely(PyDict_SetItem(__pyx_v_reaction_update_dict, __pyx_v_p, __pyx_int_0) < 0)) __PYX_ERR(0, 1777, __pyx_L1_error)

      /* "bioscrape/types.pyx":1776
 *             self._add_species(p)
 *             # update the update array
 *             if p not in reaction_update_dict:             # <<<<<<<<<<<<<<
 *                 reaction_update_dict[p] = 0
 *             reaction_update_dict[p]  += 1
 */
    }

    /* "bioscrape/types.pyx":1778
 *             if p not in reaction_update_dict:
 *                 reaction_update_dict[p] = 0
 *             reaction_update_dict[p]  += 1             # <<<<<<<<<<<<<<
 * 
 *         if 'species' not in propensity_param_dict and propensity_type == "massaction":
 */
    __Pyx_INCREF(__pyx_v_p);
    __pyx_t_4 = __pyx_v_p;
    __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_reaction_update_dict, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_8, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_reaction_update_dict, __pyx_t_4, __pyx_t_3) < 0)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1772
 *             reaction_update_dict[r]  -= 1
 * 
 *         for p in products:             # <<<<<<<<<<<<<<
 *             # if the species hasn't been seen add it to the index
 *             self._add_species(p)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":1780
 *             reaction_update_dict[p]  += 1
 * 
 *         if 'species' not in propensity_param_dict and propensity_type == "massaction":             # <<<<<<<<<<<<<<
 *                 reactant_string = ""
 *                 for s in reactants:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_species, __pyx_v_propensity_param_dict, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1780, __pyx_L1_error)
  __pyx_t_9 = (__pyx_t_1 != 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_5 = __pyx_t_9;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_propensity_type, __pyx_n_s_massaction, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1780, __pyx_L1_error)
  __pyx_t_5 = __pyx_t_9;
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1781
 * 
 *         if 'species' not in propensity_param_dict and propensity_type == "massaction":
 *                 reactant_string = ""             # <<<<<<<<<<<<<<
 *                 for s in reactants:
 *                     if s is not None:
 */
    __Pyx_INCREF(__pyx_kp_s__3);
    __pyx_v_reactant_string = __pyx_kp_s__3;

    /* "bioscrape/types.pyx":1782
 *         if 'species' not in propensity_param_dict and propensity_type == "massaction":
 *                 reactant_string = ""
 *                 for s in reactants:             # <<<<<<<<<<<<<<
 *                     if s is not None:
 *                         reactant_string += s+"*"
 */
    if (likely(PyList_CheckExact(__pyx_v_reactants)) || PyTuple_CheckExact(__pyx_v_reactants)) {
      __pyx_t_2 = __pyx_v_reactants; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_reactants); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1782, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1782, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1782, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1782, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1782, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1782, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1783
 *                 reactant_string = ""
 *                 for s in reactants:
 *                     if s is not None:             # <<<<<<<<<<<<<<
 *                         reactant_string += s+"*"
 *                 propensity_param_dict['species'] = reactant_string[:len(reactant_string)-1]
 */
      __pyx_t_5 = (__pyx_v_s != Py_None);
      __pyx_t_9 = (__pyx_t_5 != 0);
      if (__pyx_t_9) {

        /* "bioscrape/types.pyx":1784
 *                 for s in reactants:
 *                     if s is not None:
 *                         reactant_string += s+"*"             # <<<<<<<<<<<<<<
 *                 propensity_param_dict['species'] = reactant_string[:len(reactant_string)-1]
 * 
 */
        __pyx_t_4 = PyNumber_Add(__pyx_v_s, __pyx_kp_s__2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1784, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_reactant_string, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1784, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF_SET(__pyx_v_reactant_string, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "bioscrape/types.pyx":1783
 *                 reactant_string = ""
 *                 for s in reactants:
 *                     if s is not None:             # <<<<<<<<<<<<<<
 *                         reactant_string += s+"*"
 *                 propensity_param_dict['species'] = reactant_string[:len(reactant_string)-1]
 */
      }

      /* "bioscrape/types.pyx":1782
 *         if 'species' not in propensity_param_dict and propensity_type == "massaction":
 *                 reactant_string = ""
 *                 for s in reactants:             # <<<<<<<<<<<<<<
 *                     if s is not None:
 *                         reactant_string += s+"*"
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1785
 *                     if s is not None:
 *                         reactant_string += s+"*"
 *                 propensity_param_dict['species'] = reactant_string[:len(reactant_string)-1]             # <<<<<<<<<<<<<<
 * 
 *         prop_object = self.create_propensity(propensity_type, propensity_param_dict, input_printout = input_printout)
 */
    __pyx_t_6 = PyObject_Length(__pyx_v_reactant_string); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1785, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_reactant_string, 0, (__pyx_t_6 - 1), NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_propensity_param_dict, __pyx_n_s_species, __pyx_t_2) < 0)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1780
 *             reaction_update_dict[p]  += 1
 * 
 *         if 'species' not in propensity_param_dict and propensity_type == "massaction":             # <<<<<<<<<<<<<<
 *                 reactant_string = ""
 *                 for s in reactants:
 */
  }

  /* "bioscrape/types.pyx":1787
 *                 propensity_param_dict['species'] = reactant_string[:len(reactant_string)-1]
 * 
 *         prop_object = self.create_propensity(propensity_type, propensity_param_dict, input_printout = input_printout)             # <<<<<<<<<<<<<<
 * 
 *         #Create Delay Object
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_create_propensity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_propensity_type);
  __Pyx_GIVEREF(__pyx_v_propensity_type);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_propensity_type);
  __Pyx_INCREF(__pyx_v_propensity_param_dict);
  __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_propensity_param_dict);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_input_printout, __pyx_v_input_printout) < 0) __PYX_ERR(0, 1787, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_prop_object = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "bioscrape/types.pyx":1791
 *         #Create Delay Object
 *         #Delay Reaction Reactants and Products Stored in a Dictionary
 *         delay_reaction_update_dict = {}             # <<<<<<<<<<<<<<
 *         if delay_reactants != None:
 *             for r in delay_reactants:
 */
  __pyx_t_8 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_delay_reaction_update_dict = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "bioscrape/types.pyx":1792
 *         #Delay Reaction Reactants and Products Stored in a Dictionary
 *         delay_reaction_update_dict = {}
 *         if delay_reactants != None:             # <<<<<<<<<<<<<<
 *             for r in delay_reactants:
 *                 # if the species hasn't been seen add it to the index
 */
  __pyx_t_8 = PyObject_RichCompare(__pyx_v_delay_reactants, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_9) {

    /* "bioscrape/types.pyx":1793
 *         delay_reaction_update_dict = {}
 *         if delay_reactants != None:
 *             for r in delay_reactants:             # <<<<<<<<<<<<<<
 *                 # if the species hasn't been seen add it to the index
 *                 self._add_species(r)
 */
    if (likely(PyList_CheckExact(__pyx_v_delay_reactants)) || PyTuple_CheckExact(__pyx_v_delay_reactants)) {
      __pyx_t_8 = __pyx_v_delay_reactants; __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_delay_reactants); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1793, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1793, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1793, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1793, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1793, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1793, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_8);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1793, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1795
 *             for r in delay_reactants:
 *                 # if the species hasn't been seen add it to the index
 *                 self._add_species(r)             # <<<<<<<<<<<<<<
 *                 # update the update array
 *                 if r not in delay_reaction_update_dict:
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_r) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_r);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1797
 *                 self._add_species(r)
 *                 # update the update array
 *                 if r not in delay_reaction_update_dict:             # <<<<<<<<<<<<<<
 *                     delay_reaction_update_dict[r] = 0
 *                 delay_reaction_update_dict[r]  -= 1
 */
      __pyx_t_9 = (__Pyx_PyDict_ContainsTF(__pyx_v_r, __pyx_v_delay_reaction_update_dict, Py_NE)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1797, __pyx_L1_error)
      __pyx_t_5 = (__pyx_t_9 != 0);
      if (__pyx_t_5) {

        /* "bioscrape/types.pyx":1798
 *                 # update the update array
 *                 if r not in delay_reaction_update_dict:
 *                     delay_reaction_update_dict[r] = 0             # <<<<<<<<<<<<<<
 *                 delay_reaction_update_dict[r]  -= 1
 *         else:
 */
        if (unlikely(PyDict_SetItem(__pyx_v_delay_reaction_update_dict, __pyx_v_r, __pyx_int_0) < 0)) __PYX_ERR(0, 1798, __pyx_L1_error)

        /* "bioscrape/types.pyx":1797
 *                 self._add_species(r)
 *                 # update the update array
 *                 if r not in delay_reaction_update_dict:             # <<<<<<<<<<<<<<
 *                     delay_reaction_update_dict[r] = 0
 *                 delay_reaction_update_dict[r]  -= 1
 */
      }

      /* "bioscrape/types.pyx":1799
 *                 if r not in delay_reaction_update_dict:
 *                     delay_reaction_update_dict[r] = 0
 *                 delay_reaction_update_dict[r]  -= 1             # <<<<<<<<<<<<<<
 *         else:
 *             delay_reactants = []
 */
      __Pyx_INCREF(__pyx_v_r);
      __pyx_t_4 = __pyx_v_r;
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_delay_reaction_update_dict, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(PyDict_SetItem(__pyx_v_delay_reaction_update_dict, __pyx_t_4, __pyx_t_2) < 0)) __PYX_ERR(0, 1799, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1793
 *         delay_reaction_update_dict = {}
 *         if delay_reactants != None:
 *             for r in delay_reactants:             # <<<<<<<<<<<<<<
 *                 # if the species hasn't been seen add it to the index
 *                 self._add_species(r)
 */
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1792
 *         #Delay Reaction Reactants and Products Stored in a Dictionary
 *         delay_reaction_update_dict = {}
 *         if delay_reactants != None:             # <<<<<<<<<<<<<<
 *             for r in delay_reactants:
 *                 # if the species hasn't been seen add it to the index
 */
    goto __pyx_L18;
  }

  /* "bioscrape/types.pyx":1801
 *                 delay_reaction_update_dict[r]  -= 1
 *         else:
 *             delay_reactants = []             # <<<<<<<<<<<<<<
 * 
 *         if delay_products != None:
 */
  /*else*/ {
    __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1801, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_delay_reactants, __pyx_t_8);
    __pyx_t_8 = 0;
  }
  __pyx_L18:;

  /* "bioscrape/types.pyx":1803
 *             delay_reactants = []
 * 
 *         if delay_products != None:             # <<<<<<<<<<<<<<
 *             for p in delay_products:
 *                 # if the species hasn't been seen add it to the index
 */
  __pyx_t_8 = PyObject_RichCompare(__pyx_v_delay_products, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_5) {

    /* "bioscrape/types.pyx":1804
 * 
 *         if delay_products != None:
 *             for p in delay_products:             # <<<<<<<<<<<<<<
 *                 # if the species hasn't been seen add it to the index
 *                 self._add_species(p)
 */
    if (likely(PyList_CheckExact(__pyx_v_delay_products)) || PyTuple_CheckExact(__pyx_v_delay_products)) {
      __pyx_t_8 = __pyx_v_delay_products; __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_delay_products); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1804, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1804, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1804, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1804, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1804, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_8);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1804, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1806
 *             for p in delay_products:
 *                 # if the species hasn't been seen add it to the index
 *                 self._add_species(p)             # <<<<<<<<<<<<<<
 *                 # update the update array
 *                 if p not in delay_reaction_update_dict:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_species); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_p) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_p);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1806, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1808
 *                 self._add_species(p)
 *                 # update the update array
 *                 if p not in delay_reaction_update_dict:             # <<<<<<<<<<<<<<
 *                     delay_reaction_update_dict[p] = 0
 *                 delay_reaction_update_dict[p]  += 1
 */
      __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_p, __pyx_v_delay_reaction_update_dict, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1808, __pyx_L1_error)
      __pyx_t_9 = (__pyx_t_5 != 0);
      if (__pyx_t_9) {

        /* "bioscrape/types.pyx":1809
 *                 # update the update array
 *                 if p not in delay_reaction_update_dict:
 *                     delay_reaction_update_dict[p] = 0             # <<<<<<<<<<<<<<
 *                 delay_reaction_update_dict[p]  += 1
 *         else:
 */
        if (unlikely(PyDict_SetItem(__pyx_v_delay_reaction_update_dict, __pyx_v_p, __pyx_int_0) < 0)) __PYX_ERR(0, 1809, __pyx_L1_error)

        /* "bioscrape/types.pyx":1808
 *                 self._add_species(p)
 *                 # update the update array
 *                 if p not in delay_reaction_update_dict:             # <<<<<<<<<<<<<<
 *                     delay_reaction_update_dict[p] = 0
 *                 delay_reaction_update_dict[p]  += 1
 */
      }

      /* "bioscrape/types.pyx":1810
 *                 if p not in delay_reaction_update_dict:
 *                     delay_reaction_update_dict[p] = 0
 *                 delay_reaction_update_dict[p]  += 1             # <<<<<<<<<<<<<<
 *         else:
 *             delay_products = []
 */
      __Pyx_INCREF(__pyx_v_p);
      __pyx_t_4 = __pyx_v_p;
      __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_delay_reaction_update_dict, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(PyDict_SetItem(__pyx_v_delay_reaction_update_dict, __pyx_t_4, __pyx_t_3) < 0)) __PYX_ERR(0, 1810, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1804
 * 
 *         if delay_products != None:
 *             for p in delay_products:             # <<<<<<<<<<<<<<
 *                 # if the species hasn't been seen add it to the index
 *                 self._add_species(p)
 */
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1803
 *             delay_reactants = []
 * 
 *         if delay_products != None:             # <<<<<<<<<<<<<<
 *             for p in delay_products:
 *                 # if the species hasn't been seen add it to the index
 */
    goto __pyx_L22;
  }

  /* "bioscrape/types.pyx":1812
 *                 delay_reaction_update_dict[p]  += 1
 *         else:
 *             delay_products = []             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_delay_products, __pyx_t_8);
    __pyx_t_8 = 0;
  }
  __pyx_L22:;

  /* "bioscrape/types.pyx":1815
 * 
 * 
 *         if delay_type == 'none' or delay_type == None:             # <<<<<<<<<<<<<<
 *             delay_object = NoDelay()
 *             delay_param_dict = {}
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_delay_type, __pyx_n_s_none, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1815, __pyx_L1_error)
  if (!__pyx_t_5) {
  } else {
    __pyx_t_9 = __pyx_t_5;
    goto __pyx_L27_bool_binop_done;
  }
  __pyx_t_8 = PyObject_RichCompare(__pyx_v_delay_type, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1815, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1815, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_9 = __pyx_t_5;
  __pyx_L27_bool_binop_done:;
  if (__pyx_t_9) {

    /* "bioscrape/types.pyx":1816
 * 
 *         if delay_type == 'none' or delay_type == None:
 *             delay_object = NoDelay()             # <<<<<<<<<<<<<<
 *             delay_param_dict = {}
 *         elif delay_type == 'fixed':
 */
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_NoDelay)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_v_delay_object = ((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_t_8);
    __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1817
 *         if delay_type == 'none' or delay_type == None:
 *             delay_object = NoDelay()
 *             delay_param_dict = {}             # <<<<<<<<<<<<<<
 *         elif delay_type == 'fixed':
 *             self._param_dict_check(delay_param_dict, "delay", "DummyVar_FixedDelay")
 */
    __pyx_t_8 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_delay_param_dict, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1815
 * 
 * 
 *         if delay_type == 'none' or delay_type == None:             # <<<<<<<<<<<<<<
 *             delay_object = NoDelay()
 *             delay_param_dict = {}
 */
    goto __pyx_L26;
  }

  /* "bioscrape/types.pyx":1818
 *             delay_object = NoDelay()
 *             delay_param_dict = {}
 *         elif delay_type == 'fixed':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(delay_param_dict, "delay", "DummyVar_FixedDelay")
 *             delay_object = FixedDelay()
 */
  __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_delay_type, __pyx_n_s_fixed, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1818, __pyx_L1_error)
  if (__pyx_t_9) {

    /* "bioscrape/types.pyx":1819
 *             delay_param_dict = {}
 *         elif delay_type == 'fixed':
 *             self._param_dict_check(delay_param_dict, "delay", "DummyVar_FixedDelay")             # <<<<<<<<<<<<<<
 *             delay_object = FixedDelay()
 *         elif delay_type == 'gaussian':
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_delay_param_dict, __pyx_n_s_delay, __pyx_n_s_DummyVar_FixedDelay};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1819, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_delay_param_dict, __pyx_n_s_delay, __pyx_n_s_DummyVar_FixedDelay};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1819, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_delay_param_dict);
      __Pyx_GIVEREF(__pyx_v_delay_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_10, __pyx_v_delay_param_dict);
      __Pyx_INCREF(__pyx_n_s_delay);
      __Pyx_GIVEREF(__pyx_n_s_delay);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_10, __pyx_n_s_delay);
      __Pyx_INCREF(__pyx_n_s_DummyVar_FixedDelay);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_FixedDelay);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_10, __pyx_n_s_DummyVar_FixedDelay);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1820
 *         elif delay_type == 'fixed':
 *             self._param_dict_check(delay_param_dict, "delay", "DummyVar_FixedDelay")
 *             delay_object = FixedDelay()             # <<<<<<<<<<<<<<
 *         elif delay_type == 'gaussian':
 *             self._param_dict_check(delay_param_dict, "mean", "DummyVar_GaussianDelay")
 */
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_FixedDelay)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_v_delay_object = ((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_t_8);
    __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1818
 *             delay_object = NoDelay()
 *             delay_param_dict = {}
 *         elif delay_type == 'fixed':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(delay_param_dict, "delay", "DummyVar_FixedDelay")
 *             delay_object = FixedDelay()
 */
    goto __pyx_L26;
  }

  /* "bioscrape/types.pyx":1821
 *             self._param_dict_check(delay_param_dict, "delay", "DummyVar_FixedDelay")
 *             delay_object = FixedDelay()
 *         elif delay_type == 'gaussian':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(delay_param_dict, "mean", "DummyVar_GaussianDelay")
 *             self._param_dict_check(delay_param_dict, "std", "DummyVar_GaussianDelay")
 */
  __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_delay_type, __pyx_n_s_gaussian, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1821, __pyx_L1_error)
  if (__pyx_t_9) {

    /* "bioscrape/types.pyx":1822
 *             delay_object = FixedDelay()
 *         elif delay_type == 'gaussian':
 *             self._param_dict_check(delay_param_dict, "mean", "DummyVar_GaussianDelay")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(delay_param_dict, "std", "DummyVar_GaussianDelay")
 *             delay_object = GaussianDelay()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_delay_param_dict, __pyx_n_s_mean, __pyx_n_s_DummyVar_GaussianDelay};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1822, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_delay_param_dict, __pyx_n_s_mean, __pyx_n_s_DummyVar_GaussianDelay};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1822, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_delay_param_dict);
      __Pyx_GIVEREF(__pyx_v_delay_param_dict);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_v_delay_param_dict);
      __Pyx_INCREF(__pyx_n_s_mean);
      __Pyx_GIVEREF(__pyx_n_s_mean);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_n_s_mean);
      __Pyx_INCREF(__pyx_n_s_DummyVar_GaussianDelay);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_GaussianDelay);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_10, __pyx_n_s_DummyVar_GaussianDelay);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1823
 *         elif delay_type == 'gaussian':
 *             self._param_dict_check(delay_param_dict, "mean", "DummyVar_GaussianDelay")
 *             self._param_dict_check(delay_param_dict, "std", "DummyVar_GaussianDelay")             # <<<<<<<<<<<<<<
 *             delay_object = GaussianDelay()
 *         elif delay_type == 'gamma':
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_delay_param_dict, __pyx_n_s_std, __pyx_n_s_DummyVar_GaussianDelay};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1823, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_delay_param_dict, __pyx_n_s_std, __pyx_n_s_DummyVar_GaussianDelay};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1823, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_delay_param_dict);
      __Pyx_GIVEREF(__pyx_v_delay_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_10, __pyx_v_delay_param_dict);
      __Pyx_INCREF(__pyx_n_s_std);
      __Pyx_GIVEREF(__pyx_n_s_std);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_10, __pyx_n_s_std);
      __Pyx_INCREF(__pyx_n_s_DummyVar_GaussianDelay);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_GaussianDelay);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_10, __pyx_n_s_DummyVar_GaussianDelay);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1824
 *             self._param_dict_check(delay_param_dict, "mean", "DummyVar_GaussianDelay")
 *             self._param_dict_check(delay_param_dict, "std", "DummyVar_GaussianDelay")
 *             delay_object = GaussianDelay()             # <<<<<<<<<<<<<<
 *         elif delay_type == 'gamma':
 *             self._param_dict_check(delay_param_dict, "k", "DummyVar_GammaDelay")
 */
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_GaussianDelay)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_v_delay_object = ((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_t_8);
    __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1821
 *             self._param_dict_check(delay_param_dict, "delay", "DummyVar_FixedDelay")
 *             delay_object = FixedDelay()
 *         elif delay_type == 'gaussian':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(delay_param_dict, "mean", "DummyVar_GaussianDelay")
 *             self._param_dict_check(delay_param_dict, "std", "DummyVar_GaussianDelay")
 */
    goto __pyx_L26;
  }

  /* "bioscrape/types.pyx":1825
 *             self._param_dict_check(delay_param_dict, "std", "DummyVar_GaussianDelay")
 *             delay_object = GaussianDelay()
 *         elif delay_type == 'gamma':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(delay_param_dict, "k", "DummyVar_GammaDelay")
 *             self._param_dict_check(delay_param_dict, "theta", "DummyVar_GammaDelay")
 */
  __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_delay_type, __pyx_n_s_gamma, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1825, __pyx_L1_error)
  if (likely(__pyx_t_9)) {

    /* "bioscrape/types.pyx":1826
 *             delay_object = GaussianDelay()
 *         elif delay_type == 'gamma':
 *             self._param_dict_check(delay_param_dict, "k", "DummyVar_GammaDelay")             # <<<<<<<<<<<<<<
 *             self._param_dict_check(delay_param_dict, "theta", "DummyVar_GammaDelay")
 *             delay_object = GammaDelay()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_delay_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_GammaDelay};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_delay_param_dict, __pyx_n_s_k, __pyx_n_s_DummyVar_GammaDelay};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_delay_param_dict);
      __Pyx_GIVEREF(__pyx_v_delay_param_dict);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_v_delay_param_dict);
      __Pyx_INCREF(__pyx_n_s_k);
      __Pyx_GIVEREF(__pyx_n_s_k);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_n_s_k);
      __Pyx_INCREF(__pyx_n_s_DummyVar_GammaDelay);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_GammaDelay);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_10, __pyx_n_s_DummyVar_GammaDelay);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1827
 *         elif delay_type == 'gamma':
 *             self._param_dict_check(delay_param_dict, "k", "DummyVar_GammaDelay")
 *             self._param_dict_check(delay_param_dict, "theta", "DummyVar_GammaDelay")             # <<<<<<<<<<<<<<
 *             delay_object = GammaDelay()
 *         else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_param_dict_check); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_delay_param_dict, __pyx_n_s_theta, __pyx_n_s_DummyVar_GammaDelay};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1827, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_delay_param_dict, __pyx_n_s_theta, __pyx_n_s_DummyVar_GammaDelay};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1827, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_delay_param_dict);
      __Pyx_GIVEREF(__pyx_v_delay_param_dict);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_10, __pyx_v_delay_param_dict);
      __Pyx_INCREF(__pyx_n_s_theta);
      __Pyx_GIVEREF(__pyx_n_s_theta);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_10, __pyx_n_s_theta);
      __Pyx_INCREF(__pyx_n_s_DummyVar_GammaDelay);
      __Pyx_GIVEREF(__pyx_n_s_DummyVar_GammaDelay);
      PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_10, __pyx_n_s_DummyVar_GammaDelay);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1828
 *             self._param_dict_check(delay_param_dict, "k", "DummyVar_GammaDelay")
 *             self._param_dict_check(delay_param_dict, "theta", "DummyVar_GammaDelay")
 *             delay_object = GammaDelay()             # <<<<<<<<<<<<<<
 *         else:
 *             raise SyntaxError('Unknown delay type: ' + delay_type)
 */
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_GammaDelay)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_v_delay_object = ((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_t_8);
    __pyx_t_8 = 0;

    /* "bioscrape/types.pyx":1825
 *             self._param_dict_check(delay_param_dict, "std", "DummyVar_GaussianDelay")
 *             delay_object = GaussianDelay()
 *         elif delay_type == 'gamma':             # <<<<<<<<<<<<<<
 *             self._param_dict_check(delay_param_dict, "k", "DummyVar_GammaDelay")
 *             self._param_dict_check(delay_param_dict, "theta", "DummyVar_GammaDelay")
 */
    goto __pyx_L26;
  }

  /* "bioscrape/types.pyx":1830
 *             delay_object = GammaDelay()
 *         else:
 *             raise SyntaxError('Unknown delay type: ' + delay_type)             # <<<<<<<<<<<<<<
 *         delay_param_dict.pop('type',None)
 * 
 */
  /*else*/ {
    __pyx_t_8 = PyNumber_Add(__pyx_kp_s_Unknown_delay_type, __pyx_v_delay_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1830, __pyx_L1_error)
  }
  __pyx_L26:;

  /* "bioscrape/types.pyx":1831
 *         else:
 *             raise SyntaxError('Unknown delay type: ' + delay_type)
 *         delay_param_dict.pop('type',None)             # <<<<<<<<<<<<<<
 * 
 *         self._add_reaction(reaction_update_dict, prop_object, propensity_param_dict, delay_reaction_update_dict, delay_object, delay_param_dict)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_delay_param_dict, __pyx_n_s_pop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "bioscrape/types.pyx":1833
 *         delay_param_dict.pop('type',None)
 * 
 *         self._add_reaction(reaction_update_dict, prop_object, propensity_param_dict, delay_reaction_update_dict, delay_object, delay_param_dict)             # <<<<<<<<<<<<<<
 *         self.reaction_definitions.append((reactants, products, propensity_type, propensity_param_dict, delay_type, delay_reactants, delay_products, delay_param_dict))
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_reaction); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_reaction_update_dict, __pyx_v_prop_object, __pyx_v_propensity_param_dict, __pyx_v_delay_reaction_update_dict, ((PyObject *)__pyx_v_delay_object), __pyx_v_delay_param_dict};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 6+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_8);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[7] = {__pyx_t_2, __pyx_v_reaction_update_dict, __pyx_v_prop_object, __pyx_v_propensity_param_dict, __pyx_v_delay_reaction_update_dict, ((PyObject *)__pyx_v_delay_object), __pyx_v_delay_param_dict};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 6+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_8);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(6+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_reaction_update_dict);
    __Pyx_GIVEREF(__pyx_v_reaction_update_dict);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_v_reaction_update_dict);
    __Pyx_INCREF(__pyx_v_prop_object);
    __Pyx_GIVEREF(__pyx_v_prop_object);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_v_prop_object);
    __Pyx_INCREF(__pyx_v_propensity_param_dict);
    __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_10, __pyx_v_propensity_param_dict);
    __Pyx_INCREF(__pyx_v_delay_reaction_update_dict);
    __Pyx_GIVEREF(__pyx_v_delay_reaction_update_dict);
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_10, __pyx_v_delay_reaction_update_dict);
    __Pyx_INCREF(((PyObject *)__pyx_v_delay_object));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_delay_object));
    PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_10, ((PyObject *)__pyx_v_delay_object));
    __Pyx_INCREF(__pyx_v_delay_param_dict);
    __Pyx_GIVEREF(__pyx_v_delay_param_dict);
    PyTuple_SET_ITEM(__pyx_t_3, 5+__pyx_t_10, __pyx_v_delay_param_dict);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "bioscrape/types.pyx":1834
 * 
 *         self._add_reaction(reaction_update_dict, prop_object, propensity_param_dict, delay_reaction_update_dict, delay_object, delay_param_dict)
 *         self.reaction_definitions.append((reactants, products, propensity_type, propensity_param_dict, delay_type, delay_reactants, delay_products, delay_param_dict))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->reaction_definitions == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 1834, __pyx_L1_error)
  }
  __pyx_t_8 = PyTuple_New(8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_reactants);
  __Pyx_GIVEREF(__pyx_v_reactants);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_reactants);
  __Pyx_INCREF(__pyx_v_products);
  __Pyx_GIVEREF(__pyx_v_products);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_products);
  __Pyx_INCREF(__pyx_v_propensity_type);
  __Pyx_GIVEREF(__pyx_v_propensity_type);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_v_propensity_type);
  __Pyx_INCREF(__pyx_v_propensity_param_dict);
  __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_v_propensity_param_dict);
  __Pyx_INCREF(__pyx_v_delay_type);
  __Pyx_GIVEREF(__pyx_v_delay_type);
  PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_v_delay_type);
  __Pyx_INCREF(__pyx_v_delay_reactants);
  __Pyx_GIVEREF(__pyx_v_delay_reactants);
  PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_v_delay_reactants);
  __Pyx_INCREF(__pyx_v_delay_products);
  __Pyx_GIVEREF(__pyx_v_delay_products);
  PyTuple_SET_ITEM(__pyx_t_8, 6, __pyx_v_delay_products);
  __Pyx_INCREF(__pyx_v_delay_param_dict);
  __Pyx_GIVEREF(__pyx_v_delay_param_dict);
  PyTuple_SET_ITEM(__pyx_t_8, 7, __pyx_v_delay_param_dict);
  __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_self->reaction_definitions, __pyx_t_8); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "bioscrape/types.pyx":1736
 *     #   delay_products: a list of delay reaction products specie names (strings)
 *     #   delay_param_dict: a dictionary of the parameters for the delay distribution
 *     def create_reaction(self, reactants, products, propensity_type,             # <<<<<<<<<<<<<<
 *                         propensity_param_dict, delay_type = None,
 *                         delay_reactants = None, delay_products = None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.Model.create_reaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_reaction_update_dict);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_reactant_string);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_prop_object);
  __Pyx_XDECREF(__pyx_v_delay_reaction_update_dict);
  __Pyx_XDECREF((PyObject *)__pyx_v_delay_object);
  __Pyx_XDECREF(__pyx_v_propensity_param_dict);
  __Pyx_XDECREF(__pyx_v_delay_reactants);
  __Pyx_XDECREF(__pyx_v_delay_products);
  __Pyx_XDECREF(__pyx_v_delay_param_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1838
 * 
 * 
 *     def _add_param(self, param_name):             # <<<<<<<<<<<<<<
 *         """
 *         Helper function for putting together the parameter vector (converting parameter names to indices in vector)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_23_add_param(PyObject *__pyx_v_self, PyObject *__pyx_v_param_name); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_22_add_param[] = "\n        Helper function for putting together the parameter vector (converting parameter names to indices in vector)\n\n        If the parameter name has already been seen, then do nothing. Otherwise, give it a new index, and increase the\n        next_params_index by 1.\n\n        :param param: (str) the parameter name\n        :return: None\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_23_add_param(PyObject *__pyx_v_self, PyObject *__pyx_v_param_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_param (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_22_add_param(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((PyObject *)__pyx_v_param_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_22_add_param(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("_add_param", 0);

  /* "bioscrape/types.pyx":1848
 *         :return: None
 *         """
 *         self.initialized = False             # <<<<<<<<<<<<<<
 *         if param_name in self.species2index:
 *             raise ValueError(f"param_name {param_name} is the same as the name of a species!")
 */
  __pyx_v_self->initialized = 0;

  /* "bioscrape/types.pyx":1849
 *         """
 *         self.initialized = False
 *         if param_name in self.species2index:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"param_name {param_name} is the same as the name of a species!")
 *         if param_name not in self.params2index:
 */
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1849, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_param_name, __pyx_v_self->species2index, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1849, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "bioscrape/types.pyx":1850
 *         self.initialized = False
 *         if param_name in self.species2index:
 *             raise ValueError(f"param_name {param_name} is the same as the name of a species!")             # <<<<<<<<<<<<<<
 *         if param_name not in self.params2index:
 *             self.params2index[param_name] = self._next_params_index
 */
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_param_name);
    __pyx_t_4 += 11;
    __Pyx_GIVEREF(__pyx_kp_u_param_name);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_param_name);
    __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_param_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_the_same_as_the_name_of_a_sp);
    __pyx_t_4 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_is_the_same_as_the_name_of_a_sp);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_is_the_same_as_the_name_of_a_sp);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1850, __pyx_L1_error)

    /* "bioscrape/types.pyx":1849
 *         """
 *         self.initialized = False
 *         if param_name in self.species2index:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"param_name {param_name} is the same as the name of a species!")
 *         if param_name not in self.params2index:
 */
  }

  /* "bioscrape/types.pyx":1851
 *         if param_name in self.species2index:
 *             raise ValueError(f"param_name {param_name} is the same as the name of a species!")
 *         if param_name not in self.params2index:             # <<<<<<<<<<<<<<
 *             self.params2index[param_name] = self._next_params_index
 *             self._next_params_index += 1
 */
  if (unlikely(__pyx_v_self->params2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1851, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_param_name, __pyx_v_self->params2index, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1851, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1852
 *             raise ValueError(f"param_name {param_name} is the same as the name of a species!")
 *         if param_name not in self.params2index:
 *             self.params2index[param_name] = self._next_params_index             # <<<<<<<<<<<<<<
 *             self._next_params_index += 1
 *             self.params_values = np.concatenate((self.params_values, np.array([np.nan])))
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_next_params_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_self->params2index == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1852, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->params2index, __pyx_v_param_name, __pyx_t_3) < 0)) __PYX_ERR(0, 1852, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":1853
 *         if param_name not in self.params2index:
 *             self.params2index[param_name] = self._next_params_index
 *             self._next_params_index += 1             # <<<<<<<<<<<<<<
 *             self.params_values = np.concatenate((self.params_values, np.array([np.nan])))
 * 
 */
    __pyx_v_self->_next_params_index = (__pyx_v_self->_next_params_index + 1);

    /* "bioscrape/types.pyx":1854
 *             self.params2index[param_name] = self._next_params_index
 *             self._next_params_index += 1
 *             self.params_values = np.concatenate((self.params_values, np.array([np.nan])))             # <<<<<<<<<<<<<<
 * 
 *     #Creates a rule and adds it to the model.
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_nan); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->params_values));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->params_values));
    PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_v_self->params_values));
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->params_values);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->params_values));
    __pyx_v_self->params_values = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":1851
 *         if param_name in self.species2index:
 *             raise ValueError(f"param_name {param_name} is the same as the name of a species!")
 *         if param_name not in self.params2index:             # <<<<<<<<<<<<<<
 *             self.params2index[param_name] = self._next_params_index
 *             self._next_params_index += 1
 */
  }

  /* "bioscrape/types.pyx":1838
 * 
 * 
 *     def _add_param(self, param_name):             # <<<<<<<<<<<<<<
 *         """
 *         Helper function for putting together the parameter vector (converting parameter names to indices in vector)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("bioscrape.types.Model._add_param", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1862
 *     #       NOTE: the only attributes used by additive/assignment rules are 'equation'
 *     #Rule Types Supported:
 *     def create_rule(self, rule_type, rule_attributes, rule_frequency = "repeated", input_printout = False):             # <<<<<<<<<<<<<<
 *         if input_printout:
 *             print("Rule Created with \n\trule_type = "+str(rule_type)+"\n\trule_attributes="+str(rule_attributes)+"\n\trule_frequency="+str(rule_frequency))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_25create_rule(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_25create_rule(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rule_type = 0;
  PyObject *__pyx_v_rule_attributes = 0;
  PyObject *__pyx_v_rule_frequency = 0;
  PyObject *__pyx_v_input_printout = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_rule (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rule_type,&__pyx_n_s_rule_attributes,&__pyx_n_s_rule_frequency,&__pyx_n_s_input_printout,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)__pyx_n_s_repeated);
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rule_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rule_attributes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_rule", 0, 2, 4, 1); __PYX_ERR(0, 1862, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rule_frequency);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input_printout);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_rule") < 0)) __PYX_ERR(0, 1862, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rule_type = values[0];
    __pyx_v_rule_attributes = values[1];
    __pyx_v_rule_frequency = values[2];
    __pyx_v_input_printout = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_rule", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1862, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Model.create_rule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_24create_rule(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_rule_type, __pyx_v_rule_attributes, __pyx_v_rule_frequency, __pyx_v_input_printout);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_24create_rule(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_rule_type, PyObject *__pyx_v_rule_attributes, PyObject *__pyx_v_rule_frequency, PyObject *__pyx_v_input_printout) {
  struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v_rule_object = NULL;
  PyObject *__pyx_v_species_names = NULL;
  PyObject *__pyx_v_params_names = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("create_rule", 0);
  __Pyx_INCREF(__pyx_v_rule_frequency);

  /* "bioscrape/types.pyx":1863
 *     #Rule Types Supported:
 *     def create_rule(self, rule_type, rule_attributes, rule_frequency = "repeated", input_printout = False):
 *         if input_printout:             # <<<<<<<<<<<<<<
 *             print("Rule Created with \n\trule_type = "+str(rule_type)+"\n\trule_attributes="+str(rule_attributes)+"\n\trule_frequency="+str(rule_frequency))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_input_printout); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1863, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1864
 *     def create_rule(self, rule_type, rule_attributes, rule_frequency = "repeated", input_printout = False):
 *         if input_printout:
 *             print("Rule Created with \n\trule_type = "+str(rule_type)+"\n\trule_attributes="+str(rule_attributes)+"\n\trule_frequency="+str(rule_frequency))             # <<<<<<<<<<<<<<
 * 
 *         self.initialized = False
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_rule_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Rule_Created_with_rule_type, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_rule_attributes_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_rule_attributes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_rule_frequency_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_rule_frequency); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1863
 *     #Rule Types Supported:
 *     def create_rule(self, rule_type, rule_attributes, rule_frequency = "repeated", input_printout = False):
 *         if input_printout:             # <<<<<<<<<<<<<<
 *             print("Rule Created with \n\trule_type = "+str(rule_type)+"\n\trule_attributes="+str(rule_attributes)+"\n\trule_frequency="+str(rule_frequency))
 * 
 */
  }

  /* "bioscrape/types.pyx":1866
 *             print("Rule Created with \n\trule_type = "+str(rule_type)+"\n\trule_attributes="+str(rule_attributes)+"\n\trule_frequency="+str(rule_frequency))
 * 
 *         self.initialized = False             # <<<<<<<<<<<<<<
 * 
 *         # Parse the rule by rule type
 */
  __pyx_v_self->initialized = 0;

  /* "bioscrape/types.pyx":1869
 * 
 *         # Parse the rule by rule type
 *         if rule_type == 'additive':             # <<<<<<<<<<<<<<
 *             rule_object = AdditiveAssignmentRule()
 *         elif rule_type == 'assignment':
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_rule_type, __pyx_n_s_additive, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1869, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1870
 *         # Parse the rule by rule type
 *         if rule_type == 'additive':
 *             rule_object = AdditiveAssignmentRule()             # <<<<<<<<<<<<<<
 *         elif rule_type == 'assignment':
 *             rule_object = GeneralAssignmentRule()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_AdditiveAssignmentRule)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_rule_object = ((struct __pyx_obj_9bioscrape_5types_Rule *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1869
 * 
 *         # Parse the rule by rule type
 *         if rule_type == 'additive':             # <<<<<<<<<<<<<<
 *             rule_object = AdditiveAssignmentRule()
 *         elif rule_type == 'assignment':
 */
    goto __pyx_L4;
  }

  /* "bioscrape/types.pyx":1871
 *         if rule_type == 'additive':
 *             rule_object = AdditiveAssignmentRule()
 *         elif rule_type == 'assignment':             # <<<<<<<<<<<<<<
 *             rule_object = GeneralAssignmentRule()
 *         elif rule_type == "ode":
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_rule_type, __pyx_n_s_assignment, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1871, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":1872
 *             rule_object = AdditiveAssignmentRule()
 *         elif rule_type == 'assignment':
 *             rule_object = GeneralAssignmentRule()             # <<<<<<<<<<<<<<
 *         elif rule_type == "ode":
 *             rule_frequency = "dt"
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_GeneralAssignmentRule)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_rule_object = ((struct __pyx_obj_9bioscrape_5types_Rule *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1871
 *         if rule_type == 'additive':
 *             rule_object = AdditiveAssignmentRule()
 *         elif rule_type == 'assignment':             # <<<<<<<<<<<<<<
 *             rule_object = GeneralAssignmentRule()
 *         elif rule_type == "ode":
 */
    goto __pyx_L4;
  }

  /* "bioscrape/types.pyx":1873
 *         elif rule_type == 'assignment':
 *             rule_object = GeneralAssignmentRule()
 *         elif rule_type == "ode":             # <<<<<<<<<<<<<<
 *             rule_frequency = "dt"
 *             rule_object = GeneralODERule()
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_rule_type, __pyx_n_s_ode, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1873, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "bioscrape/types.pyx":1874
 *             rule_object = GeneralAssignmentRule()
 *         elif rule_type == "ode":
 *             rule_frequency = "dt"             # <<<<<<<<<<<<<<
 *             rule_object = GeneralODERule()
 *         else:
 */
    __Pyx_INCREF(__pyx_n_s_dt);
    __Pyx_DECREF_SET(__pyx_v_rule_frequency, __pyx_n_s_dt);

    /* "bioscrape/types.pyx":1875
 *         elif rule_type == "ode":
 *             rule_frequency = "dt"
 *             rule_object = GeneralODERule()             # <<<<<<<<<<<<<<
 *         else:
 *             raise SyntaxError('Invalid type of Rule: ' + rule_type)
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_GeneralODERule)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_rule_object = ((struct __pyx_obj_9bioscrape_5types_Rule *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1873
 *         elif rule_type == 'assignment':
 *             rule_object = GeneralAssignmentRule()
 *         elif rule_type == "ode":             # <<<<<<<<<<<<<<
 *             rule_frequency = "dt"
 *             rule_object = GeneralODERule()
 */
    goto __pyx_L4;
  }

  /* "bioscrape/types.pyx":1877
 *             rule_object = GeneralODERule()
 *         else:
 *             raise SyntaxError('Invalid type of Rule: ' + rule_type)             # <<<<<<<<<<<<<<
 * 
 *         # Add species and params to model
 */
  /*else*/ {
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Invalid_type_of_Rule, __pyx_v_rule_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1877, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1877, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1877, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "bioscrape/types.pyx":1880
 * 
 *         # Add species and params to model
 *         species_names, params_names = rule_object.get_species_and_parameters(rule_attributes, species2index = self.species2index, params2index=self.params2index)             # <<<<<<<<<<<<<<
 *         for s in species_names: pass #self._add_species(s) No species should be added here
 *         for p in params_names: self._add_param(p)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rule_object), __pyx_n_s_get_species_and_parameters); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_rule_attributes);
  __Pyx_GIVEREF(__pyx_v_rule_attributes);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_rule_attributes);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_species2index, __pyx_v_self->species2index) < 0) __PYX_ERR(0, 1880, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_params2index, __pyx_v_self->params2index) < 0) __PYX_ERR(0, 1880, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1880, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_6(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1880, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1880, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_species_names = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_params_names = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":1881
 *         # Add species and params to model
 *         species_names, params_names = rule_object.get_species_and_parameters(rule_attributes, species2index = self.species2index, params2index=self.params2index)
 *         for s in species_names: pass #self._add_species(s) No species should be added here             # <<<<<<<<<<<<<<
 *         for p in params_names: self._add_param(p)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_species_names)) || PyTuple_CheckExact(__pyx_v_species_names)) {
    __pyx_t_5 = __pyx_v_species_names; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_species_names); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1881, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1881, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1881, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1881, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1881, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1881, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_2);
    __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":1882
 *         species_names, params_names = rule_object.get_species_and_parameters(rule_attributes, species2index = self.species2index, params2index=self.params2index)
 *         for s in species_names: pass #self._add_species(s) No species should be added here
 *         for p in params_names: self._add_param(p)             # <<<<<<<<<<<<<<
 * 
 *         # initialize the rule
 */
  if (likely(PyList_CheckExact(__pyx_v_params_names)) || PyTuple_CheckExact(__pyx_v_params_names)) {
    __pyx_t_5 = __pyx_v_params_names; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_params_names); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1882, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1882, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1882, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1882, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1882, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1882, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_param); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_p) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_p);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":1885
 * 
 *         # initialize the rule
 *         if 'type' in rule_attributes:             # <<<<<<<<<<<<<<
 *             rule_attributes.pop('type')
 *         rule_object.initialize(rule_attributes,self.species2index,self.params2index, rule_frequency = rule_frequency)
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_type, __pyx_v_rule_attributes, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __pyx_t_9 = (__pyx_t_1 != 0);
  if (__pyx_t_9) {

    /* "bioscrape/types.pyx":1886
 *         # initialize the rule
 *         if 'type' in rule_attributes:
 *             rule_attributes.pop('type')             # <<<<<<<<<<<<<<
 *         rule_object.initialize(rule_attributes,self.species2index,self.params2index, rule_frequency = rule_frequency)
 *         # Add the rule to the right place
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rule_attributes, __pyx_n_s_pop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_type);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "bioscrape/types.pyx":1885
 * 
 *         # initialize the rule
 *         if 'type' in rule_attributes:             # <<<<<<<<<<<<<<
 *             rule_attributes.pop('type')
 *         rule_object.initialize(rule_attributes,self.species2index,self.params2index, rule_frequency = rule_frequency)
 */
  }

  /* "bioscrape/types.pyx":1887
 *         if 'type' in rule_attributes:
 *             rule_attributes.pop('type')
 *         rule_object.initialize(rule_attributes,self.species2index,self.params2index, rule_frequency = rule_frequency)             # <<<<<<<<<<<<<<
 *         # Add the rule to the right place
 *         self.repeat_rules.append(rule_object)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rule_object), __pyx_n_s_initialize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_rule_attributes);
  __Pyx_GIVEREF(__pyx_v_rule_attributes);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_rule_attributes);
  __Pyx_INCREF(__pyx_v_self->species2index);
  __Pyx_GIVEREF(__pyx_v_self->species2index);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self->species2index);
  __Pyx_INCREF(__pyx_v_self->params2index);
  __Pyx_GIVEREF(__pyx_v_self->params2index);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_self->params2index);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_rule_frequency, __pyx_v_rule_frequency) < 0) __PYX_ERR(0, 1887, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":1889
 *         rule_object.initialize(rule_attributes,self.species2index,self.params2index, rule_frequency = rule_frequency)
 *         # Add the rule to the right place
 *         self.repeat_rules.append(rule_object)             # <<<<<<<<<<<<<<
 *         self.rule_definitions.append((rule_type, rule_attributes, rule_frequency))
 * 
 */
  if (unlikely(__pyx_v_self->repeat_rules == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 1889, __pyx_L1_error)
  }
  __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_self->repeat_rules, ((PyObject *)__pyx_v_rule_object)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 1889, __pyx_L1_error)

  /* "bioscrape/types.pyx":1890
 *         # Add the rule to the right place
 *         self.repeat_rules.append(rule_object)
 *         self.rule_definitions.append((rule_type, rule_attributes, rule_frequency))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->rule_definitions == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 1890, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_rule_type);
  __Pyx_GIVEREF(__pyx_v_rule_type);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_rule_type);
  __Pyx_INCREF(__pyx_v_rule_attributes);
  __Pyx_GIVEREF(__pyx_v_rule_attributes);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_rule_attributes);
  __Pyx_INCREF(__pyx_v_rule_frequency);
  __Pyx_GIVEREF(__pyx_v_rule_frequency);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_rule_frequency);
  __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_self->rule_definitions, __pyx_t_4); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":1862
 *     #       NOTE: the only attributes used by additive/assignment rules are 'equation'
 *     #Rule Types Supported:
 *     def create_rule(self, rule_type, rule_attributes, rule_frequency = "repeated", input_printout = False):             # <<<<<<<<<<<<<<
 *         if input_printout:
 *             print("Rule Created with \n\trule_type = "+str(rule_type)+"\n\trule_attributes="+str(rule_attributes)+"\n\trule_frequency="+str(rule_frequency))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Model.create_rule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rule_object);
  __Pyx_XDECREF(__pyx_v_species_names);
  __Pyx_XDECREF(__pyx_v_params_names);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_rule_frequency);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1894
 * 
 *     #Sets the value of a parameter in the model
 *     def set_parameter(self, param_name, param_value):             # <<<<<<<<<<<<<<
 *         if param_name not in self.params2index:
 *             logging.info('Warning! parameter '+ param_name+" does not show up in any currently defined reactions or rules.")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_27set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_27set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_name = 0;
  PyObject *__pyx_v_param_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_name_2,&__pyx_n_s_param_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, 1); __PYX_ERR(0, 1894, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_parameter") < 0)) __PYX_ERR(0, 1894, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_param_name = values[0];
    __pyx_v_param_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1894, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Model.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_26set_parameter(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_param_name, __pyx_v_param_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_26set_parameter(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_name, PyObject *__pyx_v_param_value) {
  PyObject *__pyx_v_param_index = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("set_parameter", 0);

  /* "bioscrape/types.pyx":1895
 *     #Sets the value of a parameter in the model
 *     def set_parameter(self, param_name, param_value):
 *         if param_name not in self.params2index:             # <<<<<<<<<<<<<<
 *             logging.info('Warning! parameter '+ param_name+" does not show up in any currently defined reactions or rules.")
 *             self._add_param(param_name)
 */
  if (unlikely(__pyx_v_self->params2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1895, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_param_name, __pyx_v_self->params2index, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1895, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "bioscrape/types.pyx":1896
 *     def set_parameter(self, param_name, param_value):
 *         if param_name not in self.params2index:
 *             logging.info('Warning! parameter '+ param_name+" does not show up in any currently defined reactions or rules.")             # <<<<<<<<<<<<<<
 *             self._add_param(param_name)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Warning_parameter, __pyx_v_param_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_does_not_show_up_in_any_current); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":1897
 *         if param_name not in self.params2index:
 *             logging.info('Warning! parameter '+ param_name+" does not show up in any currently defined reactions or rules.")
 *             self._add_param(param_name)             # <<<<<<<<<<<<<<
 * 
 *         param_index = self.params2index[param_name]
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_param); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1897, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_param_name) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_param_name);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1897, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":1895
 *     #Sets the value of a parameter in the model
 *     def set_parameter(self, param_name, param_value):
 *         if param_name not in self.params2index:             # <<<<<<<<<<<<<<
 *             logging.info('Warning! parameter '+ param_name+" does not show up in any currently defined reactions or rules.")
 *             self._add_param(param_name)
 */
  }

  /* "bioscrape/types.pyx":1899
 *             self._add_param(param_name)
 * 
 *         param_index = self.params2index[param_name]             # <<<<<<<<<<<<<<
 *         self.params_values[param_index] = param_value
 * 
 */
  if (unlikely(__pyx_v_self->params2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1899, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->params2index, __pyx_v_param_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_param_index = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":1900
 * 
 *         param_index = self.params2index[param_name]
 *         self.params_values[param_index] = param_value             # <<<<<<<<<<<<<<
 * 
 *     def create_parameter(self, param_name, param_value):
 */
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->params_values), __pyx_v_param_index, __pyx_v_param_value) < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)

  /* "bioscrape/types.pyx":1894
 * 
 *     #Sets the value of a parameter in the model
 *     def set_parameter(self, param_name, param_value):             # <<<<<<<<<<<<<<
 *         if param_name not in self.params2index:
 *             logging.info('Warning! parameter '+ param_name+" does not show up in any currently defined reactions or rules.")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bioscrape.types.Model.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_param_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1902
 *         self.params_values[param_index] = param_value
 * 
 *     def create_parameter(self, param_name, param_value):             # <<<<<<<<<<<<<<
 *         self._add_param(param_name)
 *         self.set_parameter(param_name, param_value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_29create_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_29create_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_param_name = 0;
  PyObject *__pyx_v_param_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param_name_2,&__pyx_n_s_param_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_name_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_parameter", 1, 2, 2, 1); __PYX_ERR(0, 1902, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_parameter") < 0)) __PYX_ERR(0, 1902, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_param_name = values[0];
    __pyx_v_param_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1902, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Model.create_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_28create_parameter(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_param_name, __pyx_v_param_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_28create_parameter(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_name, PyObject *__pyx_v_param_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("create_parameter", 0);

  /* "bioscrape/types.pyx":1903
 * 
 *     def create_parameter(self, param_name, param_value):
 *         self._add_param(param_name)             # <<<<<<<<<<<<<<
 *         self.set_parameter(param_name, param_value)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_param); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_param_name) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_param_name);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1904
 *     def create_parameter(self, param_name, param_value):
 *         self._add_param(param_name)
 *         self.set_parameter(param_name, param_value)             # <<<<<<<<<<<<<<
 * 
 *     #Checks that all parameters have values
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_parameter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_param_name, __pyx_v_param_value};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_param_name, __pyx_v_param_value};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_param_name);
    __Pyx_GIVEREF(__pyx_v_param_name);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_param_name);
    __Pyx_INCREF(__pyx_v_param_value);
    __Pyx_GIVEREF(__pyx_v_param_value);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_param_value);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1902
 *         self.params_values[param_index] = param_value
 * 
 *     def create_parameter(self, param_name, param_value):             # <<<<<<<<<<<<<<
 *         self._add_param(param_name)
 *         self.set_parameter(param_name, param_value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Model.create_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1907
 * 
 *     #Checks that all parameters have values
 *     def check_parameters(self):             # <<<<<<<<<<<<<<
 *         error_string = "Unspecified Parameters: "
 *         unspecified_parameters = False
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_31check_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_31check_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_parameters (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_30check_parameters(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_30check_parameters(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_v_error_string = NULL;
  int __pyx_v_unspecified_parameters;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  __Pyx_RefNannySetupContext("check_parameters", 0);

  /* "bioscrape/types.pyx":1908
 *     #Checks that all parameters have values
 *     def check_parameters(self):
 *         error_string = "Unspecified Parameters: "             # <<<<<<<<<<<<<<
 *         unspecified_parameters = False
 *         for p in self.params2index:
 */
  __Pyx_INCREF(__pyx_kp_s_Unspecified_Parameters);
  __pyx_v_error_string = __pyx_kp_s_Unspecified_Parameters;

  /* "bioscrape/types.pyx":1909
 *     def check_parameters(self):
 *         error_string = "Unspecified Parameters: "
 *         unspecified_parameters = False             # <<<<<<<<<<<<<<
 *         for p in self.params2index:
 *             i = self.params2index[p]
 */
  __pyx_v_unspecified_parameters = 0;

  /* "bioscrape/types.pyx":1910
 *         error_string = "Unspecified Parameters: "
 *         unspecified_parameters = False
 *         for p in self.params2index:             # <<<<<<<<<<<<<<
 *             i = self.params2index[p]
 *             if np.isnan(self.params_values[i]):
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_self->params2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1910, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_self->params2index, 1, ((PyObject *)NULL), (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, NULL, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "bioscrape/types.pyx":1911
 *         unspecified_parameters = False
 *         for p in self.params2index:
 *             i = self.params2index[p]             # <<<<<<<<<<<<<<
 *             if np.isnan(self.params_values[i]):
 *                 unspecified_parameters = True
 */
    if (unlikely(__pyx_v_self->params2index == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1911, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->params2index, __pyx_v_p); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "bioscrape/types.pyx":1912
 *         for p in self.params2index:
 *             i = self.params2index[p]
 *             if np.isnan(self.params_values[i]):             # <<<<<<<<<<<<<<
 *                 unspecified_parameters = True
 *                 error_string += p+"="+str(self.params_values[i])+', '
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_isnan); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->params_values), __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1912, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_10) {

      /* "bioscrape/types.pyx":1913
 *             i = self.params2index[p]
 *             if np.isnan(self.params_values[i]):
 *                 unspecified_parameters = True             # <<<<<<<<<<<<<<
 *                 error_string += p+"="+str(self.params_values[i])+', '
 * 
 */
      __pyx_v_unspecified_parameters = 1;

      /* "bioscrape/types.pyx":1914
 *             if np.isnan(self.params_values[i]):
 *                 unspecified_parameters = True
 *                 error_string += p+"="+str(self.params_values[i])+', '             # <<<<<<<<<<<<<<
 * 
 *         if unspecified_parameters:
 */
      __pyx_t_5 = PyNumber_Add(__pyx_v_p, __pyx_kp_s__18); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->params_values), __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_kp_s__31); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_error_string, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_error_string, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "bioscrape/types.pyx":1912
 *         for p in self.params2index:
 *             i = self.params2index[p]
 *             if np.isnan(self.params_values[i]):             # <<<<<<<<<<<<<<
 *                 unspecified_parameters = True
 *                 error_string += p+"="+str(self.params_values[i])+', '
 */
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1916
 *                 error_string += p+"="+str(self.params_values[i])+', '
 * 
 *         if unspecified_parameters:             # <<<<<<<<<<<<<<
 *             error_string += f" (params2index is {self.params2index}; param_values is {self.params_values})"
 *             raise ValueError(error_string[:-2])
 */
  __pyx_t_10 = (__pyx_v_unspecified_parameters != 0);
  if (unlikely(__pyx_t_10)) {

    /* "bioscrape/types.pyx":1917
 * 
 *         if unspecified_parameters:
 *             error_string += f" (params2index is {self.params2index}; param_values is {self.params_values})"             # <<<<<<<<<<<<<<
 *             raise ValueError(error_string[:-2])
 * 
 */
    __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_11 = 127;
    __Pyx_INCREF(__pyx_kp_u_params2index_is);
    __pyx_t_3 += 18;
    __Pyx_GIVEREF(__pyx_kp_u_params2index_is);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_params2index_is);
    __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_self->params2index, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_11;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_param_values_is);
    __pyx_t_3 += 18;
    __Pyx_GIVEREF(__pyx_kp_u_param_values_is);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_param_values_is);
    __pyx_t_8 = __Pyx_PyObject_FormatSimple(((PyObject *)__pyx_v_self->params_values), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_11;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u__32);
    __pyx_t_3 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__32);
    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__32);
    __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_3, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_error_string, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF_SET(__pyx_v_error_string, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":1918
 *         if unspecified_parameters:
 *             error_string += f" (params2index is {self.params2index}; param_values is {self.params_values})"
 *             raise ValueError(error_string[:-2])             # <<<<<<<<<<<<<<
 * 
 *     #Checks that species' values are all set. Unset values default to 0 and warning is raised.
 */
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_error_string, 0, -2L, NULL, NULL, &__pyx_slice__33, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1918, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1918, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 1918, __pyx_L1_error)

    /* "bioscrape/types.pyx":1916
 *                 error_string += p+"="+str(self.params_values[i])+', '
 * 
 *         if unspecified_parameters:             # <<<<<<<<<<<<<<
 *             error_string += f" (params2index is {self.params2index}; param_values is {self.params_values})"
 *             raise ValueError(error_string[:-2])
 */
  }

  /* "bioscrape/types.pyx":1907
 * 
 *     #Checks that all parameters have values
 *     def check_parameters(self):             # <<<<<<<<<<<<<<
 *         error_string = "Unspecified Parameters: "
 *         unspecified_parameters = False
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.Model.check_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error_string);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1921
 * 
 *     #Checks that species' values are all set. Unset values default to 0 and warning is raised.
 *     def check_species(self):             # <<<<<<<<<<<<<<
 *         uninitialized_species = False
 *         warning_txt = "The following species are uninitialized and their value has been defaulted to 0: "
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_33check_species(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_33check_species(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_species (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_32check_species(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_32check_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  int __pyx_v_uninitialized_species;
  PyObject *__pyx_v_warning_txt = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("check_species", 0);

  /* "bioscrape/types.pyx":1922
 *     #Checks that species' values are all set. Unset values default to 0 and warning is raised.
 *     def check_species(self):
 *         uninitialized_species = False             # <<<<<<<<<<<<<<
 *         warning_txt = "The following species are uninitialized and their value has been defaulted to 0: "
 *         for s in self.species2index.keys():
 */
  __pyx_v_uninitialized_species = 0;

  /* "bioscrape/types.pyx":1923
 *     def check_species(self):
 *         uninitialized_species = False
 *         warning_txt = "The following species are uninitialized and their value has been defaulted to 0: "             # <<<<<<<<<<<<<<
 *         for s in self.species2index.keys():
 *             i = self.species2index[s]
 */
  __Pyx_INCREF(__pyx_kp_s_The_following_species_are_uninit);
  __pyx_v_warning_txt = __pyx_kp_s_The_following_species_are_uninit;

  /* "bioscrape/types.pyx":1924
 *         uninitialized_species = False
 *         warning_txt = "The following species are uninitialized and their value has been defaulted to 0: "
 *         for s in self.species2index.keys():             # <<<<<<<<<<<<<<
 *             i = self.species2index[s]
 *             if self.species_values[i] == -1:
 */
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 1924, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_self->species2index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1924, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1924, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1924, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1924, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1924, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1924, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1924, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":1925
 *         warning_txt = "The following species are uninitialized and their value has been defaulted to 0: "
 *         for s in self.species2index.keys():
 *             i = self.species2index[s]             # <<<<<<<<<<<<<<
 *             if self.species_values[i] == -1:
 *                 uninitialized_species = True
 */
    if (unlikely(__pyx_v_self->species2index == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1925, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->species2index, __pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1925, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":1926
 *         for s in self.species2index.keys():
 *             i = self.species2index[s]
 *             if self.species_values[i] == -1:             # <<<<<<<<<<<<<<
 *                 uninitialized_species = True
 *                 warning_txt += s+", "
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->species_values), __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1926, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1926, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1926, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "bioscrape/types.pyx":1927
 *             i = self.species2index[s]
 *             if self.species_values[i] == -1:
 *                 uninitialized_species = True             # <<<<<<<<<<<<<<
 *                 warning_txt += s+", "
 *                 self.species_values[i] = 0
 */
      __pyx_v_uninitialized_species = 1;

      /* "bioscrape/types.pyx":1928
 *             if self.species_values[i] == -1:
 *                 uninitialized_species = True
 *                 warning_txt += s+", "             # <<<<<<<<<<<<<<
 *                 self.species_values[i] = 0
 *         if uninitialized_species:
 */
      __pyx_t_5 = PyNumber_Add(__pyx_v_s, __pyx_kp_s__31); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_warning_txt, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_warning_txt, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "bioscrape/types.pyx":1929
 *                 uninitialized_species = True
 *                 warning_txt += s+", "
 *                 self.species_values[i] = 0             # <<<<<<<<<<<<<<
 *         if uninitialized_species:
 *             logging.info(warning_txt)
 */
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->species_values), __pyx_v_i, __pyx_int_0) < 0)) __PYX_ERR(0, 1929, __pyx_L1_error)

      /* "bioscrape/types.pyx":1926
 *         for s in self.species2index.keys():
 *             i = self.species2index[s]
 *             if self.species_values[i] == -1:             # <<<<<<<<<<<<<<
 *                 uninitialized_species = True
 *                 warning_txt += s+", "
 */
    }

    /* "bioscrape/types.pyx":1924
 *         uninitialized_species = False
 *         warning_txt = "The following species are uninitialized and their value has been defaulted to 0: "
 *         for s in self.species2index.keys():             # <<<<<<<<<<<<<<
 *             i = self.species2index[s]
 *             if self.species_values[i] == -1:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":1930
 *                 warning_txt += s+", "
 *                 self.species_values[i] = 0
 *         if uninitialized_species:             # <<<<<<<<<<<<<<
 *             logging.info(warning_txt)
 * 
 */
  __pyx_t_6 = (__pyx_v_uninitialized_species != 0);
  if (__pyx_t_6) {

    /* "bioscrape/types.pyx":1931
 *                 self.species_values[i] = 0
 *         if uninitialized_species:
 *             logging.info(warning_txt)             # <<<<<<<<<<<<<<
 * 
 *     #Checks if the dictionary dic contains the keyword key.
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_v_warning_txt) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_warning_txt);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":1930
 *                 warning_txt += s+", "
 *                 self.species_values[i] = 0
 *         if uninitialized_species:             # <<<<<<<<<<<<<<
 *             logging.info(warning_txt)
 * 
 */
  }

  /* "bioscrape/types.pyx":1921
 * 
 *     #Checks that species' values are all set. Unset values default to 0 and warning is raised.
 *     def check_species(self):             # <<<<<<<<<<<<<<
 *         uninitialized_species = False
 *         warning_txt = "The following species are uninitialized and their value has been defaulted to 0: "
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Model.check_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_warning_txt);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1937
 *     #if dic[key] = float (or a string that can be cast to a float without an error):
 *     #   create a dummy parameter and set its value to float then set dict[key] = dummy_param
 *     def _param_dict_check(self, dic, key, param_object_name):             # <<<<<<<<<<<<<<
 *         if key not in dic:
 *             raise ValueError("param dictionary does not contain required key: "+str(key)+" for param object "+param_object_name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_35_param_dict_check(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_35_param_dict_check(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dic = 0;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_param_object_name = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_param_dict_check (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dic,&__pyx_n_s_key,&__pyx_n_s_param_object_name,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dic)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_param_dict_check", 1, 3, 3, 1); __PYX_ERR(0, 1937, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param_object_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_param_dict_check", 1, 3, 3, 2); __PYX_ERR(0, 1937, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_param_dict_check") < 0)) __PYX_ERR(0, 1937, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dic = values[0];
    __pyx_v_key = values[1];
    __pyx_v_param_object_name = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_param_dict_check", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1937, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Model._param_dict_check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_34_param_dict_check(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_dic, __pyx_v_key, __pyx_v_param_object_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_34_param_dict_check(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_dic, PyObject *__pyx_v_key, PyObject *__pyx_v_param_object_name) {
  double __pyx_v_val;
  int __pyx_v_float_val;
  PyObject *__pyx_v_dummy_var = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("_param_dict_check", 0);

  /* "bioscrape/types.pyx":1938
 *     #   create a dummy parameter and set its value to float then set dict[key] = dummy_param
 *     def _param_dict_check(self, dic, key, param_object_name):
 *         if key not in dic:             # <<<<<<<<<<<<<<
 *             raise ValueError("param dictionary does not contain required key: "+str(key)+" for param object "+param_object_name)
 *         else:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_v_dic, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1938, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "bioscrape/types.pyx":1939
 *     def _param_dict_check(self, dic, key, param_object_name):
 *         if key not in dic:
 *             raise ValueError("param dictionary does not contain required key: "+str(key)+" for param object "+param_object_name)             # <<<<<<<<<<<<<<
 *         else:
 *             try:
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1939, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_param_dictionary_does_not_contai, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1939, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_for_param_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1939, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_param_object_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1939, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1939, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1939, __pyx_L1_error)

    /* "bioscrape/types.pyx":1938
 *     #   create a dummy parameter and set its value to float then set dict[key] = dummy_param
 *     def _param_dict_check(self, dic, key, param_object_name):
 *         if key not in dic:             # <<<<<<<<<<<<<<
 *             raise ValueError("param dictionary does not contain required key: "+str(key)+" for param object "+param_object_name)
 *         else:
 */
  }

  /* "bioscrape/types.pyx":1941
 *             raise ValueError("param dictionary does not contain required key: "+str(key)+" for param object "+param_object_name)
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 val = float(dic[key])
 *                 float_val = True
 */
  /*else*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "bioscrape/types.pyx":1942
 *         else:
 *             try:
 *                 val = float(dic[key])             # <<<<<<<<<<<<<<
 *                 float_val = True
 *             except ValueError:
 */
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_dic, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1942, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = __Pyx_PyObject_AsDouble(__pyx_t_3); if (unlikely(__pyx_t_8 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1942, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_val = __pyx_t_8;

        /* "bioscrape/types.pyx":1943
 *             try:
 *                 val = float(dic[key])
 *                 float_val = True             # <<<<<<<<<<<<<<
 *             except ValueError:
 *                 float_val = False
 */
        __pyx_v_float_val = 1;

        /* "bioscrape/types.pyx":1941
 *             raise ValueError("param dictionary does not contain required key: "+str(key)+" for param object "+param_object_name)
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 val = float(dic[key])
 *                 float_val = True
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1944
 *                 val = float(dic[key])
 *                 float_val = True
 *             except ValueError:             # <<<<<<<<<<<<<<
 *                 float_val = False
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("bioscrape.types.Model._param_dict_check", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_4, &__pyx_t_10) < 0) __PYX_ERR(0, 1944, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_10);

        /* "bioscrape/types.pyx":1945
 *                 float_val = True
 *             except ValueError:
 *                 float_val = False             # <<<<<<<<<<<<<<
 * 
 *             if float_val:
 */
        __pyx_v_float_val = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "bioscrape/types.pyx":1941
 *             raise ValueError("param dictionary does not contain required key: "+str(key)+" for param object "+param_object_name)
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 val = float(dic[key])
 *                 float_val = True
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_L9_try_end:;
    }

    /* "bioscrape/types.pyx":1947
 *                 float_val = False
 * 
 *             if float_val:             # <<<<<<<<<<<<<<
 *                 dummy_var = param_object_name+"_"+str(key)+"_"+str(self._dummy_param_counter)
 * 
 */
    __pyx_t_2 = (__pyx_v_float_val != 0);
    if (__pyx_t_2) {

      /* "bioscrape/types.pyx":1948
 * 
 *             if float_val:
 *                 dummy_var = param_object_name+"_"+str(key)+"_"+str(self._dummy_param_counter)             # <<<<<<<<<<<<<<
 * 
 *                 if dummy_var in self.params2index:
 */
      __pyx_t_10 = PyNumber_Add(__pyx_v_param_object_name, __pyx_n_s__12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyNumber_Add(__pyx_t_10, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_n_s__12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_dummy_param_counter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_dummy_var = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "bioscrape/types.pyx":1950
 *                 dummy_var = param_object_name+"_"+str(key)+"_"+str(self._dummy_param_counter)
 * 
 *                 if dummy_var in self.params2index:             # <<<<<<<<<<<<<<
 *                     raise ValueError("Trying to create a dummy parameter that already exists. Dummy Param Name: "+dummy_var+". Please don't name your parameters like this to avoid errors.")
 *                 self._add_param(dummy_var)
 */
      if (unlikely(__pyx_v_self->params2index == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 1950, __pyx_L1_error)
      }
      __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_dummy_var, __pyx_v_self->params2index, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1950, __pyx_L1_error)
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (unlikely(__pyx_t_1)) {

        /* "bioscrape/types.pyx":1951
 * 
 *                 if dummy_var in self.params2index:
 *                     raise ValueError("Trying to create a dummy parameter that already exists. Dummy Param Name: "+dummy_var+". Please don't name your parameters like this to avoid errors.")             # <<<<<<<<<<<<<<
 *                 self._add_param(dummy_var)
 *                 self.set_parameter(dummy_var, val)
 */
        __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Trying_to_create_a_dummy_paramet, __pyx_v_dummy_var); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1951, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_Please_don_t_name_your_paramete); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1951, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1951, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 1951, __pyx_L1_error)

        /* "bioscrape/types.pyx":1950
 *                 dummy_var = param_object_name+"_"+str(key)+"_"+str(self._dummy_param_counter)
 * 
 *                 if dummy_var in self.params2index:             # <<<<<<<<<<<<<<
 *                     raise ValueError("Trying to create a dummy parameter that already exists. Dummy Param Name: "+dummy_var+". Please don't name your parameters like this to avoid errors.")
 *                 self._add_param(dummy_var)
 */
      }

      /* "bioscrape/types.pyx":1952
 *                 if dummy_var in self.params2index:
 *                     raise ValueError("Trying to create a dummy parameter that already exists. Dummy Param Name: "+dummy_var+". Please don't name your parameters like this to avoid errors.")
 *                 self._add_param(dummy_var)             # <<<<<<<<<<<<<<
 *                 self.set_parameter(dummy_var, val)
 *                 dic[key] = dummy_var
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_param); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1952, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_4, __pyx_v_dummy_var) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_dummy_var);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1952, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "bioscrape/types.pyx":1953
 *                     raise ValueError("Trying to create a dummy parameter that already exists. Dummy Param Name: "+dummy_var+". Please don't name your parameters like this to avoid errors.")
 *                 self._add_param(dummy_var)
 *                 self.set_parameter(dummy_var, val)             # <<<<<<<<<<<<<<
 *                 dic[key] = dummy_var
 *                 self._dummy_param_counter = self._dummy_param_counter + 1
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_parameter); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_dummy_var, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_dummy_var, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (__pyx_t_11) {
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
        }
        __Pyx_INCREF(__pyx_v_dummy_var);
        __Pyx_GIVEREF(__pyx_v_dummy_var);
        PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_9, __pyx_v_dummy_var);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_9, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "bioscrape/types.pyx":1954
 *                 self._add_param(dummy_var)
 *                 self.set_parameter(dummy_var, val)
 *                 dic[key] = dummy_var             # <<<<<<<<<<<<<<
 *                 self._dummy_param_counter = self._dummy_param_counter + 1
 * 
 */
      if (unlikely(PyObject_SetItem(__pyx_v_dic, __pyx_v_key, __pyx_v_dummy_var) < 0)) __PYX_ERR(0, 1954, __pyx_L1_error)

      /* "bioscrape/types.pyx":1955
 *                 self.set_parameter(dummy_var, val)
 *                 dic[key] = dummy_var
 *                 self._dummy_param_counter = self._dummy_param_counter + 1             # <<<<<<<<<<<<<<
 * 
 *     #Helper Function to Create Stochiometric Matrices for Reactions and Delay Reactions
 */
      __pyx_v_self->_dummy_param_counter = (__pyx_v_self->_dummy_param_counter + 1);

      /* "bioscrape/types.pyx":1947
 *                 float_val = False
 * 
 *             if float_val:             # <<<<<<<<<<<<<<
 *                 dummy_var = param_object_name+"_"+str(key)+"_"+str(self._dummy_param_counter)
 * 
 */
    }
  }

  /* "bioscrape/types.pyx":1937
 *     #if dic[key] = float (or a string that can be cast to a float without an error):
 *     #   create a dummy parameter and set its value to float then set dict[key] = dummy_param
 *     def _param_dict_check(self, dic, key, param_object_name):             # <<<<<<<<<<<<<<
 *         if key not in dic:
 *             raise ValueError("param dictionary does not contain required key: "+str(key)+" for param object "+param_object_name)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("bioscrape.types.Model._param_dict_check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dummy_var);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1958
 * 
 *     #Helper Function to Create Stochiometric Matrices for Reactions and Delay Reactions
 *     def _create_stochiometric_matrices(self):             # <<<<<<<<<<<<<<
 *         # With all reactions read in, generate the update array
 *         num_species = len(self.species2index.keys())
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_37_create_stochiometric_matrices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_37_create_stochiometric_matrices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_create_stochiometric_matrices (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_36_create_stochiometric_matrices(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_36_create_stochiometric_matrices(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  Py_ssize_t __pyx_v_num_species;
  Py_ssize_t __pyx_v_num_reactions;
  Py_ssize_t __pyx_v_reaction_index;
  CYTHON_UNUSED PyObject *__pyx_v_prop_object = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_delay_object = NULL;
  PyObject *__pyx_v_reaction_update_dict = NULL;
  PyObject *__pyx_v_delay_reaction_update_dict = NULL;
  PyObject *__pyx_v_sp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  __Pyx_RefNannySetupContext("_create_stochiometric_matrices", 0);

  /* "bioscrape/types.pyx":1960
 *     def _create_stochiometric_matrices(self):
 *         # With all reactions read in, generate the update array
 *         num_species = len(self.species2index.keys())             # <<<<<<<<<<<<<<
 *         num_reactions = len(self.reaction_list)
 *         self.update_array = np.zeros((num_species, num_reactions))
 */
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 1960, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_self->species2index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1960, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_species = __pyx_t_2;

  /* "bioscrape/types.pyx":1961
 *         # With all reactions read in, generate the update array
 *         num_species = len(self.species2index.keys())
 *         num_reactions = len(self.reaction_list)             # <<<<<<<<<<<<<<
 *         self.update_array = np.zeros((num_species, num_reactions))
 *         self.delay_update_array = np.zeros((num_species,num_reactions))
 */
  __pyx_t_1 = __pyx_v_self->reaction_list;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1961, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1961, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_reactions = __pyx_t_2;

  /* "bioscrape/types.pyx":1962
 *         num_species = len(self.species2index.keys())
 *         num_reactions = len(self.reaction_list)
 *         self.update_array = np.zeros((num_species, num_reactions))             # <<<<<<<<<<<<<<
 *         self.delay_update_array = np.zeros((num_species,num_reactions))
 *         for reaction_index in range(num_reactions):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_num_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_num_reactions); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->update_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->update_array));
  __pyx_v_self->update_array = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1963
 *         num_reactions = len(self.reaction_list)
 *         self.update_array = np.zeros((num_species, num_reactions))
 *         self.delay_update_array = np.zeros((num_species,num_reactions))             # <<<<<<<<<<<<<<
 *         for reaction_index in range(num_reactions):
 *             prop_object, delay_object, reaction_update_dict, delay_reaction_update_dict = self.reaction_list[reaction_index]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_num_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_num_reactions); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1963, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->delay_update_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->delay_update_array));
  __pyx_v_self->delay_update_array = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1964
 *         self.update_array = np.zeros((num_species, num_reactions))
 *         self.delay_update_array = np.zeros((num_species,num_reactions))
 *         for reaction_index in range(num_reactions):             # <<<<<<<<<<<<<<
 *             prop_object, delay_object, reaction_update_dict, delay_reaction_update_dict = self.reaction_list[reaction_index]
 *             #reaction_update_dict = self.reaction_updates[reaction_index]
 */
  __pyx_t_2 = __pyx_v_num_reactions;
  __pyx_t_7 = __pyx_t_2;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_reaction_index = __pyx_t_8;

    /* "bioscrape/types.pyx":1965
 *         self.delay_update_array = np.zeros((num_species,num_reactions))
 *         for reaction_index in range(num_reactions):
 *             prop_object, delay_object, reaction_update_dict, delay_reaction_update_dict = self.reaction_list[reaction_index]             # <<<<<<<<<<<<<<
 *             #reaction_update_dict = self.reaction_updates[reaction_index]
 *             #delay_reaction_update_dict = self.delay_reaction_updates[reaction_index]
 */
    if (unlikely(__pyx_v_self->reaction_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1965, __pyx_L1_error)
    }
    __pyx_t_1 = PyList_GET_ITEM(__pyx_v_self->reaction_list, __pyx_v_reaction_index);
    __Pyx_INCREF(__pyx_t_1);
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1965, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_6,&__pyx_t_3,&__pyx_t_5,&__pyx_t_4};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1965, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_6,&__pyx_t_3,&__pyx_t_5,&__pyx_t_4};
      __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 4) < 0) __PYX_ERR(0, 1965, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1965, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_prop_object, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_delay_object, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_reaction_update_dict, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_delay_reaction_update_dict, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":1968
 *             #reaction_update_dict = self.reaction_updates[reaction_index]
 *             #delay_reaction_update_dict = self.delay_reaction_updates[reaction_index]
 *             for sp in reaction_update_dict:             # <<<<<<<<<<<<<<
 *                 if sp != "":
 *                     self.update_array[self.species2index[sp],reaction_index] = reaction_update_dict[sp]
 */
    if (likely(PyList_CheckExact(__pyx_v_reaction_update_dict)) || PyTuple_CheckExact(__pyx_v_reaction_update_dict)) {
      __pyx_t_1 = __pyx_v_reaction_update_dict; __Pyx_INCREF(__pyx_t_1); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_reaction_update_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1968, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_4); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1968, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1968, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_4); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1968, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1968, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_12(__pyx_t_1);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1968, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_sp, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1969
 *             #delay_reaction_update_dict = self.delay_reaction_updates[reaction_index]
 *             for sp in reaction_update_dict:
 *                 if sp != "":             # <<<<<<<<<<<<<<
 *                     self.update_array[self.species2index[sp],reaction_index] = reaction_update_dict[sp]
 * 
 */
      __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_sp, __pyx_kp_s__3, Py_NE)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1969, __pyx_L1_error)
      if (__pyx_t_13) {

        /* "bioscrape/types.pyx":1970
 *             for sp in reaction_update_dict:
 *                 if sp != "":
 *                     self.update_array[self.species2index[sp],reaction_index] = reaction_update_dict[sp]             # <<<<<<<<<<<<<<
 * 
 *             for sp in delay_reaction_update_dict:
 */
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_reaction_update_dict, __pyx_v_sp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__pyx_v_self->species2index == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1970, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->species2index, __pyx_v_sp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_reaction_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
        __pyx_t_5 = 0;
        __pyx_t_3 = 0;
        if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->update_array), __pyx_t_6, __pyx_t_4) < 0)) __PYX_ERR(0, 1970, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "bioscrape/types.pyx":1969
 *             #delay_reaction_update_dict = self.delay_reaction_updates[reaction_index]
 *             for sp in reaction_update_dict:
 *                 if sp != "":             # <<<<<<<<<<<<<<
 *                     self.update_array[self.species2index[sp],reaction_index] = reaction_update_dict[sp]
 * 
 */
      }

      /* "bioscrape/types.pyx":1968
 *             #reaction_update_dict = self.reaction_updates[reaction_index]
 *             #delay_reaction_update_dict = self.delay_reaction_updates[reaction_index]
 *             for sp in reaction_update_dict:             # <<<<<<<<<<<<<<
 *                 if sp != "":
 *                     self.update_array[self.species2index[sp],reaction_index] = reaction_update_dict[sp]
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":1972
 *                     self.update_array[self.species2index[sp],reaction_index] = reaction_update_dict[sp]
 * 
 *             for sp in delay_reaction_update_dict:             # <<<<<<<<<<<<<<
 *                 if sp != "":
 *                     self.delay_update_array[self.species2index[sp],reaction_index] = delay_reaction_update_dict[sp]
 */
    if (likely(PyList_CheckExact(__pyx_v_delay_reaction_update_dict)) || PyTuple_CheckExact(__pyx_v_delay_reaction_update_dict)) {
      __pyx_t_1 = __pyx_v_delay_reaction_update_dict; __Pyx_INCREF(__pyx_t_1); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_delay_reaction_update_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1972, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1972, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_4); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1972, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1972, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_4); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1972, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1972, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_12(__pyx_t_1);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1972, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_sp, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":1973
 * 
 *             for sp in delay_reaction_update_dict:
 *                 if sp != "":             # <<<<<<<<<<<<<<
 *                     self.delay_update_array[self.species2index[sp],reaction_index] = delay_reaction_update_dict[sp]
 * 
 */
      __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_v_sp, __pyx_kp_s__3, Py_NE)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1973, __pyx_L1_error)
      if (__pyx_t_13) {

        /* "bioscrape/types.pyx":1974
 *             for sp in delay_reaction_update_dict:
 *                 if sp != "":
 *                     self.delay_update_array[self.species2index[sp],reaction_index] = delay_reaction_update_dict[sp]             # <<<<<<<<<<<<<<
 * 
 *         return self.update_array, self.delay_update_array
 */
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_delay_reaction_update_dict, __pyx_v_sp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__pyx_v_self->species2index == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1974, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_self->species2index, __pyx_v_sp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_reaction_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
        __pyx_t_6 = 0;
        __pyx_t_3 = 0;
        if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->delay_update_array), __pyx_t_5, __pyx_t_4) < 0)) __PYX_ERR(0, 1974, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "bioscrape/types.pyx":1973
 * 
 *             for sp in delay_reaction_update_dict:
 *                 if sp != "":             # <<<<<<<<<<<<<<
 *                     self.delay_update_array[self.species2index[sp],reaction_index] = delay_reaction_update_dict[sp]
 * 
 */
      }

      /* "bioscrape/types.pyx":1972
 *                     self.update_array[self.species2index[sp],reaction_index] = reaction_update_dict[sp]
 * 
 *             for sp in delay_reaction_update_dict:             # <<<<<<<<<<<<<<
 *                 if sp != "":
 *                     self.delay_update_array[self.species2index[sp],reaction_index] = delay_reaction_update_dict[sp]
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bioscrape/types.pyx":1976
 *                     self.delay_update_array[self.species2index[sp],reaction_index] = delay_reaction_update_dict[sp]
 * 
 *         return self.update_array, self.delay_update_array             # <<<<<<<<<<<<<<
 * 
 *     def parse_model(self, filename, input_printout = False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->update_array));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->update_array));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->update_array));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->delay_update_array));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->delay_update_array));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->delay_update_array));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":1958
 * 
 *     #Helper Function to Create Stochiometric Matrices for Reactions and Delay Reactions
 *     def _create_stochiometric_matrices(self):             # <<<<<<<<<<<<<<
 *         # With all reactions read in, generate the update array
 *         num_species = len(self.species2index.keys())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.Model._create_stochiometric_matrices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_prop_object);
  __Pyx_XDECREF(__pyx_v_delay_object);
  __Pyx_XDECREF(__pyx_v_reaction_update_dict);
  __Pyx_XDECREF(__pyx_v_delay_reaction_update_dict);
  __Pyx_XDECREF(__pyx_v_sp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":1978
 *         return self.update_array, self.delay_update_array
 * 
 *     def parse_model(self, filename, input_printout = False):             # <<<<<<<<<<<<<<
 *         """
 *         Parse the model from an XML file filling in all the local variables (propensities, delays, update arrays). Also
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_39parse_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_38parse_model[] = "\n        Parse the model from an XML file filling in all the local variables (propensities, delays, update arrays). Also\n        maps the species and parameters to indices in a species and parameters vector.\n\n        :param filename: (str or file) the model file. if a string, the file is opened. otherwise, it is assumed\n                         that a file handle was passed in.\n        :return: None\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_39parse_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_input_printout = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_model (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_input_printout,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input_printout);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "parse_model") < 0)) __PYX_ERR(0, 1978, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_input_printout = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parse_model", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1978, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Model.parse_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_38parse_model(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_filename, __pyx_v_input_printout);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_38parse_model(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_input_printout) {
  PyObject *__pyx_v_xml_file = NULL;
  PyObject *__pyx_v_xml = NULL;
  PyObject *__pyx_v_Model = NULL;
  PyObject *__pyx_v_Species = NULL;
  PyObject *__pyx_v_species = NULL;
  double __pyx_v_species_value;
  PyObject *__pyx_v_species_name = NULL;
  PyObject *__pyx_v_Reactions = NULL;
  PyObject *__pyx_v_reaction = NULL;
  PyObject *__pyx_v_text = NULL;
  PyObject *__pyx_v_reactants = NULL;
  PyObject *__pyx_v_products = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_delay_reactants = NULL;
  PyObject *__pyx_v_delay_products = NULL;
  PyObject *__pyx_v_propensity = NULL;
  PyObject *__pyx_v_propensity_param_dict = NULL;
  PyObject *__pyx_v_delay = NULL;
  PyObject *__pyx_v_delay_param_dict = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_delay_type = NULL;
  PyObject *__pyx_v_Rules = NULL;
  PyObject *__pyx_v_rule = NULL;
  PyObject *__pyx_v_rule_attrs = NULL;
  PyObject *__pyx_v_rule_type = NULL;
  PyObject *__pyx_v_rule_frequency = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_unspecified_param_names = NULL;
  PyObject *__pyx_v_Parameters = NULL;
  PyObject *__pyx_v_param = NULL;
  double __pyx_v_param_value;
  PyObject *__pyx_v_param_name = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_UCS4 __pyx_t_17;
  __Pyx_RefNannySetupContext("parse_model", 0);

  /* "bioscrape/types.pyx":1988
 *         """
 *         # open XML file from the filename and use BeautifulSoup to parse it
 *         warnings.warn("Deprecated Warning: Bioscrape XML is being replaced by SBML and will no longer be supported in a future version of the software.")             # <<<<<<<<<<<<<<
 * 
 *         if type(filename) == str:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_warnings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_kp_s_Deprecated_Warning_Bioscrape_XML) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_Deprecated_Warning_Bioscrape_XML);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":1990
 *         warnings.warn("Deprecated Warning: Bioscrape XML is being replaced by SBML and will no longer be supported in a future version of the software.")
 * 
 *         if type(filename) == str:             # <<<<<<<<<<<<<<
 *             xml_file = open(filename,'r')
 *         else:
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_filename)), ((PyObject *)(&PyString_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "bioscrape/types.pyx":1991
 * 
 *         if type(filename) == str:
 *             xml_file = open(filename,'r')             # <<<<<<<<<<<<<<
 *         else:
 *             xml_file = filename
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_filename);
    __Pyx_GIVEREF(__pyx_v_filename);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_filename);
    __Pyx_INCREF(__pyx_n_s_r);
    __Pyx_GIVEREF(__pyx_n_s_r);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_r);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_xml_file = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":1990
 *         warnings.warn("Deprecated Warning: Bioscrape XML is being replaced by SBML and will no longer be supported in a future version of the software.")
 * 
 *         if type(filename) == str:             # <<<<<<<<<<<<<<
 *             xml_file = open(filename,'r')
 *         else:
 */
    goto __pyx_L3;
  }

  /* "bioscrape/types.pyx":1993
 *             xml_file = open(filename,'r')
 *         else:
 *             xml_file = filename             # <<<<<<<<<<<<<<
 *         xml = BeautifulSoup(xml_file,features="xml")
 *         xml_file.close()
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_filename);
    __pyx_v_xml_file = __pyx_v_filename;
  }
  __pyx_L3:;

  /* "bioscrape/types.pyx":1994
 *         else:
 *             xml_file = filename
 *         xml = BeautifulSoup(xml_file,features="xml")             # <<<<<<<<<<<<<<
 *         xml_file.close()
 *         # Go through the reactions and parse them 1 by 1 keeping track of species and reactions
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_BeautifulSoup); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_xml_file);
  __Pyx_GIVEREF(__pyx_v_xml_file);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_xml_file);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_features, __pyx_n_s_xml) < 0) __PYX_ERR(0, 1994, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_xml = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":1995
 *             xml_file = filename
 *         xml = BeautifulSoup(xml_file,features="xml")
 *         xml_file.close()             # <<<<<<<<<<<<<<
 *         # Go through the reactions and parse them 1 by 1 keeping track of species and reactions
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_xml_file, __pyx_n_s_close); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2017
 *         # check for model tag at beginning.
 * 
 *         Model = xml.find_all('model')             # <<<<<<<<<<<<<<
 *         if len(Model) != 1:
 *             raise SyntaxError('Did not include global model tag in XML file')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_xml, __pyx_n_s_find_all); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_n_s_model) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_model);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Model = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2018
 * 
 *         Model = xml.find_all('model')
 *         if len(Model) != 1:             # <<<<<<<<<<<<<<
 *             raise SyntaxError('Did not include global model tag in XML file')
 * 
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_Model); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2018, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_6 != 1) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "bioscrape/types.pyx":2019
 *         Model = xml.find_all('model')
 *         if len(Model) != 1:
 *             raise SyntaxError('Did not include global model tag in XML file')             # <<<<<<<<<<<<<<
 * 
 *         Species = xml.find_all('species')
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_SyntaxError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 2019, __pyx_L1_error)

    /* "bioscrape/types.pyx":2018
 * 
 *         Model = xml.find_all('model')
 *         if len(Model) != 1:             # <<<<<<<<<<<<<<
 *             raise SyntaxError('Did not include global model tag in XML file')
 * 
 */
  }

  /* "bioscrape/types.pyx":2021
 *             raise SyntaxError('Did not include global model tag in XML file')
 * 
 *         Species = xml.find_all('species')             # <<<<<<<<<<<<<<
 *         for species in Species:
 *             species_value = float(species['value'])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_xml, __pyx_n_s_find_all); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_n_s_species) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_species);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Species = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2022
 * 
 *         Species = xml.find_all('species')
 *         for species in Species:             # <<<<<<<<<<<<<<
 *             species_value = float(species['value'])
 *             species_name = species['name']
 */
  if (likely(PyList_CheckExact(__pyx_v_Species)) || PyTuple_CheckExact(__pyx_v_Species)) {
    __pyx_t_5 = __pyx_v_Species; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_Species); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2022, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2022, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2022, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2022, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2022, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2022, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_species, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":2023
 *         Species = xml.find_all('species')
 *         for species in Species:
 *             species_value = float(species['value'])             # <<<<<<<<<<<<<<
 *             species_name = species['name']
 *             self._set_species_value(species_name, species_value)
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_species, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_AsDouble(__pyx_t_2); if (unlikely(__pyx_t_8 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2023, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_species_value = __pyx_t_8;

    /* "bioscrape/types.pyx":2024
 *         for species in Species:
 *             species_value = float(species['value'])
 *             species_name = species['name']             # <<<<<<<<<<<<<<
 *             self._set_species_value(species_name, species_value)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_species, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_species_name, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":2025
 *             species_value = float(species['value'])
 *             species_name = species['name']
 *             self._set_species_value(species_name, species_value)             # <<<<<<<<<<<<<<
 * 
 *         Reactions = xml.find_all('reaction')
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_species_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_species_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_species_name, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2025, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_species_name, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2025, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_v_species_name);
      __Pyx_GIVEREF(__pyx_v_species_name);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_v_species_name);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":2022
 * 
 *         Species = xml.find_all('species')
 *         for species in Species:             # <<<<<<<<<<<<<<
 *             species_value = float(species['value'])
 *             species_name = species['name']
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2027
 *             self._set_species_value(species_name, species_value)
 * 
 *         Reactions = xml.find_all('reaction')             # <<<<<<<<<<<<<<
 *         for reaction in Reactions:
 *             # Parse the stoichiometry
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_xml, __pyx_n_s_find_all); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_n_s_reaction) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_reaction);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Reactions = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2028
 * 
 *         Reactions = xml.find_all('reaction')
 *         for reaction in Reactions:             # <<<<<<<<<<<<<<
 *             # Parse the stoichiometry
 *             text = reaction['text']
 */
  if (likely(PyList_CheckExact(__pyx_v_Reactions)) || PyTuple_CheckExact(__pyx_v_Reactions)) {
    __pyx_t_5 = __pyx_v_Reactions; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_Reactions); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2028, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2028, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2028, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2028, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2028, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2028, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_reaction, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":2030
 *         for reaction in Reactions:
 *             # Parse the stoichiometry
 *             text = reaction['text']             # <<<<<<<<<<<<<<
 *             reactants = [s for s in [r.strip() for r in text.split('--')[0].split('+')] if s]
 *             products = [s for s in [r.strip() for r in text.split('--')[1].split('+')] if s]
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_reaction, __pyx_n_s_text); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_text, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":2031
 *             # Parse the stoichiometry
 *             text = reaction['text']
 *             reactants = [s for s in [r.strip() for r in text.split('--')[0].split('+')] if s]             # <<<<<<<<<<<<<<
 *             products = [s for s in [r.strip() for r in text.split('--')[1].split('+')] if s]
 * 
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_split); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_12, __pyx_kp_s__35) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_s__35);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_11 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_kp_s__4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s__4);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
      __pyx_t_3 = __pyx_t_11; __Pyx_INCREF(__pyx_t_3); __pyx_t_13 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2031, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_11); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2031, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2031, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        } else {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_11); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2031, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2031, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        }
      } else {
        __pyx_t_11 = __pyx_t_14(__pyx_t_3);
        if (unlikely(!__pyx_t_11)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2031, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_11);
      }
      __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_r, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_11 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2031, __pyx_L1_error)
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_s); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2031, __pyx_L1_error)
      if (__pyx_t_4) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_v_s))) __PYX_ERR(0, 2031, __pyx_L1_error)
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_reactants, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":2032
 *             text = reaction['text']
 *             reactants = [s for s in [r.strip() for r in text.split('--')[0].split('+')] if s]
 *             products = [s for s in [r.strip() for r in text.split('--')[1].split('+')] if s]             # <<<<<<<<<<<<<<
 * 
 *             for s in reactants + products:
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_split); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_11 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_12, __pyx_kp_s__35) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_s__35);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_11, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_9, __pyx_kp_s__4) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_kp_s__4);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_11 = __pyx_t_1; __Pyx_INCREF(__pyx_t_11); __pyx_t_13 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2032, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_14 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2032, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_11))) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_11)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2032, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_11, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2032, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2032, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_11, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2032, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_14(__pyx_t_11);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2032, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_r, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2032, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_1 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2032, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 2032, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __pyx_t_3; __Pyx_INCREF(__pyx_t_11); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_11)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2032, __pyx_L1_error)
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_11, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2032, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_s); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2032, __pyx_L1_error)
      if (__pyx_t_4) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_v_s))) __PYX_ERR(0, 2032, __pyx_L1_error)
      }
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_products, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":2034
 *             products = [s for s in [r.strip() for r in text.split('--')[1].split('+')] if s]
 * 
 *             for s in reactants + products:             # <<<<<<<<<<<<<<
 *                 if s not in self.species2index:
 *                     raise ValueError(f"Species {s} found in a reaction but not declared in Species. All Species must be declared for proper parsing.")
 */
    __pyx_t_2 = PyNumber_Add(__pyx_v_reactants, __pyx_v_products); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __pyx_t_2; __Pyx_INCREF(__pyx_t_11); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_11)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2034, __pyx_L1_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_11, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "bioscrape/types.pyx":2035
 * 
 *             for s in reactants + products:
 *                 if s not in self.species2index:             # <<<<<<<<<<<<<<
 *                     raise ValueError(f"Species {s} found in a reaction but not declared in Species. All Species must be declared for proper parsing.")
 * 
 */
      if (unlikely(__pyx_v_self->species2index == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 2035, __pyx_L1_error)
      }
      __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_v_s, __pyx_v_self->species2index, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2035, __pyx_L1_error)
      __pyx_t_15 = (__pyx_t_4 != 0);
      if (unlikely(__pyx_t_15)) {

        /* "bioscrape/types.pyx":2036
 *             for s in reactants + products:
 *                 if s not in self.species2index:
 *                     raise ValueError(f"Species {s} found in a reaction but not declared in Species. All Species must be declared for proper parsing.")             # <<<<<<<<<<<<<<
 * 
 *             # parse the delayed part of the reaction the same way as we did before.
 */
        __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2036, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_16 = 0;
        __pyx_t_17 = 127;
        __Pyx_INCREF(__pyx_kp_u_Species);
        __pyx_t_16 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_Species);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Species);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_s, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2036, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_17 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_17) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_17;
        __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_found_in_a_reaction_but_not_dec);
        __pyx_t_16 += 98;
        __Pyx_GIVEREF(__pyx_kp_u_found_in_a_reaction_but_not_dec);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_found_in_a_reaction_but_not_dec);
        __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_16, __pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2036, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2036, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 2036, __pyx_L1_error)

        /* "bioscrape/types.pyx":2035
 * 
 *             for s in reactants + products:
 *                 if s not in self.species2index:             # <<<<<<<<<<<<<<
 *                     raise ValueError(f"Species {s} found in a reaction but not declared in Species. All Species must be declared for proper parsing.")
 * 
 */
      }

      /* "bioscrape/types.pyx":2034
 *             products = [s for s in [r.strip() for r in text.split('--')[1].split('+')] if s]
 * 
 *             for s in reactants + products:             # <<<<<<<<<<<<<<
 *                 if s not in self.species2index:
 *                     raise ValueError(f"Species {s} found in a reaction but not declared in Species. All Species must be declared for proper parsing.")
 */
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "bioscrape/types.pyx":2039
 * 
 *             # parse the delayed part of the reaction the same way as we did before.
 *             if reaction.has_attr('after'):             # <<<<<<<<<<<<<<
 *                 text = reaction['after']
 *                 delay_reactants = [s for s in [r.strip() for r in text.split('--')[0].split('+')] if s]
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_reaction, __pyx_n_s_has_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2039, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_11 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_after) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_after);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2039, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 2039, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (__pyx_t_15) {

      /* "bioscrape/types.pyx":2040
 *             # parse the delayed part of the reaction the same way as we did before.
 *             if reaction.has_attr('after'):
 *                 text = reaction['after']             # <<<<<<<<<<<<<<
 *                 delay_reactants = [s for s in [r.strip() for r in text.split('--')[0].split('+')] if s]
 *                 delay_products = [s for s in [r.strip() for r in text.split('--')[1].split('+')] if s]
 */
      __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_reaction, __pyx_n_s_after); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2040, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF_SET(__pyx_v_text, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "bioscrape/types.pyx":2041
 *             if reaction.has_attr('after'):
 *                 text = reaction['after']
 *                 delay_reactants = [s for s in [r.strip() for r in text.split('--')[0].split('+')] if s]             # <<<<<<<<<<<<<<
 *                 delay_products = [s for s in [r.strip() for r in text.split('--')[1].split('+')] if s]
 *             else:
 */
      __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_split); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_1 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_12, __pyx_kp_s__35) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_s__35);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_9, __pyx_kp_s__4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_s__4);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2041, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_14 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2041, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2041, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2041, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2041, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2041, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_14(__pyx_t_1);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2041, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_r, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2041, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_3 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2041, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 2041, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2041, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2041, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_s); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 2041, __pyx_L1_error)
        if (__pyx_t_15) {
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_11, (PyObject*)__pyx_v_s))) __PYX_ERR(0, 2041, __pyx_L1_error)
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_delay_reactants, ((PyObject*)__pyx_t_11));
      __pyx_t_11 = 0;

      /* "bioscrape/types.pyx":2042
 *                 text = reaction['after']
 *                 delay_reactants = [s for s in [r.strip() for r in text.split('--')[0].split('+')] if s]
 *                 delay_products = [s for s in [r.strip() for r in text.split('--')[1].split('+')] if s]             # <<<<<<<<<<<<<<
 *             else:
 *                 delay_reactants = None
 */
      __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_split); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_3 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_12, __pyx_kp_s__35) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_s__35);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_2 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_kp_s__4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s__4);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2042, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2042, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2042, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2042, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2042, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2042, __pyx_L1_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2042, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_14(__pyx_t_3);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2042, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_r, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2042, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_2 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2042, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 2042, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 2042, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2042, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_s); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 2042, __pyx_L1_error)
        if (__pyx_t_15) {
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_11, (PyObject*)__pyx_v_s))) __PYX_ERR(0, 2042, __pyx_L1_error)
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_delay_products, ((PyObject*)__pyx_t_11));
      __pyx_t_11 = 0;

      /* "bioscrape/types.pyx":2039
 * 
 *             # parse the delayed part of the reaction the same way as we did before.
 *             if reaction.has_attr('after'):             # <<<<<<<<<<<<<<
 *                 text = reaction['after']
 *                 delay_reactants = [s for s in [r.strip() for r in text.split('--')[0].split('+')] if s]
 */
      goto __pyx_L22;
    }

    /* "bioscrape/types.pyx":2044
 *                 delay_products = [s for s in [r.strip() for r in text.split('--')[1].split('+')] if s]
 *             else:
 *                 delay_reactants = None             # <<<<<<<<<<<<<<
 *                 delay_products = None
 * 
 */
    /*else*/ {
      __Pyx_INCREF(Py_None);
      __Pyx_XDECREF_SET(__pyx_v_delay_reactants, ((PyObject*)Py_None));

      /* "bioscrape/types.pyx":2045
 *             else:
 *                 delay_reactants = None
 *                 delay_products = None             # <<<<<<<<<<<<<<
 * 
 *             # Then look at the propensity and set up a propensity object
 */
      __Pyx_INCREF(Py_None);
      __Pyx_XDECREF_SET(__pyx_v_delay_products, ((PyObject*)Py_None));
    }
    __pyx_L22:;

    /* "bioscrape/types.pyx":2048
 * 
 *             # Then look at the propensity and set up a propensity object
 *             propensity = reaction.find_all('propensity')             # <<<<<<<<<<<<<<
 *             if len(propensity) != 1:
 *                 raise SyntaxError('Incorrect propensity tags in XML model\n' + propensity)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_reaction, __pyx_n_s_find_all); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_11 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_n_s_propensity) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_s_propensity);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_propensity, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "bioscrape/types.pyx":2049
 *             # Then look at the propensity and set up a propensity object
 *             propensity = reaction.find_all('propensity')
 *             if len(propensity) != 1:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError('Incorrect propensity tags in XML model\n' + propensity)
 *             propensity = propensity[0]
 */
    __pyx_t_13 = PyObject_Length(__pyx_v_propensity); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2049, __pyx_L1_error)
    __pyx_t_15 = ((__pyx_t_13 != 1) != 0);
    if (unlikely(__pyx_t_15)) {

      /* "bioscrape/types.pyx":2050
 *             propensity = reaction.find_all('propensity')
 *             if len(propensity) != 1:
 *                 raise SyntaxError('Incorrect propensity tags in XML model\n' + propensity)             # <<<<<<<<<<<<<<
 *             propensity = propensity[0]
 *             # go through propensity types
 */
      __pyx_t_11 = PyNumber_Add(__pyx_kp_s_Incorrect_propensity_tags_in_XML, __pyx_v_propensity); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2050, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_SyntaxError, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2050, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 2050, __pyx_L1_error)

      /* "bioscrape/types.pyx":2049
 *             # Then look at the propensity and set up a propensity object
 *             propensity = reaction.find_all('propensity')
 *             if len(propensity) != 1:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError('Incorrect propensity tags in XML model\n' + propensity)
 *             propensity = propensity[0]
 */
    }

    /* "bioscrape/types.pyx":2051
 *             if len(propensity) != 1:
 *                 raise SyntaxError('Incorrect propensity tags in XML model\n' + propensity)
 *             propensity = propensity[0]             # <<<<<<<<<<<<<<
 *             # go through propensity types
 *             propensity_param_dict = propensity.attrs
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_propensity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2051, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_propensity, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":2053
 *             propensity = propensity[0]
 *             # go through propensity types
 *             propensity_param_dict = propensity.attrs             # <<<<<<<<<<<<<<
 * 
 *             # Then look at the delay and set up a delay object
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_propensity, __pyx_n_s_attrs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2053, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_propensity_param_dict, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":2056
 * 
 *             # Then look at the delay and set up a delay object
 *             delay = reaction.find_all('delay')             # <<<<<<<<<<<<<<
 *             if len(delay) != 1:
 *                 raise SyntaxError('Incorrect delay spec')
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_reaction, __pyx_n_s_find_all); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2056, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_1, __pyx_n_s_delay) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_n_s_delay);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2056, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_delay, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":2057
 *             # Then look at the delay and set up a delay object
 *             delay = reaction.find_all('delay')
 *             if len(delay) != 1:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError('Incorrect delay spec')
 *             delay = delay[0]
 */
    __pyx_t_13 = PyObject_Length(__pyx_v_delay); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2057, __pyx_L1_error)
    __pyx_t_15 = ((__pyx_t_13 != 1) != 0);
    if (unlikely(__pyx_t_15)) {

      /* "bioscrape/types.pyx":2058
 *             delay = reaction.find_all('delay')
 *             if len(delay) != 1:
 *                 raise SyntaxError('Incorrect delay spec')             # <<<<<<<<<<<<<<
 *             delay = delay[0]
 *             delay_param_dict = delay.attrs
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_SyntaxError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2058, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 2058, __pyx_L1_error)

      /* "bioscrape/types.pyx":2057
 *             # Then look at the delay and set up a delay object
 *             delay = reaction.find_all('delay')
 *             if len(delay) != 1:             # <<<<<<<<<<<<<<
 *                 raise SyntaxError('Incorrect delay spec')
 *             delay = delay[0]
 */
    }

    /* "bioscrape/types.pyx":2059
 *             if len(delay) != 1:
 *                 raise SyntaxError('Incorrect delay spec')
 *             delay = delay[0]             # <<<<<<<<<<<<<<
 *             delay_param_dict = delay.attrs
 *             delay_type = delay['type']
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_delay, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_delay, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":2060
 *                 raise SyntaxError('Incorrect delay spec')
 *             delay = delay[0]
 *             delay_param_dict = delay.attrs             # <<<<<<<<<<<<<<
 *             delay_type = delay['type']
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_delay, __pyx_n_s_attrs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_delay_param_dict, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":2061
 *             delay = delay[0]
 *             delay_param_dict = delay.attrs
 *             delay_type = delay['type']             # <<<<<<<<<<<<<<
 * 
 *             self.create_reaction(reactants = reactants, products = products, propensity_type = propensity['type'],
 */
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_delay, __pyx_n_s_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2061, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_delay_type, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":2063
 *             delay_type = delay['type']
 * 
 *             self.create_reaction(reactants = reactants, products = products, propensity_type = propensity['type'],             # <<<<<<<<<<<<<<
 *                                  propensity_param_dict = propensity_param_dict, delay_reactants=delay_reactants,
 *                                  delay_products=delay_products, delay_param_dict = delay_param_dict,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_create_reaction); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_reactants, __pyx_v_reactants) < 0) __PYX_ERR(0, 2063, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_products, __pyx_v_products) < 0) __PYX_ERR(0, 2063, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_propensity, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_propensity_type, __pyx_t_1) < 0) __PYX_ERR(0, 2063, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2064
 * 
 *             self.create_reaction(reactants = reactants, products = products, propensity_type = propensity['type'],
 *                                  propensity_param_dict = propensity_param_dict, delay_reactants=delay_reactants,             # <<<<<<<<<<<<<<
 *                                  delay_products=delay_products, delay_param_dict = delay_param_dict,
 *                                  input_printout = input_printout)
 */
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_propensity_param_dict, __pyx_v_propensity_param_dict) < 0) __PYX_ERR(0, 2063, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_delay_reactants, __pyx_v_delay_reactants) < 0) __PYX_ERR(0, 2063, __pyx_L1_error)

    /* "bioscrape/types.pyx":2065
 *             self.create_reaction(reactants = reactants, products = products, propensity_type = propensity['type'],
 *                                  propensity_param_dict = propensity_param_dict, delay_reactants=delay_reactants,
 *                                  delay_products=delay_products, delay_param_dict = delay_param_dict,             # <<<<<<<<<<<<<<
 *                                  input_printout = input_printout)
 *         # Parse through the rules
 */
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_delay_products, __pyx_v_delay_products) < 0) __PYX_ERR(0, 2063, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_delay_param_dict, __pyx_v_delay_param_dict) < 0) __PYX_ERR(0, 2063, __pyx_L1_error)

    /* "bioscrape/types.pyx":2066
 *                                  propensity_param_dict = propensity_param_dict, delay_reactants=delay_reactants,
 *                                  delay_products=delay_products, delay_param_dict = delay_param_dict,
 *                                  input_printout = input_printout)             # <<<<<<<<<<<<<<
 *         # Parse through the rules
 *         Rules = xml.find_all('rule')
 */
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_input_printout, __pyx_v_input_printout) < 0) __PYX_ERR(0, 2063, __pyx_L1_error)

    /* "bioscrape/types.pyx":2063
 *             delay_type = delay['type']
 * 
 *             self.create_reaction(reactants = reactants, products = products, propensity_type = propensity['type'],             # <<<<<<<<<<<<<<
 *                                  propensity_param_dict = propensity_param_dict, delay_reactants=delay_reactants,
 *                                  delay_products=delay_products, delay_param_dict = delay_param_dict,
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2028
 * 
 *         Reactions = xml.find_all('reaction')
 *         for reaction in Reactions:             # <<<<<<<<<<<<<<
 *             # Parse the stoichiometry
 *             text = reaction['text']
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2068
 *                                  input_printout = input_printout)
 *         # Parse through the rules
 *         Rules = xml.find_all('rule')             # <<<<<<<<<<<<<<
 *         for rule in Rules:
 *             rule_attrs = rule.attrs
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_xml, __pyx_n_s_find_all); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_5 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_11, __pyx_n_s_rule) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_n_s_rule);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Rules = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2069
 *         # Parse through the rules
 *         Rules = xml.find_all('rule')
 *         for rule in Rules:             # <<<<<<<<<<<<<<
 *             rule_attrs = rule.attrs
 *             rule_type = rule['type']
 */
  if (likely(PyList_CheckExact(__pyx_v_Rules)) || PyTuple_CheckExact(__pyx_v_Rules)) {
    __pyx_t_5 = __pyx_v_Rules; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_Rules); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2069, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2069, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2069, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2069, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2069, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2069, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2069, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_rule, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2070
 *         Rules = xml.find_all('rule')
 *         for rule in Rules:
 *             rule_attrs = rule.attrs             # <<<<<<<<<<<<<<
 *             rule_type = rule['type']
 *             rule_frequency = rule['frequency']
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rule, __pyx_n_s_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_rule_attrs, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2071
 *         for rule in Rules:
 *             rule_attrs = rule.attrs
 *             rule_type = rule['type']             # <<<<<<<<<<<<<<
 *             rule_frequency = rule['frequency']
 *             self.create_rule(rule_type = rule_type, rule_attributes = rule_attrs, rule_frequency=rule_frequency, input_printout = input_printout)
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_rule, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2071, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_rule_type, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2072
 *             rule_attrs = rule.attrs
 *             rule_type = rule['type']
 *             rule_frequency = rule['frequency']             # <<<<<<<<<<<<<<
 *             self.create_rule(rule_type = rule_type, rule_attributes = rule_attrs, rule_frequency=rule_frequency, input_printout = input_printout)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_rule, __pyx_n_s_frequency); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2072, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_rule_frequency, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2073
 *             rule_type = rule['type']
 *             rule_frequency = rule['frequency']
 *             self.create_rule(rule_type = rule_type, rule_attributes = rule_attrs, rule_frequency=rule_frequency, input_printout = input_printout)             # <<<<<<<<<<<<<<
 * 
 *         # Generate species values and parameter values
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_create_rule); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_rule_type, __pyx_v_rule_type) < 0) __PYX_ERR(0, 2073, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_rule_attributes, __pyx_v_rule_attrs) < 0) __PYX_ERR(0, 2073, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_rule_frequency, __pyx_v_rule_frequency) < 0) __PYX_ERR(0, 2073, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_input_printout, __pyx_v_input_printout) < 0) __PYX_ERR(0, 2073, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":2069
 *         # Parse through the rules
 *         Rules = xml.find_all('rule')
 *         for rule in Rules:             # <<<<<<<<<<<<<<
 *             rule_attrs = rule.attrs
 *             rule_type = rule['type']
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2076
 * 
 *         # Generate species values and parameter values
 *         unspecified_param_names = set(self.params2index.keys())             # <<<<<<<<<<<<<<
 *         Parameters = xml.find_all('parameter')
 *         for param in Parameters:
 */
  if (unlikely(__pyx_v_self->params2index == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 2076, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_Keys(__pyx_v_self->params2index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PySet_New(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_unspecified_param_names = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":2077
 *         # Generate species values and parameter values
 *         unspecified_param_names = set(self.params2index.keys())
 *         Parameters = xml.find_all('parameter')             # <<<<<<<<<<<<<<
 *         for param in Parameters:
 *             param_value = float(param['value'])
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_xml, __pyx_n_s_find_all); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_11, __pyx_n_s_parameter) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_parameter);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_Parameters = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":2078
 *         unspecified_param_names = set(self.params2index.keys())
 *         Parameters = xml.find_all('parameter')
 *         for param in Parameters:             # <<<<<<<<<<<<<<
 *             param_value = float(param['value'])
 *             param_name = param['name']
 */
  if (likely(PyList_CheckExact(__pyx_v_Parameters)) || PyTuple_CheckExact(__pyx_v_Parameters)) {
    __pyx_t_3 = __pyx_v_Parameters; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_Parameters); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2078, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2078, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2078, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2078, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2078, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2078, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_param, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "bioscrape/types.pyx":2079
 *         Parameters = xml.find_all('parameter')
 *         for param in Parameters:
 *             param_value = float(param['value'])             # <<<<<<<<<<<<<<
 *             param_name = param['name']
 *             self.set_parameter(param_name = param_name, param_value = param_value)
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_param, __pyx_n_s_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_AsDouble(__pyx_t_5); if (unlikely(__pyx_t_8 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_param_value = __pyx_t_8;

    /* "bioscrape/types.pyx":2080
 *         for param in Parameters:
 *             param_value = float(param['value'])
 *             param_name = param['name']             # <<<<<<<<<<<<<<
 *             self.set_parameter(param_name = param_name, param_value = param_value)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_param, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_param_name, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "bioscrape/types.pyx":2081
 *             param_value = float(param['value'])
 *             param_name = param['name']
 *             self.set_parameter(param_name = param_name, param_value = param_value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_parameter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_param_name_2, __pyx_v_param_name) < 0) __PYX_ERR(0, 2081, __pyx_L1_error)
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_param_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_param_value, __pyx_t_1) < 0) __PYX_ERR(0, 2081, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2078
 *         unspecified_param_names = set(self.params2index.keys())
 *         Parameters = xml.find_all('parameter')
 *         for param in Parameters:             # <<<<<<<<<<<<<<
 *             param_value = float(param['value'])
 *             param_name = param['name']
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":1978
 *         return self.update_array, self.delay_update_array
 * 
 *     def parse_model(self, filename, input_printout = False):             # <<<<<<<<<<<<<<
 *         """
 *         Parse the model from an XML file filling in all the local variables (propensities, delays, update arrays). Also
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("bioscrape.types.Model.parse_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_xml_file);
  __Pyx_XDECREF(__pyx_v_xml);
  __Pyx_XDECREF(__pyx_v_Model);
  __Pyx_XDECREF(__pyx_v_Species);
  __Pyx_XDECREF(__pyx_v_species);
  __Pyx_XDECREF(__pyx_v_species_name);
  __Pyx_XDECREF(__pyx_v_Reactions);
  __Pyx_XDECREF(__pyx_v_reaction);
  __Pyx_XDECREF(__pyx_v_text);
  __Pyx_XDECREF(__pyx_v_reactants);
  __Pyx_XDECREF(__pyx_v_products);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_delay_reactants);
  __Pyx_XDECREF(__pyx_v_delay_products);
  __Pyx_XDECREF(__pyx_v_propensity);
  __Pyx_XDECREF(__pyx_v_propensity_param_dict);
  __Pyx_XDECREF(__pyx_v_delay);
  __Pyx_XDECREF(__pyx_v_delay_param_dict);
  __Pyx_XDECREF(__pyx_v_delay_type);
  __Pyx_XDECREF(__pyx_v_Rules);
  __Pyx_XDECREF(__pyx_v_rule);
  __Pyx_XDECREF(__pyx_v_rule_attrs);
  __Pyx_XDECREF(__pyx_v_rule_type);
  __Pyx_XDECREF(__pyx_v_rule_frequency);
  __Pyx_XDECREF(__pyx_v_unspecified_param_names);
  __Pyx_XDECREF(__pyx_v_Parameters);
  __Pyx_XDECREF(__pyx_v_param);
  __Pyx_XDECREF(__pyx_v_param_name);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2084
 * 
 * 
 *     def has_delays(self):             # <<<<<<<<<<<<<<
 *         if self.has_delay:
 *             return True
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_41has_delays(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_41has_delays(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_delays (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_40has_delays(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_40has_delays(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("has_delays", 0);

  /* "bioscrape/types.pyx":2085
 * 
 *     def has_delays(self):
 *         if self.has_delay:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->has_delay != 0);
  if (__pyx_t_1) {

    /* "bioscrape/types.pyx":2086
 *     def has_delays(self):
 *         if self.has_delay:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":2085
 * 
 *     def has_delays(self):
 *         if self.has_delay:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  }

  /* "bioscrape/types.pyx":2088
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def get_params2index(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "bioscrape/types.pyx":2084
 * 
 * 
 *     def has_delays(self):             # <<<<<<<<<<<<<<
 *         if self.has_delay:
 *             return True
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2090
 *             return False
 * 
 *     def get_params2index(self):             # <<<<<<<<<<<<<<
 *         return self.params2index
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_43get_params2index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_43get_params2index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_params2index (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_42get_params2index(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_42get_params2index(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_params2index", 0);

  /* "bioscrape/types.pyx":2091
 * 
 *     def get_params2index(self):
 *         return self.params2index             # <<<<<<<<<<<<<<
 * 
 *     def get_species2index(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->params2index);
  __pyx_r = __pyx_v_self->params2index;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2090
 *             return False
 * 
 *     def get_params2index(self):             # <<<<<<<<<<<<<<
 *         return self.params2index
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2093
 *         return self.params2index
 * 
 *     def get_species2index(self):             # <<<<<<<<<<<<<<
 *         return self.species2index
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_45get_species2index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_45get_species2index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species2index (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_44get_species2index(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_44get_species2index(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species2index", 0);

  /* "bioscrape/types.pyx":2094
 * 
 *     def get_species2index(self):
 *         return self.species2index             # <<<<<<<<<<<<<<
 * 
 *     def get_species_list(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->species2index);
  __pyx_r = __pyx_v_self->species2index;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2093
 *         return self.params2index
 * 
 *     def get_species2index(self):             # <<<<<<<<<<<<<<
 *         return self.species2index
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2096
 *         return self.species2index
 * 
 *     def get_species_list(self):             # <<<<<<<<<<<<<<
 *         l = [None] * self.get_number_of_species()
 *         for s in self.species2index:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_47get_species_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_47get_species_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_list (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_46get_species_list(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_46get_species_list(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("get_species_list", 0);

  /* "bioscrape/types.pyx":2097
 * 
 *     def get_species_list(self):
 *         l = [None] * self.get_number_of_species()             # <<<<<<<<<<<<<<
 *         for s in self.species2index:
 *             l[self.species2index[s]] = s
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_species); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyList_SET_ITEM(__pyx_t_2, 0, Py_None);
  { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 2097, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_temp);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_temp;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_l = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2098
 *     def get_species_list(self):
 *         l = [None] * self.get_number_of_species()
 *         for s in self.species2index:             # <<<<<<<<<<<<<<
 *             l[self.species2index[s]] = s
 *         return l
 */
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2098, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_self->species2index, 1, ((PyObject *)NULL), (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_5, &__pyx_t_4, &__pyx_t_1, NULL, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 2098, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2099
 *         l = [None] * self.get_number_of_species()
 *         for s in self.species2index:
 *             l[self.species2index[s]] = s             # <<<<<<<<<<<<<<
 *         return l
 * 
 */
    if (unlikely(__pyx_v_self->species2index == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2099, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->species2index, __pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyObject_SetItem(__pyx_v_l, __pyx_t_1, __pyx_v_s) < 0)) __PYX_ERR(0, 2099, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2100
 *         for s in self.species2index:
 *             l[self.species2index[s]] = s
 *         return l             # <<<<<<<<<<<<<<
 * 
 *     def get_species_array(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2096
 *         return self.species2index
 * 
 *     def get_species_list(self):             # <<<<<<<<<<<<<<
 *         l = [None] * self.get_number_of_species()
 *         for s in self.species2index:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.Model.get_species_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2102
 *         return l
 * 
 *     def get_species_array(self):             # <<<<<<<<<<<<<<
 *         return np.array(self.species_values)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_49get_species_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_49get_species_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_array (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_48get_species_array(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_48get_species_array(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_species_array", 0);

  /* "bioscrape/types.pyx":2103
 * 
 *     def get_species_array(self):
 *         return np.array(self.species_values)             # <<<<<<<<<<<<<<
 * 
 *     def get_param_list(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_self->species_values)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self->species_values));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2102
 *         return l
 * 
 *     def get_species_array(self):             # <<<<<<<<<<<<<<
 *         return np.array(self.species_values)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.Model.get_species_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2105
 *         return np.array(self.species_values)
 * 
 *     def get_param_list(self):             # <<<<<<<<<<<<<<
 *         l = [None] * self.get_number_of_params()
 *         for p in self.params2index:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_51get_param_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_51get_param_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_param_list (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_50get_param_list(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_50get_param_list(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("get_param_list", 0);

  /* "bioscrape/types.pyx":2106
 * 
 *     def get_param_list(self):
 *         l = [None] * self.get_number_of_params()             # <<<<<<<<<<<<<<
 *         for p in self.params2index:
 *             l[self.params2index[p]] = p
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyList_SET_ITEM(__pyx_t_2, 0, Py_None);
  { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 2106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_temp);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_temp;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_l = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2107
 *     def get_param_list(self):
 *         l = [None] * self.get_number_of_params()
 *         for p in self.params2index:             # <<<<<<<<<<<<<<
 *             l[self.params2index[p]] = p
 *         return l
 */
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_self->params2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2107, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_self->params2index, 1, ((PyObject *)NULL), (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_5, &__pyx_t_4, &__pyx_t_1, NULL, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2108
 *         l = [None] * self.get_number_of_params()
 *         for p in self.params2index:
 *             l[self.params2index[p]] = p             # <<<<<<<<<<<<<<
 *         return l
 * 
 */
    if (unlikely(__pyx_v_self->params2index == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2108, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->params2index, __pyx_v_p); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyObject_SetItem(__pyx_v_l, __pyx_t_1, __pyx_v_p) < 0)) __PYX_ERR(0, 2108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2109
 *         for p in self.params2index:
 *             l[self.params2index[p]] = p
 *         return l             # <<<<<<<<<<<<<<
 * 
 *     def get_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2105
 *         return np.array(self.species_values)
 * 
 *     def get_param_list(self):             # <<<<<<<<<<<<<<
 *         l = [None] * self.get_number_of_params()
 *         for p in self.params2index:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.Model.get_param_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2111
 *         return l
 * 
 *     def get_params(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the set of parameter names.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_53get_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_52get_params[] = "\n        Get the set of parameter names.\n        :return: (dict_keys str) the parameter names\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_53get_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_params (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_52get_params(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_52get_params(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_params", 0);

  /* "bioscrape/types.pyx":2117
 *         """
 * 
 *         return self.params2index.keys()             # <<<<<<<<<<<<<<
 * 
 *     def get_species(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->params2index == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 2117, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_self->params2index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2111
 *         return l
 * 
 *     def get_params(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the set of parameter names.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Model.get_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2119
 *         return self.params2index.keys()
 * 
 *     def get_species(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the set of species names.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_55get_species(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_54get_species[] = "\n        Get the set of species names.\n        :return: (dict_keys str) the parameter names\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_55get_species(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_54get_species(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_54get_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_species", 0);

  /* "bioscrape/types.pyx":2124
 *         :return: (dict_keys str) the parameter names
 *         """
 *         return self.species2index.keys()             # <<<<<<<<<<<<<<
 * 
 *     def get_number_of_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 2124, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_self->species2index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2119
 *         return self.params2index.keys()
 * 
 *     def get_species(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the set of species names.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Model.get_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2126
 *         return self.species2index.keys()
 * 
 *     def get_number_of_params(self):             # <<<<<<<<<<<<<<
 *         return len(self.params2index.keys())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_57get_number_of_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_57get_number_of_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_params (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_56get_number_of_params(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_56get_number_of_params(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  __Pyx_RefNannySetupContext("get_number_of_params", 0);

  /* "bioscrape/types.pyx":2127
 * 
 *     def get_number_of_params(self):
 *         return len(self.params2index.keys())             # <<<<<<<<<<<<<<
 * 
 *     def get_parameter_values(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->params2index == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 2127, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_self->params2index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2126
 *         return self.species2index.keys()
 * 
 *     def get_number_of_params(self):             # <<<<<<<<<<<<<<
 *         return len(self.params2index.keys())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Model.get_number_of_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2129
 *         return len(self.params2index.keys())
 * 
 *     def get_parameter_values(self):             # <<<<<<<<<<<<<<
 *         return self.params_values
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_59get_parameter_values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_59get_parameter_values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_parameter_values (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_58get_parameter_values(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_58get_parameter_values(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_parameter_values", 0);

  /* "bioscrape/types.pyx":2130
 * 
 *     def get_parameter_values(self):
 *         return self.params_values             # <<<<<<<<<<<<<<
 * 
 *     def get_parameter_dictionary(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->params_values));
  __pyx_r = ((PyObject *)__pyx_v_self->params_values);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2129
 *         return len(self.params2index.keys())
 * 
 *     def get_parameter_values(self):             # <<<<<<<<<<<<<<
 *         return self.params_values
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2132
 *         return self.params_values
 * 
 *     def get_parameter_dictionary(self):             # <<<<<<<<<<<<<<
 *         param_dict = {}
 *         keys = self.get_params()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_61get_parameter_dictionary(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_61get_parameter_dictionary(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_parameter_dictionary (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_60get_parameter_dictionary(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_60get_parameter_dictionary(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_v_param_dict = NULL;
  PyObject *__pyx_v_keys = NULL;
  PyObject *__pyx_v_values = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  __Pyx_RefNannySetupContext("get_parameter_dictionary", 0);

  /* "bioscrape/types.pyx":2133
 * 
 *     def get_parameter_dictionary(self):
 *         param_dict = {}             # <<<<<<<<<<<<<<
 *         keys = self.get_params()
 *         values = self.get_parameter_values()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_param_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2134
 *     def get_parameter_dictionary(self):
 *         param_dict = {}
 *         keys = self.get_params()             # <<<<<<<<<<<<<<
 *         values = self.get_parameter_values()
 *         for (key, value) in zip(keys, values):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_keys = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2135
 *         param_dict = {}
 *         keys = self.get_params()
 *         values = self.get_parameter_values()             # <<<<<<<<<<<<<<
 *         for (key, value) in zip(keys, values):
 *             param_dict[key] = value
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_parameter_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_values = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2136
 *         keys = self.get_params()
 *         values = self.get_parameter_values()
 *         for (key, value) in zip(keys, values):             # <<<<<<<<<<<<<<
 *             param_dict[key] = value
 *         return param_dict
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_keys);
  __Pyx_GIVEREF(__pyx_v_keys);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_keys);
  __Pyx_INCREF(__pyx_v_values);
  __Pyx_GIVEREF(__pyx_v_values);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_values);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2136, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2136, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2136, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2136, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2136, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 2136, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2136, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "bioscrape/types.pyx":2137
 *         values = self.get_parameter_values()
 *         for (key, value) in zip(keys, values):
 *             param_dict[key] = value             # <<<<<<<<<<<<<<
 *         return param_dict
 * 
 */
    if (unlikely(PyDict_SetItem(__pyx_v_param_dict, __pyx_v_key, __pyx_v_value) < 0)) __PYX_ERR(0, 2137, __pyx_L1_error)

    /* "bioscrape/types.pyx":2136
 *         keys = self.get_params()
 *         values = self.get_parameter_values()
 *         for (key, value) in zip(keys, values):             # <<<<<<<<<<<<<<
 *             param_dict[key] = value
 *         return param_dict
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2138
 *         for (key, value) in zip(keys, values):
 *             param_dict[key] = value
 *         return param_dict             # <<<<<<<<<<<<<<
 * 
 *     def get_species(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_param_dict);
  __pyx_r = __pyx_v_param_dict;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2132
 *         return self.params_values
 * 
 *     def get_parameter_dictionary(self):             # <<<<<<<<<<<<<<
 *         param_dict = {}
 *         keys = self.get_params()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.Model.get_parameter_dictionary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_param_dict);
  __Pyx_XDECREF(__pyx_v_keys);
  __Pyx_XDECREF(__pyx_v_values);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2140
 *         return param_dict
 * 
 *     def get_species(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the set of species names.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_63get_species(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_62get_species[] = "\n        Get the set of species names.\n        :return: (dict_keys str) the species names\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_63get_species(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_62get_species(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_62get_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_species", 0);

  /* "bioscrape/types.pyx":2146
 *         """
 * 
 *         return self.species2index.keys()             # <<<<<<<<<<<<<<
 * 
 *     def get_species_dictionary(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 2146, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_self->species2index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2140
 *         return param_dict
 * 
 *     def get_species(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the set of species names.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Model.get_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2148
 *         return self.species2index.keys()
 * 
 *     def get_species_dictionary(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get a dictionary {"species":value}
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_65get_species_dictionary(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_64get_species_dictionary[] = "\n        Get a dictionary {\"species\":value}\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_65get_species_dictionary(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_dictionary (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_64get_species_dictionary(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_64get_species_dictionary(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_species_dict = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("get_species_dictionary", 0);

  /* "bioscrape/types.pyx":2152
 *         Get a dictionary {"species":value}
 *         """
 *         A = self.get_species_array()             # <<<<<<<<<<<<<<
 *         species_dict = {}
 *         for s in self.species2index:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_species_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_A = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2153
 *         """
 *         A = self.get_species_array()
 *         species_dict = {}             # <<<<<<<<<<<<<<
 *         for s in self.species2index:
 *             species_dict[s] = A[self.species2index[s]]
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_species_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2154
 *         A = self.get_species_array()
 *         species_dict = {}
 *         for s in self.species2index:             # <<<<<<<<<<<<<<
 *             species_dict[s] = A[self.species2index[s]]
 *         return species_dict
 */
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2154, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_self->species2index, 1, ((PyObject *)NULL), (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_5, &__pyx_t_4, &__pyx_t_2, NULL, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 2154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":2155
 *         species_dict = {}
 *         for s in self.species2index:
 *             species_dict[s] = A[self.species2index[s]]             # <<<<<<<<<<<<<<
 *         return species_dict
 *         # return {(s, A[self.species2index[s]]) for s in self.species2index}
 */
    if (unlikely(__pyx_v_self->species2index == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2155, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->species2index, __pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_A, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_species_dict, __pyx_v_s, __pyx_t_3) < 0)) __PYX_ERR(0, 2155, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2156
 *         for s in self.species2index:
 *             species_dict[s] = A[self.species2index[s]]
 *         return species_dict             # <<<<<<<<<<<<<<
 *         # return {(s, A[self.species2index[s]]) for s in self.species2index}
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_species_dict);
  __pyx_r = __pyx_v_species_dict;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2148
 *         return self.species2index.keys()
 * 
 *     def get_species_dictionary(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get a dictionary {"species":value}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.Model.get_species_dictionary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_species_dict);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2159
 *         # return {(s, A[self.species2index[s]]) for s in self.species2index}
 * 
 *     def get_number_of_species(self):             # <<<<<<<<<<<<<<
 *         return len(self.species2index.keys())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_67get_number_of_species(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_67get_number_of_species(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_species (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_66get_number_of_species(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_66get_number_of_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  __Pyx_RefNannySetupContext("get_number_of_species", 0);

  /* "bioscrape/types.pyx":2160
 * 
 *     def get_number_of_species(self):
 *         return len(self.species2index.keys())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 2160, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_self->species2index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2159
 *         # return {(s, A[self.species2index[s]]) for s in self.species2index}
 * 
 *     def get_number_of_species(self):             # <<<<<<<<<<<<<<
 *         return len(self.species2index.keys())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Model.get_number_of_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2163
 * 
 * 
 *     def set_params(self, param_dict):             # <<<<<<<<<<<<<<
 *         """
 *         Set parameter values
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_69set_params(PyObject *__pyx_v_self, PyObject *__pyx_v_param_dict); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_68set_params[] = "\n        Set parameter values\n        :param param_dict: (dict:str -> double) Dictionary containing the parameters to set mapped to desired values.\n        :return: None\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_69set_params(PyObject *__pyx_v_self, PyObject *__pyx_v_param_dict) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_params (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_68set_params(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((PyObject *)__pyx_v_param_dict));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_68set_params(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_dict) {
  PyObject *__pyx_v_param_names = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("set_params", 0);

  /* "bioscrape/types.pyx":2169
 *         :return: None
 *         """
 *         param_names = set(self.params2index.keys())             # <<<<<<<<<<<<<<
 *         for p in param_dict:
 *             if p in param_names:
 */
  if (unlikely(__pyx_v_self->params2index == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 2169, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_self->params2index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_param_names = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2170
 *         """
 *         param_names = set(self.params2index.keys())
 *         for p in param_dict:             # <<<<<<<<<<<<<<
 *             if p in param_names:
 *                 self.params_values[self.params2index[p]] = param_dict[p]
 */
  if (likely(PyList_CheckExact(__pyx_v_param_dict)) || PyTuple_CheckExact(__pyx_v_param_dict)) {
    __pyx_t_2 = __pyx_v_param_dict; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_param_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2170, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2170, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2170, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2170, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2171
 *         param_names = set(self.params2index.keys())
 *         for p in param_dict:
 *             if p in param_names:             # <<<<<<<<<<<<<<
 *                 self.params_values[self.params2index[p]] = param_dict[p]
 *             else:
 */
    __pyx_t_5 = (__Pyx_PySet_ContainsTF(__pyx_v_p, __pyx_v_param_names, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2171, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "bioscrape/types.pyx":2172
 *         for p in param_dict:
 *             if p in param_names:
 *                 self.params_values[self.params2index[p]] = param_dict[p]             # <<<<<<<<<<<<<<
 *             else:
 *                 warnings.warn('Trying to set parameter that is not in model: %s'  % p)
 */
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_param_dict, __pyx_v_p); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__pyx_v_self->params2index == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 2172, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_self->params2index, __pyx_v_p); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->params_values), __pyx_t_7, __pyx_t_1) < 0)) __PYX_ERR(0, 2172, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "bioscrape/types.pyx":2171
 *         param_names = set(self.params2index.keys())
 *         for p in param_dict:
 *             if p in param_names:             # <<<<<<<<<<<<<<
 *                 self.params_values[self.params2index[p]] = param_dict[p]
 *             else:
 */
      goto __pyx_L5;
    }

    /* "bioscrape/types.pyx":2174
 *                 self.params_values[self.params2index[p]] = param_dict[p]
 *             else:
 *                 warnings.warn('Trying to set parameter that is not in model: %s'  % p)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_warnings); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_warn); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Trying_to_set_parameter_that_is, __pyx_v_p); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L5:;

    /* "bioscrape/types.pyx":2170
 *         """
 *         param_names = set(self.params2index.keys())
 *         for p in param_dict:             # <<<<<<<<<<<<<<
 *             if p in param_names:
 *                 self.params_values[self.params2index[p]] = param_dict[p]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2163
 * 
 * 
 *     def set_params(self, param_dict):             # <<<<<<<<<<<<<<
 *         """
 *         Set parameter values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.Model.set_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_param_names);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2177
 * 
 * 
 *     def set_species(self, species_dict):             # <<<<<<<<<<<<<<
 *         """
 *         Set initial species values
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_71set_species(PyObject *__pyx_v_self, PyObject *__pyx_v_species_dict); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_70set_species[] = "\n        Set initial species values\n\n        :param species_dict: (dict:str -> double) Dictionary containing the species to set mapped to desired values.\n        :return: None\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_71set_species(PyObject *__pyx_v_self, PyObject *__pyx_v_species_dict) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_species (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_70set_species(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((PyObject *)__pyx_v_species_dict));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_70set_species(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_species_dict) {
  PyObject *__pyx_v_species_names = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("set_species", 0);

  /* "bioscrape/types.pyx":2184
 *         :return: None
 *         """
 *         species_names = set(self.species2index.keys())             # <<<<<<<<<<<<<<
 *         for s in species_dict:
 *             if s in species_names:
 */
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 2184, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_self->species2index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_species_names = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2185
 *         """
 *         species_names = set(self.species2index.keys())
 *         for s in species_dict:             # <<<<<<<<<<<<<<
 *             if s in species_names:
 *                 self.species_values[self.species2index[s]] = species_dict[s]
 */
  if (likely(PyList_CheckExact(__pyx_v_species_dict)) || PyTuple_CheckExact(__pyx_v_species_dict)) {
    __pyx_t_2 = __pyx_v_species_dict; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_species_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2185, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2185, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2185, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2185, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2185, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2185, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2186
 *         species_names = set(self.species2index.keys())
 *         for s in species_dict:
 *             if s in species_names:             # <<<<<<<<<<<<<<
 *                 self.species_values[self.species2index[s]] = species_dict[s]
 *             else:
 */
    __pyx_t_5 = (__Pyx_PySet_ContainsTF(__pyx_v_s, __pyx_v_species_names, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2186, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "bioscrape/types.pyx":2187
 *         for s in species_dict:
 *             if s in species_names:
 *                 self.species_values[self.species2index[s]] = species_dict[s]             # <<<<<<<<<<<<<<
 *             else:
 *                 warnings.warn('Trying to set species that is not in model: %s' % s)
 */
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_species_dict, __pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2187, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__pyx_v_self->species2index == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 2187, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_self->species2index, __pyx_v_s); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2187, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->species_values), __pyx_t_7, __pyx_t_1) < 0)) __PYX_ERR(0, 2187, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "bioscrape/types.pyx":2186
 *         species_names = set(self.species2index.keys())
 *         for s in species_dict:
 *             if s in species_names:             # <<<<<<<<<<<<<<
 *                 self.species_values[self.species2index[s]] = species_dict[s]
 *             else:
 */
      goto __pyx_L5;
    }

    /* "bioscrape/types.pyx":2189
 *                 self.species_values[self.species2index[s]] = species_dict[s]
 *             else:
 *                 warnings.warn('Trying to set species that is not in model: %s' % s)             # <<<<<<<<<<<<<<
 * 
 *     cdef (vector[void*])* get_c_repeat_rules(self):
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_warnings); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_warn); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Trying_to_set_species_that_is_no, __pyx_v_s); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L5:;

    /* "bioscrape/types.pyx":2185
 *         """
 *         species_names = set(self.species2index.keys())
 *         for s in species_dict:             # <<<<<<<<<<<<<<
 *             if s in species_names:
 *                 self.species_values[self.species2index[s]] = species_dict[s]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2177
 * 
 * 
 *     def set_species(self, species_dict):             # <<<<<<<<<<<<<<
 *         """
 *         Set initial species values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.Model.set_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_species_names);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2191
 *                 warnings.warn('Trying to set species that is not in model: %s' % s)
 * 
 *     cdef (vector[void*])* get_c_repeat_rules(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the set of rules to implement as a set of void pointers. Must be cast back to a Rule object to be used.
 */

static std::vector<void *>  *__pyx_f_9bioscrape_5types_5Model_get_c_repeat_rules(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  std::vector<void *>  *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_c_repeat_rules", 0);

  /* "bioscrape/types.pyx":2197
 *         :return: (vector[void*])* pointer to the vector of Rule objects
 *         """
 *         return & self.c_repeat_rules             # <<<<<<<<<<<<<<
 * 
 *     def get_propensities(self):
 */
  __pyx_r = (&__pyx_v_self->c_repeat_rules);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2191
 *                 warnings.warn('Trying to set species that is not in model: %s' % s)
 * 
 *     cdef (vector[void*])* get_c_repeat_rules(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the set of rules to implement as a set of void pointers. Must be cast back to a Rule object to be used.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2199
 *         return & self.c_repeat_rules
 * 
 *     def get_propensities(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the propensities list.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_73get_propensities(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_72get_propensities[] = "\n        Get the propensities list.\n\n        :return: (list) List of the propensities for each reaction.\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_73get_propensities(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propensities (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_72get_propensities(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_72get_propensities(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_propensities", 0);

  /* "bioscrape/types.pyx":2205
 *         :return: (list) List of the propensities for each reaction.
 *         """
 *         return self.propensities             # <<<<<<<<<<<<<<
 * 
 *     def get_delays(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->propensities);
  __pyx_r = __pyx_v_self->propensities;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2199
 *         return & self.c_repeat_rules
 * 
 *     def get_propensities(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the propensities list.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2207
 *         return self.propensities
 * 
 *     def get_delays(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the delays list
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_75get_delays(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_74get_delays[] = "\n        Get the delays list\n\n        :return: (list) List of the delay objects for each reaction.\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_75get_delays(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_delays (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_74get_delays(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_74get_delays(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_delays", 0);

  /* "bioscrape/types.pyx":2213
 *         :return: (list) List of the delay objects for each reaction.
 *         """
 *         return self.delays             # <<<<<<<<<<<<<<
 * 
 *     def get_reactions(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->delays);
  __pyx_r = __pyx_v_self->delays;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2207
 *         return self.propensities
 * 
 *     def get_delays(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the delays list
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2215
 *         return self.delays
 * 
 *     def get_reactions(self):             # <<<<<<<<<<<<<<
 *         return self.reaction_list
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_77get_reactions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_77get_reactions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_reactions (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_76get_reactions(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_76get_reactions(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_reactions", 0);

  /* "bioscrape/types.pyx":2216
 * 
 *     def get_reactions(self):
 *         return self.reaction_list             # <<<<<<<<<<<<<<
 * 
 *     def get_rules(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->reaction_list);
  __pyx_r = __pyx_v_self->reaction_list;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2215
 *         return self.delays
 * 
 *     def get_reactions(self):             # <<<<<<<<<<<<<<
 *         return self.reaction_list
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2218
 *         return self.reaction_list
 * 
 *     def get_rules(self):             # <<<<<<<<<<<<<<
 *         return self.rule_definitions
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_79get_rules(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_79get_rules(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rules (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_78get_rules(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_78get_rules(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rules", 0);

  /* "bioscrape/types.pyx":2219
 * 
 *     def get_rules(self):
 *         return self.rule_definitions             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray get_species_values(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->rule_definitions);
  __pyx_r = __pyx_v_self->rule_definitions;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2218
 *         return self.reaction_list
 * 
 *     def get_rules(self):             # <<<<<<<<<<<<<<
 *         return self.rule_definitions
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2221
 *         return self.rule_definitions
 * 
 *     cdef np.ndarray get_species_values(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the species values as an array
 */

static PyArrayObject *__pyx_f_9bioscrape_5types_5Model_get_species_values(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_values", 0);

  /* "bioscrape/types.pyx":2227
 *         """
 * 
 *         return self.species_values             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray get_params_values(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->species_values));
  __pyx_r = __pyx_v_self->species_values;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2221
 *         return self.rule_definitions
 * 
 *     cdef np.ndarray get_species_values(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the species values as an array
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2229
 *         return self.species_values
 * 
 *     cdef np.ndarray get_params_values(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the parameter values as an array
 */

static PyArrayObject *__pyx_f_9bioscrape_5types_5Model_get_params_values(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_params_values", 0);

  /* "bioscrape/types.pyx":2234
 *         :return: (np.ndarray) the parameter values
 *         """
 *         return self.params_values             # <<<<<<<<<<<<<<
 * 
 *     cdef (vector[void*])* get_c_propensities(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->params_values));
  __pyx_r = __pyx_v_self->params_values;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2229
 *         return self.species_values
 * 
 *     cdef np.ndarray get_params_values(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the parameter values as an array
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2236
 *         return self.params_values
 * 
 *     cdef (vector[void*])* get_c_propensities(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the propensity objects for each reaction as a vector of void pointers. Must be cast back to Propensity
 */

static std::vector<void *>  *__pyx_f_9bioscrape_5types_5Model_get_c_propensities(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  std::vector<void *>  *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_c_propensities", 0);

  /* "bioscrape/types.pyx":2242
 *         :return: (vector[void*]*) Pointer to a vector of void pointers, where i-th void pointer points to propensity i
 *         """
 *         return & self.c_propensities             # <<<<<<<<<<<<<<
 * 
 *     cdef (vector[void*])* get_c_delays(self):
 */
  __pyx_r = (&__pyx_v_self->c_propensities);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2236
 *         return self.params_values
 * 
 *     cdef (vector[void*])* get_c_propensities(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the propensity objects for each reaction as a vector of void pointers. Must be cast back to Propensity
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2244
 *         return & self.c_propensities
 * 
 *     cdef (vector[void*])* get_c_delays(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the delay objects for each reaction as a vector of void pointers. Must be cast back to Delay.
 */

static std::vector<void *>  *__pyx_f_9bioscrape_5types_5Model_get_c_delays(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  std::vector<void *>  *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_c_delays", 0);

  /* "bioscrape/types.pyx":2249
 *         :return: (vector[void*] *) Pointer to vector of void *, where the i-th void pointer points to delay for rxn i
 *         """
 *         return & self.c_delays             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray get_update_array(self):
 */
  __pyx_r = (&__pyx_v_self->c_delays);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2244
 *         return & self.c_propensities
 * 
 *     cdef (vector[void*])* get_c_delays(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the delay objects for each reaction as a vector of void pointers. Must be cast back to Delay.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2251
 *         return & self.c_delays
 * 
 *     cdef np.ndarray get_update_array(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the stoichiometric matrix for changes that occur immdeiately.
 */

static PyArrayObject *__pyx_f_9bioscrape_5types_5Model_get_update_array(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_update_array", 0);

  /* "bioscrape/types.pyx":2256
 *         :return: (np.ndarray) A 2-D array with 1 row per species, 1 column for each reaction.
 *         """
 *         return self.update_array             # <<<<<<<<<<<<<<
 * 
 *     def py_get_update_array(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->update_array));
  __pyx_r = __pyx_v_self->update_array;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2251
 *         return & self.c_delays
 * 
 *     cdef np.ndarray get_update_array(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the stoichiometric matrix for changes that occur immdeiately.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2258
 *         return self.update_array
 * 
 *     def py_get_update_array(self):             # <<<<<<<<<<<<<<
 *         return self.update_array
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_81py_get_update_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_81py_get_update_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_update_array (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_80py_get_update_array(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_80py_get_update_array(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_update_array", 0);

  /* "bioscrape/types.pyx":2259
 * 
 *     def py_get_update_array(self):
 *         return self.update_array             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray get_delay_update_array(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->update_array));
  __pyx_r = ((PyObject *)__pyx_v_self->update_array);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2258
 *         return self.update_array
 * 
 *     def py_get_update_array(self):             # <<<<<<<<<<<<<<
 *         return self.update_array
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2261
 *         return self.update_array
 * 
 *     cdef np.ndarray get_delay_update_array(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the stoichiometric matrix for changes that occur after a delay.
 */

static PyArrayObject *__pyx_f_9bioscrape_5types_5Model_get_delay_update_array(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_delay_update_array", 0);

  /* "bioscrape/types.pyx":2266
 *         :return: (np.ndarray) A 2-D array with 1 row per species, 1 column for each reaction.
 *         """
 *         return self.delay_update_array             # <<<<<<<<<<<<<<
 * 
 *     def py_get_delay_update_array(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->delay_update_array));
  __pyx_r = __pyx_v_self->delay_update_array;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2261
 *         return self.update_array
 * 
 *     cdef np.ndarray get_delay_update_array(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the stoichiometric matrix for changes that occur after a delay.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2268
 *         return self.delay_update_array
 * 
 *     def py_get_delay_update_array(self):             # <<<<<<<<<<<<<<
 *         return self.delay_update_array
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_83py_get_delay_update_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_83py_get_delay_update_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_delay_update_array (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_82py_get_delay_update_array(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_82py_get_delay_update_array(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_delay_update_array", 0);

  /* "bioscrape/types.pyx":2269
 * 
 *     def py_get_delay_update_array(self):
 *         return self.delay_update_array             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->delay_update_array));
  __pyx_r = ((PyObject *)__pyx_v_self->delay_update_array);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2268
 *         return self.delay_update_array
 * 
 *     def py_get_delay_update_array(self):             # <<<<<<<<<<<<<<
 *         return self.delay_update_array
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2272
 * 
 * 
 *     def get_param_index(self, param_name):             # <<<<<<<<<<<<<<
 *         if param_name in self.params2index:
 *             return self.params2index[param_name]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_85get_param_index(PyObject *__pyx_v_self, PyObject *__pyx_v_param_name); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_85get_param_index(PyObject *__pyx_v_self, PyObject *__pyx_v_param_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_param_index (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_84get_param_index(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((PyObject *)__pyx_v_param_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_84get_param_index(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_param_index", 0);

  /* "bioscrape/types.pyx":2273
 * 
 *     def get_param_index(self, param_name):
 *         if param_name in self.params2index:             # <<<<<<<<<<<<<<
 *             return self.params2index[param_name]
 *         return -1
 */
  if (unlikely(__pyx_v_self->params2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2273, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_param_name, __pyx_v_self->params2index, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2273, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "bioscrape/types.pyx":2274
 *     def get_param_index(self, param_name):
 *         if param_name in self.params2index:
 *             return self.params2index[param_name]             # <<<<<<<<<<<<<<
 *         return -1
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->params2index == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2274, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->params2index, __pyx_v_param_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":2273
 * 
 *     def get_param_index(self, param_name):
 *         if param_name in self.params2index:             # <<<<<<<<<<<<<<
 *             return self.params2index[param_name]
 *         return -1
 */
  }

  /* "bioscrape/types.pyx":2275
 *         if param_name in self.params2index:
 *             return self.params2index[param_name]
 *         return -1             # <<<<<<<<<<<<<<
 * 
 *     def get_species_index(self, species_name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_neg_1);
  __pyx_r = __pyx_int_neg_1;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2272
 * 
 * 
 *     def get_param_index(self, param_name):             # <<<<<<<<<<<<<<
 *         if param_name in self.params2index:
 *             return self.params2index[param_name]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.Model.get_param_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2277
 *         return -1
 * 
 *     def get_species_index(self, species_name):             # <<<<<<<<<<<<<<
 *         if species_name in self.species2index:
 *             return self.species2index[species_name]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_87get_species_index(PyObject *__pyx_v_self, PyObject *__pyx_v_species_name); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_87get_species_index(PyObject *__pyx_v_self, PyObject *__pyx_v_species_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_index (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_86get_species_index(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((PyObject *)__pyx_v_species_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_86get_species_index(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_species_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_species_index", 0);

  /* "bioscrape/types.pyx":2278
 * 
 *     def get_species_index(self, species_name):
 *         if species_name in self.species2index:             # <<<<<<<<<<<<<<
 *             return self.species2index[species_name]
 *         return -1
 */
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2278, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_species_name, __pyx_v_self->species2index, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2278, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "bioscrape/types.pyx":2279
 *     def get_species_index(self, species_name):
 *         if species_name in self.species2index:
 *             return self.species2index[species_name]             # <<<<<<<<<<<<<<
 *         return -1
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->species2index == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2279, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->species2index, __pyx_v_species_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":2278
 * 
 *     def get_species_index(self, species_name):
 *         if species_name in self.species2index:             # <<<<<<<<<<<<<<
 *             return self.species2index[species_name]
 *         return -1
 */
  }

  /* "bioscrape/types.pyx":2280
 *         if species_name in self.species2index:
 *             return self.species2index[species_name]
 *         return -1             # <<<<<<<<<<<<<<
 * 
 *     def get_param_value(self, param_name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_neg_1);
  __pyx_r = __pyx_int_neg_1;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2277
 *         return -1
 * 
 *     def get_species_index(self, species_name):             # <<<<<<<<<<<<<<
 *         if species_name in self.species2index:
 *             return self.species2index[species_name]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.Model.get_species_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2282
 *         return -1
 * 
 *     def get_param_value(self, param_name):             # <<<<<<<<<<<<<<
 *         if param_name in self.params2index:
 *             return self.params_values[self.params2index[param_name]]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_89get_param_value(PyObject *__pyx_v_self, PyObject *__pyx_v_param_name); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_89get_param_value(PyObject *__pyx_v_self, PyObject *__pyx_v_param_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_param_value (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_88get_param_value(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((PyObject *)__pyx_v_param_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_88get_param_value(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_param_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_param_value", 0);

  /* "bioscrape/types.pyx":2283
 * 
 *     def get_param_value(self, param_name):
 *         if param_name in self.params2index:             # <<<<<<<<<<<<<<
 *             return self.params_values[self.params2index[param_name]]
 *         else:
 */
  if (unlikely(__pyx_v_self->params2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2283, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_param_name, __pyx_v_self->params2index, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2283, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "bioscrape/types.pyx":2284
 *     def get_param_value(self, param_name):
 *         if param_name in self.params2index:
 *             return self.params_values[self.params2index[param_name]]             # <<<<<<<<<<<<<<
 *         else:
 *             raise LookupError('No parameter with name '+ param_name)
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->params2index == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2284, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->params2index, __pyx_v_param_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->params_values), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":2283
 * 
 *     def get_param_value(self, param_name):
 *         if param_name in self.params2index:             # <<<<<<<<<<<<<<
 *             return self.params_values[self.params2index[param_name]]
 *         else:
 */
  }

  /* "bioscrape/types.pyx":2286
 *             return self.params_values[self.params2index[param_name]]
 *         else:
 *             raise LookupError('No parameter with name '+ param_name)             # <<<<<<<<<<<<<<
 * 
 *     def get_species_value(self, species_name):
 */
  /*else*/ {
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_No_parameter_with_name, __pyx_v_param_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_LookupError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2286, __pyx_L1_error)
  }

  /* "bioscrape/types.pyx":2282
 *         return -1
 * 
 *     def get_param_value(self, param_name):             # <<<<<<<<<<<<<<
 *         if param_name in self.params2index:
 *             return self.params_values[self.params2index[param_name]]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.Model.get_param_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2288
 *             raise LookupError('No parameter with name '+ param_name)
 * 
 *     def get_species_value(self, species_name):             # <<<<<<<<<<<<<<
 *         if species_name in self.species2index:
 *             return self.species_values[self.species2index[species_name]]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_91get_species_value(PyObject *__pyx_v_self, PyObject *__pyx_v_species_name); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_91get_species_value(PyObject *__pyx_v_self, PyObject *__pyx_v_species_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_species_value (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_90get_species_value(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((PyObject *)__pyx_v_species_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_90get_species_value(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_species_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_species_value", 0);

  /* "bioscrape/types.pyx":2289
 * 
 *     def get_species_value(self, species_name):
 *         if species_name in self.species2index:             # <<<<<<<<<<<<<<
 *             return self.species_values[self.species2index[species_name]]
 *         else:
 */
  if (unlikely(__pyx_v_self->species2index == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2289, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_species_name, __pyx_v_self->species2index, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2289, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "bioscrape/types.pyx":2290
 *     def get_species_value(self, species_name):
 *         if species_name in self.species2index:
 *             return self.species_values[self.species2index[species_name]]             # <<<<<<<<<<<<<<
 *         else:
 *             raise LookupError('No species with name '+ species_name)
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->species2index == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2290, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->species2index, __pyx_v_species_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->species_values), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":2289
 * 
 *     def get_species_value(self, species_name):
 *         if species_name in self.species2index:             # <<<<<<<<<<<<<<
 *             return self.species_values[self.species2index[species_name]]
 *         else:
 */
  }

  /* "bioscrape/types.pyx":2292
 *             return self.species_values[self.species2index[species_name]]
 *         else:
 *             raise LookupError('No species with name '+ species_name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_No_species_with_name, __pyx_v_species_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_LookupError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2292, __pyx_L1_error)
  }

  /* "bioscrape/types.pyx":2288
 *             raise LookupError('No parameter with name '+ param_name)
 * 
 *     def get_species_value(self, species_name):             # <<<<<<<<<<<<<<
 *         if species_name in self.species2index:
 *             return self.species_values[self.species2index[species_name]]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.Model.get_species_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2295
 * 
 * 
 *     def parse_general_expression(self, instring):             # <<<<<<<<<<<<<<
 *         return parse_expression(instring,self.species2index,self.params2index)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_93parse_general_expression(PyObject *__pyx_v_self, PyObject *__pyx_v_instring); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_93parse_general_expression(PyObject *__pyx_v_self, PyObject *__pyx_v_instring) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_general_expression (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_92parse_general_expression(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((PyObject *)__pyx_v_instring));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_92parse_general_expression(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_instring) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("parse_general_expression", 0);

  /* "bioscrape/types.pyx":2296
 * 
 *     def parse_general_expression(self, instring):
 *         return parse_expression(instring,self.species2index,self.params2index)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_parse_expression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_instring, __pyx_v_self->species2index, __pyx_v_self->params2index};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2296, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_instring, __pyx_v_self->species2index, __pyx_v_self->params2index};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2296, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_instring);
    __Pyx_GIVEREF(__pyx_v_instring);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_instring);
    __Pyx_INCREF(__pyx_v_self->species2index);
    __Pyx_GIVEREF(__pyx_v_self->species2index);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_self->species2index);
    __Pyx_INCREF(__pyx_v_self->params2index);
    __Pyx_GIVEREF(__pyx_v_self->params2index);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_self->params2index);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2295
 * 
 * 
 *     def parse_general_expression(self, instring):             # <<<<<<<<<<<<<<
 *         return parse_expression(instring,self.species2index,self.params2index)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Model.parse_general_expression", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2300
 * 
 *     #Generates an SBML Model
 *     def generate_sbml_model(self, stochastic_model = False, **keywords):             # <<<<<<<<<<<<<<
 *         # Create an empty SBMLDocument object to hold the bioscrape model
 *         document, model = create_sbml_model(**keywords)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_95generate_sbml_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_95generate_sbml_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_stochastic_model = 0;
  PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_sbml_model (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stochastic_model,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stochastic_model);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "generate_sbml_model") < 0)) __PYX_ERR(0, 2300, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_stochastic_model = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_sbml_model", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2300, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.Model.generate_sbml_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_94generate_sbml_model(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_stochastic_model, __pyx_v_keywords);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_94generate_sbml_model(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_stochastic_model, PyObject *__pyx_v_keywords) {
  PyObject *__pyx_v_document = NULL;
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_sorted_params = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_v_sorted_species = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_rxn_count = NULL;
  PyObject *__pyx_v_rxn_tuple = NULL;
  PyObject *__pyx_v_rxn_id = NULL;
  PyObject *__pyx_v_reactants = NULL;
  PyObject *__pyx_v_products = NULL;
  PyObject *__pyx_v_propensity_type = NULL;
  PyObject *__pyx_v_propensity_param_dict = NULL;
  PyObject *__pyx_v_delay_type = NULL;
  PyObject *__pyx_v_delay_reactants = NULL;
  PyObject *__pyx_v_delay_products = NULL;
  PyObject *__pyx_v_delay_param_dict = NULL;
  PyObject *__pyx_v_delay_dict = NULL;
  PyObject *__pyx_v_rule_count = NULL;
  PyObject *__pyx_v_rule_tuple = NULL;
  PyObject *__pyx_v_rule_id = NULL;
  PyObject *__pyx_v_rule_type = NULL;
  PyObject *__pyx_v_rule_dict = NULL;
  PyObject *__pyx_v_rule_frequency = NULL;
  PyObject *__pyx_v_rule_formula = NULL;
  PyObject *__pyx_v_rule_variable = NULL;
  PyObject *__pyx_v_equation = NULL;
  PyObject *__pyx_v_split_eqn = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_err_message = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  __Pyx_RefNannySetupContext("generate_sbml_model", 0);

  /* "bioscrape/types.pyx":2302
 *     def generate_sbml_model(self, stochastic_model = False, **keywords):
 *         # Create an empty SBMLDocument object to hold the bioscrape model
 *         document, model = create_sbml_model(**keywords)             # <<<<<<<<<<<<<<
 * 
 *         sorted_params = list(self.get_param_list())
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_create_sbml_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_v_keywords); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2302, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 2302, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2302, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_document = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_model = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":2304
 *         document, model = create_sbml_model(**keywords)
 * 
 *         sorted_params = list(self.get_param_list())             # <<<<<<<<<<<<<<
 *         sorted_params.sort()
 *         for p in sorted_params:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_param_list); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sorted_params = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":2305
 * 
 *         sorted_params = list(self.get_param_list())
 *         sorted_params.sort()             # <<<<<<<<<<<<<<
 *         for p in sorted_params:
 *             val = self.get_param_value(p)
 */
  __pyx_t_6 = PyList_Sort(__pyx_v_sorted_params); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 2305, __pyx_L1_error)

  /* "bioscrape/types.pyx":2306
 *         sorted_params = list(self.get_param_list())
 *         sorted_params.sort()
 *         for p in sorted_params:             # <<<<<<<<<<<<<<
 *             val = self.get_param_value(p)
 *             if p[0] == '_':
 */
  __pyx_t_3 = __pyx_v_sorted_params; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 2306, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":2307
 *         sorted_params.sort()
 *         for p in sorted_params:
 *             val = self.get_param_value(p)             # <<<<<<<<<<<<<<
 *             if p[0] == '_':
 *                 # Remove the underscore at the beginning of the parameter name
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_param_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_v_p) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_p);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":2308
 *         for p in sorted_params:
 *             val = self.get_param_value(p)
 *             if p[0] == '_':             # <<<<<<<<<<<<<<
 *                 # Remove the underscore at the beginning of the parameter name
 *                 p = p.replace('_','',1)
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s__12, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {

      /* "bioscrape/types.pyx":2310
 *             if p[0] == '_':
 *                 # Remove the underscore at the beginning of the parameter name
 *                 p = p.replace('_','',1)             # <<<<<<<<<<<<<<
 *             add_parameter(model = model, param_name=p, param_value = val)
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_replace); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "bioscrape/types.pyx":2308
 *         for p in sorted_params:
 *             val = self.get_param_value(p)
 *             if p[0] == '_':             # <<<<<<<<<<<<<<
 *                 # Remove the underscore at the beginning of the parameter name
 *                 p = p.replace('_','',1)
 */
    }

    /* "bioscrape/types.pyx":2311
 *                 # Remove the underscore at the beginning of the parameter name
 *                 p = p.replace('_','',1)
 *             add_parameter(model = model, param_name=p, param_value = val)             # <<<<<<<<<<<<<<
 * 
 *         sorted_species = list(self.get_species())
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_add_parameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_model, __pyx_v_model) < 0) __PYX_ERR(0, 2311, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_param_name_2, __pyx_v_p) < 0) __PYX_ERR(0, 2311, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_param_value, __pyx_v_val) < 0) __PYX_ERR(0, 2311, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":2306
 *         sorted_params = list(self.get_param_list())
 *         sorted_params.sort()
 *         for p in sorted_params:             # <<<<<<<<<<<<<<
 *             val = self.get_param_value(p)
 *             if p[0] == '_':
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":2313
 *             add_parameter(model = model, param_name=p, param_value = val)
 * 
 *         sorted_species = list(self.get_species())             # <<<<<<<<<<<<<<
 *         sorted_species.sort()
 *         for s in sorted_species:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_sorted_species = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":2314
 * 
 *         sorted_species = list(self.get_species())
 *         sorted_species.sort()             # <<<<<<<<<<<<<<
 *         for s in sorted_species:
 *             add_species(model = model, compartment=model.getCompartment(0),
 */
  __pyx_t_6 = PyList_Sort(__pyx_v_sorted_species); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 2314, __pyx_L1_error)

  /* "bioscrape/types.pyx":2315
 *         sorted_species = list(self.get_species())
 *         sorted_species.sort()
 *         for s in sorted_species:             # <<<<<<<<<<<<<<
 *             add_species(model = model, compartment=model.getCompartment(0),
 *                         species=s, initial_concentration=self.get_species_value(s))
 */
  __pyx_t_4 = __pyx_v_sorted_species; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 2315, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":2316
 *         sorted_species.sort()
 *         for s in sorted_species:
 *             add_species(model = model, compartment=model.getCompartment(0),             # <<<<<<<<<<<<<<
 *                         species=s, initial_concentration=self.get_species_value(s))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_add_species_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_model, __pyx_v_model) < 0) __PYX_ERR(0, 2316, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_model, __pyx_n_s_getCompartment); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_int_0);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_compartment, __pyx_t_1) < 0) __PYX_ERR(0, 2316, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2317
 *         for s in sorted_species:
 *             add_species(model = model, compartment=model.getCompartment(0),
 *                         species=s, initial_concentration=self.get_species_value(s))             # <<<<<<<<<<<<<<
 * 
 *         rxn_count = 0
 */
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_species, __pyx_v_s) < 0) __PYX_ERR(0, 2316, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_species_value); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_v_s) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_s);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_initial_concentration, __pyx_t_1) < 0) __PYX_ERR(0, 2316, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2316
 *         sorted_species.sort()
 *         for s in sorted_species:
 *             add_species(model = model, compartment=model.getCompartment(0),             # <<<<<<<<<<<<<<
 *                         species=s, initial_concentration=self.get_species_value(s))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2315
 *         sorted_species = list(self.get_species())
 *         sorted_species.sort()
 *         for s in sorted_species:             # <<<<<<<<<<<<<<
 *             add_species(model = model, compartment=model.getCompartment(0),
 *                         species=s, initial_concentration=self.get_species_value(s))
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":2319
 *                         species=s, initial_concentration=self.get_species_value(s))
 * 
 *         rxn_count = 0             # <<<<<<<<<<<<<<
 *         for rxn_tuple in self.reaction_definitions:
 *             rxn_id = "r" + str(rxn_count)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_rxn_count = __pyx_int_0;

  /* "bioscrape/types.pyx":2320
 * 
 *         rxn_count = 0
 *         for rxn_tuple in self.reaction_definitions:             # <<<<<<<<<<<<<<
 *             rxn_id = "r" + str(rxn_count)
 * 
 */
  if (unlikely(__pyx_v_self->reaction_definitions == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2320, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_v_self->reaction_definitions; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 2320, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_rxn_tuple, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2321
 *         rxn_count = 0
 *         for rxn_tuple in self.reaction_definitions:
 *             rxn_id = "r" + str(rxn_count)             # <<<<<<<<<<<<<<
 * 
 *             (reactants, products, propensity_type, propensity_param_dict,
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_rxn_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Add(__pyx_n_s_r, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_rxn_id, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "bioscrape/types.pyx":2324
 * 
 *             (reactants, products, propensity_type, propensity_param_dict,
 *              delay_type, delay_reactants, delay_products, delay_param_dict) = rxn_tuple             # <<<<<<<<<<<<<<
 *             if delay_type != None:
 *                 delay_dict = {'type':delay_type, 'reactants':delay_reactants,
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_rxn_tuple))) || (PyList_CheckExact(__pyx_v_rxn_tuple))) {
      PyObject* sequence = __pyx_v_rxn_tuple;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 8)) {
        if (size > 8) __Pyx_RaiseTooManyValuesError(8);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2323, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 5); 
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 6); 
        __pyx_t_13 = PyTuple_GET_ITEM(sequence, 7); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 5); 
        __pyx_t_12 = PyList_GET_ITEM(sequence, 6); 
        __pyx_t_13 = PyList_GET_ITEM(sequence, 7); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_13);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[8] = {&__pyx_t_2,&__pyx_t_1,&__pyx_t_3,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12,&__pyx_t_13};
        for (i=0; i < 8; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 2323, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[8] = {&__pyx_t_2,&__pyx_t_1,&__pyx_t_3,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12,&__pyx_t_13};
      __pyx_t_14 = PyObject_GetIter(__pyx_v_rxn_tuple); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_5 = Py_TYPE(__pyx_t_14)->tp_iternext;
      for (index=0; index < 8; index++) {
        PyObject* item = __pyx_t_5(__pyx_t_14); if (unlikely(!item)) goto __pyx_L12_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_14), 8) < 0) __PYX_ERR(0, 2323, __pyx_L1_error)
      __pyx_t_5 = NULL;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      goto __pyx_L13_unpacking_done;
      __pyx_L12_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_5 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2323, __pyx_L1_error)
      __pyx_L13_unpacking_done:;
    }

    /* "bioscrape/types.pyx":2323
 *             rxn_id = "r" + str(rxn_count)
 * 
 *             (reactants, products, propensity_type, propensity_param_dict,             # <<<<<<<<<<<<<<
 *              delay_type, delay_reactants, delay_products, delay_param_dict) = rxn_tuple
 *             if delay_type != None:
 */
    __Pyx_XDECREF_SET(__pyx_v_reactants, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_products, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_propensity_type, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_propensity_param_dict, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_delay_type, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_delay_reactants, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_delay_products, __pyx_t_12);
    __pyx_t_12 = 0;
    __Pyx_XDECREF_SET(__pyx_v_delay_param_dict, __pyx_t_13);
    __pyx_t_13 = 0;

    /* "bioscrape/types.pyx":2325
 *             (reactants, products, propensity_type, propensity_param_dict,
 *              delay_type, delay_reactants, delay_products, delay_param_dict) = rxn_tuple
 *             if delay_type != None:             # <<<<<<<<<<<<<<
 *                 delay_dict = {'type':delay_type, 'reactants':delay_reactants,
 *                             'products':delay_products, 'parameters':delay_param_dict}
 */
    __pyx_t_13 = PyObject_RichCompare(__pyx_v_delay_type, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2325, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2325, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (__pyx_t_8) {

      /* "bioscrape/types.pyx":2326
 *              delay_type, delay_reactants, delay_products, delay_param_dict) = rxn_tuple
 *             if delay_type != None:
 *                 delay_dict = {'type':delay_type, 'reactants':delay_reactants,             # <<<<<<<<<<<<<<
 *                             'products':delay_products, 'parameters':delay_param_dict}
 *             else:
 */
      __pyx_t_13 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_type, __pyx_v_delay_type) < 0) __PYX_ERR(0, 2326, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_reactants, __pyx_v_delay_reactants) < 0) __PYX_ERR(0, 2326, __pyx_L1_error)

      /* "bioscrape/types.pyx":2327
 *             if delay_type != None:
 *                 delay_dict = {'type':delay_type, 'reactants':delay_reactants,
 *                             'products':delay_products, 'parameters':delay_param_dict}             # <<<<<<<<<<<<<<
 *             else:
 *                 delay_dict = None
 */
      if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_products, __pyx_v_delay_products) < 0) __PYX_ERR(0, 2326, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_parameters, __pyx_v_delay_param_dict) < 0) __PYX_ERR(0, 2326, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_delay_dict, ((PyObject*)__pyx_t_13));
      __pyx_t_13 = 0;

      /* "bioscrape/types.pyx":2325
 *             (reactants, products, propensity_type, propensity_param_dict,
 *              delay_type, delay_reactants, delay_products, delay_param_dict) = rxn_tuple
 *             if delay_type != None:             # <<<<<<<<<<<<<<
 *                 delay_dict = {'type':delay_type, 'reactants':delay_reactants,
 *                             'products':delay_products, 'parameters':delay_param_dict}
 */
      goto __pyx_L14;
    }

    /* "bioscrape/types.pyx":2329
 *                             'products':delay_products, 'parameters':delay_param_dict}
 *             else:
 *                 delay_dict = None             # <<<<<<<<<<<<<<
 *             add_reaction(model, reactants, products, rxn_id, propensity_type,
 *                          propensity_param_dict, stochastic = stochastic_model,
 */
    /*else*/ {
      __Pyx_INCREF(Py_None);
      __Pyx_XDECREF_SET(__pyx_v_delay_dict, ((PyObject*)Py_None));
    }
    __pyx_L14:;

    /* "bioscrape/types.pyx":2330
 *             else:
 *                 delay_dict = None
 *             add_reaction(model, reactants, products, rxn_id, propensity_type,             # <<<<<<<<<<<<<<
 *                          propensity_param_dict, stochastic = stochastic_model,
 *                          delay_annotation_dict = delay_dict)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_add_reaction_2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);

    /* "bioscrape/types.pyx":2331
 *                 delay_dict = None
 *             add_reaction(model, reactants, products, rxn_id, propensity_type,
 *                          propensity_param_dict, stochastic = stochastic_model,             # <<<<<<<<<<<<<<
 *                          delay_annotation_dict = delay_dict)
 *             rxn_count += 1
 */
    __pyx_t_12 = PyTuple_New(6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_v_model);
    __Pyx_GIVEREF(__pyx_v_model);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_model);
    __Pyx_INCREF(__pyx_v_reactants);
    __Pyx_GIVEREF(__pyx_v_reactants);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_v_reactants);
    __Pyx_INCREF(__pyx_v_products);
    __Pyx_GIVEREF(__pyx_v_products);
    PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_v_products);
    __Pyx_INCREF(__pyx_v_rxn_id);
    __Pyx_GIVEREF(__pyx_v_rxn_id);
    PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_v_rxn_id);
    __Pyx_INCREF(__pyx_v_propensity_type);
    __Pyx_GIVEREF(__pyx_v_propensity_type);
    PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_v_propensity_type);
    __Pyx_INCREF(__pyx_v_propensity_param_dict);
    __Pyx_GIVEREF(__pyx_v_propensity_param_dict);
    PyTuple_SET_ITEM(__pyx_t_12, 5, __pyx_v_propensity_param_dict);
    __pyx_t_11 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_stochastic, __pyx_v_stochastic_model) < 0) __PYX_ERR(0, 2331, __pyx_L1_error)

    /* "bioscrape/types.pyx":2332
 *             add_reaction(model, reactants, products, rxn_id, propensity_type,
 *                          propensity_param_dict, stochastic = stochastic_model,
 *                          delay_annotation_dict = delay_dict)             # <<<<<<<<<<<<<<
 *             rxn_count += 1
 * 
 */
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_delay_annotation_dict, __pyx_v_delay_dict) < 0) __PYX_ERR(0, 2331, __pyx_L1_error)

    /* "bioscrape/types.pyx":2330
 *             else:
 *                 delay_dict = None
 *             add_reaction(model, reactants, products, rxn_id, propensity_type,             # <<<<<<<<<<<<<<
 *                          propensity_param_dict, stochastic = stochastic_model,
 *                          delay_annotation_dict = delay_dict)
 */
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "bioscrape/types.pyx":2333
 *                          propensity_param_dict, stochastic = stochastic_model,
 *                          delay_annotation_dict = delay_dict)
 *             rxn_count += 1             # <<<<<<<<<<<<<<
 * 
 *         rule_count = 0
 */
    __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_v_rxn_count, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF_SET(__pyx_v_rxn_count, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "bioscrape/types.pyx":2320
 * 
 *         rxn_count = 0
 *         for rxn_tuple in self.reaction_definitions:             # <<<<<<<<<<<<<<
 *             rxn_id = "r" + str(rxn_count)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":2335
 *             rxn_count += 1
 * 
 *         rule_count = 0             # <<<<<<<<<<<<<<
 *         for rule_tuple in self.rule_definitions:
 *             rule_id = "rule" + str(rule_count)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_rule_count = __pyx_int_0;

  /* "bioscrape/types.pyx":2336
 * 
 *         rule_count = 0
 *         for rule_tuple in self.rule_definitions:             # <<<<<<<<<<<<<<
 *             rule_id = "rule" + str(rule_count)
 *             # Syntax of rule_tuple = (rule_type, rule_dict, rule_frequency)
 */
  if (unlikely(__pyx_v_self->rule_definitions == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2336, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_v_self->rule_definitions; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_10 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_10); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 2336, __pyx_L1_error)
    #else
    __pyx_t_10 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_rule_tuple, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "bioscrape/types.pyx":2337
 *         rule_count = 0
 *         for rule_tuple in self.rule_definitions:
 *             rule_id = "rule" + str(rule_count)             # <<<<<<<<<<<<<<
 *             # Syntax of rule_tuple = (rule_type, rule_dict, rule_frequency)
 *             (rule_type, rule_dict, rule_frequency) = rule_tuple
 */
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_rule_count); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = PyNumber_Add(__pyx_n_s_rule, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_rule_id, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "bioscrape/types.pyx":2339
 *             rule_id = "rule" + str(rule_count)
 *             # Syntax of rule_tuple = (rule_type, rule_dict, rule_frequency)
 *             (rule_type, rule_dict, rule_frequency) = rule_tuple             # <<<<<<<<<<<<<<
 *             # Extract the rule variable id from rule_dict:
 * 
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_rule_tuple))) || (PyList_CheckExact(__pyx_v_rule_tuple))) {
      PyObject* sequence = __pyx_v_rule_tuple;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 2339, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_12 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_12);
      #else
      __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_13 = PyObject_GetIter(__pyx_v_rule_tuple); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_5 = Py_TYPE(__pyx_t_13)->tp_iternext;
      index = 0; __pyx_t_11 = __pyx_t_5(__pyx_t_13); if (unlikely(!__pyx_t_11)) goto __pyx_L17_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      index = 1; __pyx_t_10 = __pyx_t_5(__pyx_t_13); if (unlikely(!__pyx_t_10)) goto __pyx_L17_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      index = 2; __pyx_t_12 = __pyx_t_5(__pyx_t_13); if (unlikely(!__pyx_t_12)) goto __pyx_L17_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_12);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_13), 3) < 0) __PYX_ERR(0, 2339, __pyx_L1_error)
      __pyx_t_5 = NULL;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L18_unpacking_done;
      __pyx_L17_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_5 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 2339, __pyx_L1_error)
      __pyx_L18_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_rule_type, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_rule_dict, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_rule_frequency, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "bioscrape/types.pyx":2342
 *             # Extract the rule variable id from rule_dict:
 * 
 *             if rule_type in ["ode", "ODE", 'GeneralODERule']:             # <<<<<<<<<<<<<<
 *                 rule_formula = rule_dict['equation']
 *                 rule_variable = rule_dict['target']
 */
    __Pyx_INCREF(__pyx_v_rule_type);
    __pyx_t_12 = __pyx_v_rule_type;
    __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_12, __pyx_n_s_ode, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 2342, __pyx_L1_error)
    if (!__pyx_t_15) {
    } else {
      __pyx_t_8 = __pyx_t_15;
      goto __pyx_L20_bool_binop_done;
    }
    __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_12, __pyx_n_s_ODE, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 2342, __pyx_L1_error)
    if (!__pyx_t_15) {
    } else {
      __pyx_t_8 = __pyx_t_15;
      goto __pyx_L20_bool_binop_done;
    }
    __pyx_t_15 = (__Pyx_PyString_Equals(__pyx_t_12, __pyx_n_s_GeneralODERule, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 2342, __pyx_L1_error)
    __pyx_t_8 = __pyx_t_15;
    __pyx_L20_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_15 = (__pyx_t_8 != 0);
    if (__pyx_t_15) {

      /* "bioscrape/types.pyx":2343
 * 
 *             if rule_type in ["ode", "ODE", 'GeneralODERule']:
 *                 rule_formula = rule_dict['equation']             # <<<<<<<<<<<<<<
 *                 rule_variable = rule_dict['target']
 *             else:
 */
      __pyx_t_12 = __Pyx_PyObject_Dict_GetItem(__pyx_v_rule_dict, __pyx_n_s_equation); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_XDECREF_SET(__pyx_v_rule_formula, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "bioscrape/types.pyx":2344
 *             if rule_type in ["ode", "ODE", 'GeneralODERule']:
 *                 rule_formula = rule_dict['equation']
 *                 rule_variable = rule_dict['target']             # <<<<<<<<<<<<<<
 *             else:
 *                 equation = rule_dict['equation']
 */
      __pyx_t_12 = __Pyx_PyObject_Dict_GetItem(__pyx_v_rule_dict, __pyx_n_s_target); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2344, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_XDECREF_SET(__pyx_v_rule_variable, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "bioscrape/types.pyx":2342
 *             # Extract the rule variable id from rule_dict:
 * 
 *             if rule_type in ["ode", "ODE", 'GeneralODERule']:             # <<<<<<<<<<<<<<
 *                 rule_formula = rule_dict['equation']
 *                 rule_variable = rule_dict['target']
 */
      goto __pyx_L19;
    }

    /* "bioscrape/types.pyx":2346
 *                 rule_variable = rule_dict['target']
 *             else:
 *                 equation = rule_dict['equation']             # <<<<<<<<<<<<<<
 *                 split_eqn = [s.strip() for s in equation.split('=') ]
 *                 try:
 */
    /*else*/ {
      __pyx_t_12 = __Pyx_PyObject_Dict_GetItem(__pyx_v_rule_dict, __pyx_n_s_equation); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_XDECREF_SET(__pyx_v_equation, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "bioscrape/types.pyx":2347
 *             else:
 *                 equation = rule_dict['equation']
 *                 split_eqn = [s.strip() for s in equation.split('=') ]             # <<<<<<<<<<<<<<
 *                 try:
 *                     assert(len(split_eqn) == 2) # Checking rule_dict equation structure.
 */
      __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_equation, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      __pyx_t_10 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_13, __pyx_kp_s__18) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_kp_s__18);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
        __pyx_t_11 = __pyx_t_10; __Pyx_INCREF(__pyx_t_11); __pyx_t_16 = 0;
        __pyx_t_17 = NULL;
      } else {
        __pyx_t_16 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_17 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 2347, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      for (;;) {
        if (likely(!__pyx_t_17)) {
          if (likely(PyList_CheckExact(__pyx_t_11))) {
            if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_11)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_16); __Pyx_INCREF(__pyx_t_10); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 2347, __pyx_L1_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_11, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2347, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_16); __Pyx_INCREF(__pyx_t_10); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 2347, __pyx_L1_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_11, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2347, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_17(__pyx_t_11);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2347, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_strip); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
          }
        }
        __pyx_t_10 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 2347, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_split_eqn, ((PyObject*)__pyx_t_12));
      __pyx_t_12 = 0;

      /* "bioscrape/types.pyx":2348
 *                 equation = rule_dict['equation']
 *                 split_eqn = [s.strip() for s in equation.split('=') ]
 *                 try:             # <<<<<<<<<<<<<<
 *                     assert(len(split_eqn) == 2) # Checking rule_dict equation structure.
 *                 except AssertionError as e:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
        __Pyx_XGOTREF(__pyx_t_18);
        __Pyx_XGOTREF(__pyx_t_19);
        __Pyx_XGOTREF(__pyx_t_20);
        /*try:*/ {

          /* "bioscrape/types.pyx":2349
 *                 split_eqn = [s.strip() for s in equation.split('=') ]
 *                 try:
 *                     assert(len(split_eqn) == 2) # Checking rule_dict equation structure.             # <<<<<<<<<<<<<<
 *                 except AssertionError as e:
 *                     e.args += ('rule equation', equation, 'not of the form VARIABLE = F(X).')
 */
          #ifndef CYTHON_WITHOUT_ASSERTIONS
          if (unlikely(!Py_OptimizeFlag)) {
            __pyx_t_16 = PyList_GET_SIZE(__pyx_v_split_eqn); if (unlikely(__pyx_t_16 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2349, __pyx_L25_error)
            if (unlikely(!((__pyx_t_16 == 2) != 0))) {
              PyErr_SetNone(PyExc_AssertionError);
              __PYX_ERR(0, 2349, __pyx_L25_error)
            }
          }
          #endif

          /* "bioscrape/types.pyx":2348
 *                 equation = rule_dict['equation']
 *                 split_eqn = [s.strip() for s in equation.split('=') ]
 *                 try:             # <<<<<<<<<<<<<<
 *                     assert(len(split_eqn) == 2) # Checking rule_dict equation structure.
 *                 except AssertionError as e:
 */
        }
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
        goto __pyx_L32_try_end;
        __pyx_L25_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "bioscrape/types.pyx":2350
 *                 try:
 *                     assert(len(split_eqn) == 2) # Checking rule_dict equation structure.
 *                 except AssertionError as e:             # <<<<<<<<<<<<<<
 *                     e.args += ('rule equation', equation, 'not of the form VARIABLE = F(X).')
 *                     raise
 */
        __pyx_t_21 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError);
        if (__pyx_t_21) {
          __Pyx_AddTraceback("bioscrape.types.Model.generate_sbml_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10) < 0) __PYX_ERR(0, 2350, __pyx_L27_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __pyx_v_e = __pyx_t_11;

          /* "bioscrape/types.pyx":2351
 *                     assert(len(split_eqn) == 2) # Checking rule_dict equation structure.
 *                 except AssertionError as e:
 *                     e.args += ('rule equation', equation, 'not of the form VARIABLE = F(X).')             # <<<<<<<<<<<<<<
 *                     raise
 * 
 */
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_args); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2351, __pyx_L27_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2351, __pyx_L27_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_kp_s_rule_equation);
          __Pyx_GIVEREF(__pyx_kp_s_rule_equation);
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_s_rule_equation);
          __Pyx_INCREF(__pyx_v_equation);
          __Pyx_GIVEREF(__pyx_v_equation);
          PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_equation);
          __Pyx_INCREF(__pyx_kp_s_not_of_the_form_VARIABLE_F_X);
          __Pyx_GIVEREF(__pyx_kp_s_not_of_the_form_VARIABLE_F_X);
          PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_s_not_of_the_form_VARIABLE_F_X);
          __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_13, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2351, __pyx_L27_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_e, __pyx_n_s_args, __pyx_t_3) < 0) __PYX_ERR(0, 2351, __pyx_L27_except_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "bioscrape/types.pyx":2352
 *                 except AssertionError as e:
 *                     e.args += ('rule equation', equation, 'not of the form VARIABLE = F(X).')
 *                     raise             # <<<<<<<<<<<<<<
 * 
 *                 # Extract the rule formula for the variable above from rule_dict:
 */
          __Pyx_GIVEREF(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ErrRestoreWithState(__pyx_t_12, __pyx_t_11, __pyx_t_10);
          __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; 
          __PYX_ERR(0, 2352, __pyx_L27_except_error)
        }
        goto __pyx_L27_except_error;
        __pyx_L27_except_error:;

        /* "bioscrape/types.pyx":2348
 *                 equation = rule_dict['equation']
 *                 split_eqn = [s.strip() for s in equation.split('=') ]
 *                 try:             # <<<<<<<<<<<<<<
 *                     assert(len(split_eqn) == 2) # Checking rule_dict equation structure.
 *                 except AssertionError as e:
 */
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
        goto __pyx_L1_error;
        __pyx_L32_try_end:;
      }

      /* "bioscrape/types.pyx":2355
 * 
 *                 # Extract the rule formula for the variable above from rule_dict:
 *                 rule_formula = split_eqn[1]             # <<<<<<<<<<<<<<
 *                 rule_variable = split_eqn[0]
 *             add_rule(model, rule_id, rule_type, rule_variable, rule_formula, rule_frequency)
 */
      __pyx_t_10 = PyList_GET_ITEM(__pyx_v_split_eqn, 1);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_XDECREF_SET(__pyx_v_rule_formula, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "bioscrape/types.pyx":2356
 *                 # Extract the rule formula for the variable above from rule_dict:
 *                 rule_formula = split_eqn[1]
 *                 rule_variable = split_eqn[0]             # <<<<<<<<<<<<<<
 *             add_rule(model, rule_id, rule_type, rule_variable, rule_formula, rule_frequency)
 *             rule_count += 1
 */
      __pyx_t_10 = PyList_GET_ITEM(__pyx_v_split_eqn, 0);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_XDECREF_SET(__pyx_v_rule_variable, __pyx_t_10);
      __pyx_t_10 = 0;
    }
    __pyx_L19:;

    /* "bioscrape/types.pyx":2357
 *                 rule_formula = split_eqn[1]
 *                 rule_variable = split_eqn[0]
 *             add_rule(model, rule_id, rule_type, rule_variable, rule_formula, rule_frequency)             # <<<<<<<<<<<<<<
 *             rule_count += 1
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_add_rule); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = NULL;
    __pyx_t_21 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_21 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_11)) {
      PyObject *__pyx_temp[7] = {__pyx_t_12, __pyx_v_model, __pyx_v_rule_id, __pyx_v_rule_type, __pyx_v_rule_variable, __pyx_v_rule_formula, __pyx_v_rule_frequency};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_21, 6+__pyx_t_21); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2357, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
      PyObject *__pyx_temp[7] = {__pyx_t_12, __pyx_v_model, __pyx_v_rule_id, __pyx_v_rule_type, __pyx_v_rule_variable, __pyx_v_rule_formula, __pyx_v_rule_frequency};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_21, 6+__pyx_t_21); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2357, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(6+__pyx_t_21); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_12) {
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_12); __pyx_t_12 = NULL;
      }
      __Pyx_INCREF(__pyx_v_model);
      __Pyx_GIVEREF(__pyx_v_model);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_21, __pyx_v_model);
      __Pyx_INCREF(__pyx_v_rule_id);
      __Pyx_GIVEREF(__pyx_v_rule_id);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_21, __pyx_v_rule_id);
      __Pyx_INCREF(__pyx_v_rule_type);
      __Pyx_GIVEREF(__pyx_v_rule_type);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_21, __pyx_v_rule_type);
      __Pyx_INCREF(__pyx_v_rule_variable);
      __Pyx_GIVEREF(__pyx_v_rule_variable);
      PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_21, __pyx_v_rule_variable);
      __Pyx_INCREF(__pyx_v_rule_formula);
      __Pyx_GIVEREF(__pyx_v_rule_formula);
      PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_21, __pyx_v_rule_formula);
      __Pyx_INCREF(__pyx_v_rule_frequency);
      __Pyx_GIVEREF(__pyx_v_rule_frequency);
      PyTuple_SET_ITEM(__pyx_t_3, 5+__pyx_t_21, __pyx_v_rule_frequency);
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_3, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "bioscrape/types.pyx":2358
 *                 rule_variable = split_eqn[0]
 *             add_rule(model, rule_id, rule_type, rule_variable, rule_formula, rule_frequency)
 *             rule_count += 1             # <<<<<<<<<<<<<<
 * 
 *         if document.getNumErrors():
 */
    __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_v_rule_count, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF_SET(__pyx_v_rule_count, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "bioscrape/types.pyx":2336
 * 
 *         rule_count = 0
 *         for rule_tuple in self.rule_definitions:             # <<<<<<<<<<<<<<
 *             rule_id = "rule" + str(rule_count)
 *             # Syntax of rule_tuple = (rule_type, rule_dict, rule_frequency)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":2360
 *             rule_count += 1
 * 
 *         if document.getNumErrors():             # <<<<<<<<<<<<<<
 *             warnings.warn('The generated SBML model has errors:')
 *             err_message = document.getErrorLog().toString()
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_document, __pyx_n_s_getNumErrors); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 2360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_15) {

    /* "bioscrape/types.pyx":2361
 * 
 *         if document.getNumErrors():
 *             warnings.warn('The generated SBML model has errors:')             # <<<<<<<<<<<<<<
 *             err_message = document.getErrorLog().toString()
 *             print(err_message)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_warnings); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_warn); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_10, __pyx_kp_s_The_generated_SBML_model_has_err) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_kp_s_The_generated_SBML_model_has_err);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":2362
 *         if document.getNumErrors():
 *             warnings.warn('The generated SBML model has errors:')
 *             err_message = document.getErrorLog().toString()             # <<<<<<<<<<<<<<
 *             print(err_message)
 *         return document, model
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_document, __pyx_n_s_getErrorLog); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_11 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_toString); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_err_message = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":2363
 *             warnings.warn('The generated SBML model has errors:')
 *             err_message = document.getErrorLog().toString()
 *             print(err_message)             # <<<<<<<<<<<<<<
 *         return document, model
 * 
 */
    if (__Pyx_PrintOne(0, __pyx_v_err_message) < 0) __PYX_ERR(0, 2363, __pyx_L1_error)

    /* "bioscrape/types.pyx":2360
 *             rule_count += 1
 * 
 *         if document.getNumErrors():             # <<<<<<<<<<<<<<
 *             warnings.warn('The generated SBML model has errors:')
 *             err_message = document.getErrorLog().toString()
 */
  }

  /* "bioscrape/types.pyx":2364
 *             err_message = document.getErrorLog().toString()
 *             print(err_message)
 *         return document, model             # <<<<<<<<<<<<<<
 * 
 *     #write an SBML Model
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_document);
  __Pyx_GIVEREF(__pyx_v_document);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_document);
  __Pyx_INCREF(__pyx_v_model);
  __Pyx_GIVEREF(__pyx_v_model);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_model);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2300
 * 
 *     #Generates an SBML Model
 *     def generate_sbml_model(self, stochastic_model = False, **keywords):             # <<<<<<<<<<<<<<
 *         # Create an empty SBMLDocument object to hold the bioscrape model
 *         document, model = create_sbml_model(**keywords)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("bioscrape.types.Model.generate_sbml_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_document);
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_sorted_params);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XDECREF(__pyx_v_sorted_species);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_rxn_count);
  __Pyx_XDECREF(__pyx_v_rxn_tuple);
  __Pyx_XDECREF(__pyx_v_rxn_id);
  __Pyx_XDECREF(__pyx_v_reactants);
  __Pyx_XDECREF(__pyx_v_products);
  __Pyx_XDECREF(__pyx_v_propensity_type);
  __Pyx_XDECREF(__pyx_v_propensity_param_dict);
  __Pyx_XDECREF(__pyx_v_delay_type);
  __Pyx_XDECREF(__pyx_v_delay_reactants);
  __Pyx_XDECREF(__pyx_v_delay_products);
  __Pyx_XDECREF(__pyx_v_delay_param_dict);
  __Pyx_XDECREF(__pyx_v_delay_dict);
  __Pyx_XDECREF(__pyx_v_rule_count);
  __Pyx_XDECREF(__pyx_v_rule_tuple);
  __Pyx_XDECREF(__pyx_v_rule_id);
  __Pyx_XDECREF(__pyx_v_rule_type);
  __Pyx_XDECREF(__pyx_v_rule_dict);
  __Pyx_XDECREF(__pyx_v_rule_frequency);
  __Pyx_XDECREF(__pyx_v_rule_formula);
  __Pyx_XDECREF(__pyx_v_rule_variable);
  __Pyx_XDECREF(__pyx_v_equation);
  __Pyx_XDECREF(__pyx_v_split_eqn);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_err_message);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2367
 * 
 *     #write an SBML Model
 *     def write_sbml_model(self, file_name, stochastic_model = False, **keywords):             # <<<<<<<<<<<<<<
 *         document, _ = self.generate_sbml_model(stochastic_model = stochastic_model, **keywords)
 *         sbml_string = libsbml.writeSBMLToString(document)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_97write_sbml_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_97write_sbml_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_name = 0;
  PyObject *__pyx_v_stochastic_model = 0;
  PyObject *__pyx_v_keywords = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_sbml_model (wrapper)", 0);
  __pyx_v_keywords = PyDict_New(); if (unlikely(!__pyx_v_keywords)) return NULL;
  __Pyx_GOTREF(__pyx_v_keywords);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_name,&__pyx_n_s_stochastic_model,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_file_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stochastic_model);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_keywords, values, pos_args, "write_sbml_model") < 0)) __PYX_ERR(0, 2367, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file_name = values[0];
    __pyx_v_stochastic_model = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_sbml_model", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2367, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_keywords); __pyx_v_keywords = 0;
  __Pyx_AddTraceback("bioscrape.types.Model.write_sbml_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_96write_sbml_model(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), __pyx_v_file_name, __pyx_v_stochastic_model, __pyx_v_keywords);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_keywords);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_96write_sbml_model(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_file_name, PyObject *__pyx_v_stochastic_model, PyObject *__pyx_v_keywords) {
  PyObject *__pyx_v_document = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_sbml_string = NULL;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("write_sbml_model", 0);

  /* "bioscrape/types.pyx":2368
 *     #write an SBML Model
 *     def write_sbml_model(self, file_name, stochastic_model = False, **keywords):
 *         document, _ = self.generate_sbml_model(stochastic_model = stochastic_model, **keywords)             # <<<<<<<<<<<<<<
 *         sbml_string = libsbml.writeSBMLToString(document)
 *         with open(file_name, 'w') as f:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_generate_sbml_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_stochastic_model, __pyx_v_stochastic_model) < 0) __PYX_ERR(0, 2368, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_3;
  __pyx_t_3 = 0;
  if (__Pyx_MergeKeywords(__pyx_t_2, __pyx_v_keywords) < 0) __PYX_ERR(0, 2368, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2368, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 2368, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2368, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_document = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v__ = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2369
 *     def write_sbml_model(self, file_name, stochastic_model = False, **keywords):
 *         document, _ = self.generate_sbml_model(stochastic_model = stochastic_model, **keywords)
 *         sbml_string = libsbml.writeSBMLToString(document)             # <<<<<<<<<<<<<<
 *         with open(file_name, 'w') as f:
 *             f.write(sbml_string)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_libsbml); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_writeSBMLToString); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_document) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_document);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sbml_string = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":2370
 *         document, _ = self.generate_sbml_model(stochastic_model = stochastic_model, **keywords)
 *         sbml_string = libsbml.writeSBMLToString(document)
 *         with open(file_name, 'w') as f:             # <<<<<<<<<<<<<<
 *             f.write(sbml_string)
 *         return True
 */
  /*with:*/ {
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_file_name);
    __Pyx_GIVEREF(__pyx_v_file_name);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_file_name);
    __Pyx_INCREF(__pyx_n_s_w);
    __Pyx_GIVEREF(__pyx_n_s_w);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_w);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2370, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2370, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __pyx_v_f = __pyx_t_1;
          __pyx_t_1 = 0;

          /* "bioscrape/types.pyx":2371
 *         sbml_string = libsbml.writeSBMLToString(document)
 *         with open(file_name, 'w') as f:
 *             f.write(sbml_string)             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2371, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_sbml_string) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_sbml_string);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2371, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "bioscrape/types.pyx":2370
 *         document, _ = self.generate_sbml_model(stochastic_model = stochastic_model, **keywords)
 *         sbml_string = libsbml.writeSBMLToString(document)
 *         with open(file_name, 'w') as f:             # <<<<<<<<<<<<<<
 *             f.write(sbml_string)
 *         return True
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L14_try_end;
        __pyx_L9_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("bioscrape.types.Model.write_sbml_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 2370, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2370, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2370, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_11 < 0) __PYX_ERR(0, 2370, __pyx_L11_except_error)
          __pyx_t_12 = ((!(__pyx_t_11 != 0)) != 0);
          if (__pyx_t_12) {
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_2, __pyx_t_3);
            __pyx_t_1 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 2370, __pyx_L11_except_error)
          }
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L10_exception_handled;
        }
        __pyx_L11_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L10_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__38, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2370, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L8;
      }
      __pyx_L8:;
    }
    goto __pyx_L18;
    __pyx_L5_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L18:;
  }

  /* "bioscrape/types.pyx":2372
 *         with open(file_name, 'w') as f:
 *             f.write(sbml_string)
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     # Update this if you change any of Model's member variables!
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2367
 * 
 *     #write an SBML Model
 *     def write_sbml_model(self, file_name, stochastic_model = False, **keywords):             # <<<<<<<<<<<<<<
 *         document, _ = self.generate_sbml_model(stochastic_model = stochastic_model, **keywords)
 *         sbml_string = libsbml.writeSBMLToString(document)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.Model.write_sbml_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_document);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_sbml_string);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2375
 * 
 *     # Update this if you change any of Model's member variables!
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         '''Returns the Model's state as a tuple of picklable Python objects.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_99__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_98__getstate__[] = "Returns the Model's state as a tuple of picklable Python objects. \n\n        Note that c_propensities, c_delays, and c_repeat_rules are just \n        pointers to the objects in propensities, delays, and repeat_rules,\n        respectively, so only the latter are needed to fully represent the \n        Model's state.\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_99__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_98__getstate__(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_98__getstate__(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "bioscrape/types.pyx":2383
 *         Model's state.
 *         '''
 *         return (self._next_species_index,             # <<<<<<<<<<<<<<
 *                 self._next_params_index,
 *                 self._dummy_param_counter,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_next_species_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "bioscrape/types.pyx":2384
 *         '''
 *         return (self._next_species_index,
 *                 self._next_params_index,             # <<<<<<<<<<<<<<
 *                 self._dummy_param_counter,
 *                 self.has_delay,
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_next_params_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "bioscrape/types.pyx":2385
 *         return (self._next_species_index,
 *                 self._next_params_index,
 *                 self._dummy_param_counter,             # <<<<<<<<<<<<<<
 *                 self.has_delay,
 *                 self.propensities,
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_dummy_param_counter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "bioscrape/types.pyx":2386
 *                 self._next_params_index,
 *                 self._dummy_param_counter,
 *                 self.has_delay,             # <<<<<<<<<<<<<<
 *                 self.propensities,
 *                 self.delays,
 */
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->has_delay); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "bioscrape/types.pyx":2399
 *                 self.reaction_updates,
 *                 self.delay_reaction_updates,
 *                 self.initialized,             # <<<<<<<<<<<<<<
 *                 self.reaction_definitions,
 *                 self.rule_definitions)
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->initialized); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "bioscrape/types.pyx":2383
 *         Model's state.
 *         '''
 *         return (self._next_species_index,             # <<<<<<<<<<<<<<
 *                 self._next_params_index,
 *                 self._dummy_param_counter,
 */
  __pyx_t_6 = PyTuple_New(19); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
  __Pyx_INCREF(__pyx_v_self->propensities);
  __Pyx_GIVEREF(__pyx_v_self->propensities);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_v_self->propensities);
  __Pyx_INCREF(__pyx_v_self->delays);
  __Pyx_GIVEREF(__pyx_v_self->delays);
  PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_v_self->delays);
  __Pyx_INCREF(__pyx_v_self->repeat_rules);
  __Pyx_GIVEREF(__pyx_v_self->repeat_rules);
  PyTuple_SET_ITEM(__pyx_t_6, 6, __pyx_v_self->repeat_rules);
  __Pyx_INCREF(__pyx_v_self->species2index);
  __Pyx_GIVEREF(__pyx_v_self->species2index);
  PyTuple_SET_ITEM(__pyx_t_6, 7, __pyx_v_self->species2index);
  __Pyx_INCREF(__pyx_v_self->params2index);
  __Pyx_GIVEREF(__pyx_v_self->params2index);
  PyTuple_SET_ITEM(__pyx_t_6, 8, __pyx_v_self->params2index);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->species_values));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->species_values));
  PyTuple_SET_ITEM(__pyx_t_6, 9, ((PyObject *)__pyx_v_self->species_values));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->params_values));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->params_values));
  PyTuple_SET_ITEM(__pyx_t_6, 10, ((PyObject *)__pyx_v_self->params_values));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->update_array));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->update_array));
  PyTuple_SET_ITEM(__pyx_t_6, 11, ((PyObject *)__pyx_v_self->update_array));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->delay_update_array));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->delay_update_array));
  PyTuple_SET_ITEM(__pyx_t_6, 12, ((PyObject *)__pyx_v_self->delay_update_array));
  __Pyx_INCREF(__pyx_v_self->reaction_list);
  __Pyx_GIVEREF(__pyx_v_self->reaction_list);
  PyTuple_SET_ITEM(__pyx_t_6, 13, __pyx_v_self->reaction_list);
  __Pyx_INCREF(__pyx_v_self->reaction_updates);
  __Pyx_GIVEREF(__pyx_v_self->reaction_updates);
  PyTuple_SET_ITEM(__pyx_t_6, 14, __pyx_v_self->reaction_updates);
  __Pyx_INCREF(__pyx_v_self->delay_reaction_updates);
  __Pyx_GIVEREF(__pyx_v_self->delay_reaction_updates);
  PyTuple_SET_ITEM(__pyx_t_6, 15, __pyx_v_self->delay_reaction_updates);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 16, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_self->reaction_definitions);
  __Pyx_GIVEREF(__pyx_v_self->reaction_definitions);
  PyTuple_SET_ITEM(__pyx_t_6, 17, __pyx_v_self->reaction_definitions);
  __Pyx_INCREF(__pyx_v_self->rule_definitions);
  __Pyx_GIVEREF(__pyx_v_self->rule_definitions);
  PyTuple_SET_ITEM(__pyx_t_6, 18, __pyx_v_self->rule_definitions);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2375
 * 
 *     # Update this if you change any of Model's member variables!
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         '''Returns the Model's state as a tuple of picklable Python objects.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bioscrape.types.Model.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2404
 * 
 *     # Update this if you change any of Model's member variables!
 *     def __setstate__(self, state):             # <<<<<<<<<<<<<<
 *         '''Sets this Model's state to that of another, using a tuple generated
 *         by the other Model's __getstate__ method.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_101__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state); /*proto*/
static char __pyx_doc_9bioscrape_5types_5Model_100__setstate__[] = "Sets this Model's state to that of another, using a tuple generated\n        by the other Model's __getstate__ method. \n\n        Note that c_propensities, c_delays, and c_repeat_rules are just \n        pointers to the objects in propensities, delays, and repeat_rules,\n        respectively, so only the latter are needed to fully reconstruct a \n        Model's state.\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_5Model_101__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_100__setstate__(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((PyObject *)__pyx_v_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_100__setstate__(struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "bioscrape/types.pyx":2413
 *         Model's state.
 *         '''
 *         self._next_species_index = state[0]             # <<<<<<<<<<<<<<
 *         self._next_params_index = state[1]
 *         self._dummy_param_counter = state[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_next_species_index = __pyx_t_2;

  /* "bioscrape/types.pyx":2414
 *         '''
 *         self._next_species_index = state[0]
 *         self._next_params_index = state[1]             # <<<<<<<<<<<<<<
 *         self._dummy_param_counter = state[2]
 *         self.has_delay = state[3]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2414, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_next_params_index = __pyx_t_2;

  /* "bioscrape/types.pyx":2415
 *         self._next_species_index = state[0]
 *         self._next_params_index = state[1]
 *         self._dummy_param_counter = state[2]             # <<<<<<<<<<<<<<
 *         self.has_delay = state[3]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2415, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_dummy_param_counter = __pyx_t_2;

  /* "bioscrape/types.pyx":2416
 *         self._next_params_index = state[1]
 *         self._dummy_param_counter = state[2]
 *         self.has_delay = state[3]             # <<<<<<<<<<<<<<
 * 
 *         self.propensities = state[4]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2416, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->has_delay = __pyx_t_2;

  /* "bioscrape/types.pyx":2418
 *         self.has_delay = state[3]
 * 
 *         self.propensities = state[4]             # <<<<<<<<<<<<<<
 *         self.c_propensities.clear()
 *         if state[4] is not None:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 2418, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->propensities);
  __Pyx_DECREF(__pyx_v_self->propensities);
  __pyx_v_self->propensities = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2419
 * 
 *         self.propensities = state[4]
 *         self.c_propensities.clear()             # <<<<<<<<<<<<<<
 *         if state[4] is not None:
 *             for x in state[4]:
 */
  __pyx_v_self->c_propensities.clear();

  /* "bioscrape/types.pyx":2420
 *         self.propensities = state[4]
 *         self.c_propensities.clear()
 *         if state[4] is not None:             # <<<<<<<<<<<<<<
 *             for x in state[4]:
 *                 self.c_propensities.push_back(<void *> x)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "bioscrape/types.pyx":2421
 *         self.c_propensities.clear()
 *         if state[4] is not None:
 *             for x in state[4]:             # <<<<<<<<<<<<<<
 *                 self.c_propensities.push_back(<void *> x)
 *         self.delays = state[5]
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2421, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2421, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2421, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2421, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2421, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2421, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "bioscrape/types.pyx":2422
 *         if state[4] is not None:
 *             for x in state[4]:
 *                 self.c_propensities.push_back(<void *> x)             # <<<<<<<<<<<<<<
 *         self.delays = state[5]
 *         self.c_delays.clear()
 */
      __pyx_v_self->c_propensities.push_back(((void *)__pyx_v_x));

      /* "bioscrape/types.pyx":2421
 *         self.c_propensities.clear()
 *         if state[4] is not None:
 *             for x in state[4]:             # <<<<<<<<<<<<<<
 *                 self.c_propensities.push_back(<void *> x)
 *         self.delays = state[5]
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "bioscrape/types.pyx":2420
 *         self.propensities = state[4]
 *         self.c_propensities.clear()
 *         if state[4] is not None:             # <<<<<<<<<<<<<<
 *             for x in state[4]:
 *                 self.c_propensities.push_back(<void *> x)
 */
  }

  /* "bioscrape/types.pyx":2423
 *             for x in state[4]:
 *                 self.c_propensities.push_back(<void *> x)
 *         self.delays = state[5]             # <<<<<<<<<<<<<<
 *         self.c_delays.clear()
 *         if state[5] is not None:
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyList_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->delays);
  __Pyx_DECREF(__pyx_v_self->delays);
  __pyx_v_self->delays = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2424
 *                 self.c_propensities.push_back(<void *> x)
 *         self.delays = state[5]
 *         self.c_delays.clear()             # <<<<<<<<<<<<<<
 *         if state[5] is not None:
 *             for x in state[5]:
 */
  __pyx_v_self->c_delays.clear();

  /* "bioscrape/types.pyx":2425
 *         self.delays = state[5]
 *         self.c_delays.clear()
 *         if state[5] is not None:             # <<<<<<<<<<<<<<
 *             for x in state[5]:
 *                 self.c_delays.push_back(<void *> x)
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = (__pyx_t_5 != Py_None);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "bioscrape/types.pyx":2426
 *         self.c_delays.clear()
 *         if state[5] is not None:
 *             for x in state[5]:             # <<<<<<<<<<<<<<
 *                 self.c_delays.push_back(<void *> x)
 *         self.repeat_rules = state[6]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_1 = __pyx_t_5; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2426, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2426, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2426, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2426, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2426, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2426, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2426, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "bioscrape/types.pyx":2427
 *         if state[5] is not None:
 *             for x in state[5]:
 *                 self.c_delays.push_back(<void *> x)             # <<<<<<<<<<<<<<
 *         self.repeat_rules = state[6]
 *         self.c_repeat_rules.clear()
 */
      __pyx_v_self->c_delays.push_back(((void *)__pyx_v_x));

      /* "bioscrape/types.pyx":2426
 *         self.c_delays.clear()
 *         if state[5] is not None:
 *             for x in state[5]:             # <<<<<<<<<<<<<<
 *                 self.c_delays.push_back(<void *> x)
 *         self.repeat_rules = state[6]
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2425
 *         self.delays = state[5]
 *         self.c_delays.clear()
 *         if state[5] is not None:             # <<<<<<<<<<<<<<
 *             for x in state[5]:
 *                 self.c_delays.push_back(<void *> x)
 */
  }

  /* "bioscrape/types.pyx":2428
 *             for x in state[5]:
 *                 self.c_delays.push_back(<void *> x)
 *         self.repeat_rules = state[6]             # <<<<<<<<<<<<<<
 *         self.c_repeat_rules.clear()
 *         if state[6] is not None:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 2428, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->repeat_rules);
  __Pyx_DECREF(__pyx_v_self->repeat_rules);
  __pyx_v_self->repeat_rules = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2429
 *                 self.c_delays.push_back(<void *> x)
 *         self.repeat_rules = state[6]
 *         self.c_repeat_rules.clear()             # <<<<<<<<<<<<<<
 *         if state[6] is not None:
 *             for x in state[6]:
 */
  __pyx_v_self->c_repeat_rules.clear();

  /* "bioscrape/types.pyx":2430
 *         self.repeat_rules = state[6]
 *         self.c_repeat_rules.clear()
 *         if state[6] is not None:             # <<<<<<<<<<<<<<
 *             for x in state[6]:
 *                 self.c_repeat_rules.push_back(<void *> x)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "bioscrape/types.pyx":2431
 *         self.c_repeat_rules.clear()
 *         if state[6] is not None:
 *             for x in state[6]:             # <<<<<<<<<<<<<<
 *                 self.c_repeat_rules.push_back(<void *> x)
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2431, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2431, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2431, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2431, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2431, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2431, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "bioscrape/types.pyx":2432
 *         if state[6] is not None:
 *             for x in state[6]:
 *                 self.c_repeat_rules.push_back(<void *> x)             # <<<<<<<<<<<<<<
 * 
 *         self.species2index = state[7]
 */
      __pyx_v_self->c_repeat_rules.push_back(((void *)__pyx_v_x));

      /* "bioscrape/types.pyx":2431
 *         self.c_repeat_rules.clear()
 *         if state[6] is not None:
 *             for x in state[6]:             # <<<<<<<<<<<<<<
 *                 self.c_repeat_rules.push_back(<void *> x)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "bioscrape/types.pyx":2430
 *         self.repeat_rules = state[6]
 *         self.c_repeat_rules.clear()
 *         if state[6] is not None:             # <<<<<<<<<<<<<<
 *             for x in state[6]:
 *                 self.c_repeat_rules.push_back(<void *> x)
 */
  }

  /* "bioscrape/types.pyx":2434
 *                 self.c_repeat_rules.push_back(<void *> x)
 * 
 *         self.species2index = state[7]             # <<<<<<<<<<<<<<
 *         self.params2index = state[8]
 *         self.species_values = state[9]
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyDict_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->species2index);
  __Pyx_DECREF(__pyx_v_self->species2index);
  __pyx_v_self->species2index = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2435
 * 
 *         self.species2index = state[7]
 *         self.params2index = state[8]             # <<<<<<<<<<<<<<
 *         self.species_values = state[9]
 *         self.params_values = state[10]
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyDict_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 2435, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->params2index);
  __Pyx_DECREF(__pyx_v_self->params2index);
  __pyx_v_self->params2index = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2436
 *         self.species2index = state[7]
 *         self.params2index = state[8]
 *         self.species_values = state[9]             # <<<<<<<<<<<<<<
 *         self.params_values = state[10]
 *         self.update_array = state[11]
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2436, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->species_values);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->species_values));
  __pyx_v_self->species_values = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2437
 *         self.params2index = state[8]
 *         self.species_values = state[9]
 *         self.params_values = state[10]             # <<<<<<<<<<<<<<
 *         self.update_array = state[11]
 *         self.delay_update_array = state[12]
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2437, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->params_values);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->params_values));
  __pyx_v_self->params_values = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2438
 *         self.species_values = state[9]
 *         self.params_values = state[10]
 *         self.update_array = state[11]             # <<<<<<<<<<<<<<
 *         self.delay_update_array = state[12]
 *         self.reaction_list = state[13]
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2438, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->update_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->update_array));
  __pyx_v_self->update_array = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2439
 *         self.params_values = state[10]
 *         self.update_array = state[11]
 *         self.delay_update_array = state[12]             # <<<<<<<<<<<<<<
 *         self.reaction_list = state[13]
 *         self.reaction_updates = state[14]
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2439, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->delay_update_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->delay_update_array));
  __pyx_v_self->delay_update_array = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2440
 *         self.update_array = state[11]
 *         self.delay_update_array = state[12]
 *         self.reaction_list = state[13]             # <<<<<<<<<<<<<<
 *         self.reaction_updates = state[14]
 *         self.delay_reaction_updates = state[15]
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyList_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 2440, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->reaction_list);
  __Pyx_DECREF(__pyx_v_self->reaction_list);
  __pyx_v_self->reaction_list = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2441
 *         self.delay_update_array = state[12]
 *         self.reaction_list = state[13]
 *         self.reaction_updates = state[14]             # <<<<<<<<<<<<<<
 *         self.delay_reaction_updates = state[15]
 *         self.initialized = state[16]
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyList_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 2441, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->reaction_updates);
  __Pyx_DECREF(__pyx_v_self->reaction_updates);
  __pyx_v_self->reaction_updates = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2442
 *         self.reaction_list = state[13]
 *         self.reaction_updates = state[14]
 *         self.delay_reaction_updates = state[15]             # <<<<<<<<<<<<<<
 *         self.initialized = state[16]
 *         self.reaction_definitions = state[17]
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyList_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 2442, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->delay_reaction_updates);
  __Pyx_DECREF(__pyx_v_self->delay_reaction_updates);
  __pyx_v_self->delay_reaction_updates = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2443
 *         self.reaction_updates = state[14]
 *         self.delay_reaction_updates = state[15]
 *         self.initialized = state[16]             # <<<<<<<<<<<<<<
 *         self.reaction_definitions = state[17]
 *         self.rule_definitions = state[18]
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_self->initialized = __pyx_t_8;

  /* "bioscrape/types.pyx":2444
 *         self.delay_reaction_updates = state[15]
 *         self.initialized = state[16]
 *         self.reaction_definitions = state[17]             # <<<<<<<<<<<<<<
 *         self.rule_definitions = state[18]
 * 
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyList_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 2444, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->reaction_definitions);
  __Pyx_DECREF(__pyx_v_self->reaction_definitions);
  __pyx_v_self->reaction_definitions = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2445
 *         self.initialized = state[16]
 *         self.reaction_definitions = state[17]
 *         self.rule_definitions = state[18]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyList_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 2445, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->rule_definitions);
  __Pyx_DECREF(__pyx_v_self->rule_definitions);
  __pyx_v_self->rule_definitions = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "bioscrape/types.pyx":2404
 * 
 *     # Update this if you change any of Model's member variables!
 *     def __setstate__(self, state):             # <<<<<<<<<<<<<<
 *         '''Sets this Model's state to that of another, using a tuple generated
 *         by the other Model's __getstate__ method.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Model.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_103__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_103__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_102__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_102__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Model.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_5Model_105__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_5Model_105__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_5Model_104__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_Model *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_5Model_104__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Model *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Model.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2454
 * 
 * cdef class Schnitz:
 *     def __init__(self, time, data, volume):             # <<<<<<<<<<<<<<
 *         """
 *         Create a Schnitz with the provided time, data, and volume arrays. Parents and daughters are left as None and
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_7Schnitz_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_7Schnitz___init__[] = "\n        Create a Schnitz with the provided time, data, and volume arrays. Parents and daughters are left as None and\n        must be set later if required.\n\n        :param time: (np.ndarray) 1-D array with time points\n        :param data: (np.ndarray) 2-D array with one row for each time point, one column for each measured output\n        :param volume: (np.ndarray) 1-D array with volume at each time point\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9bioscrape_5types_7Schnitz___init__;
#endif
static int __pyx_pw_9bioscrape_5types_7Schnitz_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_time = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_volume = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time,&__pyx_n_s_data,&__pyx_n_s_volume,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 2454, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 2454, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2454, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_time = values[0];
    __pyx_v_data = values[1];
    __pyx_v_volume = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2454, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Schnitz.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz___init__(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self), __pyx_v_time, __pyx_v_data, __pyx_v_volume);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_7Schnitz___init__(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v_time, PyObject *__pyx_v_data, PyObject *__pyx_v_volume) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":2463
 *         :param volume: (np.ndarray) 1-D array with volume at each time point
 *         """
 *         self.parent = None             # <<<<<<<<<<<<<<
 *         self.daughter1 = None
 *         self.daughter2 = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)Py_None);

  /* "bioscrape/types.pyx":2464
 *         """
 *         self.parent = None
 *         self.daughter1 = None             # <<<<<<<<<<<<<<
 *         self.daughter2 = None
 *         self.time = time
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->daughter1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->daughter1));
  __pyx_v_self->daughter1 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)Py_None);

  /* "bioscrape/types.pyx":2465
 *         self.parent = None
 *         self.daughter1 = None
 *         self.daughter2 = None             # <<<<<<<<<<<<<<
 *         self.time = time
 *         self.volume = volume
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->daughter2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->daughter2));
  __pyx_v_self->daughter2 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)Py_None);

  /* "bioscrape/types.pyx":2466
 *         self.daughter1 = None
 *         self.daughter2 = None
 *         self.time = time             # <<<<<<<<<<<<<<
 *         self.volume = volume
 *         self.data = data
 */
  if (!(likely(((__pyx_v_time) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_time, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2466, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_time;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->time);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->time));
  __pyx_v_self->time = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2467
 *         self.daughter2 = None
 *         self.time = time
 *         self.volume = volume             # <<<<<<<<<<<<<<
 *         self.data = data
 * 
 */
  if (!(likely(((__pyx_v_volume) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_volume, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2467, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_volume;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->volume);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->volume));
  __pyx_v_self->volume = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2468
 *         self.time = time
 *         self.volume = volume
 *         self.data = data             # <<<<<<<<<<<<<<
 * 
 *     def py_get_data(self):
 */
  if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2468, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_data;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->data));
  __pyx_v_self->data = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2454
 * 
 * cdef class Schnitz:
 *     def __init__(self, time, data, volume):             # <<<<<<<<<<<<<<
 *         """
 *         Create a Schnitz with the provided time, data, and volume arrays. Parents and daughters are left as None and
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Schnitz.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2470
 *         self.data = data
 * 
 *     def py_get_data(self):             # <<<<<<<<<<<<<<
 *         return self.data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_3py_get_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_3py_get_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_data (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_2py_get_data(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_2py_get_data(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_data", 0);

  /* "bioscrape/types.pyx":2471
 * 
 *     def py_get_data(self):
 *         return self.data             # <<<<<<<<<<<<<<
 * 
 *     def py_set_data(self, data):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->data));
  __pyx_r = ((PyObject *)__pyx_v_self->data);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2470
 *         self.data = data
 * 
 *     def py_get_data(self):             # <<<<<<<<<<<<<<
 *         return self.data
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2473
 *         return self.data
 * 
 *     def py_set_data(self, data):             # <<<<<<<<<<<<<<
 *         self.data = data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_5py_set_data(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_5py_set_data(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_set_data (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_4py_set_data(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self), ((PyObject *)__pyx_v_data));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_4py_set_data(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_set_data", 0);

  /* "bioscrape/types.pyx":2474
 * 
 *     def py_set_data(self, data):
 *         self.data = data             # <<<<<<<<<<<<<<
 * 
 *     def py_get_time(self):
 */
  if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2474, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_data;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->data));
  __pyx_v_self->data = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2473
 *         return self.data
 * 
 *     def py_set_data(self, data):             # <<<<<<<<<<<<<<
 *         self.data = data
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Schnitz.py_set_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2476
 *         self.data = data
 * 
 *     def py_get_time(self):             # <<<<<<<<<<<<<<
 *         return self.time
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_7py_get_time(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_7py_get_time(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_time (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_6py_get_time(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_6py_get_time(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_time", 0);

  /* "bioscrape/types.pyx":2477
 * 
 *     def py_get_time(self):
 *         return self.time             # <<<<<<<<<<<<<<
 * 
 *     def py_get_volume(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->time));
  __pyx_r = ((PyObject *)__pyx_v_self->time);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2476
 *         self.data = data
 * 
 *     def py_get_time(self):             # <<<<<<<<<<<<<<
 *         return self.time
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2479
 *         return self.time
 * 
 *     def py_get_volume(self):             # <<<<<<<<<<<<<<
 *         return self.volume
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_9py_get_volume(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_9py_get_volume(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_volume (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_8py_get_volume(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_8py_get_volume(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_volume", 0);

  /* "bioscrape/types.pyx":2480
 * 
 *     def py_get_volume(self):
 *         return self.volume             # <<<<<<<<<<<<<<
 * 
 *     def py_get_dataframe(self, Model = None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->volume));
  __pyx_r = ((PyObject *)__pyx_v_self->volume);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2479
 *         return self.time
 * 
 *     def py_get_volume(self):             # <<<<<<<<<<<<<<
 *         return self.volume
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2482
 *         return self.volume
 * 
 *     def py_get_dataframe(self, Model = None):             # <<<<<<<<<<<<<<
 *         try:
 *             import pandas
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_11py_get_dataframe(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_11py_get_dataframe(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Model = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_dataframe (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Model,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Model);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_get_dataframe") < 0)) __PYX_ERR(0, 2482, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_Model = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_get_dataframe", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2482, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Schnitz.py_get_dataframe", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_10py_get_dataframe(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self), __pyx_v_Model);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_10py_get_dataframe(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v_Model) {
  PyObject *__pyx_v_pandas = NULL;
  PyObject *__pyx_v_df = NULL;
  PyObject *__pyx_v_columns = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("py_get_dataframe", 0);

  /* "bioscrape/types.pyx":2483
 * 
 *     def py_get_dataframe(self, Model = None):
 *         try:             # <<<<<<<<<<<<<<
 *             import pandas
 *             if Model == None:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "bioscrape/types.pyx":2484
 *     def py_get_dataframe(self, Model = None):
 *         try:
 *             import pandas             # <<<<<<<<<<<<<<
 *             if Model == None:
 *                 warnings.warn("No Model passed into py_get_dataframe. No species names will be attached to the data frame.")
 */
      __pyx_t_4 = __Pyx_Import(__pyx_n_s_pandas, 0, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2484, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_pandas = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":2485
 *         try:
 *             import pandas
 *             if Model == None:             # <<<<<<<<<<<<<<
 *                 warnings.warn("No Model passed into py_get_dataframe. No species names will be attached to the data frame.")
 *                 df = pandas.DataFrame(data = self.py_get_data())
 */
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_Model, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2485, __pyx_L3_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2485, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_5) {

        /* "bioscrape/types.pyx":2486
 *             import pandas
 *             if Model == None:
 *                 warnings.warn("No Model passed into py_get_dataframe. No species names will be attached to the data frame.")             # <<<<<<<<<<<<<<
 *                 df = pandas.DataFrame(data = self.py_get_data())
 *             else:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_warnings); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2486, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_warn); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2486, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_kp_s_No_Model_passed_into_py_get_data) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_s_No_Model_passed_into_py_get_data);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2486, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "bioscrape/types.pyx":2487
 *             if Model == None:
 *                 warnings.warn("No Model passed into py_get_dataframe. No species names will be attached to the data frame.")
 *                 df = pandas.DataFrame(data = self.py_get_data())             # <<<<<<<<<<<<<<
 *             else:
 *                 columns = Model.get_species_list()
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pandas, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2487, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2487, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_py_get_data); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2487, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_6 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2487, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_data, __pyx_t_6) < 0) __PYX_ERR(0, 2487, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2487, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_df = __pyx_t_6;
        __pyx_t_6 = 0;

        /* "bioscrape/types.pyx":2485
 *         try:
 *             import pandas
 *             if Model == None:             # <<<<<<<<<<<<<<
 *                 warnings.warn("No Model passed into py_get_dataframe. No species names will be attached to the data frame.")
 *                 df = pandas.DataFrame(data = self.py_get_data())
 */
        goto __pyx_L9;
      }

      /* "bioscrape/types.pyx":2489
 *                 df = pandas.DataFrame(data = self.py_get_data())
 *             else:
 *                 columns = Model.get_species_list()             # <<<<<<<<<<<<<<
 *                 df = pandas.DataFrame(data = self.py_get_data(), columns = columns)
 *             df['time'] = self.time
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_Model, __pyx_n_s_get_species_list); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2489, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2489, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_columns = __pyx_t_6;
        __pyx_t_6 = 0;

        /* "bioscrape/types.pyx":2490
 *             else:
 *                 columns = Model.get_species_list()
 *                 df = pandas.DataFrame(data = self.py_get_data(), columns = columns)             # <<<<<<<<<<<<<<
 *             df['time'] = self.time
 *             df['volume'] = self.volume
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_pandas, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2490, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2490, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_py_get_data); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2490, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2490, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_data, __pyx_t_4) < 0) __PYX_ERR(0, 2490, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_columns, __pyx_v_columns) < 0) __PYX_ERR(0, 2490, __pyx_L3_error)
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2490, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_df = __pyx_t_4;
        __pyx_t_4 = 0;
      }
      __pyx_L9:;

      /* "bioscrape/types.pyx":2491
 *                 columns = Model.get_species_list()
 *                 df = pandas.DataFrame(data = self.py_get_data(), columns = columns)
 *             df['time'] = self.time             # <<<<<<<<<<<<<<
 *             df['volume'] = self.volume
 *             return df
 */
      __pyx_t_4 = ((PyObject *)__pyx_v_self->time);
      __Pyx_INCREF(__pyx_t_4);
      if (unlikely(PyObject_SetItem(__pyx_v_df, __pyx_n_s_time, __pyx_t_4) < 0)) __PYX_ERR(0, 2491, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":2492
 *                 df = pandas.DataFrame(data = self.py_get_data(), columns = columns)
 *             df['time'] = self.time
 *             df['volume'] = self.volume             # <<<<<<<<<<<<<<
 *             return df
 * 
 */
      __pyx_t_4 = ((PyObject *)__pyx_v_self->volume);
      __Pyx_INCREF(__pyx_t_4);
      if (unlikely(PyObject_SetItem(__pyx_v_df, __pyx_n_s_volume, __pyx_t_4) < 0)) __PYX_ERR(0, 2492, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":2493
 *             df['time'] = self.time
 *             df['volume'] = self.volume
 *             return df             # <<<<<<<<<<<<<<
 * 
 *         except ModuleNotFoundError:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_df);
      __pyx_r = __pyx_v_df;
      goto __pyx_L7_try_return;

      /* "bioscrape/types.pyx":2483
 * 
 *     def py_get_dataframe(self, Model = None):
 *         try:             # <<<<<<<<<<<<<<
 *             import pandas
 *             if Model == None:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "bioscrape/types.pyx":2495
 *             return df
 * 
 *         except ModuleNotFoundError:             # <<<<<<<<<<<<<<
 *             warnings.warn("py_get_dataframe requires the pandas Module to return a Pandas Dataframe object. Numpy array being returned instead.")
 *             return self.py_get_result()
 */
    __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_7, &__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ModuleNotFoundError); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2495, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_8);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_ErrRestore(__pyx_t_4, __pyx_t_7, __pyx_t_6);
    __pyx_t_4 = 0; __pyx_t_7 = 0; __pyx_t_6 = 0;
    if (__pyx_t_10) {
      __Pyx_AddTraceback("bioscrape.types.Schnitz.py_get_dataframe", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_4) < 0) __PYX_ERR(0, 2495, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_4);

      /* "bioscrape/types.pyx":2496
 * 
 *         except ModuleNotFoundError:
 *             warnings.warn("py_get_dataframe requires the pandas Module to return a Pandas Dataframe object. Numpy array being returned instead.")             # <<<<<<<<<<<<<<
 *             return self.py_get_result()
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_warnings); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2496, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_warn); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2496, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      __pyx_t_8 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_9, __pyx_kp_s_py_get_dataframe_requires_the_pa) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_kp_s_py_get_dataframe_requires_the_pa);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2496, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "bioscrape/types.pyx":2497
 *         except ModuleNotFoundError:
 *             warnings.warn("py_get_dataframe requires the pandas Module to return a Pandas Dataframe object. Numpy array being returned instead.")
 *             return self.py_get_result()             # <<<<<<<<<<<<<<
 * 
 *     def py_get_parent(self):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_py_get_result); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2497, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      __pyx_t_8 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2497, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_r = __pyx_t_8;
      __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "bioscrape/types.pyx":2483
 * 
 *     def py_get_dataframe(self, Model = None):
 *         try:             # <<<<<<<<<<<<<<
 *             import pandas
 *             if Model == None:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "bioscrape/types.pyx":2482
 *         return self.volume
 * 
 *     def py_get_dataframe(self, Model = None):             # <<<<<<<<<<<<<<
 *         try:
 *             import pandas
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("bioscrape.types.Schnitz.py_get_dataframe", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pandas);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XDECREF(__pyx_v_columns);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2499
 *             return self.py_get_result()
 * 
 *     def py_get_parent(self):             # <<<<<<<<<<<<<<
 *         return self.parent
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_13py_get_parent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_13py_get_parent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_parent (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_12py_get_parent(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_12py_get_parent(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_parent", 0);

  /* "bioscrape/types.pyx":2500
 * 
 *     def py_get_parent(self):
 *         return self.parent             # <<<<<<<<<<<<<<
 * 
 *     def py_get_daughters(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2499
 *             return self.py_get_result()
 * 
 *     def py_get_parent(self):             # <<<<<<<<<<<<<<
 *         return self.parent
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2502
 *         return self.parent
 * 
 *     def py_get_daughters(self):             # <<<<<<<<<<<<<<
 *         return (self.daughter1, self.daughter2)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_15py_get_daughters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_15py_get_daughters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_daughters (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_14py_get_daughters(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_14py_get_daughters(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_get_daughters", 0);

  /* "bioscrape/types.pyx":2503
 * 
 *     def py_get_daughters(self):
 *         return (self.daughter1, self.daughter2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->daughter1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->daughter1));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->daughter1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->daughter2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->daughter2));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->daughter2));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2502
 *         return self.parent
 * 
 *     def py_get_daughters(self):             # <<<<<<<<<<<<<<
 *         return (self.daughter1, self.daughter2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Schnitz.py_get_daughters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2506
 * 
 * 
 *     def py_set_parent(self, Schnitz p):             # <<<<<<<<<<<<<<
 *         self.set_parent(p)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_17py_set_parent(PyObject *__pyx_v_self, PyObject *__pyx_v_p); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_17py_set_parent(PyObject *__pyx_v_self, PyObject *__pyx_v_p) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_set_parent (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_9bioscrape_5types_Schnitz, 1, "p", 0))) __PYX_ERR(0, 2506, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_16py_set_parent(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self), ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_p));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_16py_set_parent(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_set_parent", 0);

  /* "bioscrape/types.pyx":2507
 * 
 *     def py_set_parent(self, Schnitz p):
 *         self.set_parent(p)             # <<<<<<<<<<<<<<
 * 
 *     def py_set_daughters(self,Schnitz d1, Schnitz d2):
 */
  __pyx_f_9bioscrape_5types_7Schnitz_set_parent(__pyx_v_self, __pyx_v_p);

  /* "bioscrape/types.pyx":2506
 * 
 * 
 *     def py_set_parent(self, Schnitz p):             # <<<<<<<<<<<<<<
 *         self.set_parent(p)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2509
 *         self.set_parent(p)
 * 
 *     def py_set_daughters(self,Schnitz d1, Schnitz d2):             # <<<<<<<<<<<<<<
 *         self.set_daughters(d1,d2)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_19py_set_daughters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_19py_set_daughters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_d1 = 0;
  struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_d2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_set_daughters (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_d1,&__pyx_n_s_d2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_set_daughters", 1, 2, 2, 1); __PYX_ERR(0, 2509, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_set_daughters") < 0)) __PYX_ERR(0, 2509, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_d1 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)values[0]);
    __pyx_v_d2 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_set_daughters", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2509, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Schnitz.py_set_daughters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d1), __pyx_ptype_9bioscrape_5types_Schnitz, 1, "d1", 0))) __PYX_ERR(0, 2509, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d2), __pyx_ptype_9bioscrape_5types_Schnitz, 1, "d2", 0))) __PYX_ERR(0, 2509, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_18py_set_daughters(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self), __pyx_v_d1, __pyx_v_d2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_18py_set_daughters(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_d1, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_d2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_set_daughters", 0);

  /* "bioscrape/types.pyx":2510
 * 
 *     def py_set_daughters(self,Schnitz d1, Schnitz d2):
 *         self.set_daughters(d1,d2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_f_9bioscrape_5types_7Schnitz_set_daughters(__pyx_v_self, __pyx_v_d1, __pyx_v_d2);

  /* "bioscrape/types.pyx":2509
 *         self.set_parent(p)
 * 
 *     def py_set_daughters(self,Schnitz d1, Schnitz d2):             # <<<<<<<<<<<<<<
 *         self.set_daughters(d1,d2)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2513
 * 
 * 
 *     def get_sub_lineage(self, dict species_dict = None):             # <<<<<<<<<<<<<<
 *         cdef Lineage out
 *         if species_dict is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_21get_sub_lineage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_21get_sub_lineage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_species_dict = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sub_lineage (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_species_dict,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_dict);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_sub_lineage") < 0)) __PYX_ERR(0, 2513, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_species_dict = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_sub_lineage", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2513, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Schnitz.get_sub_lineage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_dict), (&PyDict_Type), 1, "species_dict", 1))) __PYX_ERR(0, 2513, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_20get_sub_lineage(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self), __pyx_v_species_dict);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_20get_sub_lineage(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v_species_dict) {
  struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_out = 0;
  PyObject *__pyx_v_schnitzes_to_add = 0;
  unsigned int __pyx_v_index;
  struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  unsigned int __pyx_t_8;
  __Pyx_RefNannySetupContext("get_sub_lineage", 0);

  /* "bioscrape/types.pyx":2515
 *     def get_sub_lineage(self, dict species_dict = None):
 *         cdef Lineage out
 *         if species_dict is None:             # <<<<<<<<<<<<<<
 *             out = Lineage()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_species_dict == ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "bioscrape/types.pyx":2516
 *         cdef Lineage out
 *         if species_dict is None:
 *             out = Lineage()             # <<<<<<<<<<<<<<
 *         else:
 *             out = ExperimentalLineage(species_dict.copy())
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_Lineage)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_out = ((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "bioscrape/types.pyx":2515
 *     def get_sub_lineage(self, dict species_dict = None):
 *         cdef Lineage out
 *         if species_dict is None:             # <<<<<<<<<<<<<<
 *             out = Lineage()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "bioscrape/types.pyx":2518
 *             out = Lineage()
 *         else:
 *             out = ExperimentalLineage(species_dict.copy())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    if (unlikely(__pyx_v_species_dict == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
      __PYX_ERR(0, 2518, __pyx_L1_error)
    }
    __pyx_t_3 = PyDict_Copy(__pyx_v_species_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9bioscrape_5types_ExperimentalLineage), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_out = ((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "bioscrape/types.pyx":2521
 * 
 * 
 *         cdef list schnitzes_to_add = [self]             # <<<<<<<<<<<<<<
 *         cdef unsigned index = 0
 *         cdef Schnitz s = None
 */
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self));
  __pyx_v_schnitzes_to_add = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "bioscrape/types.pyx":2522
 * 
 *         cdef list schnitzes_to_add = [self]
 *         cdef unsigned index = 0             # <<<<<<<<<<<<<<
 *         cdef Schnitz s = None
 * 
 */
  __pyx_v_index = 0;

  /* "bioscrape/types.pyx":2523
 *         cdef list schnitzes_to_add = [self]
 *         cdef unsigned index = 0
 *         cdef Schnitz s = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_s = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)Py_None);

  /* "bioscrape/types.pyx":2526
 * 
 * 
 *         while index < len(schnitzes_to_add):             # <<<<<<<<<<<<<<
 *             s = schnitzes_to_add[index]
 *             if s.get_daughter_1() is not None:
 */
  while (1) {
    __pyx_t_5 = PyList_GET_SIZE(__pyx_v_schnitzes_to_add); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2526, __pyx_L1_error)
    __pyx_t_2 = ((__pyx_v_index < __pyx_t_5) != 0);
    if (!__pyx_t_2) break;

    /* "bioscrape/types.pyx":2527
 * 
 *         while index < len(schnitzes_to_add):
 *             s = schnitzes_to_add[index]             # <<<<<<<<<<<<<<
 *             if s.get_daughter_1() is not None:
 *                 schnitzes_to_add.append(s.get_daughter_1())
 */
    if (!(likely(((PyList_GET_ITEM(__pyx_v_schnitzes_to_add, __pyx_v_index)) == Py_None) || likely(__Pyx_TypeTest(PyList_GET_ITEM(__pyx_v_schnitzes_to_add, __pyx_v_index), __pyx_ptype_9bioscrape_5types_Schnitz))))) __PYX_ERR(0, 2527, __pyx_L1_error)
    __pyx_t_4 = PyList_GET_ITEM(__pyx_v_schnitzes_to_add, __pyx_v_index);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_s, ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "bioscrape/types.pyx":2528
 *         while index < len(schnitzes_to_add):
 *             s = schnitzes_to_add[index]
 *             if s.get_daughter_1() is not None:             # <<<<<<<<<<<<<<
 *                 schnitzes_to_add.append(s.get_daughter_1())
 *             if s.get_daughter_2() is not None:
 */
    __pyx_t_4 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_1(__pyx_v_s)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = (__pyx_t_4 != Py_None);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "bioscrape/types.pyx":2529
 *             s = schnitzes_to_add[index]
 *             if s.get_daughter_1() is not None:
 *                 schnitzes_to_add.append(s.get_daughter_1())             # <<<<<<<<<<<<<<
 *             if s.get_daughter_2() is not None:
 *                 schnitzes_to_add.append(s.get_daughter_2())
 */
      __pyx_t_4 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_1(__pyx_v_s)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2529, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_schnitzes_to_add, __pyx_t_4); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 2529, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":2528
 *         while index < len(schnitzes_to_add):
 *             s = schnitzes_to_add[index]
 *             if s.get_daughter_1() is not None:             # <<<<<<<<<<<<<<
 *                 schnitzes_to_add.append(s.get_daughter_1())
 *             if s.get_daughter_2() is not None:
 */
    }

    /* "bioscrape/types.pyx":2530
 *             if s.get_daughter_1() is not None:
 *                 schnitzes_to_add.append(s.get_daughter_1())
 *             if s.get_daughter_2() is not None:             # <<<<<<<<<<<<<<
 *                 schnitzes_to_add.append(s.get_daughter_2())
 * 
 */
    __pyx_t_4 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_2(__pyx_v_s)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__pyx_t_4 != Py_None);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "bioscrape/types.pyx":2531
 *                 schnitzes_to_add.append(s.get_daughter_1())
 *             if s.get_daughter_2() is not None:
 *                 schnitzes_to_add.append(s.get_daughter_2())             # <<<<<<<<<<<<<<
 * 
 *             index += 1
 */
      __pyx_t_4 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_2(__pyx_v_s)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2531, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_schnitzes_to_add, __pyx_t_4); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 2531, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "bioscrape/types.pyx":2530
 *             if s.get_daughter_1() is not None:
 *                 schnitzes_to_add.append(s.get_daughter_1())
 *             if s.get_daughter_2() is not None:             # <<<<<<<<<<<<<<
 *                 schnitzes_to_add.append(s.get_daughter_2())
 * 
 */
    }

    /* "bioscrape/types.pyx":2533
 *                 schnitzes_to_add.append(s.get_daughter_2())
 * 
 *             index += 1             # <<<<<<<<<<<<<<
 * 
 *         for index in range(len(schnitzes_to_add)):
 */
    __pyx_v_index = (__pyx_v_index + 1);
  }

  /* "bioscrape/types.pyx":2535
 *             index += 1
 * 
 *         for index in range(len(schnitzes_to_add)):             # <<<<<<<<<<<<<<
 *             out.add_schnitz(schnitzes_to_add[index])
 * 
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_schnitzes_to_add); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2535, __pyx_L1_error)
  __pyx_t_7 = __pyx_t_5;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_index = __pyx_t_8;

    /* "bioscrape/types.pyx":2536
 * 
 *         for index in range(len(schnitzes_to_add)):
 *             out.add_schnitz(schnitzes_to_add[index])             # <<<<<<<<<<<<<<
 * 
 *         return out
 */
    if (!(likely(((PyList_GET_ITEM(__pyx_v_schnitzes_to_add, __pyx_v_index)) == Py_None) || likely(__Pyx_TypeTest(PyList_GET_ITEM(__pyx_v_schnitzes_to_add, __pyx_v_index), __pyx_ptype_9bioscrape_5types_Schnitz))))) __PYX_ERR(0, 2536, __pyx_L1_error)
    __pyx_t_4 = PyList_GET_ITEM(__pyx_v_schnitzes_to_add, __pyx_v_index);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_f_9bioscrape_5types_7Lineage_add_schnitz(__pyx_v_out, ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_4));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "bioscrape/types.pyx":2538
 *             out.add_schnitz(schnitzes_to_add[index])
 * 
 *         return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2513
 * 
 * 
 *     def get_sub_lineage(self, dict species_dict = None):             # <<<<<<<<<<<<<<
 *         cdef Lineage out
 *         if species_dict is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.Schnitz.get_sub_lineage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_schnitzes_to_add);
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2541
 * 
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef Schnitz temp = Schnitz(self.time.copy(),self.data.copy(),self.volume.copy())
 *         temp.daughter1 = self.daughter1
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_23copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_23copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_22copy(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_22copy(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_temp = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "bioscrape/types.pyx":2542
 * 
 *     def copy(self):
 *         cdef Schnitz temp = Schnitz(self.time.copy(),self.data.copy(),self.volume.copy())             # <<<<<<<<<<<<<<
 *         temp.daughter1 = self.daughter1
 *         temp.daughter2 = self.daughter2
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->time), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->data), __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->volume), __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9bioscrape_5types_Schnitz), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_temp = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":2543
 *     def copy(self):
 *         cdef Schnitz temp = Schnitz(self.time.copy(),self.data.copy(),self.volume.copy())
 *         temp.daughter1 = self.daughter1             # <<<<<<<<<<<<<<
 *         temp.daughter2 = self.daughter2
 *         temp.parent = self.parent
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->daughter1);
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_temp->daughter1);
  __Pyx_DECREF(((PyObject *)__pyx_v_temp->daughter1));
  __pyx_v_temp->daughter1 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":2544
 *         cdef Schnitz temp = Schnitz(self.time.copy(),self.data.copy(),self.volume.copy())
 *         temp.daughter1 = self.daughter1
 *         temp.daughter2 = self.daughter2             # <<<<<<<<<<<<<<
 *         temp.parent = self.parent
 *         return temp
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->daughter2);
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_temp->daughter2);
  __Pyx_DECREF(((PyObject *)__pyx_v_temp->daughter2));
  __pyx_v_temp->daughter2 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":2545
 *         temp.daughter1 = self.daughter1
 *         temp.daughter2 = self.daughter2
 *         temp.parent = self.parent             # <<<<<<<<<<<<<<
 *         return temp
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->parent);
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_temp->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_temp->parent));
  __pyx_v_temp->parent = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":2546
 *         temp.daughter2 = self.daughter2
 *         temp.parent = self.parent
 *         return temp             # <<<<<<<<<<<<<<
 * 
 *     def __setstate__(self,state):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_temp));
  __pyx_r = ((PyObject *)__pyx_v_temp);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2541
 * 
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef Schnitz temp = Schnitz(self.time.copy(),self.data.copy(),self.volume.copy())
 *         temp.daughter1 = self.daughter1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.Schnitz.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_temp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2548
 *         return temp
 * 
 *     def __setstate__(self,state):             # <<<<<<<<<<<<<<
 *         self.parent = state[0]
 *         self.daughter1 = state[1]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_25__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_25__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_24__setstate__(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self), ((PyObject *)__pyx_v_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_24__setstate__(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "bioscrape/types.pyx":2549
 * 
 *     def __setstate__(self,state):
 *         self.parent = state[0]             # <<<<<<<<<<<<<<
 *         self.daughter1 = state[1]
 *         self.daughter2 = state[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Schnitz))))) __PYX_ERR(0, 2549, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2550
 *     def __setstate__(self,state):
 *         self.parent = state[0]
 *         self.daughter1 = state[1]             # <<<<<<<<<<<<<<
 *         self.daughter2 = state[2]
 *         self.time = state[3]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Schnitz))))) __PYX_ERR(0, 2550, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->daughter1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->daughter1));
  __pyx_v_self->daughter1 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2551
 *         self.parent = state[0]
 *         self.daughter1 = state[1]
 *         self.daughter2 = state[2]             # <<<<<<<<<<<<<<
 *         self.time = state[3]
 *         self.volume = state[4]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9bioscrape_5types_Schnitz))))) __PYX_ERR(0, 2551, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->daughter2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->daughter2));
  __pyx_v_self->daughter2 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2552
 *         self.daughter1 = state[1]
 *         self.daughter2 = state[2]
 *         self.time = state[3]             # <<<<<<<<<<<<<<
 *         self.volume = state[4]
 *         self.data = state[5]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->time);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->time));
  __pyx_v_self->time = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2553
 *         self.daughter2 = state[2]
 *         self.time = state[3]
 *         self.volume = state[4]             # <<<<<<<<<<<<<<
 *         self.data = state[5]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2553, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->volume);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->volume));
  __pyx_v_self->volume = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2554
 *         self.time = state[3]
 *         self.volume = state[4]
 *         self.data = state[5]             # <<<<<<<<<<<<<<
 * 
 *     def __getstate__(self):
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2554, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->data);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->data));
  __pyx_v_self->data = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2548
 *         return temp
 * 
 *     def __setstate__(self,state):             # <<<<<<<<<<<<<<
 *         self.parent = state[0]
 *         self.daughter1 = state[1]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Schnitz.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2556
 *         self.data = state[5]
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         return (self.parent,self.daughter1,self.daughter2, self.time, self.volume, self.data)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_27__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_27__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_26__getstate__(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_26__getstate__(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "bioscrape/types.pyx":2557
 * 
 *     def __getstate__(self):
 *         return (self.parent,self.daughter1,self.daughter2, self.time, self.volume, self.data)             # <<<<<<<<<<<<<<
 * 
 * cdef class Lineage:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->daughter1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->daughter1));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->daughter1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->daughter2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->daughter2));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_self->daughter2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->time));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->time));
  PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_v_self->time));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->volume));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->volume));
  PyTuple_SET_ITEM(__pyx_t_1, 4, ((PyObject *)__pyx_v_self->volume));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->data));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->data));
  PyTuple_SET_ITEM(__pyx_t_1, 5, ((PyObject *)__pyx_v_self->data));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2556
 *         self.data = state[5]
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         return (self.parent,self.daughter1,self.daughter2, self.time, self.volume, self.data)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Schnitz.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_28__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_28__reduce_cython__(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.data, self.daughter1, self.daughter2, self.parent, self.time, self.volume)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->data));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->data));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->data));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->daughter1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->daughter1));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->daughter1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->daughter2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->daughter2));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_self->daughter2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_v_self->parent));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->time));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->time));
  PyTuple_SET_ITEM(__pyx_t_1, 4, ((PyObject *)__pyx_v_self->time));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->volume));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->volume));
  PyTuple_SET_ITEM(__pyx_t_1, 5, ((PyObject *)__pyx_v_self->volume));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.data, self.daughter1, self.daughter2, self.parent, self.time, self.volume)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.data, self.daughter1, self.daughter2, self.parent, self.time, self.volume)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.data is not None or self.daughter1 is not None or self.daughter2 is not None or self.parent is not None or self.time is not None or self.volume is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.data, self.daughter1, self.daughter2, self.parent, self.time, self.volume)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.data is not None or self.daughter1 is not None or self.daughter2 is not None or self.parent is not None or self.time is not None or self.volume is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Schnitz, (type(self), 0xa30f800, None), state
 */
  /*else*/ {
    __pyx_t_2 = (((PyObject *)__pyx_v_self->data) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->daughter1) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->daughter2) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->parent) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->time) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->volume) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.data is not None or self.daughter1 is not None or self.daughter2 is not None or self.parent is not None or self.time is not None or self.volume is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Schnitz, (type(self), 0xa30f800, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.data is not None or self.daughter1 is not None or self.daughter2 is not None or self.parent is not None or self.time is not None or self.volume is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Schnitz, (type(self), 0xa30f800, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Schnitz, (type(self), 0xa30f800, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Schnitz); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_170981376);
    __Pyx_GIVEREF(__pyx_int_170981376);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_170981376);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.data is not None or self.daughter1 is not None or self.daughter2 is not None or self.parent is not None or self.time is not None or self.volume is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Schnitz, (type(self), 0xa30f800, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Schnitz, (type(self), 0xa30f800, None), state
 *     else:
 *         return __pyx_unpickle_Schnitz, (type(self), 0xa30f800, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Schnitz__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_Schnitz); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_170981376);
    __Pyx_GIVEREF(__pyx_int_170981376);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_170981376);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bioscrape.types.Schnitz.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Schnitz, (type(self), 0xa30f800, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Schnitz__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Schnitz_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Schnitz_30__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Schnitz_30__setstate_cython__(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Schnitz, (type(self), 0xa30f800, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Schnitz__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_9bioscrape_5types___pyx_unpickle_Schnitz__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Schnitz, (type(self), 0xa30f800, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Schnitz__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Schnitz.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2560
 * 
 * cdef class Lineage:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Creates a lineage object.
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_7Lineage_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9bioscrape_5types_7Lineage___init__[] = "\n        Creates a lineage object.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_9bioscrape_5types_7Lineage___init__;
#endif
static int __pyx_pw_9bioscrape_5types_7Lineage_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9bioscrape_5types_7Lineage___init__(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_7Lineage___init__(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":2564
 *         Creates a lineage object.
 *         """
 *         self.schnitzes = []             # <<<<<<<<<<<<<<
 * 
 *     def py_size(self):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->schnitzes);
  __Pyx_DECREF(__pyx_v_self->schnitzes);
  __pyx_v_self->schnitzes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2560
 * 
 * cdef class Lineage:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Creates a lineage object.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Lineage.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2566
 *         self.schnitzes = []
 * 
 *     def py_size(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the total number of schnitzes in the lineage.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_3py_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9bioscrape_5types_7Lineage_2py_size[] = "\n        Get the total number of schnitzes in the lineage.\n        :return: (int) size of lineage\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_3py_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_size (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Lineage_2py_size(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_2py_size(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_size", 0);

  /* "bioscrape/types.pyx":2571
 *         :return: (int) size of lineage
 *         """
 *         return self.c_schnitzes.size()             # <<<<<<<<<<<<<<
 * 
 *     def py_get_schnitz(self, unsigned index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_schnitzes.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2566
 *         self.schnitzes = []
 * 
 *     def py_size(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the total number of schnitzes in the lineage.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Lineage.py_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2573
 *         return self.c_schnitzes.size()
 * 
 *     def py_get_schnitz(self, unsigned index):             # <<<<<<<<<<<<<<
 *         """
 *         Get a specific schnitz from the lineage
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_5py_get_schnitz(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static char __pyx_doc_9bioscrape_5types_7Lineage_4py_get_schnitz[] = "\n        Get a specific schnitz from the lineage\n        :param index: (unsigned) the Schnitz to retrieve 0 <= index < size()\n        :return: (Schnitz) the requested Schnitz\n        ";
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_5py_get_schnitz(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  unsigned int __pyx_v_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_schnitz (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_unsigned_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2573, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Lineage.py_get_schnitz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_7Lineage_4py_get_schnitz(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self), ((unsigned int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_4py_get_schnitz(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, unsigned int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  void *__pyx_t_8;
  __Pyx_RefNannySetupContext("py_get_schnitz", 0);

  /* "bioscrape/types.pyx":2579
 *         :return: (Schnitz) the requested Schnitz
 *         """
 *         if index >= self.py_size():             # <<<<<<<<<<<<<<
 *             raise IndexError(f"index {index} > lineage.py_size() = {self.py_size()}")
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_py_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 2579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "bioscrape/types.pyx":2580
 *         """
 *         if index >= self.py_size():
 *             raise IndexError(f"index {index} > lineage.py_size() = {self.py_size()}")             # <<<<<<<<<<<<<<
 * 
 *         return (<Schnitz> (self.c_schnitzes[index]))
 */
    __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_index);
    __pyx_t_6 += 6;
    __Pyx_GIVEREF(__pyx_kp_u_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_index);
    __pyx_t_2 = __Pyx_PyUnicode_From_unsigned_int(__pyx_v_index, 0, ' ', 'd'); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u_lineage_py_size);
    __pyx_t_6 += 23;
    __Pyx_GIVEREF(__pyx_kp_u_lineage_py_size);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_lineage_py_size);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_py_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_3, 4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2580, __pyx_L1_error)

    /* "bioscrape/types.pyx":2579
 *         :return: (Schnitz) the requested Schnitz
 *         """
 *         if index >= self.py_size():             # <<<<<<<<<<<<<<
 *             raise IndexError(f"index {index} > lineage.py_size() = {self.py_size()}")
 * 
 */
  }

  /* "bioscrape/types.pyx":2582
 *             raise IndexError(f"index {index} > lineage.py_size() = {self.py_size()}")
 * 
 *         return (<Schnitz> (self.c_schnitzes[index]))             # <<<<<<<<<<<<<<
 * 
 *     def py_add_schnitz(self, Schnitz s):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = (__pyx_v_self->c_schnitzes[__pyx_v_index]);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_8)));
  __pyx_r = ((PyObject *)__pyx_t_8);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2573
 *         return self.c_schnitzes.size()
 * 
 *     def py_get_schnitz(self, unsigned index):             # <<<<<<<<<<<<<<
 *         """
 *         Get a specific schnitz from the lineage
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bioscrape.types.Lineage.py_get_schnitz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2584
 *         return (<Schnitz> (self.c_schnitzes[index]))
 * 
 *     def py_add_schnitz(self, Schnitz s):             # <<<<<<<<<<<<<<
 *         self.add_schnitz(s)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_7py_add_schnitz(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_7py_add_schnitz(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_add_schnitz (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), __pyx_ptype_9bioscrape_5types_Schnitz, 1, "s", 0))) __PYX_ERR(0, 2584, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_7Lineage_6py_add_schnitz(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self), ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_s));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_6py_add_schnitz(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_add_schnitz", 0);

  /* "bioscrape/types.pyx":2585
 * 
 *     def py_add_schnitz(self, Schnitz s):
 *         self.add_schnitz(s)             # <<<<<<<<<<<<<<
 * 
 *     def __setstate__(self, state):
 */
  __pyx_f_9bioscrape_5types_7Lineage_add_schnitz(__pyx_v_self, __pyx_v_s);

  /* "bioscrape/types.pyx":2584
 *         return (<Schnitz> (self.c_schnitzes[index]))
 * 
 *     def py_add_schnitz(self, Schnitz s):             # <<<<<<<<<<<<<<
 *         self.add_schnitz(s)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2587
 *         self.add_schnitz(s)
 * 
 *     def __setstate__(self, state):             # <<<<<<<<<<<<<<
 *         self.schnitzes = []
 *         self.c_schnitzes.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_9__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_9__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Lineage_8__setstate__(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self), ((PyObject *)__pyx_v_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_8__setstate__(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "bioscrape/types.pyx":2588
 * 
 *     def __setstate__(self, state):
 *         self.schnitzes = []             # <<<<<<<<<<<<<<
 *         self.c_schnitzes.clear()
 *         for s in state[0]:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->schnitzes);
  __Pyx_DECREF(__pyx_v_self->schnitzes);
  __pyx_v_self->schnitzes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2589
 *     def __setstate__(self, state):
 *         self.schnitzes = []
 *         self.c_schnitzes.clear()             # <<<<<<<<<<<<<<
 *         for s in state[0]:
 *             self.add_schnitz(s)
 */
  __pyx_v_self->c_schnitzes.clear();

  /* "bioscrape/types.pyx":2590
 *         self.schnitzes = []
 *         self.c_schnitzes.clear()
 *         for s in state[0]:             # <<<<<<<<<<<<<<
 *             self.add_schnitz(s)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2590, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2590, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2590, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2590, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2591
 *         self.c_schnitzes.clear()
 *         for s in state[0]:
 *             self.add_schnitz(s)             # <<<<<<<<<<<<<<
 * 
 *     def __getstate__(self):
 */
    if (!(likely(((__pyx_v_s) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_s, __pyx_ptype_9bioscrape_5types_Schnitz))))) __PYX_ERR(0, 2591, __pyx_L1_error)
    __pyx_f_9bioscrape_5types_7Lineage_add_schnitz(__pyx_v_self, ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v_s));

    /* "bioscrape/types.pyx":2590
 *         self.schnitzes = []
 *         self.c_schnitzes.clear()
 *         for s in state[0]:             # <<<<<<<<<<<<<<
 *             self.add_schnitz(s)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2587
 *         self.add_schnitz(s)
 * 
 *     def __setstate__(self, state):             # <<<<<<<<<<<<<<
 *         self.schnitzes = []
 *         self.c_schnitzes.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bioscrape.types.Lineage.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2593
 *             self.add_schnitz(s)
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         return (self.schnitzes,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_11__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_11__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Lineage_10__getstate__(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_10__getstate__(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "bioscrape/types.pyx":2594
 * 
 *     def __getstate__(self):
 *         return (self.schnitzes,)             # <<<<<<<<<<<<<<
 * 
 *     def truncate_lineage(self,double start_time, double end_time):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->schnitzes);
  __Pyx_GIVEREF(__pyx_v_self->schnitzes);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->schnitzes);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2593
 *             self.add_schnitz(s)
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         return (self.schnitzes,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Lineage.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2596
 *         return (self.schnitzes,)
 * 
 *     def truncate_lineage(self,double start_time, double end_time):             # <<<<<<<<<<<<<<
 *         cdef Schnitz sch, new_sch
 *         cdef dict sch_dict = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_13truncate_lineage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_13truncate_lineage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_start_time;
  double __pyx_v_end_time;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("truncate_lineage (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_time,&__pyx_n_s_end_time,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end_time)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("truncate_lineage", 1, 2, 2, 1); __PYX_ERR(0, 2596, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "truncate_lineage") < 0)) __PYX_ERR(0, 2596, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_start_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_start_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2596, __pyx_L3_error)
    __pyx_v_end_time = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_end_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2596, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("truncate_lineage", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2596, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.Lineage.truncate_lineage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_7Lineage_12truncate_lineage(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self), __pyx_v_start_time, __pyx_v_end_time);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_12truncate_lineage(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, double __pyx_v_start_time, double __pyx_v_end_time) {
  struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_sch = 0;
  PyObject *__pyx_v_sch_dict = 0;
  struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_new_lineage = 0;
  PyArrayObject *__pyx_v_newtime = 0;
  PyArrayObject *__pyx_v_newvolume = 0;
  PyArrayObject *__pyx_v_newdata = 0;
  PyArrayObject *__pyx_v_indices_to_keep = 0;
  unsigned int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  unsigned int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("truncate_lineage", 0);

  /* "bioscrape/types.pyx":2598
 *     def truncate_lineage(self,double start_time, double end_time):
 *         cdef Schnitz sch, new_sch
 *         cdef dict sch_dict = {}             # <<<<<<<<<<<<<<
 *         cdef Lineage new_lineage = Lineage()
 *         cdef np.ndarray newtime, newvolume, newdata, indices_to_keep
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sch_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2599
 *         cdef Schnitz sch, new_sch
 *         cdef dict sch_dict = {}
 *         cdef Lineage new_lineage = Lineage()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray newtime, newvolume, newdata, indices_to_keep
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_Lineage)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_new_lineage = ((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2602
 *         cdef np.ndarray newtime, newvolume, newdata, indices_to_keep
 * 
 *         sch_dict[None] = None             # <<<<<<<<<<<<<<
 *         for i in range(self.size()):
 *             sch = self.get_schnitz(i)
 */
  if (unlikely(PyDict_SetItem(__pyx_v_sch_dict, Py_None, Py_None) < 0)) __PYX_ERR(0, 2602, __pyx_L1_error)

  /* "bioscrape/types.pyx":2603
 * 
 *         sch_dict[None] = None
 *         for i in range(self.size()):             # <<<<<<<<<<<<<<
 *             sch = self.get_schnitz(i)
 * 
 */
  __pyx_t_2 = __pyx_f_9bioscrape_5types_7Lineage_size(__pyx_v_self);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "bioscrape/types.pyx":2604
 *         sch_dict[None] = None
 *         for i in range(self.size()):
 *             sch = self.get_schnitz(i)             # <<<<<<<<<<<<<<
 * 
 *             newtime = sch.get_time().copy()
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_9bioscrape_5types_7Lineage_get_schnitz(__pyx_v_self, __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_sch, ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2606
 *             sch = self.get_schnitz(i)
 * 
 *             newtime = sch.get_time().copy()             # <<<<<<<<<<<<<<
 *             newvolume = sch.get_volume().copy()
 *             newdata = sch.get_data().copy()
 */
    __pyx_t_5 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_time(__pyx_v_sch)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2606, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_newtime, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2607
 * 
 *             newtime = sch.get_time().copy()
 *             newvolume = sch.get_volume().copy()             # <<<<<<<<<<<<<<
 *             newdata = sch.get_data().copy()
 * 
 */
    __pyx_t_6 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_volume(__pyx_v_sch)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2607, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_newvolume, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2608
 *             newtime = sch.get_time().copy()
 *             newvolume = sch.get_volume().copy()
 *             newdata = sch.get_data().copy()             # <<<<<<<<<<<<<<
 * 
 *             # if the final time of this lineage is before the starting time
 */
    __pyx_t_5 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_data(__pyx_v_sch)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2608, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_newdata, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2612
 *             # if the final time of this lineage is before the starting time
 *             # or the first time is before the end time, then skip it
 *             if newtime[newtime.shape[0]-1] < start_time or newtime[0] > end_time:             # <<<<<<<<<<<<<<
 *                 sch_dict[sch] = None
 *                 continue
 */
    __pyx_t_8 = ((__pyx_v_newtime->dimensions[0]) - 1);
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_newtime), __pyx_t_8, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_start_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_9) {
    } else {
      __pyx_t_7 = __pyx_t_9;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_newtime), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_end_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_t_9;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "bioscrape/types.pyx":2613
 *             # or the first time is before the end time, then skip it
 *             if newtime[newtime.shape[0]-1] < start_time or newtime[0] > end_time:
 *                 sch_dict[sch] = None             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      if (unlikely(PyDict_SetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch), Py_None) < 0)) __PYX_ERR(0, 2613, __pyx_L1_error)

      /* "bioscrape/types.pyx":2614
 *             if newtime[newtime.shape[0]-1] < start_time or newtime[0] > end_time:
 *                 sch_dict[sch] = None
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             indices_to_keep = (sch.get_time() >= start_time) & (sch.get_time() <= end_time)
 */
      goto __pyx_L3_continue;

      /* "bioscrape/types.pyx":2612
 *             # if the final time of this lineage is before the starting time
 *             # or the first time is before the end time, then skip it
 *             if newtime[newtime.shape[0]-1] < start_time or newtime[0] > end_time:             # <<<<<<<<<<<<<<
 *                 sch_dict[sch] = None
 *                 continue
 */
    }

    /* "bioscrape/types.pyx":2616
 *                 continue
 * 
 *             indices_to_keep = (sch.get_time() >= start_time) & (sch.get_time() <= end_time)             # <<<<<<<<<<<<<<
 *             newtime = newtime[indices_to_keep]
 *             newvolume = newvolume[indices_to_keep]
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_time(__pyx_v_sch)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_start_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2616, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_time(__pyx_v_sch)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_end_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyObject_RichCompare(__pyx_t_6, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2616, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_And(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2616, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_indices_to_keep, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2617
 * 
 *             indices_to_keep = (sch.get_time() >= start_time) & (sch.get_time() <= end_time)
 *             newtime = newtime[indices_to_keep]             # <<<<<<<<<<<<<<
 *             newvolume = newvolume[indices_to_keep]
 *             newdata = newdata[indices_to_keep]
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_newtime), ((PyObject *)__pyx_v_indices_to_keep)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2617, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_newtime, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2618
 *             indices_to_keep = (sch.get_time() >= start_time) & (sch.get_time() <= end_time)
 *             newtime = newtime[indices_to_keep]
 *             newvolume = newvolume[indices_to_keep]             # <<<<<<<<<<<<<<
 *             newdata = newdata[indices_to_keep]
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_newvolume), ((PyObject *)__pyx_v_indices_to_keep)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2618, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_newvolume, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2619
 *             newtime = newtime[indices_to_keep]
 *             newvolume = newvolume[indices_to_keep]
 *             newdata = newdata[indices_to_keep]             # <<<<<<<<<<<<<<
 * 
 *             sch_dict[sch] = Schnitz(newtime, newdata, newvolume)
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_newdata), ((PyObject *)__pyx_v_indices_to_keep)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2619, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2619, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_newdata, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2621
 *             newdata = newdata[indices_to_keep]
 * 
 *             sch_dict[sch] = Schnitz(newtime, newdata, newvolume)             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.size()):
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_newtime));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_newtime));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_newtime));
    __Pyx_INCREF(((PyObject *)__pyx_v_newdata));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_newdata));
    PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_newdata));
    __Pyx_INCREF(((PyObject *)__pyx_v_newvolume));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_newvolume));
    PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_newvolume));
    __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9bioscrape_5types_Schnitz), __pyx_t_1, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch), __pyx_t_10) < 0)) __PYX_ERR(0, 2621, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_L3_continue:;
  }

  /* "bioscrape/types.pyx":2623
 *             sch_dict[sch] = Schnitz(newtime, newdata, newvolume)
 * 
 *         for i in range(self.size()):             # <<<<<<<<<<<<<<
 *             sch = self.get_schnitz(i)
 *             if sch_dict[sch] is not None:
 */
  __pyx_t_2 = __pyx_f_9bioscrape_5types_7Lineage_size(__pyx_v_self);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "bioscrape/types.pyx":2624
 * 
 *         for i in range(self.size()):
 *             sch = self.get_schnitz(i)             # <<<<<<<<<<<<<<
 *             if sch_dict[sch] is not None:
 *                 new_lineage.add_schnitz(sch_dict[sch])
 */
    __pyx_t_10 = ((PyObject *)__pyx_f_9bioscrape_5types_7Lineage_get_schnitz(__pyx_v_self, __pyx_v_i)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_sch, ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "bioscrape/types.pyx":2625
 *         for i in range(self.size()):
 *             sch = self.get_schnitz(i)
 *             if sch_dict[sch] is not None:             # <<<<<<<<<<<<<<
 *                 new_lineage.add_schnitz(sch_dict[sch])
 *                 sch_dict[sch].py_set_parent( sch_dict[sch.get_parent()] )
 */
    __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_7 = (__pyx_t_10 != Py_None);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_9 = (__pyx_t_7 != 0);
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":2626
 *             sch = self.get_schnitz(i)
 *             if sch_dict[sch] is not None:
 *                 new_lineage.add_schnitz(sch_dict[sch])             # <<<<<<<<<<<<<<
 *                 sch_dict[sch].py_set_parent( sch_dict[sch.get_parent()] )
 *                 sch_dict[sch].py_set_daughters( sch_dict[sch.get_daughter_1()] , sch_dict[sch.get_daughter_2()] )
 */
      __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_9bioscrape_5types_Schnitz))))) __PYX_ERR(0, 2626, __pyx_L1_error)
      __pyx_f_9bioscrape_5types_7Lineage_add_schnitz(__pyx_v_new_lineage, ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_10));
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "bioscrape/types.pyx":2627
 *             if sch_dict[sch] is not None:
 *                 new_lineage.add_schnitz(sch_dict[sch])
 *                 sch_dict[sch].py_set_parent( sch_dict[sch.get_parent()] )             # <<<<<<<<<<<<<<
 *                 sch_dict[sch].py_set_daughters( sch_dict[sch.get_daughter_1()] , sch_dict[sch.get_daughter_2()] )
 * 
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_py_set_parent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_parent(__pyx_v_sch)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_10 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "bioscrape/types.pyx":2628
 *                 new_lineage.add_schnitz(sch_dict[sch])
 *                 sch_dict[sch].py_set_parent( sch_dict[sch.get_parent()] )
 *                 sch_dict[sch].py_set_daughters( sch_dict[sch.get_daughter_1()] , sch_dict[sch.get_daughter_2()] )             # <<<<<<<<<<<<<<
 * 
 *         return new_lineage
 */
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_py_set_daughters); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_1(__pyx_v_sch)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_2(__pyx_v_sch)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_12 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_t_11};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2628, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_t_11};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2628, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_11);
        __pyx_t_1 = 0;
        __pyx_t_11 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_13, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "bioscrape/types.pyx":2625
 *         for i in range(self.size()):
 *             sch = self.get_schnitz(i)
 *             if sch_dict[sch] is not None:             # <<<<<<<<<<<<<<
 *                 new_lineage.add_schnitz(sch_dict[sch])
 *                 sch_dict[sch].py_set_parent( sch_dict[sch.get_parent()] )
 */
    }
  }

  /* "bioscrape/types.pyx":2630
 *                 sch_dict[sch].py_set_daughters( sch_dict[sch.get_daughter_1()] , sch_dict[sch.get_daughter_2()] )
 * 
 *         return new_lineage             # <<<<<<<<<<<<<<
 * 
 *     #Returns the same tree as above
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_lineage));
  __pyx_r = ((PyObject *)__pyx_v_new_lineage);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2596
 *         return (self.schnitzes,)
 * 
 *     def truncate_lineage(self,double start_time, double end_time):             # <<<<<<<<<<<<<<
 *         cdef Schnitz sch, new_sch
 *         cdef dict sch_dict = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("bioscrape.types.Lineage.truncate_lineage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_sch);
  __Pyx_XDECREF(__pyx_v_sch_dict);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_lineage);
  __Pyx_XDECREF((PyObject *)__pyx_v_newtime);
  __Pyx_XDECREF((PyObject *)__pyx_v_newvolume);
  __Pyx_XDECREF((PyObject *)__pyx_v_newdata);
  __Pyx_XDECREF((PyObject *)__pyx_v_indices_to_keep);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2633
 * 
 *     #Returns the same tree as above
 *     def get_schnitzes_by_generation(self):             # <<<<<<<<<<<<<<
 *         #print("Creating Schnitz Tree")
 *         sch_tree = [[]]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_15get_schnitzes_by_generation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_15get_schnitzes_by_generation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_schnitzes_by_generation (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Lineage_14get_schnitzes_by_generation(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_14get_schnitzes_by_generation(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self) {
  PyObject *__pyx_v_sch_tree = NULL;
  PyObject *__pyx_v_sch_tree_length = NULL;
  PyObject *__pyx_v_i = NULL;
  struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_sch = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_parent = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  __Pyx_RefNannySetupContext("get_schnitzes_by_generation", 0);

  /* "bioscrape/types.pyx":2635
 *     def get_schnitzes_by_generation(self):
 *         #print("Creating Schnitz Tree")
 *         sch_tree = [[]]             # <<<<<<<<<<<<<<
 *         sch_tree_length = 1
 *         for i in range(self.py_size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_sch_tree = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2636
 *         #print("Creating Schnitz Tree")
 *         sch_tree = [[]]
 *         sch_tree_length = 1             # <<<<<<<<<<<<<<
 *         for i in range(self.py_size()):
 *             sch = self.get_schnitz(i)
 */
  __Pyx_INCREF(__pyx_int_1);
  __pyx_v_sch_tree_length = __pyx_int_1;

  /* "bioscrape/types.pyx":2637
 *         sch_tree = [[]]
 *         sch_tree_length = 1
 *         for i in range(self.py_size()):             # <<<<<<<<<<<<<<
 *             sch = self.get_schnitz(i)
 *             if sch.py_get_parent() is None:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_py_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2637, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2637, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2637, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 2637, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2637, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2637, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2638
 *         sch_tree_length = 1
 *         for i in range(self.py_size()):
 *             sch = self.get_schnitz(i)             # <<<<<<<<<<<<<<
 *             if sch.py_get_parent() is None:
 *                 sch_tree[0].append(sch)
 */
    __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_v_i); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2638, __pyx_L1_error)
    __pyx_t_1 = ((PyObject *)__pyx_f_9bioscrape_5types_7Lineage_get_schnitz(__pyx_v_self, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_sch, ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2639
 *         for i in range(self.py_size()):
 *             sch = self.get_schnitz(i)
 *             if sch.py_get_parent() is None:             # <<<<<<<<<<<<<<
 *                 sch_tree[0].append(sch)
 *             else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_sch), __pyx_n_s_py_get_parent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = (__pyx_t_1 == Py_None);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":2640
 *             sch = self.get_schnitz(i)
 *             if sch.py_get_parent() is None:
 *                 sch_tree[0].append(sch)             # <<<<<<<<<<<<<<
 *             else:
 *                 for j in range(len(sch_tree)):
 */
      __pyx_t_10 = __Pyx_PyObject_Append(PyList_GET_ITEM(__pyx_v_sch_tree, 0), ((PyObject *)__pyx_v_sch)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 2640, __pyx_L1_error)

      /* "bioscrape/types.pyx":2639
 *         for i in range(self.py_size()):
 *             sch = self.get_schnitz(i)
 *             if sch.py_get_parent() is None:             # <<<<<<<<<<<<<<
 *                 sch_tree[0].append(sch)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "bioscrape/types.pyx":2642
 *                 sch_tree[0].append(sch)
 *             else:
 *                 for j in range(len(sch_tree)):             # <<<<<<<<<<<<<<
 *                     parent = sch.py_get_parent()
 *                     if parent in sch_tree[j]:
 */
    /*else*/ {
      __pyx_t_11 = PyList_GET_SIZE(__pyx_v_sch_tree); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2642, __pyx_L1_error)
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
      } else {
        __pyx_t_11 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2642, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_12 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2642, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_12)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_3); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 2642, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2642, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_3); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 2642, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2642, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_12(__pyx_t_1);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 2642, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "bioscrape/types.pyx":2643
 *             else:
 *                 for j in range(len(sch_tree)):
 *                     parent = sch.py_get_parent()             # <<<<<<<<<<<<<<
 *                     if parent in sch_tree[j]:
 *                         if len(sch_tree) <= j+1:
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_sch), __pyx_n_s_py_get_parent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2643, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_3 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2643, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_parent, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "bioscrape/types.pyx":2644
 *                 for j in range(len(sch_tree)):
 *                     parent = sch.py_get_parent()
 *                     if parent in sch_tree[j]:             # <<<<<<<<<<<<<<
 *                         if len(sch_tree) <= j+1:
 *                             sch_tree.append([])
 */
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_sch_tree, __pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2644, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_v_parent, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2644, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = (__pyx_t_9 != 0);
        if (__pyx_t_8) {

          /* "bioscrape/types.pyx":2645
 *                     parent = sch.py_get_parent()
 *                     if parent in sch_tree[j]:
 *                         if len(sch_tree) <= j+1:             # <<<<<<<<<<<<<<
 *                             sch_tree.append([])
 *                             sch_tree_length += 1
 */
          __pyx_t_14 = PyList_GET_SIZE(__pyx_v_sch_tree); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2645, __pyx_L1_error)
          __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2645, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_j, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2645, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_13 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_LE); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2645, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2645, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (__pyx_t_8) {

            /* "bioscrape/types.pyx":2646
 *                     if parent in sch_tree[j]:
 *                         if len(sch_tree) <= j+1:
 *                             sch_tree.append([])             # <<<<<<<<<<<<<<
 *                             sch_tree_length += 1
 *                         sch_tree[j+1].append(sch)
 */
            __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2646, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_sch_tree, __pyx_t_13); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 2646, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "bioscrape/types.pyx":2647
 *                         if len(sch_tree) <= j+1:
 *                             sch_tree.append([])
 *                             sch_tree_length += 1             # <<<<<<<<<<<<<<
 *                         sch_tree[j+1].append(sch)
 *         return sch_tree
 */
            __pyx_t_13 = __Pyx_PyInt_AddObjC(__pyx_v_sch_tree_length, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2647, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF_SET(__pyx_v_sch_tree_length, __pyx_t_13);
            __pyx_t_13 = 0;

            /* "bioscrape/types.pyx":2645
 *                     parent = sch.py_get_parent()
 *                     if parent in sch_tree[j]:
 *                         if len(sch_tree) <= j+1:             # <<<<<<<<<<<<<<
 *                             sch_tree.append([])
 *                             sch_tree_length += 1
 */
          }

          /* "bioscrape/types.pyx":2648
 *                             sch_tree.append([])
 *                             sch_tree_length += 1
 *                         sch_tree[j+1].append(sch)             # <<<<<<<<<<<<<<
 *         return sch_tree
 * 
 */
          __pyx_t_13 = __Pyx_PyInt_AddObjC(__pyx_v_j, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2648, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_sch_tree, __pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2648, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_10 = __Pyx_PyObject_Append(__pyx_t_7, ((PyObject *)__pyx_v_sch)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 2648, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "bioscrape/types.pyx":2644
 *                 for j in range(len(sch_tree)):
 *                     parent = sch.py_get_parent()
 *                     if parent in sch_tree[j]:             # <<<<<<<<<<<<<<
 *                         if len(sch_tree) <= j+1:
 *                             sch_tree.append([])
 */
        }

        /* "bioscrape/types.pyx":2642
 *                 sch_tree[0].append(sch)
 *             else:
 *                 for j in range(len(sch_tree)):             # <<<<<<<<<<<<<<
 *                     parent = sch.py_get_parent()
 *                     if parent in sch_tree[j]:
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L5:;

    /* "bioscrape/types.pyx":2637
 *         sch_tree = [[]]
 *         sch_tree_length = 1
 *         for i in range(self.py_size()):             # <<<<<<<<<<<<<<
 *             sch = self.get_schnitz(i)
 *             if sch.py_get_parent() is None:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2649
 *                             sch_tree_length += 1
 *                         sch_tree[j+1].append(sch)
 *         return sch_tree             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_sch_tree);
  __pyx_r = __pyx_v_sch_tree;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2633
 * 
 *     #Returns the same tree as above
 *     def get_schnitzes_by_generation(self):             # <<<<<<<<<<<<<<
 *         #print("Creating Schnitz Tree")
 *         sch_tree = [[]]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("bioscrape.types.Lineage.get_schnitzes_by_generation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sch_tree);
  __Pyx_XDECREF(__pyx_v_sch_tree_length);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_sch);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_parent);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Lineage_16__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Lineage.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_7Lineage_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_7Lineage_18__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_7Lineage_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.Lineage.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2653
 * 
 * cdef class ExperimentalLineage(Lineage):
 *     def __init__(self, dict species_indices={}):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self.species_dict = species_indices
 */

/* Python wrapper */
static int __pyx_pw_9bioscrape_5types_19ExperimentalLineage_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9bioscrape_5types_19ExperimentalLineage_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_species_indices = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_species_indices,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__43;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species_indices);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2653, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_species_indices = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2653, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.ExperimentalLineage.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 2653, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_19ExperimentalLineage___init__(((struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)__pyx_v_self), __pyx_v_species_indices);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9bioscrape_5types_19ExperimentalLineage___init__(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, PyObject *__pyx_v_species_indices) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "bioscrape/types.pyx":2654
 * cdef class ExperimentalLineage(Lineage):
 *     def __init__(self, dict species_indices={}):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self.species_dict = species_indices
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_9bioscrape_5types_ExperimentalLineage));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_9bioscrape_5types_ExperimentalLineage));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_9bioscrape_5types_ExperimentalLineage));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2655
 *     def __init__(self, dict species_indices={}):
 *         super().__init__()
 *         self.species_dict = species_indices             # <<<<<<<<<<<<<<
 * 
 *     def py_set_species_indices(self, dict species_indices):
 */
  __Pyx_INCREF(__pyx_v_species_indices);
  __Pyx_GIVEREF(__pyx_v_species_indices);
  __Pyx_GOTREF(__pyx_v_self->species_dict);
  __Pyx_DECREF(__pyx_v_self->species_dict);
  __pyx_v_self->species_dict = __pyx_v_species_indices;

  /* "bioscrape/types.pyx":2653
 * 
 * cdef class ExperimentalLineage(Lineage):
 *     def __init__(self, dict species_indices={}):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self.species_dict = species_indices
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.ExperimentalLineage.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2657
 *         self.species_dict = species_indices
 * 
 *     def py_set_species_indices(self, dict species_indices):             # <<<<<<<<<<<<<<
 *         self.species_dict = species_indices.copy()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_3py_set_species_indices(PyObject *__pyx_v_self, PyObject *__pyx_v_species_indices); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_3py_set_species_indices(PyObject *__pyx_v_self, PyObject *__pyx_v_species_indices) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_set_species_indices (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species_indices), (&PyDict_Type), 1, "species_indices", 1))) __PYX_ERR(0, 2657, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_19ExperimentalLineage_2py_set_species_indices(((struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)__pyx_v_self), ((PyObject*)__pyx_v_species_indices));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_2py_set_species_indices(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, PyObject *__pyx_v_species_indices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_set_species_indices", 0);

  /* "bioscrape/types.pyx":2658
 * 
 *     def py_set_species_indices(self, dict species_indices):
 *         self.species_dict = species_indices.copy()             # <<<<<<<<<<<<<<
 * 
 *     def py_get_species_index(self, str species):
 */
  if (unlikely(__pyx_v_species_indices == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
    __PYX_ERR(0, 2658, __pyx_L1_error)
  }
  __pyx_t_1 = PyDict_Copy(__pyx_v_species_indices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->species_dict);
  __Pyx_DECREF(__pyx_v_self->species_dict);
  __pyx_v_self->species_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2657
 *         self.species_dict = species_indices
 * 
 *     def py_set_species_indices(self, dict species_indices):             # <<<<<<<<<<<<<<
 *         self.species_dict = species_indices.copy()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.ExperimentalLineage.py_set_species_indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2660
 *         self.species_dict = species_indices.copy()
 * 
 *     def py_get_species_index(self, str species):             # <<<<<<<<<<<<<<
 *         if species in self.species_dict:
 *             return self.species_dict[species]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_5py_get_species_index(PyObject *__pyx_v_self, PyObject *__pyx_v_species); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_5py_get_species_index(PyObject *__pyx_v_self, PyObject *__pyx_v_species) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_get_species_index (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species), (&PyString_Type), 1, "species", 1))) __PYX_ERR(0, 2660, __pyx_L1_error)
  __pyx_r = __pyx_pf_9bioscrape_5types_19ExperimentalLineage_4py_get_species_index(((struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)__pyx_v_self), ((PyObject*)__pyx_v_species));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_4py_get_species_index(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, PyObject *__pyx_v_species) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("py_get_species_index", 0);

  /* "bioscrape/types.pyx":2661
 * 
 *     def py_get_species_index(self, str species):
 *         if species in self.species_dict:             # <<<<<<<<<<<<<<
 *             return self.species_dict[species]
 *         warnings.warn('Species not found in experimental lineage: %s\n' % species)
 */
  if (unlikely(__pyx_v_self->species_dict == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2661, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_species, __pyx_v_self->species_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2661, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "bioscrape/types.pyx":2662
 *     def py_get_species_index(self, str species):
 *         if species in self.species_dict:
 *             return self.species_dict[species]             # <<<<<<<<<<<<<<
 *         warnings.warn('Species not found in experimental lineage: %s\n' % species)
 *         return -1
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->species_dict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 2662, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->species_dict, __pyx_v_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "bioscrape/types.pyx":2661
 * 
 *     def py_get_species_index(self, str species):
 *         if species in self.species_dict:             # <<<<<<<<<<<<<<
 *             return self.species_dict[species]
 *         warnings.warn('Species not found in experimental lineage: %s\n' % species)
 */
  }

  /* "bioscrape/types.pyx":2663
 *         if species in self.species_dict:
 *             return self.species_dict[species]
 *         warnings.warn('Species not found in experimental lineage: %s\n' % species)             # <<<<<<<<<<<<<<
 *         return -1
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Species_not_found_in_experimenta, __pyx_v_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "bioscrape/types.pyx":2664
 *             return self.species_dict[species]
 *         warnings.warn('Species not found in experimental lineage: %s\n' % species)
 *         return -1             # <<<<<<<<<<<<<<
 * 
 *     def __setstate__(self, state):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_neg_1);
  __pyx_r = __pyx_int_neg_1;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2660
 *         self.species_dict = species_indices.copy()
 * 
 *     def py_get_species_index(self, str species):             # <<<<<<<<<<<<<<
 *         if species in self.species_dict:
 *             return self.species_dict[species]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bioscrape.types.ExperimentalLineage.py_get_species_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2666
 *         return -1
 * 
 *     def __setstate__(self, state):             # <<<<<<<<<<<<<<
 *         super().__setstate__(state[:len(state)-1])
 *         self.species_dict = state[len(state)-1]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_7__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_7__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_19ExperimentalLineage_6__setstate__(((struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)__pyx_v_self), ((PyObject *)__pyx_v_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_6__setstate__(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "bioscrape/types.pyx":2667
 * 
 *     def __setstate__(self, state):
 *         super().__setstate__(state[:len(state)-1])             # <<<<<<<<<<<<<<
 *         self.species_dict = state[len(state)-1]
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_9bioscrape_5types_ExperimentalLineage));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_9bioscrape_5types_ExperimentalLineage));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_9bioscrape_5types_ExperimentalLineage));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_setstate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = PyObject_Length(__pyx_v_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2667, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_state, 0, (__pyx_t_4 - 1), NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2668
 *     def __setstate__(self, state):
 *         super().__setstate__(state[:len(state)-1])
 *         self.species_dict = state[len(state)-1]             # <<<<<<<<<<<<<<
 * 
 *     def __getstate__(self):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2668, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_4 - 1);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_state, __pyx_t_6, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 2668, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->species_dict);
  __Pyx_DECREF(__pyx_v_self->species_dict);
  __pyx_v_self->species_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2666
 *         return -1
 * 
 *     def __setstate__(self, state):             # <<<<<<<<<<<<<<
 *         super().__setstate__(state[:len(state)-1])
 *         self.species_dict = state[len(state)-1]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.ExperimentalLineage.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2670
 *         self.species_dict = state[len(state)-1]
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         return super().__getstate__() + (self.species_dict,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_9__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_9__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_19ExperimentalLineage_8__getstate__(((struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_8__getstate__(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "bioscrape/types.pyx":2671
 * 
 *     def __getstate__(self):
 *         return super().__getstate__() + (self.species_dict,)             # <<<<<<<<<<<<<<
 * 
 *     def truncate_lineage(self,double start_time, double end_time):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_9bioscrape_5types_ExperimentalLineage));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_9bioscrape_5types_ExperimentalLineage));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_9bioscrape_5types_ExperimentalLineage));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_getstate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->species_dict);
  __Pyx_GIVEREF(__pyx_v_self->species_dict);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->species_dict);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2670
 *         self.species_dict = state[len(state)-1]
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         return super().__getstate__() + (self.species_dict,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bioscrape.types.ExperimentalLineage.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pyx":2673
 *         return super().__getstate__() + (self.species_dict,)
 * 
 *     def truncate_lineage(self,double start_time, double end_time):             # <<<<<<<<<<<<<<
 *         cdef Schnitz sch, new_sch
 *         cdef dict sch_dict = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_11truncate_lineage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_11truncate_lineage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_start_time;
  double __pyx_v_end_time;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("truncate_lineage (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_time,&__pyx_n_s_end_time,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end_time)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("truncate_lineage", 1, 2, 2, 1); __PYX_ERR(0, 2673, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "truncate_lineage") < 0)) __PYX_ERR(0, 2673, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_start_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_start_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2673, __pyx_L3_error)
    __pyx_v_end_time = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_end_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2673, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("truncate_lineage", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2673, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.ExperimentalLineage.truncate_lineage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_19ExperimentalLineage_10truncate_lineage(((struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)__pyx_v_self), __pyx_v_start_time, __pyx_v_end_time);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_10truncate_lineage(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, double __pyx_v_start_time, double __pyx_v_end_time) {
  struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_sch = 0;
  PyObject *__pyx_v_sch_dict = 0;
  struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_new_lineage = 0;
  PyArrayObject *__pyx_v_newtime = 0;
  PyArrayObject *__pyx_v_newvolume = 0;
  PyArrayObject *__pyx_v_newdata = 0;
  PyArrayObject *__pyx_v_indices_to_keep = 0;
  unsigned int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  unsigned int __pyx_t_3;
  unsigned int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("truncate_lineage", 0);

  /* "bioscrape/types.pyx":2675
 *     def truncate_lineage(self,double start_time, double end_time):
 *         cdef Schnitz sch, new_sch
 *         cdef dict sch_dict = {}             # <<<<<<<<<<<<<<
 *         cdef ExperimentalLineage new_lineage = ExperimentalLineage()
 *         cdef np.ndarray newtime, newvolume, newdata, indices_to_keep
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sch_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2676
 *         cdef Schnitz sch, new_sch
 *         cdef dict sch_dict = {}
 *         cdef ExperimentalLineage new_lineage = ExperimentalLineage()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray newtime, newvolume, newdata, indices_to_keep
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9bioscrape_5types_ExperimentalLineage)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_new_lineage = ((struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":2679
 *         cdef np.ndarray newtime, newvolume, newdata, indices_to_keep
 * 
 *         sch_dict[None] = None             # <<<<<<<<<<<<<<
 *         for i in range(self.size()):
 *             sch = self.get_schnitz(i)
 */
  if (unlikely(PyDict_SetItem(__pyx_v_sch_dict, Py_None, Py_None) < 0)) __PYX_ERR(0, 2679, __pyx_L1_error)

  /* "bioscrape/types.pyx":2680
 * 
 *         sch_dict[None] = None
 *         for i in range(self.size()):             # <<<<<<<<<<<<<<
 *             sch = self.get_schnitz(i)
 * 
 */
  __pyx_t_2 = __pyx_f_9bioscrape_5types_7Lineage_size(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self));
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "bioscrape/types.pyx":2681
 *         sch_dict[None] = None
 *         for i in range(self.size()):
 *             sch = self.get_schnitz(i)             # <<<<<<<<<<<<<<
 * 
 *             newtime = sch.get_time().copy()
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_9bioscrape_5types_7Lineage_get_schnitz(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self), __pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_sch, ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2683
 *             sch = self.get_schnitz(i)
 * 
 *             newtime = sch.get_time().copy()             # <<<<<<<<<<<<<<
 *             newvolume = sch.get_volume().copy()
 *             newdata = sch.get_data().copy()
 */
    __pyx_t_5 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_time(__pyx_v_sch)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2683, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_newtime, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2684
 * 
 *             newtime = sch.get_time().copy()
 *             newvolume = sch.get_volume().copy()             # <<<<<<<<<<<<<<
 *             newdata = sch.get_data().copy()
 * 
 */
    __pyx_t_6 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_volume(__pyx_v_sch)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2684, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_newvolume, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2685
 *             newtime = sch.get_time().copy()
 *             newvolume = sch.get_volume().copy()
 *             newdata = sch.get_data().copy()             # <<<<<<<<<<<<<<
 * 
 *             # if the final time of this lineage is before the starting time
 */
    __pyx_t_5 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_data(__pyx_v_sch)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2685, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_newdata, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2689
 *             # if the final time of this lineage is before the starting time
 *             # or the first time is before the end time, then skip it
 *             if newtime[newtime.shape[0]-1] < start_time or newtime[0] > end_time:             # <<<<<<<<<<<<<<
 *                 sch_dict[sch] = None
 *                 continue
 */
    __pyx_t_8 = ((__pyx_v_newtime->dimensions[0]) - 1);
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_newtime), __pyx_t_8, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_start_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_9) {
    } else {
      __pyx_t_7 = __pyx_t_9;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_newtime), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_end_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_t_9;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "bioscrape/types.pyx":2690
 *             # or the first time is before the end time, then skip it
 *             if newtime[newtime.shape[0]-1] < start_time or newtime[0] > end_time:
 *                 sch_dict[sch] = None             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      if (unlikely(PyDict_SetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch), Py_None) < 0)) __PYX_ERR(0, 2690, __pyx_L1_error)

      /* "bioscrape/types.pyx":2691
 *             if newtime[newtime.shape[0]-1] < start_time or newtime[0] > end_time:
 *                 sch_dict[sch] = None
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             indices_to_keep = (sch.get_time() >= start_time) & (sch.get_time() <= end_time)
 */
      goto __pyx_L3_continue;

      /* "bioscrape/types.pyx":2689
 *             # if the final time of this lineage is before the starting time
 *             # or the first time is before the end time, then skip it
 *             if newtime[newtime.shape[0]-1] < start_time or newtime[0] > end_time:             # <<<<<<<<<<<<<<
 *                 sch_dict[sch] = None
 *                 continue
 */
    }

    /* "bioscrape/types.pyx":2693
 *                 continue
 * 
 *             indices_to_keep = (sch.get_time() >= start_time) & (sch.get_time() <= end_time)             # <<<<<<<<<<<<<<
 *             newtime = newtime[indices_to_keep]
 *             newvolume = newvolume[indices_to_keep]
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_time(__pyx_v_sch)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_start_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_time(__pyx_v_sch)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_end_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyObject_RichCompare(__pyx_t_6, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_And(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2693, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_indices_to_keep, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2694
 * 
 *             indices_to_keep = (sch.get_time() >= start_time) & (sch.get_time() <= end_time)
 *             newtime = newtime[indices_to_keep]             # <<<<<<<<<<<<<<
 *             newvolume = newvolume[indices_to_keep]
 *             newdata = newdata[indices_to_keep]
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_newtime), ((PyObject *)__pyx_v_indices_to_keep)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2694, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_newtime, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2695
 *             indices_to_keep = (sch.get_time() >= start_time) & (sch.get_time() <= end_time)
 *             newtime = newtime[indices_to_keep]
 *             newvolume = newvolume[indices_to_keep]             # <<<<<<<<<<<<<<
 *             newdata = newdata[indices_to_keep]
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_newvolume), ((PyObject *)__pyx_v_indices_to_keep)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2695, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_newvolume, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2696
 *             newtime = newtime[indices_to_keep]
 *             newvolume = newvolume[indices_to_keep]
 *             newdata = newdata[indices_to_keep]             # <<<<<<<<<<<<<<
 * 
 *             sch_dict[sch] = Schnitz(newtime, newdata, newvolume)
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_newdata), ((PyObject *)__pyx_v_indices_to_keep)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2696, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_newdata, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "bioscrape/types.pyx":2698
 *             newdata = newdata[indices_to_keep]
 * 
 *             sch_dict[sch] = Schnitz(newtime, newdata, newvolume)             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.size()):
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_newtime));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_newtime));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_newtime));
    __Pyx_INCREF(((PyObject *)__pyx_v_newdata));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_newdata));
    PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_newdata));
    __Pyx_INCREF(((PyObject *)__pyx_v_newvolume));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_newvolume));
    PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_newvolume));
    __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9bioscrape_5types_Schnitz), __pyx_t_1, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch), __pyx_t_10) < 0)) __PYX_ERR(0, 2698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_L3_continue:;
  }

  /* "bioscrape/types.pyx":2700
 *             sch_dict[sch] = Schnitz(newtime, newdata, newvolume)
 * 
 *         for i in range(self.size()):             # <<<<<<<<<<<<<<
 *             sch = self.get_schnitz(i)
 *             if sch_dict[sch] is not None:
 */
  __pyx_t_2 = __pyx_f_9bioscrape_5types_7Lineage_size(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self));
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "bioscrape/types.pyx":2701
 * 
 *         for i in range(self.size()):
 *             sch = self.get_schnitz(i)             # <<<<<<<<<<<<<<
 *             if sch_dict[sch] is not None:
 *                 new_lineage.add_schnitz(sch_dict[sch])
 */
    __pyx_t_10 = ((PyObject *)__pyx_f_9bioscrape_5types_7Lineage_get_schnitz(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_self), __pyx_v_i)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_sch, ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "bioscrape/types.pyx":2702
 *         for i in range(self.size()):
 *             sch = self.get_schnitz(i)
 *             if sch_dict[sch] is not None:             # <<<<<<<<<<<<<<
 *                 new_lineage.add_schnitz(sch_dict[sch])
 *                 sch_dict[sch].py_set_parent( sch_dict[sch.get_parent()] )
 */
    __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_7 = (__pyx_t_10 != Py_None);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_9 = (__pyx_t_7 != 0);
    if (__pyx_t_9) {

      /* "bioscrape/types.pyx":2703
 *             sch = self.get_schnitz(i)
 *             if sch_dict[sch] is not None:
 *                 new_lineage.add_schnitz(sch_dict[sch])             # <<<<<<<<<<<<<<
 *                 sch_dict[sch].py_set_parent( sch_dict[sch.get_parent()] )
 *                 sch_dict[sch].py_set_daughters( sch_dict[sch.get_daughter_1()] , sch_dict[sch.get_daughter_2()] )
 */
      __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_9bioscrape_5types_Schnitz))))) __PYX_ERR(0, 2703, __pyx_L1_error)
      __pyx_f_9bioscrape_5types_7Lineage_add_schnitz(((struct __pyx_obj_9bioscrape_5types_Lineage *)__pyx_v_new_lineage), ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_10));
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "bioscrape/types.pyx":2704
 *             if sch_dict[sch] is not None:
 *                 new_lineage.add_schnitz(sch_dict[sch])
 *                 sch_dict[sch].py_set_parent( sch_dict[sch.get_parent()] )             # <<<<<<<<<<<<<<
 *                 sch_dict[sch].py_set_daughters( sch_dict[sch.get_daughter_1()] , sch_dict[sch.get_daughter_2()] )
 * 
 */
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_py_set_parent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_parent(__pyx_v_sch)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_10 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "bioscrape/types.pyx":2705
 *                 new_lineage.add_schnitz(sch_dict[sch])
 *                 sch_dict[sch].py_set_parent( sch_dict[sch.get_parent()] )
 *                 sch_dict[sch].py_set_daughters( sch_dict[sch.get_daughter_1()] , sch_dict[sch.get_daughter_2()] )             # <<<<<<<<<<<<<<
 * 
 *         new_lineage.py_set_species_indices(self.species_dict.copy())
 */
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, ((PyObject *)__pyx_v_sch)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_py_set_daughters); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_1(__pyx_v_sch)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = ((PyObject *)__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_2(__pyx_v_sch)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = __Pyx_PyDict_GetItem(__pyx_v_sch_dict, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_12 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_t_11};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2705, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_t_11};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2705, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2705, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_11);
        __pyx_t_1 = 0;
        __pyx_t_11 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_13, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2705, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "bioscrape/types.pyx":2702
 *         for i in range(self.size()):
 *             sch = self.get_schnitz(i)
 *             if sch_dict[sch] is not None:             # <<<<<<<<<<<<<<
 *                 new_lineage.add_schnitz(sch_dict[sch])
 *                 sch_dict[sch].py_set_parent( sch_dict[sch.get_parent()] )
 */
    }
  }

  /* "bioscrape/types.pyx":2707
 *                 sch_dict[sch].py_set_daughters( sch_dict[sch.get_daughter_1()] , sch_dict[sch.get_daughter_2()] )
 * 
 *         new_lineage.py_set_species_indices(self.species_dict.copy())             # <<<<<<<<<<<<<<
 * 
 *         return new_lineage
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_new_lineage), __pyx_n_s_py_set_species_indices); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely(__pyx_v_self->species_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
    __PYX_ERR(0, 2707, __pyx_L1_error)
  }
  __pyx_t_13 = PyDict_Copy(__pyx_v_self->species_dict); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_10 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_11, __pyx_t_13) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_13);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "bioscrape/types.pyx":2709
 *         new_lineage.py_set_species_indices(self.species_dict.copy())
 * 
 *         return new_lineage             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_lineage));
  __pyx_r = ((PyObject *)__pyx_v_new_lineage);
  goto __pyx_L0;

  /* "bioscrape/types.pyx":2673
 *         return super().__getstate__() + (self.species_dict,)
 * 
 *     def truncate_lineage(self,double start_time, double end_time):             # <<<<<<<<<<<<<<
 *         cdef Schnitz sch, new_sch
 *         cdef dict sch_dict = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("bioscrape.types.ExperimentalLineage.truncate_lineage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_sch);
  __Pyx_XDECREF(__pyx_v_sch_dict);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_lineage);
  __Pyx_XDECREF((PyObject *)__pyx_v_newtime);
  __Pyx_XDECREF((PyObject *)__pyx_v_newvolume);
  __Pyx_XDECREF((PyObject *)__pyx_v_newdata);
  __Pyx_XDECREF((PyObject *)__pyx_v_indices_to_keep);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_19ExperimentalLineage_12__reduce_cython__(((struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.ExperimentalLineage.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9bioscrape_5types_19ExperimentalLineage_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9bioscrape_5types_19ExperimentalLineage_14__setstate_cython__(((struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_19ExperimentalLineage_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bioscrape.types.ExperimentalLineage.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Propensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_9__pyx_unpickle_Propensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_9__pyx_unpickle_Propensity = {"__pyx_unpickle_Propensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_9__pyx_unpickle_Propensity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_9__pyx_unpickle_Propensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Propensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Propensity", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Propensity", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Propensity") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Propensity", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Propensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_8__pyx_unpickle_Propensity(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_8__pyx_unpickle_Propensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Propensity", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x41bf233:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x41bf233 = (propensity_type))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x41bf233) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x41bf233:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x41bf233 = (propensity_type))" % __pyx_checksum)
 *     __pyx_result = Propensity.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x41bf233:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x41bf233 = (propensity_type))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Propensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x41, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x41bf233:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x41bf233 = (propensity_type))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x41bf233 = (propensity_type))" % __pyx_checksum)
 *     __pyx_result = Propensity.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Propensity__set_state(<Propensity> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_Propensity), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x41bf233 = (propensity_type))" % __pyx_checksum)
 *     __pyx_result = Propensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Propensity__set_state(<Propensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Propensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Propensity__set_state(<Propensity> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Propensity__set_state(Propensity __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_Propensity__set_state(((struct __pyx_obj_9bioscrape_5types_Propensity *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x41bf233 = (propensity_type))" % __pyx_checksum)
 *     __pyx_result = Propensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Propensity__set_state(<Propensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Propensity__set_state(<Propensity> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Propensity__set_state(Propensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Propensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Propensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Propensity__set_state(<Propensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Propensity__set_state(Propensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Propensity__set_state(struct __pyx_obj_9bioscrape_5types_Propensity *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9bioscrape_5types_PropensityType __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Propensity__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Propensity__set_state(Propensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = ((__pyx_t_9bioscrape_5types_PropensityType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->propensity_type = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Propensity__set_state(Propensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.propensity_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Propensity__set_state(Propensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Propensity__set_state(<Propensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Propensity__set_state(Propensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Propensity__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ConstitutivePropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_11__pyx_unpickle_ConstitutivePropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_11__pyx_unpickle_ConstitutivePropensity = {"__pyx_unpickle_ConstitutivePropensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_11__pyx_unpickle_ConstitutivePropensity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_11__pyx_unpickle_ConstitutivePropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ConstitutivePropensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ConstitutivePropensity", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ConstitutivePropensity", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_ConstitutivePropensity") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ConstitutivePropensity", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ConstitutivePropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_10__pyx_unpickle_ConstitutivePropensity(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_10__pyx_unpickle_ConstitutivePropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ConstitutivePropensity", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xfd3ec69:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfd3ec69 = (propensity_type, rate_index))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xfd3ec69) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xfd3ec69:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfd3ec69 = (propensity_type, rate_index))" % __pyx_checksum)
 *     __pyx_result = ConstitutivePropensity.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xfd3ec69:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfd3ec69 = (propensity_type, rate_index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = ConstitutivePropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xfd, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xfd3ec69:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfd3ec69 = (propensity_type, rate_index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfd3ec69 = (propensity_type, rate_index))" % __pyx_checksum)
 *     __pyx_result = ConstitutivePropensity.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ConstitutivePropensity__set_state(<ConstitutivePropensity> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_ConstitutivePropensity), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfd3ec69 = (propensity_type, rate_index))" % __pyx_checksum)
 *     __pyx_result = ConstitutivePropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ConstitutivePropensity__set_state(<ConstitutivePropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = ConstitutivePropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ConstitutivePropensity__set_state(<ConstitutivePropensity> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ConstitutivePropensity__set_state(ConstitutivePropensity __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_ConstitutivePropensity__set_state(((struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfd3ec69 = (propensity_type, rate_index))" % __pyx_checksum)
 *     __pyx_result = ConstitutivePropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ConstitutivePropensity__set_state(<ConstitutivePropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ConstitutivePropensity__set_state(<ConstitutivePropensity> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ConstitutivePropensity__set_state(ConstitutivePropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ConstitutivePropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ConstitutivePropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ConstitutivePropensity__set_state(<ConstitutivePropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ConstitutivePropensity__set_state(ConstitutivePropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_ConstitutivePropensity__set_state(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9bioscrape_5types_PropensityType __pyx_t_1;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ConstitutivePropensity__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ConstitutivePropensity__set_state(ConstitutivePropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = ((__pyx_t_9bioscrape_5types_PropensityType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.propensity_type = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->rate_index = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ConstitutivePropensity__set_state(ConstitutivePropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 2) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)) : __Pyx_PyObject_CallOneArg(__pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 2));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ConstitutivePropensity__set_state(ConstitutivePropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ConstitutivePropensity__set_state(<ConstitutivePropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ConstitutivePropensity__set_state(ConstitutivePropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ConstitutivePropensity__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_UnimolecularPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_13__pyx_unpickle_UnimolecularPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_13__pyx_unpickle_UnimolecularPropensity = {"__pyx_unpickle_UnimolecularPropensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_13__pyx_unpickle_UnimolecularPropensity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_13__pyx_unpickle_UnimolecularPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_UnimolecularPropensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_UnimolecularPropensity", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_UnimolecularPropensity", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_UnimolecularPropensity") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_UnimolecularPropensity", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_UnimolecularPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_12__pyx_unpickle_UnimolecularPropensity(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_12__pyx_unpickle_UnimolecularPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_UnimolecularPropensity", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xf7c2634:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7c2634 = (propensity_type, rate_index, species_index))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xf7c2634) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xf7c2634:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7c2634 = (propensity_type, rate_index, species_index))" % __pyx_checksum)
 *     __pyx_result = UnimolecularPropensity.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xf7c2634:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7c2634 = (propensity_type, rate_index, species_index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = UnimolecularPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xf7, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xf7c2634:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7c2634 = (propensity_type, rate_index, species_index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7c2634 = (propensity_type, rate_index, species_index))" % __pyx_checksum)
 *     __pyx_result = UnimolecularPropensity.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_UnimolecularPropensity__set_state(<UnimolecularPropensity> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_UnimolecularPropensity), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7c2634 = (propensity_type, rate_index, species_index))" % __pyx_checksum)
 *     __pyx_result = UnimolecularPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_UnimolecularPropensity__set_state(<UnimolecularPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = UnimolecularPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_UnimolecularPropensity__set_state(<UnimolecularPropensity> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_UnimolecularPropensity__set_state(UnimolecularPropensity __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_UnimolecularPropensity__set_state(((struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7c2634 = (propensity_type, rate_index, species_index))" % __pyx_checksum)
 *     __pyx_result = UnimolecularPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_UnimolecularPropensity__set_state(<UnimolecularPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_UnimolecularPropensity__set_state(<UnimolecularPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_UnimolecularPropensity__set_state(UnimolecularPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.species_index = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_UnimolecularPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_UnimolecularPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_UnimolecularPropensity__set_state(<UnimolecularPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_UnimolecularPropensity__set_state(UnimolecularPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.species_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_UnimolecularPropensity__set_state(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9bioscrape_5types_PropensityType __pyx_t_1;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_UnimolecularPropensity__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_UnimolecularPropensity__set_state(UnimolecularPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.species_index = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = ((__pyx_t_9bioscrape_5types_PropensityType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.propensity_type = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->rate_index = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->species_index = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_UnimolecularPropensity__set_state(UnimolecularPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.species_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.species_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)) : __Pyx_PyObject_CallOneArg(__pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 3));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_UnimolecularPropensity__set_state(UnimolecularPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.species_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_UnimolecularPropensity__set_state(<UnimolecularPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_UnimolecularPropensity__set_state(UnimolecularPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.species_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_UnimolecularPropensity__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_BimolecularPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_15__pyx_unpickle_BimolecularPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_15__pyx_unpickle_BimolecularPropensity = {"__pyx_unpickle_BimolecularPropensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_15__pyx_unpickle_BimolecularPropensity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_15__pyx_unpickle_BimolecularPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_BimolecularPropensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BimolecularPropensity", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BimolecularPropensity", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_BimolecularPropensity") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BimolecularPropensity", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_BimolecularPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_14__pyx_unpickle_BimolecularPropensity(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_14__pyx_unpickle_BimolecularPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BimolecularPropensity", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x54e9932:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x54e9932 = (propensity_type, rate_index, s1_index, s2_index))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x54e9932) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x54e9932:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x54e9932 = (propensity_type, rate_index, s1_index, s2_index))" % __pyx_checksum)
 *     __pyx_result = BimolecularPropensity.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x54e9932:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x54e9932 = (propensity_type, rate_index, s1_index, s2_index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = BimolecularPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x54, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x54e9932:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x54e9932 = (propensity_type, rate_index, s1_index, s2_index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x54e9932 = (propensity_type, rate_index, s1_index, s2_index))" % __pyx_checksum)
 *     __pyx_result = BimolecularPropensity.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BimolecularPropensity__set_state(<BimolecularPropensity> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_BimolecularPropensity), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x54e9932 = (propensity_type, rate_index, s1_index, s2_index))" % __pyx_checksum)
 *     __pyx_result = BimolecularPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BimolecularPropensity__set_state(<BimolecularPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = BimolecularPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BimolecularPropensity__set_state(<BimolecularPropensity> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_BimolecularPropensity__set_state(BimolecularPropensity __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_BimolecularPropensity__set_state(((struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x54e9932 = (propensity_type, rate_index, s1_index, s2_index))" % __pyx_checksum)
 *     __pyx_result = BimolecularPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BimolecularPropensity__set_state(<BimolecularPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BimolecularPropensity__set_state(<BimolecularPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_BimolecularPropensity__set_state(BimolecularPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.s1_index = __pyx_state[2]; __pyx_result.s2_index = __pyx_state[3]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BimolecularPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_BimolecularPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_BimolecularPropensity__set_state(<BimolecularPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BimolecularPropensity__set_state(BimolecularPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.s1_index = __pyx_state[2]; __pyx_result.s2_index = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_BimolecularPropensity__set_state(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9bioscrape_5types_PropensityType __pyx_t_1;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BimolecularPropensity__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BimolecularPropensity__set_state(BimolecularPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.s1_index = __pyx_state[2]; __pyx_result.s2_index = __pyx_state[3]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = ((__pyx_t_9bioscrape_5types_PropensityType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.propensity_type = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->rate_index = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->s1_index = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->s2_index = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_BimolecularPropensity__set_state(BimolecularPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.s1_index = __pyx_state[2]; __pyx_result.s2_index = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 4) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.s1_index = __pyx_state[2]; __pyx_result.s2_index = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)) : __Pyx_PyObject_CallOneArg(__pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 4));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_BimolecularPropensity__set_state(BimolecularPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.s1_index = __pyx_state[2]; __pyx_result.s2_index = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_BimolecularPropensity__set_state(<BimolecularPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BimolecularPropensity__set_state(BimolecularPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.s1_index = __pyx_state[2]; __pyx_result.s2_index = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_BimolecularPropensity__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PositiveHillPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_17__pyx_unpickle_PositiveHillPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_17__pyx_unpickle_PositiveHillPropensity = {"__pyx_unpickle_PositiveHillPropensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_17__pyx_unpickle_PositiveHillPropensity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_17__pyx_unpickle_PositiveHillPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PositiveHillPropensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PositiveHillPropensity", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PositiveHillPropensity", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PositiveHillPropensity") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PositiveHillPropensity", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_PositiveHillPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_16__pyx_unpickle_PositiveHillPropensity(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_16__pyx_unpickle_PositiveHillPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PositiveHillPropensity", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xbbc01ae:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xbbc01ae) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xbbc01ae:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = PositiveHillPropensity.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xbbc01ae:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PositiveHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xbb, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xbbc01ae:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = PositiveHillPropensity.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PositiveHillPropensity__set_state(<PositiveHillPropensity> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_PositiveHillPropensity), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = PositiveHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PositiveHillPropensity__set_state(<PositiveHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PositiveHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PositiveHillPropensity__set_state(<PositiveHillPropensity> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PositiveHillPropensity__set_state(PositiveHillPropensity __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_PositiveHillPropensity__set_state(((struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = PositiveHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PositiveHillPropensity__set_state(<PositiveHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PositiveHillPropensity__set_state(<PositiveHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PositiveHillPropensity__set_state(PositiveHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PositiveHillPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_PositiveHillPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PositiveHillPropensity__set_state(<PositiveHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PositiveHillPropensity__set_state(PositiveHillPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_PositiveHillPropensity__set_state(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_9bioscrape_5types_PropensityType __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PositiveHillPropensity__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PositiveHillPropensity__set_state(PositiveHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->K_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->n_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_9bioscrape_5types_PropensityType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.propensity_type = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->rate_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->s1_index = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_PositiveHillPropensity__set_state(PositiveHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 5) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)) : __Pyx_PyObject_CallOneArg(__pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 5));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PositiveHillPropensity__set_state(PositiveHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PositiveHillPropensity__set_state(<PositiveHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PositiveHillPropensity__set_state(PositiveHillPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_PositiveHillPropensity__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PositiveProportionalHillPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_19__pyx_unpickle_PositiveProportionalHillPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_19__pyx_unpickle_PositiveProportionalHillPropensity = {"__pyx_unpickle_PositiveProportionalHillPropensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_19__pyx_unpickle_PositiveProportionalHillPropensity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_19__pyx_unpickle_PositiveProportionalHillPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PositiveProportionalHillPropensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PositiveProportionalHillPropensity", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PositiveProportionalHillPropensity", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PositiveProportionalHillPropensity") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PositiveProportionalHillPropensity", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_PositiveProportionalHillPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_18__pyx_unpickle_PositiveProportionalHillPropensity(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_18__pyx_unpickle_PositiveProportionalHillPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PositiveProportionalHillPropensity", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x611c596:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x611c596) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x611c596:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = PositiveProportionalHillPropensity.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x611c596:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PositiveProportionalHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x61, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x611c596:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = PositiveProportionalHillPropensity.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PositiveProportionalHillPropensity__set_state(<PositiveProportionalHillPropensity> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_PositiveProportionalHillPropensity), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = PositiveProportionalHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PositiveProportionalHillPropensity__set_state(<PositiveProportionalHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PositiveProportionalHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PositiveProportionalHillPropensity__set_state(<PositiveProportionalHillPropensity> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PositiveProportionalHillPropensity__set_state(PositiveProportionalHillPropensity __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_PositiveProportionalHillPropensity__set_state(((struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = PositiveProportionalHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PositiveProportionalHillPropensity__set_state(<PositiveProportionalHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PositiveProportionalHillPropensity__set_state(<PositiveProportionalHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PositiveProportionalHillPropensity__set_state(PositiveProportionalHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PositiveProportionalHillPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_PositiveProportionalHillPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PositiveProportionalHillPropensity__set_state(<PositiveProportionalHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PositiveProportionalHillPropensity__set_state(PositiveProportionalHillPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_PositiveProportionalHillPropensity__set_state(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_9bioscrape_5types_PropensityType __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PositiveProportionalHillPropensity__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PositiveProportionalHillPropensity__set_state(PositiveProportionalHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->K_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->d_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->n_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_9bioscrape_5types_PropensityType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.propensity_type = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->rate_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->s1_index = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_PositiveProportionalHillPropensity__set_state(PositiveProportionalHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 6) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6)) : __Pyx_PyObject_CallOneArg(__pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PositiveProportionalHillPropensity__set_state(PositiveProportionalHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PositiveProportionalHillPropensity__set_state(<PositiveProportionalHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PositiveProportionalHillPropensity__set_state(PositiveProportionalHillPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_PositiveProportionalHillPropensity__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_NegativeHillPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_21__pyx_unpickle_NegativeHillPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_21__pyx_unpickle_NegativeHillPropensity = {"__pyx_unpickle_NegativeHillPropensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_21__pyx_unpickle_NegativeHillPropensity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_21__pyx_unpickle_NegativeHillPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_NegativeHillPropensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NegativeHillPropensity", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NegativeHillPropensity", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_NegativeHillPropensity") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NegativeHillPropensity", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_NegativeHillPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_20__pyx_unpickle_NegativeHillPropensity(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_20__pyx_unpickle_NegativeHillPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_NegativeHillPropensity", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xbbc01ae:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xbbc01ae) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xbbc01ae:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = NegativeHillPropensity.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xbbc01ae:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = NegativeHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xbb, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xbbc01ae:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = NegativeHillPropensity.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NegativeHillPropensity__set_state(<NegativeHillPropensity> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_NegativeHillPropensity), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = NegativeHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_NegativeHillPropensity__set_state(<NegativeHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = NegativeHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NegativeHillPropensity__set_state(<NegativeHillPropensity> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_NegativeHillPropensity__set_state(NegativeHillPropensity __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_NegativeHillPropensity__set_state(((struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xbbc01ae = (K_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = NegativeHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_NegativeHillPropensity__set_state(<NegativeHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NegativeHillPropensity__set_state(<NegativeHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_NegativeHillPropensity__set_state(NegativeHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_NegativeHillPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_NegativeHillPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_NegativeHillPropensity__set_state(<NegativeHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NegativeHillPropensity__set_state(NegativeHillPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_NegativeHillPropensity__set_state(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_9bioscrape_5types_PropensityType __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_NegativeHillPropensity__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_NegativeHillPropensity__set_state(NegativeHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->K_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->n_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_9bioscrape_5types_PropensityType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.propensity_type = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->rate_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->s1_index = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_NegativeHillPropensity__set_state(NegativeHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 5) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)) : __Pyx_PyObject_CallOneArg(__pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 5));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_NegativeHillPropensity__set_state(NegativeHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_NegativeHillPropensity__set_state(<NegativeHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NegativeHillPropensity__set_state(NegativeHillPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_NegativeHillPropensity__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_NegativeProportionalHillPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_23__pyx_unpickle_NegativeProportionalHillPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_23__pyx_unpickle_NegativeProportionalHillPropensity = {"__pyx_unpickle_NegativeProportionalHillPropensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_23__pyx_unpickle_NegativeProportionalHillPropensity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_23__pyx_unpickle_NegativeProportionalHillPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_NegativeProportionalHillPropensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NegativeProportionalHillPropensity", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NegativeProportionalHillPropensity", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_NegativeProportionalHillPropensity") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NegativeProportionalHillPropensity", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_NegativeProportionalHillPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_22__pyx_unpickle_NegativeProportionalHillPropensity(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_22__pyx_unpickle_NegativeProportionalHillPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_NegativeProportionalHillPropensity", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x611c596:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x611c596) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x611c596:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = NegativeProportionalHillPropensity.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x611c596:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = NegativeProportionalHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x61, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x611c596:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = NegativeProportionalHillPropensity.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NegativeProportionalHillPropensity__set_state(<NegativeProportionalHillPropensity> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_NegativeProportionalHillPropensity), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = NegativeProportionalHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_NegativeProportionalHillPropensity__set_state(<NegativeProportionalHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = NegativeProportionalHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NegativeProportionalHillPropensity__set_state(<NegativeProportionalHillPropensity> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_NegativeProportionalHillPropensity__set_state(NegativeProportionalHillPropensity __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_NegativeProportionalHillPropensity__set_state(((struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x611c596 = (K_index, d_index, n_index, propensity_type, rate_index, s1_index))" % __pyx_checksum)
 *     __pyx_result = NegativeProportionalHillPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_NegativeProportionalHillPropensity__set_state(<NegativeProportionalHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NegativeProportionalHillPropensity__set_state(<NegativeProportionalHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_NegativeProportionalHillPropensity__set_state(NegativeProportionalHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_NegativeProportionalHillPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_NegativeProportionalHillPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_NegativeProportionalHillPropensity__set_state(<NegativeProportionalHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NegativeProportionalHillPropensity__set_state(NegativeProportionalHillPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_NegativeProportionalHillPropensity__set_state(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_9bioscrape_5types_PropensityType __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_NegativeProportionalHillPropensity__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_NegativeProportionalHillPropensity__set_state(NegativeProportionalHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->K_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->d_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->n_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_9bioscrape_5types_PropensityType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.propensity_type = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->rate_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->s1_index = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_NegativeProportionalHillPropensity__set_state(NegativeProportionalHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 6) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6)) : __Pyx_PyObject_CallOneArg(__pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_NegativeProportionalHillPropensity__set_state(NegativeProportionalHillPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_NegativeProportionalHillPropensity__set_state(<NegativeProportionalHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NegativeProportionalHillPropensity__set_state(NegativeProportionalHillPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.d_index = __pyx_state[1]; __pyx_result.n_index = __pyx_state[2]; __pyx_result.propensity_type = __pyx_state[3]; __pyx_result.rate_index = __pyx_state[4]; __pyx_result.s1_index = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_NegativeProportionalHillPropensity__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_MassActionPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_25__pyx_unpickle_MassActionPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_25__pyx_unpickle_MassActionPropensity = {"__pyx_unpickle_MassActionPropensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_25__pyx_unpickle_MassActionPropensity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_25__pyx_unpickle_MassActionPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_MassActionPropensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MassActionPropensity", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MassActionPropensity", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_MassActionPropensity") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MassActionPropensity", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_MassActionPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_24__pyx_unpickle_MassActionPropensity(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_24__pyx_unpickle_MassActionPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MassActionPropensity", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x8a1cb64:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8a1cb64 = (k_index, num_species, propensity_type, sp_counts, sp_inds))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x8a1cb64) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x8a1cb64:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8a1cb64 = (k_index, num_species, propensity_type, sp_counts, sp_inds))" % __pyx_checksum)
 *     __pyx_result = MassActionPropensity.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x8a1cb64:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8a1cb64 = (k_index, num_species, propensity_type, sp_counts, sp_inds))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = MassActionPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x8a, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x8a1cb64:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8a1cb64 = (k_index, num_species, propensity_type, sp_counts, sp_inds))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8a1cb64 = (k_index, num_species, propensity_type, sp_counts, sp_inds))" % __pyx_checksum)
 *     __pyx_result = MassActionPropensity.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MassActionPropensity__set_state(<MassActionPropensity> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_MassActionPropensity), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8a1cb64 = (k_index, num_species, propensity_type, sp_counts, sp_inds))" % __pyx_checksum)
 *     __pyx_result = MassActionPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MassActionPropensity__set_state(<MassActionPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = MassActionPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MassActionPropensity__set_state(<MassActionPropensity> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_MassActionPropensity__set_state(MassActionPropensity __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_MassActionPropensity__set_state(((struct __pyx_obj_9bioscrape_5types_MassActionPropensity *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8a1cb64 = (k_index, num_species, propensity_type, sp_counts, sp_inds))" % __pyx_checksum)
 *     __pyx_result = MassActionPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MassActionPropensity__set_state(<MassActionPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MassActionPropensity__set_state(<MassActionPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_MassActionPropensity__set_state(MassActionPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.k_index = __pyx_state[0]; __pyx_result.num_species = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.sp_counts = __pyx_state[3]; __pyx_result.sp_inds = __pyx_state[4]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_MassActionPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_MassActionPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_MassActionPropensity__set_state(<MassActionPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MassActionPropensity__set_state(MassActionPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.k_index = __pyx_state[0]; __pyx_result.num_species = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.sp_counts = __pyx_state[3]; __pyx_result.sp_inds = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_MassActionPropensity__set_state(struct __pyx_obj_9bioscrape_5types_MassActionPropensity *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_9bioscrape_5types_PropensityType __pyx_t_3;
  std::vector<int>  __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MassActionPropensity__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_MassActionPropensity__set_state(MassActionPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.k_index = __pyx_state[0]; __pyx_result.num_species = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.sp_counts = __pyx_state[3]; __pyx_result.sp_inds = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->k_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->num_species = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_3 = ((__pyx_t_9bioscrape_5types_PropensityType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.propensity_type = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_from_py_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->sp_counts = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_from_py_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->sp_inds = __pyx_t_4;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_MassActionPropensity__set_state(MassActionPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.k_index = __pyx_state[0]; __pyx_result.num_species = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.sp_counts = __pyx_state[3]; __pyx_result.sp_inds = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 5) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result.k_index = __pyx_state[0]; __pyx_result.num_species = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.sp_counts = __pyx_state[3]; __pyx_result.sp_inds = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_update); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_9 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_10, PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)) : __Pyx_PyObject_CallOneArg(__pyx_t_11, PyTuple_GET_ITEM(__pyx_v___pyx_state, 5));
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_MassActionPropensity__set_state(MassActionPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.k_index = __pyx_state[0]; __pyx_result.num_species = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.sp_counts = __pyx_state[3]; __pyx_result.sp_inds = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_MassActionPropensity__set_state(<MassActionPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MassActionPropensity__set_state(MassActionPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.k_index = __pyx_state[0]; __pyx_result.num_species = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.sp_counts = __pyx_state[3]; __pyx_result.sp_inds = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_MassActionPropensity__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Term(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_27__pyx_unpickle_Term(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_27__pyx_unpickle_Term = {"__pyx_unpickle_Term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_27__pyx_unpickle_Term, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_27__pyx_unpickle_Term(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Term", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Term", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Term") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Term", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_26__pyx_unpickle_Term(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_26__pyx_unpickle_Term(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Term", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = Term.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Term.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = Term.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Term__set_state(<Term> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_Term), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = Term.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Term__set_state(<Term> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Term.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Term__set_state(<Term> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Term__set_state(Term __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_Term__set_state(((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = Term.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Term__set_state(<Term> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Term__set_state(<Term> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Term__set_state(Term __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Term(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Term__set_state(<Term> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Term__set_state(Term __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Term__set_state(struct __pyx_obj_9bioscrape_5types_Term *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Term__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Term__set_state(Term __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Term__set_state(Term __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Term__set_state(Term __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Term__set_state(<Term> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Term__set_state(Term __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Term__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ConstantTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_29__pyx_unpickle_ConstantTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_29__pyx_unpickle_ConstantTerm = {"__pyx_unpickle_ConstantTerm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_29__pyx_unpickle_ConstantTerm, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_29__pyx_unpickle_ConstantTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ConstantTerm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ConstantTerm", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ConstantTerm", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_ConstantTerm") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ConstantTerm", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ConstantTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_28__pyx_unpickle_ConstantTerm(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_28__pyx_unpickle_ConstantTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ConstantTerm", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x2063c16:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2063c16 = (value))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x2063c16) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x2063c16:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2063c16 = (value))" % __pyx_checksum)
 *     __pyx_result = ConstantTerm.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x2063c16:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2063c16 = (value))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = ConstantTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x20, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x2063c16:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2063c16 = (value))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2063c16 = (value))" % __pyx_checksum)
 *     __pyx_result = ConstantTerm.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ConstantTerm__set_state(<ConstantTerm> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_ConstantTerm), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2063c16 = (value))" % __pyx_checksum)
 *     __pyx_result = ConstantTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ConstantTerm__set_state(<ConstantTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = ConstantTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ConstantTerm__set_state(<ConstantTerm> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ConstantTerm__set_state(ConstantTerm __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_ConstantTerm__set_state(((struct __pyx_obj_9bioscrape_5types_ConstantTerm *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2063c16 = (value))" % __pyx_checksum)
 *     __pyx_result = ConstantTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ConstantTerm__set_state(<ConstantTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ConstantTerm__set_state(<ConstantTerm> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ConstantTerm__set_state(ConstantTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.value = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ConstantTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ConstantTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ConstantTerm__set_state(<ConstantTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ConstantTerm__set_state(ConstantTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.value = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_ConstantTerm__set_state(struct __pyx_obj_9bioscrape_5types_ConstantTerm *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ConstantTerm__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ConstantTerm__set_state(ConstantTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.value = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->value = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ConstantTerm__set_state(ConstantTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.value = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.value = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ConstantTerm__set_state(ConstantTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.value = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ConstantTerm__set_state(<ConstantTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ConstantTerm__set_state(ConstantTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.value = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ConstantTerm__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_SpeciesTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_31__pyx_unpickle_SpeciesTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_31__pyx_unpickle_SpeciesTerm = {"__pyx_unpickle_SpeciesTerm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_31__pyx_unpickle_SpeciesTerm, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_31__pyx_unpickle_SpeciesTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_SpeciesTerm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SpeciesTerm", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SpeciesTerm", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_SpeciesTerm") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SpeciesTerm", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_SpeciesTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_30__pyx_unpickle_SpeciesTerm(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_30__pyx_unpickle_SpeciesTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SpeciesTerm", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x6a992d5:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x6a992d5) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x6a992d5:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 *     __pyx_result = SpeciesTerm.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x6a992d5:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = SpeciesTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x6a, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x6a992d5:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 *     __pyx_result = SpeciesTerm.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SpeciesTerm__set_state(<SpeciesTerm> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_SpeciesTerm), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 *     __pyx_result = SpeciesTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SpeciesTerm__set_state(<SpeciesTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = SpeciesTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SpeciesTerm__set_state(<SpeciesTerm> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_SpeciesTerm__set_state(SpeciesTerm __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_SpeciesTerm__set_state(((struct __pyx_obj_9bioscrape_5types_SpeciesTerm *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 *     __pyx_result = SpeciesTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SpeciesTerm__set_state(<SpeciesTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SpeciesTerm__set_state(<SpeciesTerm> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_SpeciesTerm__set_state(SpeciesTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_SpeciesTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_SpeciesTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_SpeciesTerm__set_state(<SpeciesTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SpeciesTerm__set_state(SpeciesTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.index = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_SpeciesTerm__set_state(struct __pyx_obj_9bioscrape_5types_SpeciesTerm *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SpeciesTerm__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_SpeciesTerm__set_state(SpeciesTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->index = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_SpeciesTerm__set_state(SpeciesTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.index = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_SpeciesTerm__set_state(SpeciesTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_SpeciesTerm__set_state(<SpeciesTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SpeciesTerm__set_state(SpeciesTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.index = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_SpeciesTerm__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ParameterTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_33__pyx_unpickle_ParameterTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_33__pyx_unpickle_ParameterTerm = {"__pyx_unpickle_ParameterTerm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_33__pyx_unpickle_ParameterTerm, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_33__pyx_unpickle_ParameterTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ParameterTerm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ParameterTerm", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ParameterTerm", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_ParameterTerm") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ParameterTerm", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ParameterTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_32__pyx_unpickle_ParameterTerm(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_32__pyx_unpickle_ParameterTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ParameterTerm", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x6a992d5:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x6a992d5) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x6a992d5:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 *     __pyx_result = ParameterTerm.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x6a992d5:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = ParameterTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x6a, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x6a992d5:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 *     __pyx_result = ParameterTerm.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ParameterTerm__set_state(<ParameterTerm> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_ParameterTerm), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 *     __pyx_result = ParameterTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ParameterTerm__set_state(<ParameterTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = ParameterTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ParameterTerm__set_state(<ParameterTerm> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ParameterTerm__set_state(ParameterTerm __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_ParameterTerm__set_state(((struct __pyx_obj_9bioscrape_5types_ParameterTerm *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6a992d5 = (index))" % __pyx_checksum)
 *     __pyx_result = ParameterTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ParameterTerm__set_state(<ParameterTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ParameterTerm__set_state(<ParameterTerm> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ParameterTerm__set_state(ParameterTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ParameterTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ParameterTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ParameterTerm__set_state(<ParameterTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ParameterTerm__set_state(ParameterTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.index = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_ParameterTerm__set_state(struct __pyx_obj_9bioscrape_5types_ParameterTerm *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ParameterTerm__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ParameterTerm__set_state(ParameterTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->index = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ParameterTerm__set_state(ParameterTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.index = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ParameterTerm__set_state(ParameterTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ParameterTerm__set_state(<ParameterTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ParameterTerm__set_state(ParameterTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.index = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ParameterTerm__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_VolumeTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_35__pyx_unpickle_VolumeTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_35__pyx_unpickle_VolumeTerm = {"__pyx_unpickle_VolumeTerm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_35__pyx_unpickle_VolumeTerm, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_35__pyx_unpickle_VolumeTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_VolumeTerm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_VolumeTerm", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_VolumeTerm", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_VolumeTerm") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_VolumeTerm", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_VolumeTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_34__pyx_unpickle_VolumeTerm(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_34__pyx_unpickle_VolumeTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_VolumeTerm", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = VolumeTerm.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = VolumeTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = VolumeTerm.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_VolumeTerm__set_state(<VolumeTerm> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_VolumeTerm), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = VolumeTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_VolumeTerm__set_state(<VolumeTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = VolumeTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_VolumeTerm__set_state(<VolumeTerm> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_VolumeTerm__set_state(VolumeTerm __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_VolumeTerm__set_state(((struct __pyx_obj_9bioscrape_5types_VolumeTerm *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = VolumeTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_VolumeTerm__set_state(<VolumeTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_VolumeTerm__set_state(<VolumeTerm> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_VolumeTerm__set_state(VolumeTerm __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_VolumeTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_VolumeTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_VolumeTerm__set_state(<VolumeTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_VolumeTerm__set_state(VolumeTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_VolumeTerm__set_state(struct __pyx_obj_9bioscrape_5types_VolumeTerm *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_VolumeTerm__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_VolumeTerm__set_state(VolumeTerm __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_VolumeTerm__set_state(VolumeTerm __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_VolumeTerm__set_state(VolumeTerm __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_VolumeTerm__set_state(<VolumeTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_VolumeTerm__set_state(VolumeTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_VolumeTerm__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PowerTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_37__pyx_unpickle_PowerTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_37__pyx_unpickle_PowerTerm = {"__pyx_unpickle_PowerTerm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_37__pyx_unpickle_PowerTerm, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_37__pyx_unpickle_PowerTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PowerTerm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PowerTerm", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PowerTerm", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PowerTerm") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PowerTerm", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_PowerTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_36__pyx_unpickle_PowerTerm(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_36__pyx_unpickle_PowerTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PowerTerm", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xe60425b:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe60425b = (base, exponent))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xe60425b) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xe60425b:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe60425b = (base, exponent))" % __pyx_checksum)
 *     __pyx_result = PowerTerm.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xe60425b:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe60425b = (base, exponent))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PowerTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xe6, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xe60425b:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe60425b = (base, exponent))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe60425b = (base, exponent))" % __pyx_checksum)
 *     __pyx_result = PowerTerm.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PowerTerm__set_state(<PowerTerm> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_PowerTerm), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe60425b = (base, exponent))" % __pyx_checksum)
 *     __pyx_result = PowerTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PowerTerm__set_state(<PowerTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PowerTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PowerTerm__set_state(<PowerTerm> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PowerTerm__set_state(PowerTerm __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_PowerTerm__set_state(((struct __pyx_obj_9bioscrape_5types_PowerTerm *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe60425b = (base, exponent))" % __pyx_checksum)
 *     __pyx_result = PowerTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PowerTerm__set_state(<PowerTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PowerTerm__set_state(<PowerTerm> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PowerTerm__set_state(PowerTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.base = __pyx_state[0]; __pyx_result.exponent = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PowerTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_PowerTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PowerTerm__set_state(<PowerTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PowerTerm__set_state(PowerTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.base = __pyx_state[0]; __pyx_result.exponent = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_PowerTerm__set_state(struct __pyx_obj_9bioscrape_5types_PowerTerm *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PowerTerm__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PowerTerm__set_state(PowerTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.base = __pyx_state[0]; __pyx_result.exponent = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0), __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 0);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->base);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->base));
  __pyx_v___pyx_result->base = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1), __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->exponent);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->exponent));
  __pyx_v___pyx_result->exponent = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_PowerTerm__set_state(PowerTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.base = __pyx_state[0]; __pyx_result.exponent = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 2) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.base = __pyx_state[0]; __pyx_result.exponent = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 2));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PowerTerm__set_state(PowerTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.base = __pyx_state[0]; __pyx_result.exponent = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PowerTerm__set_state(<PowerTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PowerTerm__set_state(PowerTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.base = __pyx_state[0]; __pyx_result.exponent = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_PowerTerm__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ExpTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_39__pyx_unpickle_ExpTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_39__pyx_unpickle_ExpTerm = {"__pyx_unpickle_ExpTerm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_39__pyx_unpickle_ExpTerm, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_39__pyx_unpickle_ExpTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ExpTerm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ExpTerm", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ExpTerm", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_ExpTerm") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ExpTerm", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ExpTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_38__pyx_unpickle_ExpTerm(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_38__pyx_unpickle_ExpTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ExpTerm", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x61dd86c) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = ExpTerm.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x61dd86c:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = ExpTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x61_2, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = ExpTerm.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ExpTerm__set_state(<ExpTerm> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_ExpTerm), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = ExpTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ExpTerm__set_state(<ExpTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = ExpTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ExpTerm__set_state(<ExpTerm> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ExpTerm__set_state(ExpTerm __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_ExpTerm__set_state(((struct __pyx_obj_9bioscrape_5types_ExpTerm *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = ExpTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ExpTerm__set_state(<ExpTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ExpTerm__set_state(<ExpTerm> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ExpTerm__set_state(ExpTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ExpTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ExpTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ExpTerm__set_state(<ExpTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ExpTerm__set_state(ExpTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_ExpTerm__set_state(struct __pyx_obj_9bioscrape_5types_ExpTerm *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ExpTerm__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ExpTerm__set_state(ExpTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0), __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 0);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->arg);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->arg));
  __pyx_v___pyx_result->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ExpTerm__set_state(ExpTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ExpTerm__set_state(ExpTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ExpTerm__set_state(<ExpTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ExpTerm__set_state(ExpTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_ExpTerm__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_LogTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_41__pyx_unpickle_LogTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_41__pyx_unpickle_LogTerm = {"__pyx_unpickle_LogTerm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_41__pyx_unpickle_LogTerm, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_41__pyx_unpickle_LogTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_LogTerm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LogTerm", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LogTerm", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_LogTerm") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LogTerm", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_LogTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_40__pyx_unpickle_LogTerm(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_40__pyx_unpickle_LogTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_LogTerm", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x61dd86c) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = LogTerm.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x61dd86c:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = LogTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x61_2, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = LogTerm.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LogTerm__set_state(<LogTerm> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_LogTerm), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = LogTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_LogTerm__set_state(<LogTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = LogTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LogTerm__set_state(<LogTerm> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_LogTerm__set_state(LogTerm __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_LogTerm__set_state(((struct __pyx_obj_9bioscrape_5types_LogTerm *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = LogTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_LogTerm__set_state(<LogTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LogTerm__set_state(<LogTerm> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_LogTerm__set_state(LogTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_LogTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_LogTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_LogTerm__set_state(<LogTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_LogTerm__set_state(LogTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_LogTerm__set_state(struct __pyx_obj_9bioscrape_5types_LogTerm *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_LogTerm__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_LogTerm__set_state(LogTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0), __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 0);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->arg);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->arg));
  __pyx_v___pyx_result->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_LogTerm__set_state(LogTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_LogTerm__set_state(LogTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_LogTerm__set_state(<LogTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_LogTerm__set_state(LogTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_LogTerm__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_StepTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_43__pyx_unpickle_StepTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_43__pyx_unpickle_StepTerm = {"__pyx_unpickle_StepTerm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_43__pyx_unpickle_StepTerm, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_43__pyx_unpickle_StepTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_StepTerm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StepTerm", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StepTerm", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_StepTerm") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StepTerm", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_StepTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_42__pyx_unpickle_StepTerm(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_42__pyx_unpickle_StepTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_StepTerm", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x61dd86c) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = StepTerm.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x61dd86c:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = StepTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x61_2, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = StepTerm.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StepTerm__set_state(<StepTerm> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_StepTerm), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = StepTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_StepTerm__set_state(<StepTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = StepTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StepTerm__set_state(<StepTerm> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_StepTerm__set_state(StepTerm __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_StepTerm__set_state(((struct __pyx_obj_9bioscrape_5types_StepTerm *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = StepTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_StepTerm__set_state(<StepTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StepTerm__set_state(<StepTerm> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_StepTerm__set_state(StepTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_StepTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_StepTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_StepTerm__set_state(<StepTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_StepTerm__set_state(StepTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_StepTerm__set_state(struct __pyx_obj_9bioscrape_5types_StepTerm *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_StepTerm__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_StepTerm__set_state(StepTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0), __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 0);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->arg);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->arg));
  __pyx_v___pyx_result->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_StepTerm__set_state(StepTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_StepTerm__set_state(StepTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_StepTerm__set_state(<StepTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_StepTerm__set_state(StepTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_StepTerm__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_AbsTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_45__pyx_unpickle_AbsTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_45__pyx_unpickle_AbsTerm = {"__pyx_unpickle_AbsTerm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_45__pyx_unpickle_AbsTerm, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_45__pyx_unpickle_AbsTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_AbsTerm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AbsTerm", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AbsTerm", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_AbsTerm") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AbsTerm", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_AbsTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_44__pyx_unpickle_AbsTerm(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_44__pyx_unpickle_AbsTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_AbsTerm", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x61dd86c) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = AbsTerm.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x61dd86c:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = AbsTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x61_2, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x61dd86c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = AbsTerm.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AbsTerm__set_state(<AbsTerm> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_AbsTerm), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = AbsTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_AbsTerm__set_state(<AbsTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = AbsTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AbsTerm__set_state(<AbsTerm> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_AbsTerm__set_state(AbsTerm __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_AbsTerm__set_state(((struct __pyx_obj_9bioscrape_5types_AbsTerm *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x61dd86c = (arg))" % __pyx_checksum)
 *     __pyx_result = AbsTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_AbsTerm__set_state(<AbsTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AbsTerm__set_state(<AbsTerm> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_AbsTerm__set_state(AbsTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_AbsTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_AbsTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_AbsTerm__set_state(<AbsTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_AbsTerm__set_state(AbsTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_AbsTerm__set_state(struct __pyx_obj_9bioscrape_5types_AbsTerm *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_AbsTerm__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_AbsTerm__set_state(AbsTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0), __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 0);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->arg);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->arg));
  __pyx_v___pyx_result->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_AbsTerm__set_state(AbsTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_AbsTerm__set_state(AbsTerm __pyx_result, tuple __pyx_state):
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_AbsTerm__set_state(<AbsTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_AbsTerm__set_state(AbsTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_AbsTerm__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_TimeTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_47__pyx_unpickle_TimeTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_47__pyx_unpickle_TimeTerm = {"__pyx_unpickle_TimeTerm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_47__pyx_unpickle_TimeTerm, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_47__pyx_unpickle_TimeTerm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_TimeTerm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TimeTerm", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TimeTerm", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_TimeTerm") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TimeTerm", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_TimeTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_46__pyx_unpickle_TimeTerm(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_46__pyx_unpickle_TimeTerm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_TimeTerm", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = TimeTerm.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = TimeTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = TimeTerm.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TimeTerm__set_state(<TimeTerm> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_TimeTerm), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = TimeTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_TimeTerm__set_state(<TimeTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = TimeTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TimeTerm__set_state(<TimeTerm> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_TimeTerm__set_state(TimeTerm __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_TimeTerm__set_state(((struct __pyx_obj_9bioscrape_5types_TimeTerm *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = TimeTerm.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_TimeTerm__set_state(<TimeTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TimeTerm__set_state(<TimeTerm> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_TimeTerm__set_state(TimeTerm __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_TimeTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_TimeTerm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_TimeTerm__set_state(<TimeTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_TimeTerm__set_state(TimeTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_TimeTerm__set_state(struct __pyx_obj_9bioscrape_5types_TimeTerm *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_TimeTerm__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_TimeTerm__set_state(TimeTerm __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_TimeTerm__set_state(TimeTerm __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_TimeTerm__set_state(TimeTerm __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_TimeTerm__set_state(<TimeTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_TimeTerm__set_state(TimeTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_TimeTerm__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_GeneralPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_49__pyx_unpickle_GeneralPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_49__pyx_unpickle_GeneralPropensity = {"__pyx_unpickle_GeneralPropensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_49__pyx_unpickle_GeneralPropensity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_49__pyx_unpickle_GeneralPropensity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_GeneralPropensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GeneralPropensity", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GeneralPropensity", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_GeneralPropensity") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GeneralPropensity", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GeneralPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_48__pyx_unpickle_GeneralPropensity(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_48__pyx_unpickle_GeneralPropensity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GeneralPropensity", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x688789b:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x688789b = (propensity_type, term))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x688789b) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x688789b:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x688789b = (propensity_type, term))" % __pyx_checksum)
 *     __pyx_result = GeneralPropensity.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x688789b:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x688789b = (propensity_type, term))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = GeneralPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x68, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x688789b:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x688789b = (propensity_type, term))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x688789b = (propensity_type, term))" % __pyx_checksum)
 *     __pyx_result = GeneralPropensity.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GeneralPropensity__set_state(<GeneralPropensity> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_GeneralPropensity), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x688789b = (propensity_type, term))" % __pyx_checksum)
 *     __pyx_result = GeneralPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GeneralPropensity__set_state(<GeneralPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = GeneralPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GeneralPropensity__set_state(<GeneralPropensity> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralPropensity__set_state(GeneralPropensity __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_GeneralPropensity__set_state(((struct __pyx_obj_9bioscrape_5types_GeneralPropensity *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x688789b = (propensity_type, term))" % __pyx_checksum)
 *     __pyx_result = GeneralPropensity.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GeneralPropensity__set_state(<GeneralPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GeneralPropensity__set_state(<GeneralPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_GeneralPropensity__set_state(GeneralPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.term = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_GeneralPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GeneralPropensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_GeneralPropensity__set_state(<GeneralPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralPropensity__set_state(GeneralPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.term = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_GeneralPropensity__set_state(struct __pyx_obj_9bioscrape_5types_GeneralPropensity *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9bioscrape_5types_PropensityType __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GeneralPropensity__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralPropensity__set_state(GeneralPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.term = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = ((__pyx_t_9bioscrape_5types_PropensityType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.propensity_type = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1), __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v___pyx_result->term);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->term));
  __pyx_v___pyx_result->term = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_GeneralPropensity__set_state(GeneralPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.term = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 2) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.term = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)) : __Pyx_PyObject_CallOneArg(__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 2));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_GeneralPropensity__set_state(GeneralPropensity __pyx_result, tuple __pyx_state):
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.term = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_GeneralPropensity__set_state(<GeneralPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralPropensity__set_state(GeneralPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.term = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GeneralPropensity__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Delay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_51__pyx_unpickle_Delay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_51__pyx_unpickle_Delay = {"__pyx_unpickle_Delay", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_51__pyx_unpickle_Delay, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_51__pyx_unpickle_Delay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Delay (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Delay", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Delay", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Delay") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Delay", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Delay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_50__pyx_unpickle_Delay(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_50__pyx_unpickle_Delay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Delay", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x808fbba:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x808fbba) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x808fbba:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 *     __pyx_result = Delay.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x808fbba:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Delay.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x80, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x808fbba:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 *     __pyx_result = Delay.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Delay__set_state(<Delay> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_Delay), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 *     __pyx_result = Delay.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Delay__set_state(<Delay> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Delay.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Delay__set_state(<Delay> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Delay__set_state(Delay __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_Delay__set_state(((struct __pyx_obj_9bioscrape_5types_Delay *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 *     __pyx_result = Delay.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Delay__set_state(<Delay> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Delay__set_state(<Delay> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Delay__set_state(Delay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Delay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Delay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Delay__set_state(<Delay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Delay__set_state(Delay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Delay__set_state(struct __pyx_obj_9bioscrape_5types_Delay *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9bioscrape_5types_DelayType __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Delay__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Delay__set_state(Delay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = ((__pyx_t_9bioscrape_5types_DelayType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_DelayType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->delay_type = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Delay__set_state(Delay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.delay_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Delay__set_state(Delay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Delay__set_state(<Delay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Delay__set_state(Delay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Delay__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_NoDelay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_53__pyx_unpickle_NoDelay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_53__pyx_unpickle_NoDelay = {"__pyx_unpickle_NoDelay", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_53__pyx_unpickle_NoDelay, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_53__pyx_unpickle_NoDelay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_NoDelay (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NoDelay", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NoDelay", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_NoDelay") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_NoDelay", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_NoDelay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_52__pyx_unpickle_NoDelay(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_52__pyx_unpickle_NoDelay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_NoDelay", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x808fbba:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x808fbba) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x808fbba:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 *     __pyx_result = NoDelay.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x808fbba:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = NoDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x80, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x808fbba:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 *     __pyx_result = NoDelay.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NoDelay__set_state(<NoDelay> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_NoDelay), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 *     __pyx_result = NoDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_NoDelay__set_state(<NoDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = NoDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NoDelay__set_state(<NoDelay> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_NoDelay__set_state(NoDelay __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_NoDelay__set_state(((struct __pyx_obj_9bioscrape_5types_NoDelay *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x808fbba = (delay_type))" % __pyx_checksum)
 *     __pyx_result = NoDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_NoDelay__set_state(<NoDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_NoDelay__set_state(<NoDelay> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_NoDelay__set_state(NoDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_NoDelay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_NoDelay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_NoDelay__set_state(<NoDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NoDelay__set_state(NoDelay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_NoDelay__set_state(struct __pyx_obj_9bioscrape_5types_NoDelay *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9bioscrape_5types_DelayType __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_NoDelay__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_NoDelay__set_state(NoDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = ((__pyx_t_9bioscrape_5types_DelayType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_DelayType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.delay_type = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_NoDelay__set_state(NoDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.delay_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_NoDelay__set_state(NoDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_NoDelay__set_state(<NoDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NoDelay__set_state(NoDelay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_NoDelay__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_FixedDelay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_55__pyx_unpickle_FixedDelay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_55__pyx_unpickle_FixedDelay = {"__pyx_unpickle_FixedDelay", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_55__pyx_unpickle_FixedDelay, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_55__pyx_unpickle_FixedDelay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_FixedDelay (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FixedDelay", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FixedDelay", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_FixedDelay") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FixedDelay", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_FixedDelay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_54__pyx_unpickle_FixedDelay(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_54__pyx_unpickle_FixedDelay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_FixedDelay", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x286babc:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x286babc = (delay_index, delay_type))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x286babc) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x286babc:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x286babc = (delay_index, delay_type))" % __pyx_checksum)
 *     __pyx_result = FixedDelay.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x286babc:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x286babc = (delay_index, delay_type))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = FixedDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x28, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x286babc:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x286babc = (delay_index, delay_type))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x286babc = (delay_index, delay_type))" % __pyx_checksum)
 *     __pyx_result = FixedDelay.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FixedDelay__set_state(<FixedDelay> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_FixedDelay), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x286babc = (delay_index, delay_type))" % __pyx_checksum)
 *     __pyx_result = FixedDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_FixedDelay__set_state(<FixedDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = FixedDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FixedDelay__set_state(<FixedDelay> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_FixedDelay__set_state(FixedDelay __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_FixedDelay__set_state(((struct __pyx_obj_9bioscrape_5types_FixedDelay *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x286babc = (delay_index, delay_type))" % __pyx_checksum)
 *     __pyx_result = FixedDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_FixedDelay__set_state(<FixedDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FixedDelay__set_state(<FixedDelay> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_FixedDelay__set_state(FixedDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_index = __pyx_state[0]; __pyx_result.delay_type = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_FixedDelay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_FixedDelay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_FixedDelay__set_state(<FixedDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FixedDelay__set_state(FixedDelay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_index = __pyx_state[0]; __pyx_result.delay_type = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_FixedDelay__set_state(struct __pyx_obj_9bioscrape_5types_FixedDelay *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_9bioscrape_5types_DelayType __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_FixedDelay__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_FixedDelay__set_state(FixedDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_index = __pyx_state[0]; __pyx_result.delay_type = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->delay_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_9bioscrape_5types_DelayType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_DelayType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.delay_type = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_FixedDelay__set_state(FixedDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_index = __pyx_state[0]; __pyx_result.delay_type = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 2) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.delay_index = __pyx_state[0]; __pyx_result.delay_type = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)) : __Pyx_PyObject_CallOneArg(__pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 2));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_FixedDelay__set_state(FixedDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_index = __pyx_state[0]; __pyx_result.delay_type = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_FixedDelay__set_state(<FixedDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FixedDelay__set_state(FixedDelay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_index = __pyx_state[0]; __pyx_result.delay_type = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_FixedDelay__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_GaussianDelay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_57__pyx_unpickle_GaussianDelay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_57__pyx_unpickle_GaussianDelay = {"__pyx_unpickle_GaussianDelay", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_57__pyx_unpickle_GaussianDelay, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_57__pyx_unpickle_GaussianDelay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_GaussianDelay (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GaussianDelay", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GaussianDelay", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_GaussianDelay") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GaussianDelay", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GaussianDelay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_56__pyx_unpickle_GaussianDelay(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_56__pyx_unpickle_GaussianDelay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GaussianDelay", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x90b60d2:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x90b60d2 = (delay_type, mean_index, std_index))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x90b60d2) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x90b60d2:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x90b60d2 = (delay_type, mean_index, std_index))" % __pyx_checksum)
 *     __pyx_result = GaussianDelay.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x90b60d2:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x90b60d2 = (delay_type, mean_index, std_index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = GaussianDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x90, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x90b60d2:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x90b60d2 = (delay_type, mean_index, std_index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x90b60d2 = (delay_type, mean_index, std_index))" % __pyx_checksum)
 *     __pyx_result = GaussianDelay.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GaussianDelay__set_state(<GaussianDelay> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_GaussianDelay), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x90b60d2 = (delay_type, mean_index, std_index))" % __pyx_checksum)
 *     __pyx_result = GaussianDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GaussianDelay__set_state(<GaussianDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = GaussianDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GaussianDelay__set_state(<GaussianDelay> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_GaussianDelay__set_state(GaussianDelay __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_GaussianDelay__set_state(((struct __pyx_obj_9bioscrape_5types_GaussianDelay *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x90b60d2 = (delay_type, mean_index, std_index))" % __pyx_checksum)
 *     __pyx_result = GaussianDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GaussianDelay__set_state(<GaussianDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GaussianDelay__set_state(<GaussianDelay> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_GaussianDelay__set_state(GaussianDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.mean_index = __pyx_state[1]; __pyx_result.std_index = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_GaussianDelay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GaussianDelay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_GaussianDelay__set_state(<GaussianDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GaussianDelay__set_state(GaussianDelay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.mean_index = __pyx_state[1]; __pyx_result.std_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_GaussianDelay__set_state(struct __pyx_obj_9bioscrape_5types_GaussianDelay *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9bioscrape_5types_DelayType __pyx_t_1;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GaussianDelay__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_GaussianDelay__set_state(GaussianDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.mean_index = __pyx_state[1]; __pyx_result.std_index = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = ((__pyx_t_9bioscrape_5types_DelayType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_DelayType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.delay_type = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->mean_index = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->std_index = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_GaussianDelay__set_state(GaussianDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.mean_index = __pyx_state[1]; __pyx_result.std_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.mean_index = __pyx_state[1]; __pyx_result.std_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)) : __Pyx_PyObject_CallOneArg(__pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 3));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_GaussianDelay__set_state(GaussianDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.mean_index = __pyx_state[1]; __pyx_result.std_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_GaussianDelay__set_state(<GaussianDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GaussianDelay__set_state(GaussianDelay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.mean_index = __pyx_state[1]; __pyx_result.std_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GaussianDelay__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_GammaDelay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_59__pyx_unpickle_GammaDelay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_59__pyx_unpickle_GammaDelay = {"__pyx_unpickle_GammaDelay", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_59__pyx_unpickle_GammaDelay, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_59__pyx_unpickle_GammaDelay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_GammaDelay (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GammaDelay", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GammaDelay", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_GammaDelay") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GammaDelay", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GammaDelay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_58__pyx_unpickle_GammaDelay(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_58__pyx_unpickle_GammaDelay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GammaDelay", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xe2181f8:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe2181f8 = (delay_type, k_index, theta_index))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xe2181f8) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xe2181f8:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe2181f8 = (delay_type, k_index, theta_index))" % __pyx_checksum)
 *     __pyx_result = GammaDelay.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xe2181f8:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe2181f8 = (delay_type, k_index, theta_index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = GammaDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xe2, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xe2181f8:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe2181f8 = (delay_type, k_index, theta_index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe2181f8 = (delay_type, k_index, theta_index))" % __pyx_checksum)
 *     __pyx_result = GammaDelay.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GammaDelay__set_state(<GammaDelay> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_GammaDelay), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe2181f8 = (delay_type, k_index, theta_index))" % __pyx_checksum)
 *     __pyx_result = GammaDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GammaDelay__set_state(<GammaDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = GammaDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GammaDelay__set_state(<GammaDelay> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_GammaDelay__set_state(GammaDelay __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_GammaDelay__set_state(((struct __pyx_obj_9bioscrape_5types_GammaDelay *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xe2181f8 = (delay_type, k_index, theta_index))" % __pyx_checksum)
 *     __pyx_result = GammaDelay.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GammaDelay__set_state(<GammaDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GammaDelay__set_state(<GammaDelay> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_GammaDelay__set_state(GammaDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.k_index = __pyx_state[1]; __pyx_result.theta_index = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_GammaDelay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GammaDelay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_GammaDelay__set_state(<GammaDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GammaDelay__set_state(GammaDelay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.k_index = __pyx_state[1]; __pyx_result.theta_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_GammaDelay__set_state(struct __pyx_obj_9bioscrape_5types_GammaDelay *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9bioscrape_5types_DelayType __pyx_t_1;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GammaDelay__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_GammaDelay__set_state(GammaDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.k_index = __pyx_state[1]; __pyx_result.theta_index = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = ((__pyx_t_9bioscrape_5types_DelayType)__Pyx_PyInt_As___pyx_t_9bioscrape_5types_DelayType(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0))); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.delay_type = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->k_index = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->theta_index = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_GammaDelay__set_state(GammaDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.k_index = __pyx_state[1]; __pyx_result.theta_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.k_index = __pyx_state[1]; __pyx_result.theta_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)) : __Pyx_PyObject_CallOneArg(__pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 3));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_GammaDelay__set_state(GammaDelay __pyx_result, tuple __pyx_state):
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.k_index = __pyx_state[1]; __pyx_result.theta_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_GammaDelay__set_state(<GammaDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GammaDelay__set_state(GammaDelay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.k_index = __pyx_state[1]; __pyx_result.theta_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GammaDelay__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Rule(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_61__pyx_unpickle_Rule(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_61__pyx_unpickle_Rule = {"__pyx_unpickle_Rule", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_61__pyx_unpickle_Rule, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_61__pyx_unpickle_Rule(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Rule (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Rule", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Rule", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Rule") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Rule", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Rule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_60__pyx_unpickle_Rule(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_60__pyx_unpickle_Rule(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Rule", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x1ce7080:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1ce7080 = (frequency_flag))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x1ce7080) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x1ce7080:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1ce7080 = (frequency_flag))" % __pyx_checksum)
 *     __pyx_result = Rule.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x1ce7080:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1ce7080 = (frequency_flag))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Rule.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x1c, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x1ce7080:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1ce7080 = (frequency_flag))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1ce7080 = (frequency_flag))" % __pyx_checksum)
 *     __pyx_result = Rule.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Rule__set_state(<Rule> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_Rule), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1ce7080 = (frequency_flag))" % __pyx_checksum)
 *     __pyx_result = Rule.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Rule__set_state(<Rule> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Rule.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Rule__set_state(<Rule> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Rule__set_state(Rule __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_Rule__set_state(((struct __pyx_obj_9bioscrape_5types_Rule *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1ce7080 = (frequency_flag))" % __pyx_checksum)
 *     __pyx_result = Rule.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Rule__set_state(<Rule> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Rule__set_state(<Rule> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Rule__set_state(Rule __pyx_result, tuple __pyx_state):
 *     __pyx_result.frequency_flag = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Rule(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Rule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Rule__set_state(<Rule> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Rule__set_state(Rule __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.frequency_flag = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Rule__set_state(struct __pyx_obj_9bioscrape_5types_Rule *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Rule__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Rule__set_state(Rule __pyx_result, tuple __pyx_state):
 *     __pyx_result.frequency_flag = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->frequency_flag = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Rule__set_state(Rule __pyx_result, tuple __pyx_state):
 *     __pyx_result.frequency_flag = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.frequency_flag = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Rule__set_state(Rule __pyx_result, tuple __pyx_state):
 *     __pyx_result.frequency_flag = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Rule__set_state(<Rule> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Rule__set_state(Rule __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.frequency_flag = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Rule__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_AdditiveAssignmentRule(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_63__pyx_unpickle_AdditiveAssignmentRule(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_63__pyx_unpickle_AdditiveAssignmentRule = {"__pyx_unpickle_AdditiveAssignmentRule", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_63__pyx_unpickle_AdditiveAssignmentRule, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_63__pyx_unpickle_AdditiveAssignmentRule(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_AdditiveAssignmentRule (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AdditiveAssignmentRule", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AdditiveAssignmentRule", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_AdditiveAssignmentRule") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_AdditiveAssignmentRule", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_AdditiveAssignmentRule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_62__pyx_unpickle_AdditiveAssignmentRule(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_62__pyx_unpickle_AdditiveAssignmentRule(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_AdditiveAssignmentRule", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xf8da774:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf8da774 = (dest_index, frequency_flag, species_source_indices))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xf8da774) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xf8da774:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf8da774 = (dest_index, frequency_flag, species_source_indices))" % __pyx_checksum)
 *     __pyx_result = AdditiveAssignmentRule.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xf8da774:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf8da774 = (dest_index, frequency_flag, species_source_indices))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = AdditiveAssignmentRule.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xf8, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xf8da774:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf8da774 = (dest_index, frequency_flag, species_source_indices))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf8da774 = (dest_index, frequency_flag, species_source_indices))" % __pyx_checksum)
 *     __pyx_result = AdditiveAssignmentRule.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AdditiveAssignmentRule__set_state(<AdditiveAssignmentRule> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_AdditiveAssignmentRule), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf8da774 = (dest_index, frequency_flag, species_source_indices))" % __pyx_checksum)
 *     __pyx_result = AdditiveAssignmentRule.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_AdditiveAssignmentRule__set_state(<AdditiveAssignmentRule> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = AdditiveAssignmentRule.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AdditiveAssignmentRule__set_state(<AdditiveAssignmentRule> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_AdditiveAssignmentRule__set_state(AdditiveAssignmentRule __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_AdditiveAssignmentRule__set_state(((struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf8da774 = (dest_index, frequency_flag, species_source_indices))" % __pyx_checksum)
 *     __pyx_result = AdditiveAssignmentRule.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_AdditiveAssignmentRule__set_state(<AdditiveAssignmentRule> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_AdditiveAssignmentRule__set_state(<AdditiveAssignmentRule> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_AdditiveAssignmentRule__set_state(AdditiveAssignmentRule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.species_source_indices = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_AdditiveAssignmentRule(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_AdditiveAssignmentRule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_AdditiveAssignmentRule__set_state(<AdditiveAssignmentRule> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_AdditiveAssignmentRule__set_state(AdditiveAssignmentRule __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.species_source_indices = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_AdditiveAssignmentRule__set_state(struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  double __pyx_t_2;
  std::vector<int>  __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_AdditiveAssignmentRule__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_AdditiveAssignmentRule__set_state(AdditiveAssignmentRule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.species_source_indices = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->dest_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.frequency_flag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_vector_from_py_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->species_source_indices = __pyx_t_3;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_AdditiveAssignmentRule__set_state(AdditiveAssignmentRule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.species_source_indices = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 > 3) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "(tree fragment)":14
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.species_source_indices = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_8 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)) : __Pyx_PyObject_CallOneArg(__pyx_t_10, PyTuple_GET_ITEM(__pyx_v___pyx_state, 3));
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_AdditiveAssignmentRule__set_state(AdditiveAssignmentRule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.species_source_indices = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_AdditiveAssignmentRule__set_state(<AdditiveAssignmentRule> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_AdditiveAssignmentRule__set_state(AdditiveAssignmentRule __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.species_source_indices = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_AdditiveAssignmentRule__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_GeneralAssignmentRule(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_65__pyx_unpickle_GeneralAssignmentRule(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_65__pyx_unpickle_GeneralAssignmentRule = {"__pyx_unpickle_GeneralAssignmentRule", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_65__pyx_unpickle_GeneralAssignmentRule, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_65__pyx_unpickle_GeneralAssignmentRule(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_GeneralAssignmentRule (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GeneralAssignmentRule", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GeneralAssignmentRule", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_GeneralAssignmentRule") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GeneralAssignmentRule", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GeneralAssignmentRule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_64__pyx_unpickle_GeneralAssignmentRule(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_64__pyx_unpickle_GeneralAssignmentRule(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GeneralAssignmentRule", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xceb974e:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xceb974e) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xceb974e:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 *     __pyx_result = GeneralAssignmentRule.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xceb974e:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = GeneralAssignmentRule.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xce, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xceb974e:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 *     __pyx_result = GeneralAssignmentRule.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GeneralAssignmentRule__set_state(<GeneralAssignmentRule> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_GeneralAssignmentRule), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 *     __pyx_result = GeneralAssignmentRule.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GeneralAssignmentRule__set_state(<GeneralAssignmentRule> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = GeneralAssignmentRule.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GeneralAssignmentRule__set_state(<GeneralAssignmentRule> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralAssignmentRule__set_state(GeneralAssignmentRule __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_GeneralAssignmentRule__set_state(((struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 *     __pyx_result = GeneralAssignmentRule.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GeneralAssignmentRule__set_state(<GeneralAssignmentRule> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GeneralAssignmentRule__set_state(<GeneralAssignmentRule> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_GeneralAssignmentRule__set_state(GeneralAssignmentRule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_GeneralAssignmentRule(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GeneralAssignmentRule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_GeneralAssignmentRule__set_state(<GeneralAssignmentRule> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralAssignmentRule__set_state(GeneralAssignmentRule __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_GeneralAssignmentRule__set_state(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GeneralAssignmentRule__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralAssignmentRule__set_state(GeneralAssignmentRule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->dest_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.frequency_flag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->param_flag = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3), __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 3);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v___pyx_result->rhs);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->rhs));
  __pyx_v___pyx_result->rhs = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_GeneralAssignmentRule__set_state(GeneralAssignmentRule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 4) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)) : __Pyx_PyObject_CallOneArg(__pyx_t_10, PyTuple_GET_ITEM(__pyx_v___pyx_state, 4));
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_GeneralAssignmentRule__set_state(GeneralAssignmentRule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_GeneralAssignmentRule__set_state(<GeneralAssignmentRule> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralAssignmentRule__set_state(GeneralAssignmentRule __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GeneralAssignmentRule__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_GeneralODERule(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_67__pyx_unpickle_GeneralODERule(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_67__pyx_unpickle_GeneralODERule = {"__pyx_unpickle_GeneralODERule", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_67__pyx_unpickle_GeneralODERule, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_67__pyx_unpickle_GeneralODERule(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_GeneralODERule (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GeneralODERule", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GeneralODERule", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_GeneralODERule") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_GeneralODERule", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GeneralODERule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_66__pyx_unpickle_GeneralODERule(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_66__pyx_unpickle_GeneralODERule(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GeneralODERule", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xceb974e:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xceb974e) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xceb974e:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 *     __pyx_result = GeneralODERule.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xceb974e:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = GeneralODERule.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xce, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xceb974e:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 *     __pyx_result = GeneralODERule.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GeneralODERule__set_state(<GeneralODERule> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_GeneralODERule), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 *     __pyx_result = GeneralODERule.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GeneralODERule__set_state(<GeneralODERule> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = GeneralODERule.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GeneralODERule__set_state(<GeneralODERule> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralODERule__set_state(GeneralODERule __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_GeneralODERule__set_state(((struct __pyx_obj_9bioscrape_5types_GeneralODERule *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xceb974e = (dest_index, frequency_flag, param_flag, rhs))" % __pyx_checksum)
 *     __pyx_result = GeneralODERule.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_GeneralODERule__set_state(<GeneralODERule> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_GeneralODERule__set_state(<GeneralODERule> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_GeneralODERule__set_state(GeneralODERule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_GeneralODERule(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GeneralODERule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_GeneralODERule__set_state(<GeneralODERule> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralODERule__set_state(GeneralODERule __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_GeneralODERule__set_state(struct __pyx_obj_9bioscrape_5types_GeneralODERule *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_GeneralODERule__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralODERule__set_state(GeneralODERule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->dest_index = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.frequency_flag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->param_flag = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3), __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 3);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v___pyx_result->rhs);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->rhs));
  __pyx_v___pyx_result->rhs = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_GeneralODERule__set_state(GeneralODERule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 4) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_9, PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)) : __Pyx_PyObject_CallOneArg(__pyx_t_10, PyTuple_GET_ITEM(__pyx_v___pyx_state, 4));
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_GeneralODERule__set_state(GeneralODERule __pyx_result, tuple __pyx_state):
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_GeneralODERule__set_state(<GeneralODERule> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralODERule__set_state(GeneralODERule __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_GeneralODERule__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Volume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_69__pyx_unpickle_Volume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_69__pyx_unpickle_Volume = {"__pyx_unpickle_Volume", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_69__pyx_unpickle_Volume, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_69__pyx_unpickle_Volume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Volume (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Volume", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Volume", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Volume") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Volume", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_68__pyx_unpickle_Volume(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_68__pyx_unpickle_Volume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Volume", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x8ded253:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8ded253 = (current_volume))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x8ded253) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x8ded253:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8ded253 = (current_volume))" % __pyx_checksum)
 *     __pyx_result = Volume.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x8ded253:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8ded253 = (current_volume))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Volume.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x8d, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x8ded253:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8ded253 = (current_volume))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8ded253 = (current_volume))" % __pyx_checksum)
 *     __pyx_result = Volume.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_Volume), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8ded253 = (current_volume))" % __pyx_checksum)
 *     __pyx_result = Volume.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Volume.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_Volume__set_state(((struct __pyx_obj_9bioscrape_5types_Volume *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x8ded253 = (current_volume))" % __pyx_checksum)
 *     __pyx_result = Volume.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):
 *     __pyx_result.current_volume = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Volume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.current_volume = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Volume__set_state(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Volume__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):
 *     __pyx_result.current_volume = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->current_volume = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):
 *     __pyx_result.current_volume = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.current_volume = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) : __Pyx_PyObject_CallOneArg(__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 1));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):
 *     __pyx_result.current_volume = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.current_volume = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Volume__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_StochasticTimeThresholdVolume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_71__pyx_unpickle_StochasticTimeThresholdVolume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_71__pyx_unpickle_StochasticTimeThresholdVolume = {"__pyx_unpickle_StochasticTimeThresholdVolume", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_71__pyx_unpickle_StochasticTimeThresholdVolume, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_71__pyx_unpickle_StochasticTimeThresholdVolume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_StochasticTimeThresholdVolume (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StochasticTimeThresholdVolume", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StochasticTimeThresholdVolume", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_StochasticTimeThresholdVolume") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StochasticTimeThresholdVolume", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_StochasticTimeThresholdVolume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_70__pyx_unpickle_StochasticTimeThresholdVolume(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_70__pyx_unpickle_StochasticTimeThresholdVolume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_StochasticTimeThresholdVolume", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x0a0ee63:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x0a0ee63 = (average_division_volume, cell_cycle_time, current_volume, division_noise, division_time, growth_rate))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x0a0ee63) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x0a0ee63:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x0a0ee63 = (average_division_volume, cell_cycle_time, current_volume, division_noise, division_time, growth_rate))" % __pyx_checksum)
 *     __pyx_result = StochasticTimeThresholdVolume.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x0a0ee63:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x0a0ee63 = (average_division_volume, cell_cycle_time, current_volume, division_noise, division_time, growth_rate))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = StochasticTimeThresholdVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x0a, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x0a0ee63:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x0a0ee63 = (average_division_volume, cell_cycle_time, current_volume, division_noise, division_time, growth_rate))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x0a0ee63 = (average_division_volume, cell_cycle_time, current_volume, division_noise, division_time, growth_rate))" % __pyx_checksum)
 *     __pyx_result = StochasticTimeThresholdVolume.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StochasticTimeThresholdVolume__set_state(<StochasticTimeThresholdVolume> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_StochasticTimeThresholdVolume), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x0a0ee63 = (average_division_volume, cell_cycle_time, current_volume, division_noise, division_time, growth_rate))" % __pyx_checksum)
 *     __pyx_result = StochasticTimeThresholdVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_StochasticTimeThresholdVolume__set_state(<StochasticTimeThresholdVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = StochasticTimeThresholdVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StochasticTimeThresholdVolume__set_state(<StochasticTimeThresholdVolume> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_StochasticTimeThresholdVolume__set_state(StochasticTimeThresholdVolume __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_StochasticTimeThresholdVolume__set_state(((struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x0a0ee63 = (average_division_volume, cell_cycle_time, current_volume, division_noise, division_time, growth_rate))" % __pyx_checksum)
 *     __pyx_result = StochasticTimeThresholdVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_StochasticTimeThresholdVolume__set_state(<StochasticTimeThresholdVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StochasticTimeThresholdVolume__set_state(<StochasticTimeThresholdVolume> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_StochasticTimeThresholdVolume__set_state(StochasticTimeThresholdVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.cell_cycle_time = __pyx_state[1]; __pyx_result.current_volume = __pyx_state[2]; __pyx_result.division_noise = __pyx_state[3]; __pyx_result.division_time = __pyx_state[4]; __pyx_result.growth_rate = __pyx_state[5]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_StochasticTimeThresholdVolume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_StochasticTimeThresholdVolume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_StochasticTimeThresholdVolume__set_state(<StochasticTimeThresholdVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_StochasticTimeThresholdVolume__set_state(StochasticTimeThresholdVolume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.cell_cycle_time = __pyx_state[1]; __pyx_result.current_volume = __pyx_state[2]; __pyx_result.division_noise = __pyx_state[3]; __pyx_result.division_time = __pyx_state[4]; __pyx_result.growth_rate = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_StochasticTimeThresholdVolume__set_state(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_StochasticTimeThresholdVolume__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_StochasticTimeThresholdVolume__set_state(StochasticTimeThresholdVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.cell_cycle_time = __pyx_state[1]; __pyx_result.current_volume = __pyx_state[2]; __pyx_result.division_noise = __pyx_state[3]; __pyx_result.division_time = __pyx_state[4]; __pyx_result.growth_rate = __pyx_state[5]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->average_division_volume = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->cell_cycle_time = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.current_volume = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->division_noise = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->division_time = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->growth_rate = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_StochasticTimeThresholdVolume__set_state(StochasticTimeThresholdVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.cell_cycle_time = __pyx_state[1]; __pyx_result.current_volume = __pyx_state[2]; __pyx_result.division_noise = __pyx_state[3]; __pyx_result.division_time = __pyx_state[4]; __pyx_result.growth_rate = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 6) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.cell_cycle_time = __pyx_state[1]; __pyx_result.current_volume = __pyx_state[2]; __pyx_result.division_noise = __pyx_state[3]; __pyx_result.division_time = __pyx_state[4]; __pyx_result.growth_rate = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6)) : __Pyx_PyObject_CallOneArg(__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_StochasticTimeThresholdVolume__set_state(StochasticTimeThresholdVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.cell_cycle_time = __pyx_state[1]; __pyx_result.current_volume = __pyx_state[2]; __pyx_result.division_noise = __pyx_state[3]; __pyx_result.division_time = __pyx_state[4]; __pyx_result.growth_rate = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_StochasticTimeThresholdVolume__set_state(<StochasticTimeThresholdVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_StochasticTimeThresholdVolume__set_state(StochasticTimeThresholdVolume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.cell_cycle_time = __pyx_state[1]; __pyx_result.current_volume = __pyx_state[2]; __pyx_result.division_noise = __pyx_state[3]; __pyx_result.division_time = __pyx_state[4]; __pyx_result.growth_rate = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_StochasticTimeThresholdVolume__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_StateDependentVolume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_73__pyx_unpickle_StateDependentVolume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_73__pyx_unpickle_StateDependentVolume = {"__pyx_unpickle_StateDependentVolume", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_73__pyx_unpickle_StateDependentVolume, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_73__pyx_unpickle_StateDependentVolume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_StateDependentVolume (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StateDependentVolume", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StateDependentVolume", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_StateDependentVolume") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StateDependentVolume", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_StateDependentVolume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_72__pyx_unpickle_StateDependentVolume(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_72__pyx_unpickle_StateDependentVolume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_StateDependentVolume", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x2b6d7b7:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2b6d7b7 = (average_division_volume, current_volume, division_noise, division_volume, growth_rate))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x2b6d7b7) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x2b6d7b7:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2b6d7b7 = (average_division_volume, current_volume, division_noise, division_volume, growth_rate))" % __pyx_checksum)
 *     __pyx_result = StateDependentVolume.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x2b6d7b7:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2b6d7b7 = (average_division_volume, current_volume, division_noise, division_volume, growth_rate))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = StateDependentVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x2b, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x2b6d7b7:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2b6d7b7 = (average_division_volume, current_volume, division_noise, division_volume, growth_rate))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2b6d7b7 = (average_division_volume, current_volume, division_noise, division_volume, growth_rate))" % __pyx_checksum)
 *     __pyx_result = StateDependentVolume.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StateDependentVolume__set_state(<StateDependentVolume> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_StateDependentVolume), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2b6d7b7 = (average_division_volume, current_volume, division_noise, division_volume, growth_rate))" % __pyx_checksum)
 *     __pyx_result = StateDependentVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_StateDependentVolume__set_state(<StateDependentVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = StateDependentVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StateDependentVolume__set_state(<StateDependentVolume> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_StateDependentVolume__set_state(StateDependentVolume __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_StateDependentVolume__set_state(((struct __pyx_obj_9bioscrape_5types_StateDependentVolume *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x2b6d7b7 = (average_division_volume, current_volume, division_noise, division_volume, growth_rate))" % __pyx_checksum)
 *     __pyx_result = StateDependentVolume.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_StateDependentVolume__set_state(<StateDependentVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StateDependentVolume__set_state(<StateDependentVolume> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_StateDependentVolume__set_state(StateDependentVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.current_volume = __pyx_state[1]; __pyx_result.division_noise = __pyx_state[2]; __pyx_result.division_volume = __pyx_state[3]; __pyx_result.growth_rate = __pyx_state[4]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_StateDependentVolume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_StateDependentVolume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_StateDependentVolume__set_state(<StateDependentVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_StateDependentVolume__set_state(StateDependentVolume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.current_volume = __pyx_state[1]; __pyx_result.division_noise = __pyx_state[2]; __pyx_result.division_volume = __pyx_state[3]; __pyx_result.growth_rate = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_StateDependentVolume__set_state(struct __pyx_obj_9bioscrape_5types_StateDependentVolume *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_StateDependentVolume__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_StateDependentVolume__set_state(StateDependentVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.current_volume = __pyx_state[1]; __pyx_result.division_noise = __pyx_state[2]; __pyx_result.division_volume = __pyx_state[3]; __pyx_result.growth_rate = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->average_division_volume = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.current_volume = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->division_noise = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->division_volume = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 4), __pyx_ptype_9bioscrape_5types_Term))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 4);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v___pyx_result->growth_rate);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->growth_rate));
  __pyx_v___pyx_result->growth_rate = ((struct __pyx_obj_9bioscrape_5types_Term *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_StateDependentVolume__set_state(StateDependentVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.current_volume = __pyx_state[1]; __pyx_result.division_noise = __pyx_state[2]; __pyx_result.division_volume = __pyx_state[3]; __pyx_result.growth_rate = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 5) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.current_volume = __pyx_state[1]; __pyx_result.division_noise = __pyx_state[2]; __pyx_result.division_volume = __pyx_state[3]; __pyx_result.growth_rate = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)) : __Pyx_PyObject_CallOneArg(__pyx_t_8, PyTuple_GET_ITEM(__pyx_v___pyx_state, 5));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_StateDependentVolume__set_state(StateDependentVolume __pyx_result, tuple __pyx_state):
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.current_volume = __pyx_state[1]; __pyx_result.division_noise = __pyx_state[2]; __pyx_result.division_volume = __pyx_state[3]; __pyx_result.growth_rate = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_StateDependentVolume__set_state(<StateDependentVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_StateDependentVolume__set_state(StateDependentVolume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.current_volume = __pyx_state[1]; __pyx_result.division_noise = __pyx_state[2]; __pyx_result.division_volume = __pyx_state[3]; __pyx_result.growth_rate = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_StateDependentVolume__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Schnitz(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9bioscrape_5types_75__pyx_unpickle_Schnitz(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9bioscrape_5types_75__pyx_unpickle_Schnitz = {"__pyx_unpickle_Schnitz", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_75__pyx_unpickle_Schnitz, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9bioscrape_5types_75__pyx_unpickle_Schnitz(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Schnitz (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Schnitz", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Schnitz", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Schnitz") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Schnitz", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Schnitz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9bioscrape_5types_74__pyx_unpickle_Schnitz(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9bioscrape_5types_74__pyx_unpickle_Schnitz(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Schnitz", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xa30f800:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xa30f800 = (data, daughter1, daughter2, parent, time, volume))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xa30f800) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xa30f800:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xa30f800 = (data, daughter1, daughter2, parent, time, volume))" % __pyx_checksum)
 *     __pyx_result = Schnitz.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xa30f800:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xa30f800 = (data, daughter1, daughter2, parent, time, volume))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Schnitz.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xa3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xa30f800:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xa30f800 = (data, daughter1, daughter2, parent, time, volume))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xa30f800 = (data, daughter1, daughter2, parent, time, volume))" % __pyx_checksum)
 *     __pyx_result = Schnitz.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Schnitz__set_state(<Schnitz> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9bioscrape_5types_Schnitz), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xa30f800 = (data, daughter1, daughter2, parent, time, volume))" % __pyx_checksum)
 *     __pyx_result = Schnitz.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Schnitz__set_state(<Schnitz> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Schnitz.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Schnitz__set_state(<Schnitz> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Schnitz__set_state(Schnitz __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_9bioscrape_5types___pyx_unpickle_Schnitz__set_state(((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xa30f800 = (data, daughter1, daughter2, parent, time, volume))" % __pyx_checksum)
 *     __pyx_result = Schnitz.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Schnitz__set_state(<Schnitz> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Schnitz__set_state(<Schnitz> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Schnitz__set_state(Schnitz __pyx_result, tuple __pyx_state):
 *     __pyx_result.data = __pyx_state[0]; __pyx_result.daughter1 = __pyx_state[1]; __pyx_result.daughter2 = __pyx_state[2]; __pyx_result.parent = __pyx_state[3]; __pyx_result.time = __pyx_state[4]; __pyx_result.volume = __pyx_state[5]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Schnitz(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Schnitz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Schnitz__set_state(<Schnitz> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Schnitz__set_state(Schnitz __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.data = __pyx_state[0]; __pyx_result.daughter1 = __pyx_state[1]; __pyx_result.daughter2 = __pyx_state[2]; __pyx_result.parent = __pyx_state[3]; __pyx_result.time = __pyx_state[4]; __pyx_result.volume = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_9bioscrape_5types___pyx_unpickle_Schnitz__set_state(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Schnitz__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Schnitz__set_state(Schnitz __pyx_result, tuple __pyx_state):
 *     __pyx_result.data = __pyx_state[0]; __pyx_result.daughter1 = __pyx_state[1]; __pyx_result.daughter2 = __pyx_state[2]; __pyx_result.parent = __pyx_state[3]; __pyx_result.time = __pyx_state[4]; __pyx_result.volume = __pyx_state[5]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0), __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 0);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->data);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->data));
  __pyx_v___pyx_result->data = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1), __pyx_ptype_9bioscrape_5types_Schnitz))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->daughter1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->daughter1));
  __pyx_v___pyx_result->daughter1 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2), __pyx_ptype_9bioscrape_5types_Schnitz))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 2);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->daughter2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->daughter2));
  __pyx_v___pyx_result->daughter2 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3), __pyx_ptype_9bioscrape_5types_Schnitz))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 3);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->parent));
  __pyx_v___pyx_result->parent = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 4), __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 4);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->time);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->time));
  __pyx_v___pyx_result->time = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 5), __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 5);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->volume);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->volume));
  __pyx_v___pyx_result->volume = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Schnitz__set_state(Schnitz __pyx_result, tuple __pyx_state):
 *     __pyx_result.data = __pyx_state[0]; __pyx_result.daughter1 = __pyx_state[1]; __pyx_result.daughter2 = __pyx_state[2]; __pyx_result.parent = __pyx_state[3]; __pyx_result.time = __pyx_state[4]; __pyx_result.volume = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 6) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.data = __pyx_state[0]; __pyx_result.daughter1 = __pyx_state[1]; __pyx_result.daughter2 = __pyx_state[2]; __pyx_result.parent = __pyx_state[3]; __pyx_result.time = __pyx_state[4]; __pyx_result.volume = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 6));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Schnitz__set_state(Schnitz __pyx_result, tuple __pyx_state):
 *     __pyx_result.data = __pyx_state[0]; __pyx_result.daughter1 = __pyx_state[1]; __pyx_result.daughter2 = __pyx_state[2]; __pyx_result.parent = __pyx_state[3]; __pyx_result.time = __pyx_state[4]; __pyx_result.volume = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Schnitz__set_state(<Schnitz> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Schnitz__set_state(Schnitz __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.data = __pyx_state[0]; __pyx_result.daughter1 = __pyx_state[1]; __pyx_result.daughter2 = __pyx_state[2]; __pyx_result.parent = __pyx_state[3]; __pyx_result.time = __pyx_state[4]; __pyx_result.volume = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bioscrape.types.__pyx_unpickle_Schnitz__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyArray_Descr *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":265
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":271
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 272, __pyx_L1_error)

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":275
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 276, __pyx_L1_error)

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":279
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_7 = PyArray_DESCR(__pyx_v_self);
  __pyx_t_3 = ((PyObject *)__pyx_t_7);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":303
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 306, __pyx_L1_error)

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;
      case NPY_UBYTE:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":308
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      __pyx_v_f = ((char *)"B");
      break;
      case NPY_SHORT:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      __pyx_v_f = ((char *)"h");
      break;
      case NPY_USHORT:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      __pyx_v_f = ((char *)"H");
      break;
      case NPY_INT:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      __pyx_v_f = ((char *)"i");
      break;
      case NPY_UINT:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":312
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      __pyx_v_f = ((char *)"I");
      break;
      case NPY_LONG:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":313
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      __pyx_v_f = ((char *)"l");
      break;
      case NPY_ULONG:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":314
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      __pyx_v_f = ((char *)"L");
      break;
      case NPY_LONGLONG:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":315
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      __pyx_v_f = ((char *)"q");
      break;
      case NPY_ULONGLONG:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":316
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      __pyx_v_f = ((char *)"Q");
      break;
      case NPY_FLOAT:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":317
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      __pyx_v_f = ((char *)"f");
      break;
      case NPY_DOUBLE:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":318
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      __pyx_v_f = ((char *)"d");
      break;
      case NPY_LONGDOUBLE:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":319
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      __pyx_v_f = ((char *)"g");
      break;
      case NPY_CFLOAT:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":320
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      __pyx_v_f = ((char *)"Zf");
      break;
      case NPY_CDOUBLE:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":321
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      __pyx_v_f = ((char *)"Zd");
      break;
      case NPY_CLONGDOUBLE:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":322
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      __pyx_v_f = ((char *)"Zg");
      break;
      case NPY_OBJECT:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":323
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":325
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 325, __pyx_L1_error)
      break;
    }

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":326
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":327
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":329
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":330
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":331
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":332
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 332, __pyx_L1_error)
    __pyx_v_f = __pyx_t_9;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":335
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":339
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":341
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":822
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":828
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":831
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":834
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":838
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 851, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":852
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 852, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 853, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 853, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 853, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 856, __pyx_L1_error)

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":859
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 860, __pyx_L1_error)

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":870
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":871
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":872
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":873
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":875
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":878
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 880, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 880, __pyx_L1_error)

        /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":883
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":884
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":885
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":886
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":887
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":888
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":889
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":890
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":891
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":892
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":893
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":894
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":895
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":896
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":897
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":898
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":899
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":901
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 901, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":902
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":906
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 906, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":907
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1024
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1027
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1029
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1030
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1036
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1036, __pyx_L3_error)

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1037, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1038, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1038, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1042
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1042, __pyx_L3_error)

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1043, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1044, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1044, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1048
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1048, __pyx_L3_error)

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1049, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1050
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1050, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1050, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pxd":476
 *     cdef Volume copy(self)
 * 
 *     cdef inline void set_volume(self, double v):             # <<<<<<<<<<<<<<
 *         """
 *         Set the volume to some number > 0
 */

static CYTHON_INLINE void __pyx_f_9bioscrape_5types_6Volume_set_volume(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self, double __pyx_v_v) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_volume", 0);

  /* "bioscrape/types.pxd":482
 *         :return: None
 *         """
 *         self.current_volume = v             # <<<<<<<<<<<<<<
 * 
 *     cdef inline double get_volume(self):
 */
  __pyx_v_self->current_volume = __pyx_v_v;

  /* "bioscrape/types.pxd":476
 *     cdef Volume copy(self)
 * 
 *     cdef inline void set_volume(self, double v):             # <<<<<<<<<<<<<<
 *         """
 *         Set the volume to some number > 0
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pxd":484
 *         self.current_volume = v
 * 
 *     cdef inline double get_volume(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the current volume
 */

static CYTHON_INLINE double __pyx_f_9bioscrape_5types_6Volume_get_volume(struct __pyx_obj_9bioscrape_5types_Volume *__pyx_v_self) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume", 0);

  /* "bioscrape/types.pxd":489
 *         :return: (double) the current volume.
 *         """
 *         return self.current_volume             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self->current_volume;
  goto __pyx_L0;

  /* "bioscrape/types.pxd":484
 *         self.current_volume = v
 * 
 *     cdef inline double get_volume(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the current volume
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pxd":652
 *     cdef Schnitz daughter2
 * 
 *     cdef inline np.ndarray get_data(self):             # <<<<<<<<<<<<<<
 *         return self.data
 * 
 */

static CYTHON_INLINE PyArrayObject *__pyx_f_9bioscrape_5types_7Schnitz_get_data(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_data", 0);

  /* "bioscrape/types.pxd":653
 * 
 *     cdef inline np.ndarray get_data(self):
 *         return self.data             # <<<<<<<<<<<<<<
 * 
 *     cdef inline np.ndarray get_time(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->data));
  __pyx_r = __pyx_v_self->data;
  goto __pyx_L0;

  /* "bioscrape/types.pxd":652
 *     cdef Schnitz daughter2
 * 
 *     cdef inline np.ndarray get_data(self):             # <<<<<<<<<<<<<<
 *         return self.data
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pxd":655
 *         return self.data
 * 
 *     cdef inline np.ndarray get_time(self):             # <<<<<<<<<<<<<<
 *         return self.time
 * 
 */

static CYTHON_INLINE PyArrayObject *__pyx_f_9bioscrape_5types_7Schnitz_get_time(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_time", 0);

  /* "bioscrape/types.pxd":656
 * 
 *     cdef inline np.ndarray get_time(self):
 *         return self.time             # <<<<<<<<<<<<<<
 * 
 *     cdef inline np.ndarray get_volume(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->time));
  __pyx_r = __pyx_v_self->time;
  goto __pyx_L0;

  /* "bioscrape/types.pxd":655
 *         return self.data
 * 
 *     cdef inline np.ndarray get_time(self):             # <<<<<<<<<<<<<<
 *         return self.time
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pxd":658
 *         return self.time
 * 
 *     cdef inline np.ndarray get_volume(self):             # <<<<<<<<<<<<<<
 *         return self.volume
 * 
 */

static CYTHON_INLINE PyArrayObject *__pyx_f_9bioscrape_5types_7Schnitz_get_volume(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volume", 0);

  /* "bioscrape/types.pxd":659
 * 
 *     cdef inline np.ndarray get_volume(self):
 *         return self.volume             # <<<<<<<<<<<<<<
 * 
 *     cdef inline Schnitz get_parent(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->volume));
  __pyx_r = __pyx_v_self->volume;
  goto __pyx_L0;

  /* "bioscrape/types.pxd":658
 *         return self.time
 * 
 *     cdef inline np.ndarray get_volume(self):             # <<<<<<<<<<<<<<
 *         return self.volume
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pxd":661
 *         return self.volume
 * 
 *     cdef inline Schnitz get_parent(self):             # <<<<<<<<<<<<<<
 *         return self.parent
 * 
 */

static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Schnitz_get_parent(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_parent", 0);

  /* "bioscrape/types.pxd":662
 * 
 *     cdef inline Schnitz get_parent(self):
 *         return self.parent             # <<<<<<<<<<<<<<
 * 
 *     cdef inline Schnitz get_daughter_1(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_v_self->parent;
  goto __pyx_L0;

  /* "bioscrape/types.pxd":661
 *         return self.volume
 * 
 *     cdef inline Schnitz get_parent(self):             # <<<<<<<<<<<<<<
 *         return self.parent
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pxd":664
 *         return self.parent
 * 
 *     cdef inline Schnitz get_daughter_1(self):             # <<<<<<<<<<<<<<
 *         return self.daughter1
 * 
 */

static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_1(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_daughter_1", 0);

  /* "bioscrape/types.pxd":665
 * 
 *     cdef inline Schnitz get_daughter_1(self):
 *         return self.daughter1             # <<<<<<<<<<<<<<
 * 
 *     cdef inline Schnitz get_daughter_2(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->daughter1));
  __pyx_r = __pyx_v_self->daughter1;
  goto __pyx_L0;

  /* "bioscrape/types.pxd":664
 *         return self.parent
 * 
 *     cdef inline Schnitz get_daughter_1(self):             # <<<<<<<<<<<<<<
 *         return self.daughter1
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pxd":667
 *         return self.daughter1
 * 
 *     cdef inline Schnitz get_daughter_2(self):             # <<<<<<<<<<<<<<
 *         return self.daughter2
 * 
 */

static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_2(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self) {
  struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_daughter_2", 0);

  /* "bioscrape/types.pxd":668
 * 
 *     cdef inline Schnitz get_daughter_2(self):
 *         return self.daughter2             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void set_parent(self, Schnitz p):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->daughter2));
  __pyx_r = __pyx_v_self->daughter2;
  goto __pyx_L0;

  /* "bioscrape/types.pxd":667
 *         return self.daughter1
 * 
 *     cdef inline Schnitz get_daughter_2(self):             # <<<<<<<<<<<<<<
 *         return self.daughter2
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pxd":670
 *         return self.daughter2
 * 
 *     cdef inline void set_parent(self, Schnitz p):             # <<<<<<<<<<<<<<
 *         self.parent = p
 * 
 */

static CYTHON_INLINE void __pyx_f_9bioscrape_5types_7Schnitz_set_parent(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_p) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_parent", 0);

  /* "bioscrape/types.pxd":671
 * 
 *     cdef inline void set_parent(self, Schnitz p):
 *         self.parent = p             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void set_daughters(self,Schnitz d1, Schnitz d2):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_p));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_p;

  /* "bioscrape/types.pxd":670
 *         return self.daughter2
 * 
 *     cdef inline void set_parent(self, Schnitz p):             # <<<<<<<<<<<<<<
 *         self.parent = p
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pxd":673
 *         self.parent = p
 * 
 *     cdef inline void set_daughters(self,Schnitz d1, Schnitz d2):             # <<<<<<<<<<<<<<
 *         self.daughter1 = d1
 *         self.daughter2 = d2
 */

static CYTHON_INLINE void __pyx_f_9bioscrape_5types_7Schnitz_set_daughters(struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_d1, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_d2) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_daughters", 0);

  /* "bioscrape/types.pxd":674
 * 
 *     cdef inline void set_daughters(self,Schnitz d1, Schnitz d2):
 *         self.daughter1 = d1             # <<<<<<<<<<<<<<
 *         self.daughter2 = d2
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_d1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_d1));
  __Pyx_GOTREF(__pyx_v_self->daughter1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->daughter1));
  __pyx_v_self->daughter1 = __pyx_v_d1;

  /* "bioscrape/types.pxd":675
 *     cdef inline void set_daughters(self,Schnitz d1, Schnitz d2):
 *         self.daughter1 = d1
 *         self.daughter2 = d2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_d2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_d2));
  __Pyx_GOTREF(__pyx_v_self->daughter2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->daughter2));
  __pyx_v_self->daughter2 = __pyx_v_d2;

  /* "bioscrape/types.pxd":673
 *         self.parent = p
 * 
 *     cdef inline void set_daughters(self,Schnitz d1, Schnitz d2):             # <<<<<<<<<<<<<<
 *         self.daughter1 = d1
 *         self.daughter2 = d2
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pxd":691
 * 
 * 
 *     cdef inline void add_schnitz(self, Schnitz s):             # <<<<<<<<<<<<<<
 *         """
 *         Add a schnitz to the lineage.
 */

static CYTHON_INLINE void __pyx_f_9bioscrape_5types_7Lineage_add_schnitz(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_v_s) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("add_schnitz", 0);

  /* "bioscrape/types.pxd":697
 *         :return: None
 *         """
 *         self.schnitzes.append(s)             # <<<<<<<<<<<<<<
 *         self.c_schnitzes.push_back(<void*> s)
 * 
 */
  if (unlikely(__pyx_v_self->schnitzes == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(3, 697, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Append(__pyx_v_self->schnitzes, ((PyObject *)__pyx_v_s)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 697, __pyx_L1_error)

  /* "bioscrape/types.pxd":698
 *         """
 *         self.schnitzes.append(s)
 *         self.c_schnitzes.push_back(<void*> s)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline unsigned size(self):
 */
  __pyx_v_self->c_schnitzes.push_back(((void *)__pyx_v_s));

  /* "bioscrape/types.pxd":691
 * 
 * 
 *     cdef inline void add_schnitz(self, Schnitz s):             # <<<<<<<<<<<<<<
 *         """
 *         Add a schnitz to the lineage.
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("bioscrape.types.Lineage.add_schnitz", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "bioscrape/types.pxd":700
 *         self.c_schnitzes.push_back(<void*> s)
 * 
 *     cdef inline unsigned size(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the total number of schnitzes in the lineage.
 */

static CYTHON_INLINE unsigned int __pyx_f_9bioscrape_5types_7Lineage_size(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self) {
  unsigned int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size", 0);

  /* "bioscrape/types.pxd":705
 *         :return: (int) size of lineage
 *         """
 *         return self.c_schnitzes.size()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline Schnitz get_schnitz(self, unsigned index):
 */
  __pyx_r = __pyx_v_self->c_schnitzes.size();
  goto __pyx_L0;

  /* "bioscrape/types.pxd":700
 *         self.c_schnitzes.push_back(<void*> s)
 * 
 *     cdef inline unsigned size(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the total number of schnitzes in the lineage.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bioscrape/types.pxd":707
 *         return self.c_schnitzes.size()
 * 
 *     cdef inline Schnitz get_schnitz(self, unsigned index):             # <<<<<<<<<<<<<<
 *         """
 *         Get a specific schnitz from the lineage
 */

static CYTHON_INLINE struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_f_9bioscrape_5types_7Lineage_get_schnitz(struct __pyx_obj_9bioscrape_5types_Lineage *__pyx_v_self, unsigned int __pyx_v_index) {
  struct __pyx_obj_9bioscrape_5types_Schnitz *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  __Pyx_RefNannySetupContext("get_schnitz", 0);

  /* "bioscrape/types.pxd":713
 *         :return: (Schnitz) the requested Schnitz
 *         """
 *         return (<Schnitz> (self.c_schnitzes[index]))             # <<<<<<<<<<<<<<
 * 
 * cdef class ExperimentalLineage(Lineage):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = (__pyx_v_self->c_schnitzes[__pyx_v_index]);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_1)));
  __pyx_r = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)__pyx_t_1);
  goto __pyx_L0;

  /* "bioscrape/types.pxd":707
 *         return self.c_schnitzes.size()
 * 
 *     cdef inline Schnitz get_schnitz(self, unsigned index):             # <<<<<<<<<<<<<<
 *         """
 *         Get a specific schnitz from the lineage
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((int)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9bioscrape_5types_Propensity __pyx_vtable_9bioscrape_5types_Propensity;

static PyObject *__pyx_tp_new_9bioscrape_5types_Propensity(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_Propensity *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_Propensity *)o);
  p->__pyx_vtab = __pyx_vtabptr_9bioscrape_5types_Propensity;
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_Propensity(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9bioscrape_5types_Propensity[] = {
  {"py_get_propensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_10Propensity_3py_get_propensity, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9bioscrape_5types_10Propensity_2py_get_propensity},
  {"py_get_volume_propensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_10Propensity_5py_get_volume_propensity, METH_VARARGS|METH_KEYWORDS, 0},
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_10Propensity_7initialize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9bioscrape_5types_10Propensity_6initialize},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_10Propensity_9get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9bioscrape_5types_10Propensity_8get_species_and_parameters},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_10Propensity_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_10Propensity_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_Propensity = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.Propensity", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_Propensity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Propensity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class for defining a propensity. Must contain a propensity type as well as two functions.\n    get_propensity returns a propensity given a state vector, parameter vector\n    get_volume_propensity is the same but also requires a volume\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_Propensity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_10Propensity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_Propensity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_ConstitutivePropensity __pyx_vtable_9bioscrape_5types_ConstitutivePropensity;

static PyObject *__pyx_tp_new_9bioscrape_5types_ConstitutivePropensity(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Propensity(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Propensity*)__pyx_vtabptr_9bioscrape_5types_ConstitutivePropensity;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_ConstitutivePropensity[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_22ConstitutivePropensity_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_ConstitutivePropensity = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.ConstitutivePropensity", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_ConstitutivePropensity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Propensity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A propensity class for constitutive propensities. (k)\n\n    Attributes:\n        rate_index (unsigned): the parameter index containing the rate k.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_ConstitutivePropensity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_22ConstitutivePropensity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_ConstitutivePropensity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_UnimolecularPropensity __pyx_vtable_9bioscrape_5types_UnimolecularPropensity;

static PyObject *__pyx_tp_new_9bioscrape_5types_UnimolecularPropensity(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Propensity(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Propensity*)__pyx_vtabptr_9bioscrape_5types_UnimolecularPropensity;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_UnimolecularPropensity[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_22UnimolecularPropensity_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_UnimolecularPropensity = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.UnimolecularPropensity", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_UnimolecularPropensity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Propensity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A propensity class for a unimolecular propensity (k*x)\n\n    Attributes:\n        rate_index (unsigned): the parameter index containing the rate k\n        species_index (unsigned): the species index containing the species x\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_UnimolecularPropensity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_22UnimolecularPropensity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_UnimolecularPropensity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_BimolecularPropensity __pyx_vtable_9bioscrape_5types_BimolecularPropensity;

static PyObject *__pyx_tp_new_9bioscrape_5types_BimolecularPropensity(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Propensity(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_BimolecularPropensity *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Propensity*)__pyx_vtabptr_9bioscrape_5types_BimolecularPropensity;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_BimolecularPropensity[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_21BimolecularPropensity_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_21BimolecularPropensity_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_21BimolecularPropensity_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_21BimolecularPropensity_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_BimolecularPropensity = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.BimolecularPropensity", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_BimolecularPropensity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Propensity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A propensity class for a bimolecular propensity (k*x1*x2)\n\n    Attributes:\n        rate_index (unsigned): the parameter index containing the rate k\n        s1_index (unsigned): the species index containing the species x1\n        s2_index (unsigned): the species index containing the species x2\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_BimolecularPropensity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_21BimolecularPropensity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_BimolecularPropensity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_PositiveHillPropensity __pyx_vtable_9bioscrape_5types_PositiveHillPropensity;

static PyObject *__pyx_tp_new_9bioscrape_5types_PositiveHillPropensity(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Propensity(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Propensity*)__pyx_vtabptr_9bioscrape_5types_PositiveHillPropensity;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_PositiveHillPropensity[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_22PositiveHillPropensity_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_PositiveHillPropensity = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.PositiveHillPropensity", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_PositiveHillPropensity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Propensity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A propensity class for an activating Hill function (   rate * (x1/K)**n / (1 + (x1/K)**n )   )\n\n    Attributes:\n        K_index (unsigned): parameter index of Hill constant K\n        rate_index (unsigned): parameter index for rate value\n        n_index (unsigned): parameter index for cooperativity value\n        s1_index (unsigned): species index for x1\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_PositiveHillPropensity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_22PositiveHillPropensity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_PositiveHillPropensity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_PositiveProportionalHillPropensity __pyx_vtable_9bioscrape_5types_PositiveProportionalHillPropensity;

static PyObject *__pyx_tp_new_9bioscrape_5types_PositiveProportionalHillPropensity(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Propensity(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Propensity*)__pyx_vtabptr_9bioscrape_5types_PositiveProportionalHillPropensity;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_PositiveProportionalHillPropensity[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_PositiveProportionalHillPropensity = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.PositiveProportionalHillPropensity", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_PositiveProportionalHillPropensity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Propensity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A propensity class for an activating Hill function proportional to another second species\n     (   rate * d * (x1/K)**n / (1 + (x1/K)**n )   )\n\n    Attributes:\n        K_index (unsigned): parameter index of Hill constant K\n        rate_index (unsigned): parameter index for rate value\n        n_index (unsigned): parameter index for cooperativity value\n        s1_index (unsigned): species index for x1\n        d_index (unsigned): species index for d\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_PositiveProportionalHillPropensity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_34PositiveProportionalHillPropensity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_PositiveProportionalHillPropensity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_NegativeHillPropensity __pyx_vtable_9bioscrape_5types_NegativeHillPropensity;

static PyObject *__pyx_tp_new_9bioscrape_5types_NegativeHillPropensity(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Propensity(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Propensity*)__pyx_vtabptr_9bioscrape_5types_NegativeHillPropensity;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_NegativeHillPropensity[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_22NegativeHillPropensity_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_NegativeHillPropensity = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.NegativeHillPropensity", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_NegativeHillPropensity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Propensity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A propensity class for a repressing Hill function (   rate * 1 / (1 + (x1/K)**n )   )\n\n    Attributes:\n        K_index (unsigned): parameter index of Hill constant K\n        rate_index (unsigned): parameter index for rate value\n        n_index (unsigned): parameter index for cooperativity value\n        s1_index (unsigned): species index for x1\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_NegativeHillPropensity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_22NegativeHillPropensity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_NegativeHillPropensity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_NegativeProportionalHillPropensity __pyx_vtable_9bioscrape_5types_NegativeProportionalHillPropensity;

static PyObject *__pyx_tp_new_9bioscrape_5types_NegativeProportionalHillPropensity(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Propensity(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Propensity*)__pyx_vtabptr_9bioscrape_5types_NegativeProportionalHillPropensity;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_NegativeProportionalHillPropensity[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_species", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_7set_species, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_9set_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_NegativeProportionalHillPropensity = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.NegativeProportionalHillPropensity", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_NegativeProportionalHillPropensity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Propensity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A propensity class for a repressing Hill function proportional to another second species\n     (   rate * d * 1 / (1 + (x1/K)**n )   )\n\n    Attributes:\n        K_index (unsigned): parameter index of Hill constant K\n        rate_index (unsigned): parameter index for rate value\n        n_index (unsigned): parameter index for cooperativity value\n        s1_index (unsigned): species index for x1\n        d_index (unsigned): species index for d\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_NegativeProportionalHillPropensity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_34NegativeProportionalHillPropensity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_NegativeProportionalHillPropensity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_MassActionPropensity __pyx_vtable_9bioscrape_5types_MassActionPropensity;

static PyObject *__pyx_tp_new_9bioscrape_5types_MassActionPropensity(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_MassActionPropensity *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Propensity(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_MassActionPropensity *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Propensity*)__pyx_vtabptr_9bioscrape_5types_MassActionPropensity;
  new((void*)&(p->sp_inds)) std::vector<int> ();
  new((void*)&(p->sp_counts)) std::vector<int> ();
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_MassActionPropensity(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_MassActionPropensity *p = (struct __pyx_obj_9bioscrape_5types_MassActionPropensity *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->sp_inds);
  __Pyx_call_destructor(p->sp_counts);
  __pyx_tp_dealloc_9bioscrape_5types_Propensity(o);
}

static PyMethodDef __pyx_methods_9bioscrape_5types_MassActionPropensity[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_20MassActionPropensity_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_20MassActionPropensity_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_20MassActionPropensity_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_20MassActionPropensity_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_MassActionPropensity = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.MassActionPropensity", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_MassActionPropensity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_MassActionPropensity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_MassActionPropensity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_20MassActionPropensity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_MassActionPropensity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_Term __pyx_vtable_9bioscrape_5types_Term;

static PyObject *__pyx_tp_new_9bioscrape_5types_Term(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_Term *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_Term *)o);
  p->__pyx_vtab = __pyx_vtabptr_9bioscrape_5types_Term;
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_Term(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9bioscrape_5types_Term[] = {
  {"py_evaluate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_4Term_1py_evaluate, METH_VARARGS|METH_KEYWORDS, 0},
  {"py_volume_evaluate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_4Term_3py_volume_evaluate, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_4Term_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_4Term_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_Term = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.Term", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_Term), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Term, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_Term, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_Term, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_ConstantTerm __pyx_vtable_9bioscrape_5types_ConstantTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_ConstantTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_ConstantTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Term(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_ConstantTerm *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_ConstantTerm;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_ConstantTerm[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_12ConstantTerm_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_12ConstantTerm_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_ConstantTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.ConstantTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_ConstantTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Term, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_ConstantTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_12ConstantTerm_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_ConstantTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_SpeciesTerm __pyx_vtable_9bioscrape_5types_SpeciesTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_SpeciesTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_SpeciesTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Term(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_SpeciesTerm *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_SpeciesTerm;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_SpeciesTerm[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_11SpeciesTerm_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_11SpeciesTerm_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_SpeciesTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.SpeciesTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_SpeciesTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Term, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_SpeciesTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_11SpeciesTerm_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_SpeciesTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_ParameterTerm __pyx_vtable_9bioscrape_5types_ParameterTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_ParameterTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_ParameterTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Term(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_ParameterTerm *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_ParameterTerm;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_ParameterTerm[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_13ParameterTerm_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_13ParameterTerm_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_ParameterTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.ParameterTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_ParameterTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Term, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_ParameterTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_13ParameterTerm_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_ParameterTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_VolumeTerm __pyx_vtable_9bioscrape_5types_VolumeTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_VolumeTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_VolumeTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Term(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_VolumeTerm *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_VolumeTerm;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_VolumeTerm[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_10VolumeTerm_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_10VolumeTerm_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_VolumeTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.VolumeTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_VolumeTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Term, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_VolumeTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_VolumeTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_BinaryTerm __pyx_vtable_9bioscrape_5types_BinaryTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_BinaryTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_BinaryTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Term(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_BinaryTerm *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_BinaryTerm;
  new((void*)&(p->terms)) std::vector<void *> ();
  p->terms_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_BinaryTerm(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_BinaryTerm *p = (struct __pyx_obj_9bioscrape_5types_BinaryTerm *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->terms);
  Py_CLEAR(p->terms_list);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9bioscrape_5types_Term(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_BinaryTerm(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_BinaryTerm *p = (struct __pyx_obj_9bioscrape_5types_BinaryTerm *)o;
  e = ((likely(__pyx_ptype_9bioscrape_5types_Term)) ? ((__pyx_ptype_9bioscrape_5types_Term->tp_traverse) ? __pyx_ptype_9bioscrape_5types_Term->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9bioscrape_5types_BinaryTerm)); if (e) return e;
  if (p->terms_list) {
    e = (*v)(p->terms_list, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_BinaryTerm(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_BinaryTerm *p = (struct __pyx_obj_9bioscrape_5types_BinaryTerm *)o;
  if (likely(__pyx_ptype_9bioscrape_5types_Term)) { if (__pyx_ptype_9bioscrape_5types_Term->tp_clear) __pyx_ptype_9bioscrape_5types_Term->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9bioscrape_5types_BinaryTerm);
  tmp = ((PyObject*)p->terms_list);
  p->terms_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_BinaryTerm[] = {
  {"__reduce__", (PyCFunction)__pyx_pw_9bioscrape_5types_10BinaryTerm_3__reduce__, METH_NOARGS, 0},
  {"py_add_term", (PyCFunction)__pyx_pw_9bioscrape_5types_10BinaryTerm_5py_add_term, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_BinaryTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.BinaryTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_BinaryTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_BinaryTerm, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_BinaryTerm, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_BinaryTerm, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_BinaryTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_10BinaryTerm_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_BinaryTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_SumTerm __pyx_vtable_9bioscrape_5types_SumTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_SumTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_SumTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_BinaryTerm(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_SumTerm *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_SumTerm;
  return o;
}

static PyTypeObject __pyx_type_9bioscrape_5types_SumTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.SumTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_SumTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_BinaryTerm, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_BinaryTerm, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_BinaryTerm, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9bioscrape_5types_10BinaryTerm_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_SumTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_ProductTerm __pyx_vtable_9bioscrape_5types_ProductTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_ProductTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_ProductTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_BinaryTerm(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_ProductTerm *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_ProductTerm;
  return o;
}

static PyTypeObject __pyx_type_9bioscrape_5types_ProductTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.ProductTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_ProductTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_BinaryTerm, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_BinaryTerm, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_BinaryTerm, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9bioscrape_5types_10BinaryTerm_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_ProductTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_MaxTerm __pyx_vtable_9bioscrape_5types_MaxTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_MaxTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_MaxTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_BinaryTerm(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_MaxTerm *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_MaxTerm;
  return o;
}

static PyTypeObject __pyx_type_9bioscrape_5types_MaxTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.MaxTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_MaxTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_BinaryTerm, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_BinaryTerm, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_BinaryTerm, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9bioscrape_5types_10BinaryTerm_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_MaxTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_MinTerm __pyx_vtable_9bioscrape_5types_MinTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_MinTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_MinTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_BinaryTerm(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_MinTerm *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_MinTerm;
  return o;
}

static PyTypeObject __pyx_type_9bioscrape_5types_MinTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.MinTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_MinTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_BinaryTerm, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_BinaryTerm, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_BinaryTerm, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9bioscrape_5types_10BinaryTerm_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_MinTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_PowerTerm __pyx_vtable_9bioscrape_5types_PowerTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_PowerTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_PowerTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Term(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_PowerTerm *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_PowerTerm;
  p->base = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  p->exponent = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_PowerTerm(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_PowerTerm *p = (struct __pyx_obj_9bioscrape_5types_PowerTerm *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->base);
  Py_CLEAR(p->exponent);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9bioscrape_5types_Term(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_PowerTerm(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_PowerTerm *p = (struct __pyx_obj_9bioscrape_5types_PowerTerm *)o;
  e = ((likely(__pyx_ptype_9bioscrape_5types_Term)) ? ((__pyx_ptype_9bioscrape_5types_Term->tp_traverse) ? __pyx_ptype_9bioscrape_5types_Term->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9bioscrape_5types_PowerTerm)); if (e) return e;
  if (p->base) {
    e = (*v)(((PyObject *)p->base), a); if (e) return e;
  }
  if (p->exponent) {
    e = (*v)(((PyObject *)p->exponent), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_PowerTerm(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_PowerTerm *p = (struct __pyx_obj_9bioscrape_5types_PowerTerm *)o;
  if (likely(__pyx_ptype_9bioscrape_5types_Term)) { if (__pyx_ptype_9bioscrape_5types_Term->tp_clear) __pyx_ptype_9bioscrape_5types_Term->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9bioscrape_5types_PowerTerm);
  tmp = ((PyObject*)p->base);
  p->base = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->exponent);
  p->exponent = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_PowerTerm[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_9PowerTerm_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_9PowerTerm_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_PowerTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.PowerTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_PowerTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_PowerTerm, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_PowerTerm, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_PowerTerm, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_PowerTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_PowerTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_ExpTerm __pyx_vtable_9bioscrape_5types_ExpTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_ExpTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_ExpTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Term(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_ExpTerm *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_ExpTerm;
  p->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_ExpTerm(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_ExpTerm *p = (struct __pyx_obj_9bioscrape_5types_ExpTerm *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->arg);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9bioscrape_5types_Term(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_ExpTerm(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_ExpTerm *p = (struct __pyx_obj_9bioscrape_5types_ExpTerm *)o;
  e = ((likely(__pyx_ptype_9bioscrape_5types_Term)) ? ((__pyx_ptype_9bioscrape_5types_Term->tp_traverse) ? __pyx_ptype_9bioscrape_5types_Term->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9bioscrape_5types_ExpTerm)); if (e) return e;
  if (p->arg) {
    e = (*v)(((PyObject *)p->arg), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_ExpTerm(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_ExpTerm *p = (struct __pyx_obj_9bioscrape_5types_ExpTerm *)o;
  if (likely(__pyx_ptype_9bioscrape_5types_Term)) { if (__pyx_ptype_9bioscrape_5types_Term->tp_clear) __pyx_ptype_9bioscrape_5types_Term->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9bioscrape_5types_ExpTerm);
  tmp = ((PyObject*)p->arg);
  p->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_ExpTerm[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7ExpTerm_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7ExpTerm_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_ExpTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.ExpTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_ExpTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_ExpTerm, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_ExpTerm, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_ExpTerm, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_ExpTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_ExpTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_LogTerm __pyx_vtable_9bioscrape_5types_LogTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_LogTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_LogTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Term(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_LogTerm *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_LogTerm;
  p->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_LogTerm(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_LogTerm *p = (struct __pyx_obj_9bioscrape_5types_LogTerm *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->arg);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9bioscrape_5types_Term(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_LogTerm(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_LogTerm *p = (struct __pyx_obj_9bioscrape_5types_LogTerm *)o;
  e = ((likely(__pyx_ptype_9bioscrape_5types_Term)) ? ((__pyx_ptype_9bioscrape_5types_Term->tp_traverse) ? __pyx_ptype_9bioscrape_5types_Term->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9bioscrape_5types_LogTerm)); if (e) return e;
  if (p->arg) {
    e = (*v)(((PyObject *)p->arg), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_LogTerm(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_LogTerm *p = (struct __pyx_obj_9bioscrape_5types_LogTerm *)o;
  if (likely(__pyx_ptype_9bioscrape_5types_Term)) { if (__pyx_ptype_9bioscrape_5types_Term->tp_clear) __pyx_ptype_9bioscrape_5types_Term->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9bioscrape_5types_LogTerm);
  tmp = ((PyObject*)p->arg);
  p->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_LogTerm[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7LogTerm_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7LogTerm_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_LogTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.LogTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_LogTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_LogTerm, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_LogTerm, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_LogTerm, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_LogTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_LogTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_StepTerm __pyx_vtable_9bioscrape_5types_StepTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_StepTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_StepTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Term(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_StepTerm *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_StepTerm;
  p->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_StepTerm(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_StepTerm *p = (struct __pyx_obj_9bioscrape_5types_StepTerm *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->arg);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9bioscrape_5types_Term(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_StepTerm(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_StepTerm *p = (struct __pyx_obj_9bioscrape_5types_StepTerm *)o;
  e = ((likely(__pyx_ptype_9bioscrape_5types_Term)) ? ((__pyx_ptype_9bioscrape_5types_Term->tp_traverse) ? __pyx_ptype_9bioscrape_5types_Term->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9bioscrape_5types_StepTerm)); if (e) return e;
  if (p->arg) {
    e = (*v)(((PyObject *)p->arg), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_StepTerm(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_StepTerm *p = (struct __pyx_obj_9bioscrape_5types_StepTerm *)o;
  if (likely(__pyx_ptype_9bioscrape_5types_Term)) { if (__pyx_ptype_9bioscrape_5types_Term->tp_clear) __pyx_ptype_9bioscrape_5types_Term->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9bioscrape_5types_StepTerm);
  tmp = ((PyObject*)p->arg);
  p->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_StepTerm[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_8StepTerm_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_8StepTerm_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_StepTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.StepTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_StepTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_StepTerm, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_StepTerm, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_StepTerm, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_StepTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_StepTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_AbsTerm __pyx_vtable_9bioscrape_5types_AbsTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_AbsTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_AbsTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Term(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_AbsTerm *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_AbsTerm;
  p->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_AbsTerm(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_AbsTerm *p = (struct __pyx_obj_9bioscrape_5types_AbsTerm *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->arg);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9bioscrape_5types_Term(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_AbsTerm(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_AbsTerm *p = (struct __pyx_obj_9bioscrape_5types_AbsTerm *)o;
  e = ((likely(__pyx_ptype_9bioscrape_5types_Term)) ? ((__pyx_ptype_9bioscrape_5types_Term->tp_traverse) ? __pyx_ptype_9bioscrape_5types_Term->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9bioscrape_5types_AbsTerm)); if (e) return e;
  if (p->arg) {
    e = (*v)(((PyObject *)p->arg), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_AbsTerm(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_AbsTerm *p = (struct __pyx_obj_9bioscrape_5types_AbsTerm *)o;
  if (likely(__pyx_ptype_9bioscrape_5types_Term)) { if (__pyx_ptype_9bioscrape_5types_Term->tp_clear) __pyx_ptype_9bioscrape_5types_Term->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9bioscrape_5types_AbsTerm);
  tmp = ((PyObject*)p->arg);
  p->arg = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_AbsTerm[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7AbsTerm_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7AbsTerm_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_AbsTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.AbsTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_AbsTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_AbsTerm, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_AbsTerm, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_AbsTerm, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_AbsTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_AbsTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_TimeTerm __pyx_vtable_9bioscrape_5types_TimeTerm;

static PyObject *__pyx_tp_new_9bioscrape_5types_TimeTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_TimeTerm *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Term(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_TimeTerm *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Term*)__pyx_vtabptr_9bioscrape_5types_TimeTerm;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_TimeTerm[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_8TimeTerm_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_8TimeTerm_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_TimeTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.TimeTerm", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_TimeTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Term, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_TimeTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_TimeTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_GeneralPropensity __pyx_vtable_9bioscrape_5types_GeneralPropensity;

static PyObject *__pyx_tp_new_9bioscrape_5types_GeneralPropensity(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_GeneralPropensity *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Propensity(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_GeneralPropensity *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Propensity*)__pyx_vtabptr_9bioscrape_5types_GeneralPropensity;
  p->term = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_GeneralPropensity(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_GeneralPropensity *p = (struct __pyx_obj_9bioscrape_5types_GeneralPropensity *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->term);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9bioscrape_5types_Propensity(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_GeneralPropensity(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_GeneralPropensity *p = (struct __pyx_obj_9bioscrape_5types_GeneralPropensity *)o;
  e = ((likely(__pyx_ptype_9bioscrape_5types_Propensity)) ? ((__pyx_ptype_9bioscrape_5types_Propensity->tp_traverse) ? __pyx_ptype_9bioscrape_5types_Propensity->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9bioscrape_5types_GeneralPropensity)); if (e) return e;
  if (p->term) {
    e = (*v)(((PyObject *)p->term), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_GeneralPropensity(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_GeneralPropensity *p = (struct __pyx_obj_9bioscrape_5types_GeneralPropensity *)o;
  if (likely(__pyx_ptype_9bioscrape_5types_Propensity)) { if (__pyx_ptype_9bioscrape_5types_Propensity->tp_clear) __pyx_ptype_9bioscrape_5types_Propensity->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9bioscrape_5types_GeneralPropensity);
  tmp = ((PyObject*)p->term);
  p->term = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_GeneralPropensity[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_17GeneralPropensity_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_17GeneralPropensity_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"py_get_term", (PyCFunction)__pyx_pw_9bioscrape_5types_17GeneralPropensity_7py_get_term, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_17GeneralPropensity_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_17GeneralPropensity_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_GeneralPropensity = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.GeneralPropensity", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_GeneralPropensity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_GeneralPropensity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_GeneralPropensity, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_GeneralPropensity, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_GeneralPropensity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_17GeneralPropensity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_GeneralPropensity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_Delay __pyx_vtable_9bioscrape_5types_Delay;

static PyObject *__pyx_tp_new_9bioscrape_5types_Delay(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_Delay *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_Delay *)o);
  p->__pyx_vtab = __pyx_vtabptr_9bioscrape_5types_Delay;
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_Delay(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_richcompare_9bioscrape_5types_Delay(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_9bioscrape_5types_5Delay_5__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_9bioscrape_5types_5Delay_5__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyMethodDef __pyx_methods_9bioscrape_5types_Delay[] = {
  {"py_get_delay", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Delay_3py_get_delay, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9bioscrape_5types_5Delay_2py_get_delay},
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Delay_7initialize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9bioscrape_5types_5Delay_6initialize},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Delay_9get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9bioscrape_5types_5Delay_8get_species_and_parameters},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_5Delay_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_5Delay_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_Delay = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.Delay", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_Delay), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Delay, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A delay class for different delay types. Must be overridden by subclasses.\n\n    Contains one function get_delay that returns a delay as a function of the state and parameters.\n\n    Attributes:\n        delay_type (DelayType): the type of delay\n        delay_params (dictionary): parameters for the delay distribution\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_9bioscrape_5types_Delay, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_Delay, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_5Delay_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_Delay, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_NoDelay __pyx_vtable_9bioscrape_5types_NoDelay;

static PyObject *__pyx_tp_new_9bioscrape_5types_NoDelay(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_NoDelay *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Delay(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_NoDelay *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Delay*)__pyx_vtabptr_9bioscrape_5types_NoDelay;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_NoDelay[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7NoDelay_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7NoDelay_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_NoDelay = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.NoDelay", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_NoDelay), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Delay, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A delay class for representing no delay. Will always return a delay of 0.0\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_NoDelay, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_7NoDelay_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_NoDelay, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_FixedDelay __pyx_vtable_9bioscrape_5types_FixedDelay;

static PyObject *__pyx_tp_new_9bioscrape_5types_FixedDelay(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_FixedDelay *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Delay(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_FixedDelay *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Delay*)__pyx_vtabptr_9bioscrape_5types_FixedDelay;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_FixedDelay[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_10FixedDelay_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_10FixedDelay_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_10FixedDelay_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_10FixedDelay_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_FixedDelay = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.FixedDelay", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_FixedDelay), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Delay, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A delay class for representing a fixed delay.\n\n    Attributes:\n        delay_index (unsigned): parameter index containing the fixed delay value.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_FixedDelay, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_10FixedDelay_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_FixedDelay, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_GaussianDelay __pyx_vtable_9bioscrape_5types_GaussianDelay;

static PyObject *__pyx_tp_new_9bioscrape_5types_GaussianDelay(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_GaussianDelay *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Delay(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_GaussianDelay *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Delay*)__pyx_vtabptr_9bioscrape_5types_GaussianDelay;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_GaussianDelay[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_13GaussianDelay_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_13GaussianDelay_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_13GaussianDelay_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_13GaussianDelay_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_GaussianDelay = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.GaussianDelay", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_GaussianDelay), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Delay, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A delay class for representing a Gaussian distributed delay with specified mean and std.\n\n    Attributes:\n        mean_index (unsigned): parameter index containing the mean delay\n        std_index (unsigned): parameter index containing the standard deviation of the delay.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_GaussianDelay, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_13GaussianDelay_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_GaussianDelay, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_GammaDelay __pyx_vtable_9bioscrape_5types_GammaDelay;

static PyObject *__pyx_tp_new_9bioscrape_5types_GammaDelay(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_GammaDelay *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Delay(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_GammaDelay *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Delay*)__pyx_vtabptr_9bioscrape_5types_GammaDelay;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_GammaDelay[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_10GammaDelay_3initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_10GammaDelay_5get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_10GammaDelay_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_10GammaDelay_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_GammaDelay = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.GammaDelay", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_GammaDelay), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Delay, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A delay class for representing a gamma distributed delay with specified k and theta, where\n    it is *like* k independent exponential variables with mean theta\n\n    Mean is k*theta\n    Variance is k*theta^2\n\n    Attributes:\n        k_index (unsigned): parameter index containing the k value\n        theta_index (unsigned): parameter index containing the theta value\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_GammaDelay, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_10GammaDelay_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_GammaDelay, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_Rule __pyx_vtable_9bioscrape_5types_Rule;

static PyObject *__pyx_tp_new_9bioscrape_5types_Rule(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_Rule *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_Rule *)o);
  p->__pyx_vtab = __pyx_vtabptr_9bioscrape_5types_Rule;
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_Rule(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9bioscrape_5types_Rule[] = {
  {"py_execute_rule", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_4Rule_1py_execute_rule, METH_VARARGS|METH_KEYWORDS, 0},
  {"py_execute_volume_rule", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_4Rule_3py_execute_volume_rule, METH_VARARGS|METH_KEYWORDS, 0},
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_4Rule_5initialize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9bioscrape_5types_4Rule_4initialize},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_4Rule_7get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9bioscrape_5types_4Rule_6get_species_and_parameters},
  {"set_frequency_flag", (PyCFunction)__pyx_pw_9bioscrape_5types_4Rule_9set_frequency_flag, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_4Rule_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_4Rule_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_Rule = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.Rule", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_Rule), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Rule, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A class for doing rules that must be done either at the beginning of a simulation or repeatedly at each step of\n    the simulation.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_Rule, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_Rule, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_AdditiveAssignmentRule __pyx_vtable_9bioscrape_5types_AdditiveAssignmentRule;

static PyObject *__pyx_tp_new_9bioscrape_5types_AdditiveAssignmentRule(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Rule(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Rule*)__pyx_vtabptr_9bioscrape_5types_AdditiveAssignmentRule;
  new((void*)&(p->species_source_indices)) std::vector<int> ();
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_AdditiveAssignmentRule(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *p = (struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->species_source_indices);
  __pyx_tp_dealloc_9bioscrape_5types_Rule(o);
}

static PyMethodDef __pyx_methods_9bioscrape_5types_AdditiveAssignmentRule[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_1initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_3get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_22AdditiveAssignmentRule_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_AdditiveAssignmentRule = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.AdditiveAssignmentRule", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_AdditiveAssignmentRule), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_AdditiveAssignmentRule, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A class for assigning a species to a sum of a bunch of other species.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_AdditiveAssignmentRule, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_AdditiveAssignmentRule, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_GeneralAssignmentRule __pyx_vtable_9bioscrape_5types_GeneralAssignmentRule;

static PyObject *__pyx_tp_new_9bioscrape_5types_GeneralAssignmentRule(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Rule(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Rule*)__pyx_vtabptr_9bioscrape_5types_GeneralAssignmentRule;
  p->rhs = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_GeneralAssignmentRule(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *p = (struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->rhs);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9bioscrape_5types_Rule(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_GeneralAssignmentRule(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *p = (struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *)o;
  e = ((likely(__pyx_ptype_9bioscrape_5types_Rule)) ? ((__pyx_ptype_9bioscrape_5types_Rule->tp_traverse) ? __pyx_ptype_9bioscrape_5types_Rule->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9bioscrape_5types_GeneralAssignmentRule)); if (e) return e;
  if (p->rhs) {
    e = (*v)(((PyObject *)p->rhs), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_GeneralAssignmentRule(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *p = (struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule *)o;
  if (likely(__pyx_ptype_9bioscrape_5types_Rule)) { if (__pyx_ptype_9bioscrape_5types_Rule->tp_clear) __pyx_ptype_9bioscrape_5types_Rule->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9bioscrape_5types_GeneralAssignmentRule);
  tmp = ((PyObject*)p->rhs);
  p->rhs = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_GeneralAssignmentRule[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_1initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_3get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_21GeneralAssignmentRule_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_GeneralAssignmentRule = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.GeneralAssignmentRule", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_GeneralAssignmentRule), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_GeneralAssignmentRule, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    A class for doing rules that must be done either at the beginning of a simulation or repeatedly at each step of\n    the simulation.\n    ", /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_GeneralAssignmentRule, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_GeneralAssignmentRule, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_GeneralAssignmentRule, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_GeneralAssignmentRule, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_GeneralODERule __pyx_vtable_9bioscrape_5types_GeneralODERule;

static PyObject *__pyx_tp_new_9bioscrape_5types_GeneralODERule(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_GeneralODERule *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Rule(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_GeneralODERule *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Rule*)__pyx_vtabptr_9bioscrape_5types_GeneralODERule;
  p->rhs = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_GeneralODERule(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_GeneralODERule *p = (struct __pyx_obj_9bioscrape_5types_GeneralODERule *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->rhs);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9bioscrape_5types_Rule(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_GeneralODERule(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_GeneralODERule *p = (struct __pyx_obj_9bioscrape_5types_GeneralODERule *)o;
  e = ((likely(__pyx_ptype_9bioscrape_5types_Rule)) ? ((__pyx_ptype_9bioscrape_5types_Rule->tp_traverse) ? __pyx_ptype_9bioscrape_5types_Rule->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9bioscrape_5types_GeneralODERule)); if (e) return e;
  if (p->rhs) {
    e = (*v)(((PyObject *)p->rhs), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_GeneralODERule(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_GeneralODERule *p = (struct __pyx_obj_9bioscrape_5types_GeneralODERule *)o;
  if (likely(__pyx_ptype_9bioscrape_5types_Rule)) { if (__pyx_ptype_9bioscrape_5types_Rule->tp_clear) __pyx_ptype_9bioscrape_5types_Rule->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9bioscrape_5types_GeneralODERule);
  tmp = ((PyObject*)p->rhs);
  p->rhs = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_GeneralODERule[] = {
  {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_14GeneralODERule_1initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_species_and_parameters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_14GeneralODERule_3get_species_and_parameters, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_14GeneralODERule_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_14GeneralODERule_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_GeneralODERule = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.GeneralODERule", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_GeneralODERule), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_GeneralODERule, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    A class for rules that implement Euler's method every dt. These rules are of the form dest = dest + f(state, params, time)*dt\n    ", /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_GeneralODERule, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_GeneralODERule, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_GeneralODERule, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_GeneralODERule, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_Volume __pyx_vtable_9bioscrape_5types_Volume;

static PyObject *__pyx_tp_new_9bioscrape_5types_Volume(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_Volume *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_Volume *)o);
  p->__pyx_vtab = __pyx_vtabptr_9bioscrape_5types_Volume;
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_Volume(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9bioscrape_5types_Volume[] = {
  {"py_copy", (PyCFunction)__pyx_pw_9bioscrape_5types_6Volume_1py_copy, METH_NOARGS, __pyx_doc_9bioscrape_5types_6Volume_py_copy},
  {"py_get_volume_step", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_6Volume_3py_get_volume_step, METH_VARARGS|METH_KEYWORDS, 0},
  {"py_initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_6Volume_5py_initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"py_cell_divided", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_6Volume_7py_cell_divided, METH_VARARGS|METH_KEYWORDS, 0},
  {"py_set_volume", (PyCFunction)__pyx_pw_9bioscrape_5types_6Volume_9py_set_volume, METH_O, 0},
  {"py_get_volume", (PyCFunction)__pyx_pw_9bioscrape_5types_6Volume_11py_get_volume, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_6Volume_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_6Volume_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_Volume = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.Volume", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_Volume), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Volume, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A volume class for different volume update types. Must be overridden by subclasses implementing volume models.\n\n\n    Attributes:\n        current_volume (double): the current volume of the cell. (should be positive)\n\n    Subclasses must implement get_volume_step, initialize, cell_divided\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_Volume, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_Volume, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_StochasticTimeThresholdVolume __pyx_vtable_9bioscrape_5types_StochasticTimeThresholdVolume;

static PyObject *__pyx_tp_new_9bioscrape_5types_StochasticTimeThresholdVolume(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Volume(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Volume*)__pyx_vtabptr_9bioscrape_5types_StochasticTimeThresholdVolume;
  return o;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_StochasticTimeThresholdVolume[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_29StochasticTimeThresholdVolume_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_29StochasticTimeThresholdVolume_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.StochasticTimeThresholdVolume", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_StochasticTimeThresholdVolume), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Volume, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A volume class for a cell that grows at a deterministic exponential rate and divides after a random normally\n    distributed time.\n\n\n    The relevant parameters for this model are the average division volume of the cell, the cell growth rate, and the\n    specified noise in the division time.\n\n    Attributes:\n        division_time (double): the time at which the cell will divide.\n        average_division_volume (double): the average volume at which to divide.\n        division_noise (double):  << 1, the noise in the division time.\n        cell_cycle_time (double): the average cell cycle time for these cells.\n        growth_rate (double): the volume growth rate g (dV/dt = g*V)\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_StochasticTimeThresholdVolume, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_29StochasticTimeThresholdVolume_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_StochasticTimeThresholdVolume, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_StateDependentVolume __pyx_vtable_9bioscrape_5types_StateDependentVolume;

static PyObject *__pyx_tp_new_9bioscrape_5types_StateDependentVolume(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_StateDependentVolume *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Volume(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_StateDependentVolume *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Volume*)__pyx_vtabptr_9bioscrape_5types_StateDependentVolume;
  p->growth_rate = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_StateDependentVolume(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_StateDependentVolume *p = (struct __pyx_obj_9bioscrape_5types_StateDependentVolume *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->growth_rate);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9bioscrape_5types_Volume(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_StateDependentVolume(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_StateDependentVolume *p = (struct __pyx_obj_9bioscrape_5types_StateDependentVolume *)o;
  e = ((likely(__pyx_ptype_9bioscrape_5types_Volume)) ? ((__pyx_ptype_9bioscrape_5types_Volume->tp_traverse) ? __pyx_ptype_9bioscrape_5types_Volume->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9bioscrape_5types_StateDependentVolume)); if (e) return e;
  if (p->growth_rate) {
    e = (*v)(((PyObject *)p->growth_rate), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_StateDependentVolume(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_StateDependentVolume *p = (struct __pyx_obj_9bioscrape_5types_StateDependentVolume *)o;
  if (likely(__pyx_ptype_9bioscrape_5types_Volume)) { if (__pyx_ptype_9bioscrape_5types_Volume->tp_clear) __pyx_ptype_9bioscrape_5types_Volume->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9bioscrape_5types_StateDependentVolume);
  tmp = ((PyObject*)p->growth_rate);
  p->growth_rate = ((struct __pyx_obj_9bioscrape_5types_Term *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_StateDependentVolume[] = {
  {"setup", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_20StateDependentVolume_3setup, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_20StateDependentVolume_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_20StateDependentVolume_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_StateDependentVolume = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.StateDependentVolume", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_StateDependentVolume), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_StateDependentVolume, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    A volume class for a cell where growth rate depends on state and the division volume is chosen randomly\n    ahead of time with some randomness.\n\n    Attributes:\n        division_volume (double): the volume at which the cell will divide.\n        average_division_volume (double): the average volume at which to divide.\n        division_noise (double):  << 1, the noise in the division time (c.o.v.)\n        growth_rate (Term): the growth rate evaluated based on the state\n    ", /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_StateDependentVolume, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_StateDependentVolume, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_StateDependentVolume, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_20StateDependentVolume_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_StateDependentVolume, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_Model __pyx_vtable_9bioscrape_5types_Model;

static PyObject *__pyx_tp_new_9bioscrape_5types_Model(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_Model *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_Model *)o);
  p->__pyx_vtab = __pyx_vtabptr_9bioscrape_5types_Model;
  new((void*)&(p->c_propensities)) std::vector<void *> ();
  new((void*)&(p->c_delays)) std::vector<void *> ();
  new((void*)&(p->c_repeat_rules)) std::vector<void *> ();
  p->propensities = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->delays = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->repeat_rules = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->species2index = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->params2index = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->species_values = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->params_values = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->update_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->delay_update_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->reaction_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->reaction_updates = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->delay_reaction_updates = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->txt_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->reaction_definitions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->rule_definitions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_Model(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_Model *p = (struct __pyx_obj_9bioscrape_5types_Model *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->c_propensities);
  __Pyx_call_destructor(p->c_delays);
  __Pyx_call_destructor(p->c_repeat_rules);
  Py_CLEAR(p->propensities);
  Py_CLEAR(p->delays);
  Py_CLEAR(p->repeat_rules);
  Py_CLEAR(p->species2index);
  Py_CLEAR(p->params2index);
  Py_CLEAR(p->species_values);
  Py_CLEAR(p->params_values);
  Py_CLEAR(p->update_array);
  Py_CLEAR(p->delay_update_array);
  Py_CLEAR(p->reaction_list);
  Py_CLEAR(p->reaction_updates);
  Py_CLEAR(p->delay_reaction_updates);
  Py_CLEAR(p->txt_dict);
  Py_CLEAR(p->reaction_definitions);
  Py_CLEAR(p->rule_definitions);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_Model(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_Model *p = (struct __pyx_obj_9bioscrape_5types_Model *)o;
  if (p->propensities) {
    e = (*v)(p->propensities, a); if (e) return e;
  }
  if (p->delays) {
    e = (*v)(p->delays, a); if (e) return e;
  }
  if (p->repeat_rules) {
    e = (*v)(p->repeat_rules, a); if (e) return e;
  }
  if (p->species2index) {
    e = (*v)(p->species2index, a); if (e) return e;
  }
  if (p->params2index) {
    e = (*v)(p->params2index, a); if (e) return e;
  }
  if (p->species_values) {
    e = (*v)(((PyObject *)p->species_values), a); if (e) return e;
  }
  if (p->params_values) {
    e = (*v)(((PyObject *)p->params_values), a); if (e) return e;
  }
  if (p->update_array) {
    e = (*v)(((PyObject *)p->update_array), a); if (e) return e;
  }
  if (p->delay_update_array) {
    e = (*v)(((PyObject *)p->delay_update_array), a); if (e) return e;
  }
  if (p->reaction_list) {
    e = (*v)(p->reaction_list, a); if (e) return e;
  }
  if (p->reaction_updates) {
    e = (*v)(p->reaction_updates, a); if (e) return e;
  }
  if (p->delay_reaction_updates) {
    e = (*v)(p->delay_reaction_updates, a); if (e) return e;
  }
  if (p->txt_dict) {
    e = (*v)(p->txt_dict, a); if (e) return e;
  }
  if (p->reaction_definitions) {
    e = (*v)(p->reaction_definitions, a); if (e) return e;
  }
  if (p->rule_definitions) {
    e = (*v)(p->rule_definitions, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_Model(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_Model *p = (struct __pyx_obj_9bioscrape_5types_Model *)o;
  tmp = ((PyObject*)p->propensities);
  p->propensities = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->delays);
  p->delays = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->repeat_rules);
  p->repeat_rules = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->species2index);
  p->species2index = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->params2index);
  p->params2index = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->species_values);
  p->species_values = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->params_values);
  p->params_values = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->update_array);
  p->update_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->delay_update_array);
  p->delay_update_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->reaction_list);
  p->reaction_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->reaction_updates);
  p->reaction_updates = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->delay_reaction_updates);
  p->delay_reaction_updates = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->txt_dict);
  p->txt_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->reaction_definitions);
  p->reaction_definitions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->rule_definitions);
  p->rule_definitions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_richcompare_9bioscrape_5types_Model(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_9bioscrape_5types_5Model_9__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_9bioscrape_5types_5Model_9__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyMethodDef __pyx_methods_9bioscrape_5types_Model[] = {
  {"py_initialize", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_3py_initialize, METH_NOARGS, 0},
  {"_create_vectors", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_5_create_vectors, METH_NOARGS, 0},
  {"py_initialize", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_7py_initialize, METH_NOARGS, 0},
  {"__neq__", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_11__neq__, METH_O, 0},
  {"_add_species", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_13_add_species, METH_O, __pyx_doc_9bioscrape_5types_5Model_12_add_species},
  {"_set_species_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Model_15_set_species_value, METH_VARARGS|METH_KEYWORDS, 0},
  {"_add_reaction", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Model_17_add_reaction, METH_VARARGS|METH_KEYWORDS, 0},
  {"create_propensity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Model_19create_propensity, METH_VARARGS|METH_KEYWORDS, 0},
  {"create_reaction", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Model_21create_reaction, METH_VARARGS|METH_KEYWORDS, 0},
  {"_add_param", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_23_add_param, METH_O, __pyx_doc_9bioscrape_5types_5Model_22_add_param},
  {"create_rule", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Model_25create_rule, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_parameter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Model_27set_parameter, METH_VARARGS|METH_KEYWORDS, 0},
  {"create_parameter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Model_29create_parameter, METH_VARARGS|METH_KEYWORDS, 0},
  {"check_parameters", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_31check_parameters, METH_NOARGS, 0},
  {"check_species", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_33check_species, METH_NOARGS, 0},
  {"_param_dict_check", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Model_35_param_dict_check, METH_VARARGS|METH_KEYWORDS, 0},
  {"_create_stochiometric_matrices", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_37_create_stochiometric_matrices, METH_NOARGS, 0},
  {"parse_model", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Model_39parse_model, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9bioscrape_5types_5Model_38parse_model},
  {"has_delays", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_41has_delays, METH_NOARGS, 0},
  {"get_params2index", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_43get_params2index, METH_NOARGS, 0},
  {"get_species2index", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_45get_species2index, METH_NOARGS, 0},
  {"get_species_list", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_47get_species_list, METH_NOARGS, 0},
  {"get_species_array", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_49get_species_array, METH_NOARGS, 0},
  {"get_param_list", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_51get_param_list, METH_NOARGS, 0},
  {"get_params", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_53get_params, METH_NOARGS, __pyx_doc_9bioscrape_5types_5Model_52get_params},
  {"get_species", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_55get_species, METH_NOARGS, __pyx_doc_9bioscrape_5types_5Model_54get_species},
  {"get_number_of_params", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_57get_number_of_params, METH_NOARGS, 0},
  {"get_parameter_values", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_59get_parameter_values, METH_NOARGS, 0},
  {"get_parameter_dictionary", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_61get_parameter_dictionary, METH_NOARGS, 0},
  {"get_species", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_63get_species, METH_NOARGS, __pyx_doc_9bioscrape_5types_5Model_62get_species},
  {"get_species_dictionary", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_65get_species_dictionary, METH_NOARGS, __pyx_doc_9bioscrape_5types_5Model_64get_species_dictionary},
  {"get_number_of_species", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_67get_number_of_species, METH_NOARGS, 0},
  {"set_params", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_69set_params, METH_O, __pyx_doc_9bioscrape_5types_5Model_68set_params},
  {"set_species", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_71set_species, METH_O, __pyx_doc_9bioscrape_5types_5Model_70set_species},
  {"get_propensities", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_73get_propensities, METH_NOARGS, __pyx_doc_9bioscrape_5types_5Model_72get_propensities},
  {"get_delays", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_75get_delays, METH_NOARGS, __pyx_doc_9bioscrape_5types_5Model_74get_delays},
  {"get_reactions", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_77get_reactions, METH_NOARGS, 0},
  {"get_rules", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_79get_rules, METH_NOARGS, 0},
  {"py_get_update_array", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_81py_get_update_array, METH_NOARGS, 0},
  {"py_get_delay_update_array", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_83py_get_delay_update_array, METH_NOARGS, 0},
  {"get_param_index", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_85get_param_index, METH_O, 0},
  {"get_species_index", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_87get_species_index, METH_O, 0},
  {"get_param_value", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_89get_param_value, METH_O, 0},
  {"get_species_value", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_91get_species_value, METH_O, 0},
  {"parse_general_expression", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_93parse_general_expression, METH_O, 0},
  {"generate_sbml_model", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Model_95generate_sbml_model, METH_VARARGS|METH_KEYWORDS, 0},
  {"write_sbml_model", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_5Model_97write_sbml_model, METH_VARARGS|METH_KEYWORDS, 0},
  {"__getstate__", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_99__getstate__, METH_NOARGS, __pyx_doc_9bioscrape_5types_5Model_98__getstate__},
  {"__setstate__", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_101__setstate__, METH_O, __pyx_doc_9bioscrape_5types_5Model_100__setstate__},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_103__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_5Model_105__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_Model = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.Model", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_Model), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Model, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    A class for keeping track of a chemical reaction model with delays. Does not support volumes, those are supplied\n    externally.\n\n    Attributes:\n        _next_species_index (unsigned): used internally for indexing\n        _next_params_index (unsigned): used internally for indexing\n        c_propensities (void *): vector of pointers to the model propensity objects. Must cast back to Propensity type\n        c_delays (void *): vector of pointers to model delay objects. Must cast back to Delay type\n        propensities (list): List of propensity objects. same contents as c_propensities but slower access\n        delays (list): List of delay objects. Same contents as c_delays but slower access\n        species2index (dict:str -> int): maps species names to index in species state vector.\n        params2index (dict:str -> int): maps parameter names to index in parameter vector.\n        species_values (np.ndarray): array of the initial species values\n        params_values (np.ndarray): array of the parameter values\n        update_array (np.ndarray): 2-D array containing stoichiometric matrix num_species x num_reactions\n        delay_update_array (np.ndarray): 2-D array containing delay stoich matrix (i.e. updates that occur after delay)\n\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_Model, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_Model, /*tp_clear*/
  __pyx_tp_richcompare_9bioscrape_5types_Model, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_Model, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_5Model_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_Model, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_Schnitz __pyx_vtable_9bioscrape_5types_Schnitz;

static PyObject *__pyx_tp_new_9bioscrape_5types_Schnitz(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_Schnitz *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)o);
  p->__pyx_vtab = __pyx_vtabptr_9bioscrape_5types_Schnitz;
  p->data = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->time = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->volume = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->parent = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)Py_None); Py_INCREF(Py_None);
  p->daughter1 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)Py_None); Py_INCREF(Py_None);
  p->daughter2 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_Schnitz(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_Schnitz *p = (struct __pyx_obj_9bioscrape_5types_Schnitz *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->data);
  Py_CLEAR(p->time);
  Py_CLEAR(p->volume);
  Py_CLEAR(p->parent);
  Py_CLEAR(p->daughter1);
  Py_CLEAR(p->daughter2);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_Schnitz(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_Schnitz *p = (struct __pyx_obj_9bioscrape_5types_Schnitz *)o;
  if (p->data) {
    e = (*v)(((PyObject *)p->data), a); if (e) return e;
  }
  if (p->time) {
    e = (*v)(((PyObject *)p->time), a); if (e) return e;
  }
  if (p->volume) {
    e = (*v)(((PyObject *)p->volume), a); if (e) return e;
  }
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  if (p->daughter1) {
    e = (*v)(((PyObject *)p->daughter1), a); if (e) return e;
  }
  if (p->daughter2) {
    e = (*v)(((PyObject *)p->daughter2), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_Schnitz(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_Schnitz *p = (struct __pyx_obj_9bioscrape_5types_Schnitz *)o;
  tmp = ((PyObject*)p->data);
  p->data = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->time);
  p->time = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->volume);
  p->volume = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->daughter1);
  p->daughter1 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->daughter2);
  p->daughter2 = ((struct __pyx_obj_9bioscrape_5types_Schnitz *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_Schnitz[] = {
  {"py_get_data", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_3py_get_data, METH_NOARGS, 0},
  {"py_set_data", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_5py_set_data, METH_O, 0},
  {"py_get_time", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_7py_get_time, METH_NOARGS, 0},
  {"py_get_volume", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_9py_get_volume, METH_NOARGS, 0},
  {"py_get_dataframe", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_7Schnitz_11py_get_dataframe, METH_VARARGS|METH_KEYWORDS, 0},
  {"py_get_parent", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_13py_get_parent, METH_NOARGS, 0},
  {"py_get_daughters", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_15py_get_daughters, METH_NOARGS, 0},
  {"py_set_parent", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_17py_set_parent, METH_O, 0},
  {"py_set_daughters", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_7Schnitz_19py_set_daughters, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_sub_lineage", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_7Schnitz_21get_sub_lineage, METH_VARARGS|METH_KEYWORDS, 0},
  {"copy", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_23copy, METH_NOARGS, 0},
  {"__setstate__", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_25__setstate__, METH_O, 0},
  {"__getstate__", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_27__getstate__, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_29__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7Schnitz_31__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_Schnitz = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.Schnitz", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_Schnitz), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Schnitz, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    A class for representing the data acquired from a single cell trajectory.\n\n    Attributes:\n        data (np.ndarray): A 2-D array containing one column for each measured output, 1 row for each timepoint\n        time (np.ndarray): A 1-D array containing the time points\n        volume (np.ndarray): A 1-D array with the volume at each time point\n        parent (Schnitz): The Schnitz for the parent of this cell (if it exists, None if not)\n        daughter1, daughter2 (Schnitz): The Schnitz's for the daughters of this cell (if they exist, None if not)\n    ", /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_Schnitz, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_Schnitz, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_Schnitz, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_7Schnitz_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_Schnitz, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_Lineage __pyx_vtable_9bioscrape_5types_Lineage;

static PyObject *__pyx_tp_new_9bioscrape_5types_Lineage(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_Lineage *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_Lineage *)o);
  p->__pyx_vtab = __pyx_vtabptr_9bioscrape_5types_Lineage;
  new((void*)&(p->c_schnitzes)) std::vector<void *> ();
  p->schnitzes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_Lineage(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_Lineage *p = (struct __pyx_obj_9bioscrape_5types_Lineage *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->c_schnitzes);
  Py_CLEAR(p->schnitzes);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_Lineage(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_Lineage *p = (struct __pyx_obj_9bioscrape_5types_Lineage *)o;
  if (p->schnitzes) {
    e = (*v)(p->schnitzes, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_Lineage(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_Lineage *p = (struct __pyx_obj_9bioscrape_5types_Lineage *)o;
  tmp = ((PyObject*)p->schnitzes);
  p->schnitzes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_Lineage[] = {
  {"py_size", (PyCFunction)__pyx_pw_9bioscrape_5types_7Lineage_3py_size, METH_NOARGS, __pyx_doc_9bioscrape_5types_7Lineage_2py_size},
  {"py_get_schnitz", (PyCFunction)__pyx_pw_9bioscrape_5types_7Lineage_5py_get_schnitz, METH_O, __pyx_doc_9bioscrape_5types_7Lineage_4py_get_schnitz},
  {"py_add_schnitz", (PyCFunction)__pyx_pw_9bioscrape_5types_7Lineage_7py_add_schnitz, METH_O, 0},
  {"__setstate__", (PyCFunction)__pyx_pw_9bioscrape_5types_7Lineage_9__setstate__, METH_O, 0},
  {"__getstate__", (PyCFunction)__pyx_pw_9bioscrape_5types_7Lineage_11__getstate__, METH_NOARGS, 0},
  {"truncate_lineage", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_7Lineage_13truncate_lineage, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_schnitzes_by_generation", (PyCFunction)__pyx_pw_9bioscrape_5types_7Lineage_15get_schnitzes_by_generation, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7Lineage_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_7Lineage_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_Lineage = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.Lineage", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_Lineage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_Lineage, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    A class for keeping track of cell lineages consisting of many Schnitz's\n\n    Attributes:\n        schnitzes (list): A list of all the Schnitz's in the lineage.\n        c_schnitzes (vector[void*]): A vector containing void pointers to all the Schnitz's in the lineage\n    ", /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_Lineage, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_Lineage, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_Lineage, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_7Lineage_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_Lineage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_9bioscrape_5types_ExperimentalLineage __pyx_vtable_9bioscrape_5types_ExperimentalLineage;

static PyObject *__pyx_tp_new_9bioscrape_5types_ExperimentalLineage(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *p;
  PyObject *o = __pyx_tp_new_9bioscrape_5types_Lineage(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9bioscrape_5types_Lineage*)__pyx_vtabptr_9bioscrape_5types_ExperimentalLineage;
  p->species_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9bioscrape_5types_ExperimentalLineage(PyObject *o) {
  struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *p = (struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->species_dict);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9bioscrape_5types_Lineage(o);
}

static int __pyx_tp_traverse_9bioscrape_5types_ExperimentalLineage(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *p = (struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)o;
  e = __pyx_tp_traverse_9bioscrape_5types_Lineage(o, v, a); if (e) return e;
  if (p->species_dict) {
    e = (*v)(p->species_dict, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9bioscrape_5types_ExperimentalLineage(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *p = (struct __pyx_obj_9bioscrape_5types_ExperimentalLineage *)o;
  __pyx_tp_clear_9bioscrape_5types_Lineage(o);
  tmp = ((PyObject*)p->species_dict);
  p->species_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9bioscrape_5types_ExperimentalLineage[] = {
  {"py_set_species_indices", (PyCFunction)__pyx_pw_9bioscrape_5types_19ExperimentalLineage_3py_set_species_indices, METH_O, 0},
  {"py_get_species_index", (PyCFunction)__pyx_pw_9bioscrape_5types_19ExperimentalLineage_5py_get_species_index, METH_O, 0},
  {"__setstate__", (PyCFunction)__pyx_pw_9bioscrape_5types_19ExperimentalLineage_7__setstate__, METH_O, 0},
  {"__getstate__", (PyCFunction)__pyx_pw_9bioscrape_5types_19ExperimentalLineage_9__getstate__, METH_NOARGS, 0},
  {"truncate_lineage", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9bioscrape_5types_19ExperimentalLineage_11truncate_lineage, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_19ExperimentalLineage_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9bioscrape_5types_19ExperimentalLineage_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9bioscrape_5types_ExperimentalLineage = {
  PyVarObject_HEAD_INIT(0, 0)
  "bioscrape.types.ExperimentalLineage", /*tp_name*/
  sizeof(struct __pyx_obj_9bioscrape_5types_ExperimentalLineage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9bioscrape_5types_ExperimentalLineage, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9bioscrape_5types_ExperimentalLineage, /*tp_traverse*/
  __pyx_tp_clear_9bioscrape_5types_ExperimentalLineage, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9bioscrape_5types_ExperimentalLineage, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9bioscrape_5types_19ExperimentalLineage_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9bioscrape_5types_ExperimentalLineage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_types(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_types},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "types",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 0, 1, 0},
  {&__pyx_n_s_Abs, __pyx_k_Abs, sizeof(__pyx_k_Abs), 0, 0, 1, 1},
  {&__pyx_n_s_AbsTerm, __pyx_k_AbsTerm, sizeof(__pyx_k_AbsTerm), 0, 0, 1, 1},
  {&__pyx_n_s_Add, __pyx_k_Add, sizeof(__pyx_k_Add), 0, 0, 1, 1},
  {&__pyx_n_s_AdditiveAssignmentRule, __pyx_k_AdditiveAssignmentRule, sizeof(__pyx_k_AdditiveAssignmentRule), 0, 0, 1, 1},
  {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {&__pyx_n_s_BeautifulSoup, __pyx_k_BeautifulSoup, sizeof(__pyx_k_BeautifulSoup), 0, 0, 1, 1},
  {&__pyx_n_s_BimolecularPropensity, __pyx_k_BimolecularPropensity, sizeof(__pyx_k_BimolecularPropensity), 0, 0, 1, 1},
  {&__pyx_n_s_BinaryTerm, __pyx_k_BinaryTerm, sizeof(__pyx_k_BinaryTerm), 0, 0, 1, 1},
  {&__pyx_kp_s_Cannot_load_both_a_bioSCRAPE_xml, __pyx_k_Cannot_load_both_a_bioSCRAPE_xml, sizeof(__pyx_k_Cannot_load_both_a_bioSCRAPE_xml), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_make_Term_base_object, __pyx_k_Cannot_make_Term_base_object, sizeof(__pyx_k_Cannot_make_Term_base_object), 0, 0, 1, 0},
  {&__pyx_n_s_ClassName, __pyx_k_ClassName, sizeof(__pyx_k_ClassName), 0, 0, 1, 1},
  {&__pyx_n_s_ConstantTerm, __pyx_k_ConstantTerm, sizeof(__pyx_k_ConstantTerm), 0, 0, 1, 1},
  {&__pyx_n_s_ConstitutivePropensity, __pyx_k_ConstitutivePropensity, sizeof(__pyx_k_ConstitutivePropensity), 0, 0, 1, 1},
  {&__pyx_kp_s_Creating_Propensity_prop_type, __pyx_k_Creating_Propensity_prop_type, sizeof(__pyx_k_Creating_Propensity_prop_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Creating_base_Rule_class_This_sh, __pyx_k_Creating_base_Rule_class_This_sh, sizeof(__pyx_k_Creating_base_Rule_class_This_sh), 0, 0, 1, 0},
  {&__pyx_n_s_DataFrame, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {&__pyx_n_s_Delay, __pyx_k_Delay, sizeof(__pyx_k_Delay), 0, 0, 1, 1},
  {&__pyx_kp_s_Deprecated_Warning_Bioscrape_XML, __pyx_k_Deprecated_Warning_Bioscrape_XML, sizeof(__pyx_k_Deprecated_Warning_Bioscrape_XML), 0, 0, 1, 0},
  {&__pyx_kp_s_Did_not_include_global_model_tag, __pyx_k_Did_not_include_global_model_tag, sizeof(__pyx_k_Did_not_include_global_model_tag), 0, 0, 1, 0},
  {&__pyx_kp_s_Division_occurs_before_initial_v, __pyx_k_Division_occurs_before_initial_v, sizeof(__pyx_k_Division_occurs_before_initial_v), 0, 0, 1, 0},
  {&__pyx_n_s_DummyVar_BimolecularPropensity, __pyx_k_DummyVar_BimolecularPropensity, sizeof(__pyx_k_DummyVar_BimolecularPropensity), 0, 0, 1, 1},
  {&__pyx_n_s_DummyVar_ConstitutivePropensity, __pyx_k_DummyVar_ConstitutivePropensity, sizeof(__pyx_k_DummyVar_ConstitutivePropensity), 0, 0, 1, 1},
  {&__pyx_n_s_DummyVar_FixedDelay, __pyx_k_DummyVar_FixedDelay, sizeof(__pyx_k_DummyVar_FixedDelay), 0, 0, 1, 1},
  {&__pyx_n_s_DummyVar_GammaDelay, __pyx_k_DummyVar_GammaDelay, sizeof(__pyx_k_DummyVar_GammaDelay), 0, 0, 1, 1},
  {&__pyx_n_s_DummyVar_GaussianDelay, __pyx_k_DummyVar_GaussianDelay, sizeof(__pyx_k_DummyVar_GaussianDelay), 0, 0, 1, 1},
  {&__pyx_n_s_DummyVar_MassActionPropensity, __pyx_k_DummyVar_MassActionPropensity, sizeof(__pyx_k_DummyVar_MassActionPropensity), 0, 0, 1, 1},
  {&__pyx_n_s_DummyVar_NegativeHillPropensity, __pyx_k_DummyVar_NegativeHillPropensity, sizeof(__pyx_k_DummyVar_NegativeHillPropensity), 0, 0, 1, 1},
  {&__pyx_n_s_DummyVar_NegativeProportionalHil, __pyx_k_DummyVar_NegativeProportionalHil, sizeof(__pyx_k_DummyVar_NegativeProportionalHil), 0, 0, 1, 1},
  {&__pyx_n_s_DummyVar_PositiveHillPropensity, __pyx_k_DummyVar_PositiveHillPropensity, sizeof(__pyx_k_DummyVar_PositiveHillPropensity), 0, 0, 1, 1},
  {&__pyx_n_s_DummyVar_PositiveProportionalHil, __pyx_k_DummyVar_PositiveProportionalHil, sizeof(__pyx_k_DummyVar_PositiveProportionalHil), 0, 0, 1, 1},
  {&__pyx_n_s_DummyVar_UnimolecularPropensity, __pyx_k_DummyVar_UnimolecularPropensity, sizeof(__pyx_k_DummyVar_UnimolecularPropensity), 0, 0, 1, 1},
  {&__pyx_n_s_ExpTerm, __pyx_k_ExpTerm, sizeof(__pyx_k_ExpTerm), 0, 0, 1, 1},
  {&__pyx_n_s_ExperimentalLineage, __pyx_k_ExperimentalLineage, sizeof(__pyx_k_ExperimentalLineage), 0, 0, 1, 1},
  {&__pyx_n_s_FixedDelay, __pyx_k_FixedDelay, sizeof(__pyx_k_FixedDelay), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_GammaDelay, __pyx_k_GammaDelay, sizeof(__pyx_k_GammaDelay), 0, 0, 1, 1},
  {&__pyx_n_s_GaussianDelay, __pyx_k_GaussianDelay, sizeof(__pyx_k_GaussianDelay), 0, 0, 1, 1},
  {&__pyx_n_s_GeneralAssignmentRule, __pyx_k_GeneralAssignmentRule, sizeof(__pyx_k_GeneralAssignmentRule), 0, 0, 1, 1},
  {&__pyx_n_s_GeneralODERule, __pyx_k_GeneralODERule, sizeof(__pyx_k_GeneralODERule), 0, 0, 1, 1},
  {&__pyx_n_s_GeneralPropensity, __pyx_k_GeneralPropensity, sizeof(__pyx_k_GeneralPropensity), 0, 0, 1, 1},
  {&__pyx_n_s_Heaviside, __pyx_k_Heaviside, sizeof(__pyx_k_Heaviside), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x0a, __pyx_k_Incompatible_checksums_s_vs_0x0a, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x0a), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x1c, __pyx_k_Incompatible_checksums_s_vs_0x1c, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x1c), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x20, __pyx_k_Incompatible_checksums_s_vs_0x20, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x20), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x28, __pyx_k_Incompatible_checksums_s_vs_0x28, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x28), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x2b, __pyx_k_Incompatible_checksums_s_vs_0x2b, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x2b), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x41, __pyx_k_Incompatible_checksums_s_vs_0x41, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x41), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x54, __pyx_k_Incompatible_checksums_s_vs_0x54, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x54), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x61, __pyx_k_Incompatible_checksums_s_vs_0x61, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x61), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x61_2, __pyx_k_Incompatible_checksums_s_vs_0x61_2, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x61_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x68, __pyx_k_Incompatible_checksums_s_vs_0x68, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x68), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x6a, __pyx_k_Incompatible_checksums_s_vs_0x6a, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x6a), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x80, __pyx_k_Incompatible_checksums_s_vs_0x80, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x80), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x8a, __pyx_k_Incompatible_checksums_s_vs_0x8a, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x8a), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x8d, __pyx_k_Incompatible_checksums_s_vs_0x8d, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x8d), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x90, __pyx_k_Incompatible_checksums_s_vs_0x90, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x90), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xa3, __pyx_k_Incompatible_checksums_s_vs_0xa3, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xa3), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xbb, __pyx_k_Incompatible_checksums_s_vs_0xbb, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xbb), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xce, __pyx_k_Incompatible_checksums_s_vs_0xce, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xce), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_k_Incompatible_checksums_s_vs_0xd4, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xd4), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xe2, __pyx_k_Incompatible_checksums_s_vs_0xe2, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xe2), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xe6, __pyx_k_Incompatible_checksums_s_vs_0xe6, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xe6), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xf7, __pyx_k_Incompatible_checksums_s_vs_0xf7, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xf7), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xf8, __pyx_k_Incompatible_checksums_s_vs_0xf8, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xf8), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xfd, __pyx_k_Incompatible_checksums_s_vs_0xfd, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xfd), 0, 0, 1, 0},
  {&__pyx_kp_s_Incorrect_delay_spec, __pyx_k_Incorrect_delay_spec, sizeof(__pyx_k_Incorrect_delay_spec), 0, 0, 1, 0},
  {&__pyx_kp_s_Incorrect_propensity_tags_in_XML, __pyx_k_Incorrect_propensity_tags_in_XML, sizeof(__pyx_k_Incorrect_propensity_tags_in_XML), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Initializing_ODE_Rule, __pyx_k_Initializing_ODE_Rule, sizeof(__pyx_k_Initializing_ODE_Rule), 0, 0, 1, 0},
  {&__pyx_kp_s_Inputs, __pyx_k_Inputs, sizeof(__pyx_k_Inputs), 0, 0, 1, 0},
  {&__pyx_kp_u_Invalid_rule_frequency, __pyx_k_Invalid_rule_frequency, sizeof(__pyx_k_Invalid_rule_frequency), 0, 1, 0, 0},
  {&__pyx_kp_s_Invalid_type_of_Rule, __pyx_k_Invalid_type_of_Rule, sizeof(__pyx_k_Invalid_type_of_Rule), 0, 0, 1, 0},
  {&__pyx_n_s_K, __pyx_k_K, sizeof(__pyx_k_K), 0, 0, 1, 1},
  {&__pyx_n_s_Lineage, __pyx_k_Lineage, sizeof(__pyx_k_Lineage), 0, 0, 1, 1},
  {&__pyx_n_s_LogTerm, __pyx_k_LogTerm, sizeof(__pyx_k_LogTerm), 0, 0, 1, 1},
  {&__pyx_n_s_LookupError, __pyx_k_LookupError, sizeof(__pyx_k_LookupError), 0, 0, 1, 1},
  {&__pyx_n_s_MassActionPropensity, __pyx_k_MassActionPropensity, sizeof(__pyx_k_MassActionPropensity), 0, 0, 1, 1},
  {&__pyx_n_s_Max, __pyx_k_Max, sizeof(__pyx_k_Max), 0, 0, 1, 1},
  {&__pyx_n_s_MaxTerm, __pyx_k_MaxTerm, sizeof(__pyx_k_MaxTerm), 0, 0, 1, 1},
  {&__pyx_n_s_Min, __pyx_k_Min, sizeof(__pyx_k_Min), 0, 0, 1, 1},
  {&__pyx_n_s_MinTerm, __pyx_k_MinTerm, sizeof(__pyx_k_MinTerm), 0, 0, 1, 1},
  {&__pyx_n_s_Model, __pyx_k_Model, sizeof(__pyx_k_Model), 0, 0, 1, 1},
  {&__pyx_n_s_ModuleNotFoundError, __pyx_k_ModuleNotFoundError, sizeof(__pyx_k_ModuleNotFoundError), 0, 0, 1, 1},
  {&__pyx_n_s_Mul, __pyx_k_Mul, sizeof(__pyx_k_Mul), 0, 0, 1, 1},
  {&__pyx_kp_s_Need_to_implement_copy_for_popul, __pyx_k_Need_to_implement_copy_for_popul, sizeof(__pyx_k_Need_to_implement_copy_for_popul), 0, 0, 1, 0},
  {&__pyx_n_s_NegativeHillPropensity, __pyx_k_NegativeHillPropensity, sizeof(__pyx_k_NegativeHillPropensity), 0, 0, 1, 1},
  {&__pyx_n_s_NegativeProportionalHillPropensi, __pyx_k_NegativeProportionalHillPropensi, sizeof(__pyx_k_NegativeProportionalHillPropensi), 0, 0, 1, 1},
  {&__pyx_n_s_NoDelay, __pyx_k_NoDelay, sizeof(__pyx_k_NoDelay), 0, 0, 1, 1},
  {&__pyx_kp_s_No_Model_passed_into_py_get_data, __pyx_k_No_Model_passed_into_py_get_data, sizeof(__pyx_k_No_Model_passed_into_py_get_data), 0, 0, 1, 0},
  {&__pyx_kp_s_No_parameter_with_name, __pyx_k_No_parameter_with_name, sizeof(__pyx_k_No_parameter_with_name), 0, 0, 1, 0},
  {&__pyx_kp_s_No_species_with_name, __pyx_k_No_species_with_name, sizeof(__pyx_k_No_species_with_name), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_ODE, __pyx_k_ODE, sizeof(__pyx_k_ODE), 0, 0, 1, 1},
  {&__pyx_kp_s_Outputs, __pyx_k_Outputs, sizeof(__pyx_k_Outputs), 0, 0, 1, 0},
  {&__pyx_n_s_ParameterTerm, __pyx_k_ParameterTerm, sizeof(__pyx_k_ParameterTerm), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_s_Please_don_t_name_your_paramete, __pyx_k_Please_don_t_name_your_paramete, sizeof(__pyx_k_Please_don_t_name_your_paramete), 0, 0, 1, 0},
  {&__pyx_kp_s_Plus_or_minus_character_in_mass, __pyx_k_Plus_or_minus_character_in_mass, sizeof(__pyx_k_Plus_or_minus_character_in_mass), 0, 0, 1, 0},
  {&__pyx_n_s_PositiveHillPropensity, __pyx_k_PositiveHillPropensity, sizeof(__pyx_k_PositiveHillPropensity), 0, 0, 1, 1},
  {&__pyx_n_s_PositiveProportionalHillPropensi, __pyx_k_PositiveProportionalHillPropensi, sizeof(__pyx_k_PositiveProportionalHillPropensi), 0, 0, 1, 1},
  {&__pyx_n_s_Pow, __pyx_k_Pow, sizeof(__pyx_k_Pow), 0, 0, 1, 1},
  {&__pyx_n_s_PowerTerm, __pyx_k_PowerTerm, sizeof(__pyx_k_PowerTerm), 0, 0, 1, 1},
  {&__pyx_n_s_ProductTerm, __pyx_k_ProductTerm, sizeof(__pyx_k_ProductTerm), 0, 0, 1, 1},
  {&__pyx_n_s_Propensity, __pyx_k_Propensity, sizeof(__pyx_k_Propensity), 0, 0, 1, 1},
  {&__pyx_kp_s_Propensity_Type_is_not_supported, __pyx_k_Propensity_Type_is_not_supported, sizeof(__pyx_k_Propensity_Type_is_not_supported), 0, 0, 1, 0},
  {&__pyx_kp_s_Propensity_type, __pyx_k_Propensity_type, sizeof(__pyx_k_Propensity_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Reaction_Tuple_of_the_wrong_leng, __pyx_k_Reaction_Tuple_of_the_wrong_leng, sizeof(__pyx_k_Reaction_Tuple_of_the_wrong_leng), 0, 0, 1, 0},
  {&__pyx_n_s_Rule, __pyx_k_Rule, sizeof(__pyx_k_Rule), 0, 0, 1, 1},
  {&__pyx_kp_s_Rule_Created_with_rule_type, __pyx_k_Rule_Created_with_rule_type, sizeof(__pyx_k_Rule_Created_with_rule_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Rules_must_be_a_tuple_rule_type, __pyx_k_Rules_must_be_a_tuple_rule_type, sizeof(__pyx_k_Rules_must_be_a_tuple_rule_type), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_Schnitz, __pyx_k_Schnitz, sizeof(__pyx_k_Schnitz), 0, 0, 1, 1},
  {&__pyx_kp_u_Species, __pyx_k_Species, sizeof(__pyx_k_Species), 0, 1, 0, 0},
  {&__pyx_n_s_SpeciesTerm, __pyx_k_SpeciesTerm, sizeof(__pyx_k_SpeciesTerm), 0, 0, 1, 1},
  {&__pyx_kp_s_Species_not_found_in_experimenta, __pyx_k_Species_not_found_in_experimenta, sizeof(__pyx_k_Species_not_found_in_experimenta), 0, 0, 1, 0},
  {&__pyx_n_s_StateDependentVolume, __pyx_k_StateDependentVolume, sizeof(__pyx_k_StateDependentVolume), 0, 0, 1, 1},
  {&__pyx_n_s_StepTerm, __pyx_k_StepTerm, sizeof(__pyx_k_StepTerm), 0, 0, 1, 1},
  {&__pyx_n_s_StochasticTimeThresholdVolume, __pyx_k_StochasticTimeThresholdVolume, sizeof(__pyx_k_StochasticTimeThresholdVolume), 0, 0, 1, 1},
  {&__pyx_n_s_SumTerm, __pyx_k_SumTerm, sizeof(__pyx_k_SumTerm), 0, 0, 1, 1},
  {&__pyx_n_s_Symbol, __pyx_k_Symbol, sizeof(__pyx_k_Symbol), 0, 0, 1, 1},
  {&__pyx_kp_s_Sympy_unable_to_parse, __pyx_k_Sympy_unable_to_parse, sizeof(__pyx_k_Sympy_unable_to_parse), 0, 0, 1, 0},
  {&__pyx_n_s_SyntaxError, __pyx_k_SyntaxError, sizeof(__pyx_k_SyntaxError), 0, 0, 1, 1},
  {&__pyx_n_s_Term, __pyx_k_Term, sizeof(__pyx_k_Term), 0, 0, 1, 1},
  {&__pyx_kp_s_The_following_species_are_uninit, __pyx_k_The_following_species_are_uninit, sizeof(__pyx_k_The_following_species_are_uninit), 0, 0, 1, 0},
  {&__pyx_kp_s_The_generated_SBML_model_has_err, __pyx_k_The_generated_SBML_model_has_err, sizeof(__pyx_k_The_generated_SBML_model_has_err), 0, 0, 1, 0},
  {&__pyx_kp_s_This_should_be_a_number, __pyx_k_This_should_be_a_number, sizeof(__pyx_k_This_should_be_a_number), 0, 0, 1, 0},
  {&__pyx_n_s_TimeTerm, __pyx_k_TimeTerm, sizeof(__pyx_k_TimeTerm), 0, 0, 1, 1},
  {&__pyx_kp_s_Trying_to_create_a_dummy_paramet, __pyx_k_Trying_to_create_a_dummy_paramet, sizeof(__pyx_k_Trying_to_create_a_dummy_paramet), 0, 0, 1, 0},
  {&__pyx_kp_s_Trying_to_set_parameter_that_is, __pyx_k_Trying_to_set_parameter_that_is, sizeof(__pyx_k_Trying_to_set_parameter_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Trying_to_set_species_that_is_no, __pyx_k_Trying_to_set_species_that_is_no, sizeof(__pyx_k_Trying_to_set_species_that_is_no), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_UnimolecularPropensity, __pyx_k_UnimolecularPropensity, sizeof(__pyx_k_UnimolecularPropensity), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknown_delay_type, __pyx_k_Unknown_delay_type, sizeof(__pyx_k_Unknown_delay_type), 0, 0, 1, 0},
  {&__pyx_kp_u_Unknown_term, __pyx_k_Unknown_term, sizeof(__pyx_k_Unknown_term), 0, 1, 0, 0},
  {&__pyx_kp_s_Unspecified_Parameters, __pyx_k_Unspecified_Parameters, sizeof(__pyx_k_Unspecified_Parameters), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Volume, __pyx_k_Volume, sizeof(__pyx_k_Volume), 0, 0, 1, 1},
  {&__pyx_n_s_VolumeTerm, __pyx_k_VolumeTerm, sizeof(__pyx_k_VolumeTerm), 0, 0, 1, 1},
  {&__pyx_kp_s_Warning_Useless_field_for_Bimole, __pyx_k_Warning_Useless_field_for_Bimole, sizeof(__pyx_k_Warning_Useless_field_for_Bimole), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_Useless_field_for_Consti, __pyx_k_Warning_Useless_field_for_Consti, sizeof(__pyx_k_Warning_Useless_field_for_Consti), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_Useless_field_for_MassAc, __pyx_k_Warning_Useless_field_for_MassAc, sizeof(__pyx_k_Warning_Useless_field_for_MassAc), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_Useless_field_for_Negati, __pyx_k_Warning_Useless_field_for_Negati, sizeof(__pyx_k_Warning_Useless_field_for_Negati), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_Useless_field_for_Negati_2, __pyx_k_Warning_Useless_field_for_Negati_2, sizeof(__pyx_k_Warning_Useless_field_for_Negati_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_Useless_field_for_Positi, __pyx_k_Warning_Useless_field_for_Positi, sizeof(__pyx_k_Warning_Useless_field_for_Positi), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_Useless_field_for_Positi_2, __pyx_k_Warning_Useless_field_for_Positi_2, sizeof(__pyx_k_Warning_Useless_field_for_Positi_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_Useless_field_for_Unimol, __pyx_k_Warning_Useless_field_for_Unimol, sizeof(__pyx_k_Warning_Useless_field_for_Unimol), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_Useless_field_for_fixed, __pyx_k_Warning_Useless_field_for_fixed, sizeof(__pyx_k_Warning_Useless_field_for_fixed), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_Useless_field_for_gamma, __pyx_k_Warning_Useless_field_for_gamma, sizeof(__pyx_k_Warning_Useless_field_for_gamma), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_Useless_field_for_gaussi, __pyx_k_Warning_Useless_field_for_gaussi, sizeof(__pyx_k_Warning_Useless_field_for_gaussi), 0, 0, 1, 0},
  {&__pyx_kp_s_Warning_parameter, __pyx_k_Warning_parameter, sizeof(__pyx_k_Warning_parameter), 0, 0, 1, 0},
  {&__pyx_kp_s__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 0, 1, 0},
  {&__pyx_n_s__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 1},
  {&__pyx_kp_u__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
  {&__pyx_kp_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_kp_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 0},
  {&__pyx_kp_u__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 1, 0, 0},
  {&__pyx_kp_s__35, __pyx_k__35, sizeof(__pyx_k__35), 0, 0, 1, 0},
  {&__pyx_kp_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {&__pyx_kp_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 0},
  {&__pyx_kp_s__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 0},
  {&__pyx_kp_s__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_absterm, __pyx_k_absterm, sizeof(__pyx_k_absterm), 0, 0, 1, 1},
  {&__pyx_n_s_add_param, __pyx_k_add_param, sizeof(__pyx_k_add_param), 0, 0, 1, 1},
  {&__pyx_n_s_add_parameter, __pyx_k_add_parameter, sizeof(__pyx_k_add_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_add_reaction, __pyx_k_add_reaction, sizeof(__pyx_k_add_reaction), 0, 0, 1, 1},
  {&__pyx_n_s_add_reaction_2, __pyx_k_add_reaction_2, sizeof(__pyx_k_add_reaction_2), 0, 0, 1, 1},
  {&__pyx_n_s_add_rule, __pyx_k_add_rule, sizeof(__pyx_k_add_rule), 0, 0, 1, 1},
  {&__pyx_n_s_add_species, __pyx_k_add_species, sizeof(__pyx_k_add_species), 0, 0, 1, 1},
  {&__pyx_n_s_add_species_2, __pyx_k_add_species_2, sizeof(__pyx_k_add_species_2), 0, 0, 1, 1},
  {&__pyx_n_s_additive, __pyx_k_additive, sizeof(__pyx_k_additive), 0, 0, 1, 1},
  {&__pyx_n_s_after, __pyx_k_after, sizeof(__pyx_k_after), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_array_equal, __pyx_k_array_equal, sizeof(__pyx_k_array_equal), 0, 0, 1, 1},
  {&__pyx_n_s_assignment, __pyx_k_assignment, sizeof(__pyx_k_assignment), 0, 0, 1, 1},
  {&__pyx_n_s_attrs, __pyx_k_attrs, sizeof(__pyx_k_attrs), 0, 0, 1, 1},
  {&__pyx_n_s_average_division_volume, __pyx_k_average_division_volume, sizeof(__pyx_k_average_division_volume), 0, 0, 1, 1},
  {&__pyx_n_s_bioscrape_model, __pyx_k_bioscrape_model, sizeof(__pyx_k_bioscrape_model), 0, 0, 1, 1},
  {&__pyx_n_s_bioscrape_sbmlutil, __pyx_k_bioscrape_sbmlutil, sizeof(__pyx_k_bioscrape_sbmlutil), 0, 0, 1, 1},
  {&__pyx_n_s_bioscrape_types, __pyx_k_bioscrape_types, sizeof(__pyx_k_bioscrape_types), 0, 0, 1, 1},
  {&__pyx_kp_s_bioscrape_types_pyx, __pyx_k_bioscrape_types_pyx, sizeof(__pyx_k_bioscrape_types_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_bs4, __pyx_k_bs4, sizeof(__pyx_k_bs4), 0, 0, 1, 1},
  {&__pyx_n_s_cell_cycle_time, __pyx_k_cell_cycle_time, sizeof(__pyx_k_cell_cycle_time), 0, 0, 1, 1},
  {&__pyx_n_s_check_parameters, __pyx_k_check_parameters, sizeof(__pyx_k_check_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_check_species, __pyx_k_check_species, sizeof(__pyx_k_check_species), 0, 0, 1, 1},
  {&__pyx_n_s_clash1, __pyx_k_clash1, sizeof(__pyx_k_clash1), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_n_s_compartment, __pyx_k_compartment, sizeof(__pyx_k_compartment), 0, 0, 1, 1},
  {&__pyx_n_s_concatenate, __pyx_k_concatenate, sizeof(__pyx_k_concatenate), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_create_propensity, __pyx_k_create_propensity, sizeof(__pyx_k_create_propensity), 0, 0, 1, 1},
  {&__pyx_n_s_create_reaction, __pyx_k_create_reaction, sizeof(__pyx_k_create_reaction), 0, 0, 1, 1},
  {&__pyx_n_s_create_rule, __pyx_k_create_rule, sizeof(__pyx_k_create_rule), 0, 0, 1, 1},
  {&__pyx_n_s_create_sbml_model, __pyx_k_create_sbml_model, sizeof(__pyx_k_create_sbml_model), 0, 0, 1, 1},
  {&__pyx_n_s_create_stochiometric_matrices, __pyx_k_create_stochiometric_matrices, sizeof(__pyx_k_create_stochiometric_matrices), 0, 0, 1, 1},
  {&__pyx_n_s_create_vectors, __pyx_k_create_vectors, sizeof(__pyx_k_create_vectors), 0, 0, 1, 1},
  {&__pyx_kp_s_creating_reaction_with, __pyx_k_creating_reaction_with, sizeof(__pyx_k_creating_reaction_with), 0, 0, 1, 0},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_d1, __pyx_k_d1, sizeof(__pyx_k_d1), 0, 0, 1, 1},
  {&__pyx_n_s_d2, __pyx_k_d2, sizeof(__pyx_k_d2), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_delay, __pyx_k_delay, sizeof(__pyx_k_delay), 0, 0, 1, 1},
  {&__pyx_n_s_delay_annotation_dict, __pyx_k_delay_annotation_dict, sizeof(__pyx_k_delay_annotation_dict), 0, 0, 1, 1},
  {&__pyx_kp_s_delay_inputs, __pyx_k_delay_inputs, sizeof(__pyx_k_delay_inputs), 0, 0, 1, 0},
  {&__pyx_n_s_delay_object, __pyx_k_delay_object, sizeof(__pyx_k_delay_object), 0, 0, 1, 1},
  {&__pyx_kp_s_delay_outputs, __pyx_k_delay_outputs, sizeof(__pyx_k_delay_outputs), 0, 0, 1, 0},
  {&__pyx_n_s_delay_param_dict, __pyx_k_delay_param_dict, sizeof(__pyx_k_delay_param_dict), 0, 0, 1, 1},
  {&__pyx_kp_s_delay_parameters, __pyx_k_delay_parameters, sizeof(__pyx_k_delay_parameters), 0, 0, 1, 0},
  {&__pyx_n_s_delay_products, __pyx_k_delay_products, sizeof(__pyx_k_delay_products), 0, 0, 1, 1},
  {&__pyx_n_s_delay_reactants, __pyx_k_delay_reactants, sizeof(__pyx_k_delay_reactants), 0, 0, 1, 1},
  {&__pyx_n_s_delay_reaction_update_dict, __pyx_k_delay_reaction_update_dict, sizeof(__pyx_k_delay_reaction_update_dict), 0, 0, 1, 1},
  {&__pyx_n_s_delay_type, __pyx_k_delay_type, sizeof(__pyx_k_delay_type), 0, 0, 1, 1},
  {&__pyx_kp_s_delay_type_2, __pyx_k_delay_type_2, sizeof(__pyx_k_delay_type_2), 0, 0, 1, 0},
  {&__pyx_n_s_dic, __pyx_k_dic, sizeof(__pyx_k_dic), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dictionary, __pyx_k_dictionary, sizeof(__pyx_k_dictionary), 0, 0, 1, 1},
  {&__pyx_n_s_division_noise, __pyx_k_division_noise, sizeof(__pyx_k_division_noise), 0, 0, 1, 1},
  {&__pyx_kp_s_does_not_show_up_in_any_current, __pyx_k_does_not_show_up_in_any_current, sizeof(__pyx_k_does_not_show_up_in_any_current), 0, 0, 1, 0},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_end_time, __pyx_k_end_time, sizeof(__pyx_k_end_time), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_eq, __pyx_k_eq, sizeof(__pyx_k_eq), 0, 0, 1, 1},
  {&__pyx_n_s_equation, __pyx_k_equation, sizeof(__pyx_k_equation), 0, 0, 1, 1},
  {&__pyx_n_s_evalf, __pyx_k_evalf, sizeof(__pyx_k_evalf), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_n_s_expterm, __pyx_k_expterm, sizeof(__pyx_k_expterm), 0, 0, 1, 1},
  {&__pyx_n_s_features, __pyx_k_features, sizeof(__pyx_k_features), 0, 0, 1, 1},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_file_name, __pyx_k_file_name, sizeof(__pyx_k_file_name), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_find_all, __pyx_k_find_all, sizeof(__pyx_k_find_all), 0, 0, 1, 1},
  {&__pyx_n_s_fixed, __pyx_k_fixed, sizeof(__pyx_k_fixed), 0, 0, 1, 1},
  {&__pyx_kp_u_for, __pyx_k_for, sizeof(__pyx_k_for), 0, 1, 0, 0},
  {&__pyx_kp_s_for_param_object, __pyx_k_for_param_object, sizeof(__pyx_k_for_param_object), 0, 0, 1, 0},
  {&__pyx_kp_u_found_in_a_reaction_but_not_dec, __pyx_k_found_in_a_reaction_but_not_dec, sizeof(__pyx_k_found_in_a_reaction_but_not_dec), 0, 1, 0, 0},
  {&__pyx_n_s_frequency, __pyx_k_frequency, sizeof(__pyx_k_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_func, __pyx_k_func, sizeof(__pyx_k_func), 0, 0, 1, 1},
  {&__pyx_n_s_gamma, __pyx_k_gamma, sizeof(__pyx_k_gamma), 0, 0, 1, 1},
  {&__pyx_n_s_gaussian, __pyx_k_gaussian, sizeof(__pyx_k_gaussian), 0, 0, 1, 1},
  {&__pyx_n_s_general, __pyx_k_general, sizeof(__pyx_k_general), 0, 0, 1, 1},
  {&__pyx_n_s_generate_sbml_model, __pyx_k_generate_sbml_model, sizeof(__pyx_k_generate_sbml_model), 0, 0, 1, 1},
  {&__pyx_n_s_getCompartment, __pyx_k_getCompartment, sizeof(__pyx_k_getCompartment), 0, 0, 1, 1},
  {&__pyx_n_s_getErrorLog, __pyx_k_getErrorLog, sizeof(__pyx_k_getErrorLog), 0, 0, 1, 1},
  {&__pyx_n_s_getNumErrors, __pyx_k_getNumErrors, sizeof(__pyx_k_getNumErrors), 0, 0, 1, 1},
  {&__pyx_n_s_get_number_of_params, __pyx_k_get_number_of_params, sizeof(__pyx_k_get_number_of_params), 0, 0, 1, 1},
  {&__pyx_n_s_get_number_of_species, __pyx_k_get_number_of_species, sizeof(__pyx_k_get_number_of_species), 0, 0, 1, 1},
  {&__pyx_n_s_get_param_list, __pyx_k_get_param_list, sizeof(__pyx_k_get_param_list), 0, 0, 1, 1},
  {&__pyx_n_s_get_param_value, __pyx_k_get_param_value, sizeof(__pyx_k_get_param_value), 0, 0, 1, 1},
  {&__pyx_n_s_get_parameter_values, __pyx_k_get_parameter_values, sizeof(__pyx_k_get_parameter_values), 0, 0, 1, 1},
  {&__pyx_n_s_get_params, __pyx_k_get_params, sizeof(__pyx_k_get_params), 0, 0, 1, 1},
  {&__pyx_n_s_get_species, __pyx_k_get_species, sizeof(__pyx_k_get_species), 0, 0, 1, 1},
  {&__pyx_n_s_get_species_and_parameters, __pyx_k_get_species_and_parameters, sizeof(__pyx_k_get_species_and_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_get_species_array, __pyx_k_get_species_array, sizeof(__pyx_k_get_species_array), 0, 0, 1, 1},
  {&__pyx_n_s_get_species_list, __pyx_k_get_species_list, sizeof(__pyx_k_get_species_list), 0, 0, 1, 1},
  {&__pyx_n_s_get_species_value, __pyx_k_get_species_value, sizeof(__pyx_k_get_species_value), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_growth_rate, __pyx_k_growth_rate, sizeof(__pyx_k_growth_rate), 0, 0, 1, 1},
  {&__pyx_n_s_has_attr, __pyx_k_has_attr, sizeof(__pyx_k_has_attr), 0, 0, 1, 1},
  {&__pyx_n_s_heaviside, __pyx_k_heaviside, sizeof(__pyx_k_heaviside), 0, 0, 1, 1},
  {&__pyx_n_s_hillnegative, __pyx_k_hillnegative, sizeof(__pyx_k_hillnegative), 0, 0, 1, 1},
  {&__pyx_n_s_hillpositive, __pyx_k_hillpositive, sizeof(__pyx_k_hillpositive), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_import_sbml, __pyx_k_import_sbml, sizeof(__pyx_k_import_sbml), 0, 0, 1, 1},
  {&__pyx_n_s_ind, __pyx_k_ind, sizeof(__pyx_k_ind), 0, 0, 1, 1},
  {&__pyx_kp_u_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 1, 0, 0},
  {&__pyx_n_s_index_2, __pyx_k_index_2, sizeof(__pyx_k_index_2), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_initial_concentration, __pyx_k_initial_concentration, sizeof(__pyx_k_initial_concentration), 0, 0, 1, 1},
  {&__pyx_n_s_initial_condition_dict, __pyx_k_initial_condition_dict, sizeof(__pyx_k_initial_condition_dict), 0, 0, 1, 1},
  {&__pyx_n_s_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 0, 1, 1},
  {&__pyx_n_s_initialize_model, __pyx_k_initialize_model, sizeof(__pyx_k_initialize_model), 0, 0, 1, 1},
  {&__pyx_n_s_input_printout, __pyx_k_input_printout, sizeof(__pyx_k_input_printout), 0, 0, 1, 1},
  {&__pyx_n_s_instring, __pyx_k_instring, sizeof(__pyx_k_instring), 0, 0, 1, 1},
  {&__pyx_kp_u_is_the_same_as_the_name_of_a_sp, __pyx_k_is_the_same_as_the_name_of_a_sp, sizeof(__pyx_k_is_the_same_as_the_name_of_a_sp), 0, 1, 0, 0},
  {&__pyx_n_s_isnan, __pyx_k_isnan, sizeof(__pyx_k_isnan), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_libsbml, __pyx_k_libsbml, sizeof(__pyx_k_libsbml), 0, 0, 1, 1},
  {&__pyx_kp_u_lineage_py_size, __pyx_k_lineage_py_size, sizeof(__pyx_k_lineage_py_size), 0, 1, 0, 0},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_logterm, __pyx_k_logterm, sizeof(__pyx_k_logterm), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_massaction, __pyx_k_massaction, sizeof(__pyx_k_massaction), 0, 0, 1, 1},
  {&__pyx_n_s_maxterm, __pyx_k_maxterm, sizeof(__pyx_k_maxterm), 0, 0, 1, 1},
  {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
  {&__pyx_n_s_minterm, __pyx_k_minterm, sizeof(__pyx_k_minterm), 0, 0, 1, 1},
  {&__pyx_n_s_model, __pyx_k_model, sizeof(__pyx_k_model), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_names, __pyx_k_names, sizeof(__pyx_k_names), 0, 0, 1, 1},
  {&__pyx_n_s_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_term, __pyx_k_new_term, sizeof(__pyx_k_new_term), 0, 0, 1, 1},
  {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 0, 1, 1},
  {&__pyx_kp_u_not_found_in_Species_Parameters, __pyx_k_not_found_in_Species_Parameters, sizeof(__pyx_k_not_found_in_Species_Parameters), 0, 1, 0, 0},
  {&__pyx_kp_s_not_of_the_form_VARIABLE_F_X, __pyx_k_not_of_the_form_VARIABLE_F_X, sizeof(__pyx_k_not_of_the_form_VARIABLE_F_X), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_ode, __pyx_k_ode, sizeof(__pyx_k_ode), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_param_dict_check, __pyx_k_param_dict_check, sizeof(__pyx_k_param_dict_check), 0, 0, 1, 1},
  {&__pyx_n_s_param_dictionary, __pyx_k_param_dictionary, sizeof(__pyx_k_param_dictionary), 0, 0, 1, 1},
  {&__pyx_kp_s_param_dictionary_does_not_contai, __pyx_k_param_dictionary_does_not_contai, sizeof(__pyx_k_param_dictionary_does_not_contai), 0, 0, 1, 0},
  {&__pyx_kp_u_param_name, __pyx_k_param_name, sizeof(__pyx_k_param_name), 0, 1, 0, 0},
  {&__pyx_n_s_param_name_2, __pyx_k_param_name_2, sizeof(__pyx_k_param_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_param_names, __pyx_k_param_names, sizeof(__pyx_k_param_names), 0, 0, 1, 1},
  {&__pyx_n_s_param_object_name, __pyx_k_param_object_name, sizeof(__pyx_k_param_object_name), 0, 0, 1, 1},
  {&__pyx_n_s_param_value, __pyx_k_param_value, sizeof(__pyx_k_param_value), 0, 0, 1, 1},
  {&__pyx_kp_u_param_values_is, __pyx_k_param_values_is, sizeof(__pyx_k_param_values_is), 0, 1, 0, 0},
  {&__pyx_n_s_parameter, __pyx_k_parameter, sizeof(__pyx_k_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_parameter_indices, __pyx_k_parameter_indices, sizeof(__pyx_k_parameter_indices), 0, 0, 1, 1},
  {&__pyx_n_s_parameters, __pyx_k_parameters, sizeof(__pyx_k_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {&__pyx_n_s_params2index, __pyx_k_params2index, sizeof(__pyx_k_params2index), 0, 0, 1, 1},
  {&__pyx_kp_u_params2index_is, __pyx_k_params2index_is, sizeof(__pyx_k_params2index_is), 0, 1, 0, 0},
  {&__pyx_kp_s_params_2, __pyx_k_params_2, sizeof(__pyx_k_params_2), 0, 0, 1, 0},
  {&__pyx_n_s_parse_expression, __pyx_k_parse_expression, sizeof(__pyx_k_parse_expression), 0, 0, 1, 1},
  {&__pyx_n_s_parse_general_expression, __pyx_k_parse_general_expression, sizeof(__pyx_k_parse_general_expression), 0, 0, 1, 1},
  {&__pyx_n_s_parse_model, __pyx_k_parse_model, sizeof(__pyx_k_parse_model), 0, 0, 1, 1},
  {&__pyx_n_s_parse_tree, __pyx_k_parse_tree, sizeof(__pyx_k_parse_tree), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_powerterm, __pyx_k_powerterm, sizeof(__pyx_k_powerterm), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_products, __pyx_k_products, sizeof(__pyx_k_products), 0, 0, 1, 1},
  {&__pyx_n_s_productterm, __pyx_k_productterm, sizeof(__pyx_k_productterm), 0, 0, 1, 1},
  {&__pyx_n_s_propensity, __pyx_k_propensity, sizeof(__pyx_k_propensity), 0, 0, 1, 1},
  {&__pyx_n_s_propensity_object, __pyx_k_propensity_object, sizeof(__pyx_k_propensity_object), 0, 0, 1, 1},
  {&__pyx_n_s_propensity_param_dict, __pyx_k_propensity_param_dict, sizeof(__pyx_k_propensity_param_dict), 0, 0, 1, 1},
  {&__pyx_kp_s_propensity_param_dict_2, __pyx_k_propensity_param_dict_2, sizeof(__pyx_k_propensity_param_dict_2), 0, 0, 1, 0},
  {&__pyx_n_s_propensity_type, __pyx_k_propensity_type, sizeof(__pyx_k_propensity_type), 0, 0, 1, 1},
  {&__pyx_n_s_proportionalhillnegative, __pyx_k_proportionalhillnegative, sizeof(__pyx_k_proportionalhillnegative), 0, 0, 1, 1},
  {&__pyx_n_s_proportionalhillpositive, __pyx_k_proportionalhillpositive, sizeof(__pyx_k_proportionalhillpositive), 0, 0, 1, 1},
  {&__pyx_n_s_py_add_term, __pyx_k_py_add_term, sizeof(__pyx_k_py_add_term), 0, 0, 1, 1},
  {&__pyx_n_s_py_get_data, __pyx_k_py_get_data, sizeof(__pyx_k_py_get_data), 0, 0, 1, 1},
  {&__pyx_kp_s_py_get_dataframe_requires_the_pa, __pyx_k_py_get_dataframe_requires_the_pa, sizeof(__pyx_k_py_get_dataframe_requires_the_pa), 0, 0, 1, 0},
  {&__pyx_n_s_py_get_parent, __pyx_k_py_get_parent, sizeof(__pyx_k_py_get_parent), 0, 0, 1, 1},
  {&__pyx_n_s_py_get_result, __pyx_k_py_get_result, sizeof(__pyx_k_py_get_result), 0, 0, 1, 1},
  {&__pyx_n_s_py_set_daughters, __pyx_k_py_set_daughters, sizeof(__pyx_k_py_set_daughters), 0, 0, 1, 1},
  {&__pyx_n_s_py_set_parent, __pyx_k_py_set_parent, sizeof(__pyx_k_py_set_parent), 0, 0, 1, 1},
  {&__pyx_n_s_py_set_species_indices, __pyx_k_py_set_species_indices, sizeof(__pyx_k_py_set_species_indices), 0, 0, 1, 1},
  {&__pyx_n_s_py_set_volume, __pyx_k_py_set_volume, sizeof(__pyx_k_py_set_volume), 0, 0, 1, 1},
  {&__pyx_n_s_py_size, __pyx_k_py_size, sizeof(__pyx_k_py_size), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_AbsTerm, __pyx_k_pyx_unpickle_AbsTerm, sizeof(__pyx_k_pyx_unpickle_AbsTerm), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_AdditiveAssignmen, __pyx_k_pyx_unpickle_AdditiveAssignmen, sizeof(__pyx_k_pyx_unpickle_AdditiveAssignmen), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_BimolecularPropen, __pyx_k_pyx_unpickle_BimolecularPropen, sizeof(__pyx_k_pyx_unpickle_BimolecularPropen), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_ConstantTerm, __pyx_k_pyx_unpickle_ConstantTerm, sizeof(__pyx_k_pyx_unpickle_ConstantTerm), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_ConstitutivePrope, __pyx_k_pyx_unpickle_ConstitutivePrope, sizeof(__pyx_k_pyx_unpickle_ConstitutivePrope), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Delay, __pyx_k_pyx_unpickle_Delay, sizeof(__pyx_k_pyx_unpickle_Delay), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_ExpTerm, __pyx_k_pyx_unpickle_ExpTerm, sizeof(__pyx_k_pyx_unpickle_ExpTerm), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_FixedDelay, __pyx_k_pyx_unpickle_FixedDelay, sizeof(__pyx_k_pyx_unpickle_FixedDelay), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_GammaDelay, __pyx_k_pyx_unpickle_GammaDelay, sizeof(__pyx_k_pyx_unpickle_GammaDelay), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_GaussianDelay, __pyx_k_pyx_unpickle_GaussianDelay, sizeof(__pyx_k_pyx_unpickle_GaussianDelay), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_GeneralAssignment, __pyx_k_pyx_unpickle_GeneralAssignment, sizeof(__pyx_k_pyx_unpickle_GeneralAssignment), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_GeneralODERule, __pyx_k_pyx_unpickle_GeneralODERule, sizeof(__pyx_k_pyx_unpickle_GeneralODERule), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_GeneralPropensity, __pyx_k_pyx_unpickle_GeneralPropensity, sizeof(__pyx_k_pyx_unpickle_GeneralPropensity), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_LogTerm, __pyx_k_pyx_unpickle_LogTerm, sizeof(__pyx_k_pyx_unpickle_LogTerm), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_MassActionPropens, __pyx_k_pyx_unpickle_MassActionPropens, sizeof(__pyx_k_pyx_unpickle_MassActionPropens), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_NegativeHillPrope, __pyx_k_pyx_unpickle_NegativeHillPrope, sizeof(__pyx_k_pyx_unpickle_NegativeHillPrope), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_NegativeProportio, __pyx_k_pyx_unpickle_NegativeProportio, sizeof(__pyx_k_pyx_unpickle_NegativeProportio), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_NoDelay, __pyx_k_pyx_unpickle_NoDelay, sizeof(__pyx_k_pyx_unpickle_NoDelay), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_ParameterTerm, __pyx_k_pyx_unpickle_ParameterTerm, sizeof(__pyx_k_pyx_unpickle_ParameterTerm), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PositiveHillPrope, __pyx_k_pyx_unpickle_PositiveHillPrope, sizeof(__pyx_k_pyx_unpickle_PositiveHillPrope), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PositiveProportio, __pyx_k_pyx_unpickle_PositiveProportio, sizeof(__pyx_k_pyx_unpickle_PositiveProportio), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PowerTerm, __pyx_k_pyx_unpickle_PowerTerm, sizeof(__pyx_k_pyx_unpickle_PowerTerm), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Propensity, __pyx_k_pyx_unpickle_Propensity, sizeof(__pyx_k_pyx_unpickle_Propensity), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Rule, __pyx_k_pyx_unpickle_Rule, sizeof(__pyx_k_pyx_unpickle_Rule), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Schnitz, __pyx_k_pyx_unpickle_Schnitz, sizeof(__pyx_k_pyx_unpickle_Schnitz), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_SpeciesTerm, __pyx_k_pyx_unpickle_SpeciesTerm, sizeof(__pyx_k_pyx_unpickle_SpeciesTerm), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_StateDependentVol, __pyx_k_pyx_unpickle_StateDependentVol, sizeof(__pyx_k_pyx_unpickle_StateDependentVol), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_StepTerm, __pyx_k_pyx_unpickle_StepTerm, sizeof(__pyx_k_pyx_unpickle_StepTerm), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_StochasticTimeThr, __pyx_k_pyx_unpickle_StochasticTimeThr, sizeof(__pyx_k_pyx_unpickle_StochasticTimeThr), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Term, __pyx_k_pyx_unpickle_Term, sizeof(__pyx_k_pyx_unpickle_Term), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_TimeTerm, __pyx_k_pyx_unpickle_TimeTerm, sizeof(__pyx_k_pyx_unpickle_TimeTerm), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_UnimolecularPrope, __pyx_k_pyx_unpickle_UnimolecularPrope, sizeof(__pyx_k_pyx_unpickle_UnimolecularPrope), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Volume, __pyx_k_pyx_unpickle_Volume, sizeof(__pyx_k_pyx_unpickle_Volume), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_VolumeTerm, __pyx_k_pyx_unpickle_VolumeTerm, sizeof(__pyx_k_pyx_unpickle_VolumeTerm), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rate, __pyx_k_rate, sizeof(__pyx_k_rate), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_reactants, __pyx_k_reactants, sizeof(__pyx_k_reactants), 0, 0, 1, 1},
  {&__pyx_n_s_reaction, __pyx_k_reaction, sizeof(__pyx_k_reaction), 0, 0, 1, 1},
  {&__pyx_n_s_reaction_update_dict, __pyx_k_reaction_update_dict, sizeof(__pyx_k_reaction_update_dict), 0, 0, 1, 1},
  {&__pyx_n_s_reactions, __pyx_k_reactions, sizeof(__pyx_k_reactions), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_repeat, __pyx_k_repeat, sizeof(__pyx_k_repeat), 0, 0, 1, 1},
  {&__pyx_n_s_repeated, __pyx_k_repeated, sizeof(__pyx_k_repeated), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_restore_binary_term, __pyx_k_restore_binary_term, sizeof(__pyx_k_restore_binary_term), 0, 0, 1, 1},
  {&__pyx_n_s_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 0, 1, 1},
  {&__pyx_n_s_rule, __pyx_k_rule, sizeof(__pyx_k_rule), 0, 0, 1, 1},
  {&__pyx_n_s_rule_attributes, __pyx_k_rule_attributes, sizeof(__pyx_k_rule_attributes), 0, 0, 1, 1},
  {&__pyx_kp_s_rule_attributes_2, __pyx_k_rule_attributes_2, sizeof(__pyx_k_rule_attributes_2), 0, 0, 1, 0},
  {&__pyx_kp_s_rule_equation, __pyx_k_rule_equation, sizeof(__pyx_k_rule_equation), 0, 0, 1, 0},
  {&__pyx_n_s_rule_frequency, __pyx_k_rule_frequency, sizeof(__pyx_k_rule_frequency), 0, 0, 1, 1},
  {&__pyx_kp_s_rule_frequency_2, __pyx_k_rule_frequency_2, sizeof(__pyx_k_rule_frequency_2), 0, 0, 1, 0},
  {&__pyx_n_s_rule_step, __pyx_k_rule_step, sizeof(__pyx_k_rule_step), 0, 0, 1, 1},
  {&__pyx_n_s_rule_type, __pyx_k_rule_type, sizeof(__pyx_k_rule_type), 0, 0, 1, 1},
  {&__pyx_n_s_rules, __pyx_k_rules, sizeof(__pyx_k_rules), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_s1, __pyx_k_s1, sizeof(__pyx_k_s1), 0, 0, 1, 1},
  {&__pyx_n_s_sbml_filename, __pyx_k_sbml_filename, sizeof(__pyx_k_sbml_filename), 0, 0, 1, 1},
  {&__pyx_kp_s_self_c_delays_self_c_propensitie, __pyx_k_self_c_delays_self_c_propensitie, sizeof(__pyx_k_self_c_delays_self_c_propensitie), 0, 0, 1, 0},
  {&__pyx_kp_s_self_c_schnitzes_cannot_be_conve, __pyx_k_self_c_schnitzes_cannot_be_conve, sizeof(__pyx_k_self_c_schnitzes_cannot_be_conve), 0, 0, 1, 0},
  {&__pyx_n_s_set_frequency_flag, __pyx_k_set_frequency_flag, sizeof(__pyx_k_set_frequency_flag), 0, 0, 1, 1},
  {&__pyx_n_s_set_parameter, __pyx_k_set_parameter, sizeof(__pyx_k_set_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_set_species, __pyx_k_set_species, sizeof(__pyx_k_set_species), 0, 0, 1, 1},
  {&__pyx_n_s_set_species_value, __pyx_k_set_species_value, sizeof(__pyx_k_set_species_value), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_specie, __pyx_k_specie, sizeof(__pyx_k_specie), 0, 0, 1, 1},
  {&__pyx_n_s_species, __pyx_k_species, sizeof(__pyx_k_species), 0, 0, 1, 1},
  {&__pyx_n_s_species2index, __pyx_k_species2index, sizeof(__pyx_k_species2index), 0, 0, 1, 1},
  {&__pyx_n_s_species_dict, __pyx_k_species_dict, sizeof(__pyx_k_species_dict), 0, 0, 1, 1},
  {&__pyx_n_s_species_indices, __pyx_k_species_indices, sizeof(__pyx_k_species_indices), 0, 0, 1, 1},
  {&__pyx_n_s_species_names, __pyx_k_species_names, sizeof(__pyx_k_species_names), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_start_time, __pyx_k_start_time, sizeof(__pyx_k_start_time), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_n_s_std, __pyx_k_std, sizeof(__pyx_k_std), 0, 0, 1, 1},
  {&__pyx_n_s_stepterm, __pyx_k_stepterm, sizeof(__pyx_k_stepterm), 0, 0, 1, 1},
  {&__pyx_n_s_stochastic, __pyx_k_stochastic, sizeof(__pyx_k_stochastic), 0, 0, 1, 1},
  {&__pyx_n_s_stochastic_model, __pyx_k_stochastic_model, sizeof(__pyx_k_stochastic_model), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sumterm, __pyx_k_sumterm, sizeof(__pyx_k_sumterm), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_sympify, __pyx_k_sympify, sizeof(__pyx_k_sympify), 0, 0, 1, 1},
  {&__pyx_n_s_sympy, __pyx_k_sympy, sizeof(__pyx_k_sympy), 0, 0, 1, 1},
  {&__pyx_n_s_sympy_abc, __pyx_k_sympy_abc, sizeof(__pyx_k_sympy_abc), 0, 0, 1, 1},
  {&__pyx_n_s_sympy_recursion, __pyx_k_sympy_recursion, sizeof(__pyx_k_sympy_recursion), 0, 0, 1, 1},
  {&__pyx_n_s_sympy_species_and_parameters, __pyx_k_sympy_species_and_parameters, sizeof(__pyx_k_sympy_species_and_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_theta, __pyx_k_theta, sizeof(__pyx_k_theta), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_toString, __pyx_k_toString, sizeof(__pyx_k_toString), 0, 0, 1, 1},
  {&__pyx_n_s_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_vol, __pyx_k_vol, sizeof(__pyx_k_vol), 0, 0, 1, 1},
  {&__pyx_n_s_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_writeSBMLToString, __pyx_k_writeSBMLToString, sizeof(__pyx_k_writeSBMLToString), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xml, __pyx_k_xml, sizeof(__pyx_k_xml), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 397, __pyx_L1_error)
  __pyx_builtin_SyntaxError = __Pyx_GetBuiltinName(__pyx_n_s_SyntaxError); if (!__pyx_builtin_SyntaxError) __PYX_ERR(0, 424, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 438, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 526, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 739, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 997, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 1391, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 1991, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 2136, __pyx_L1_error)
  __pyx_builtin_LookupError = __Pyx_GetBuiltinName(__pyx_n_s_LookupError); if (!__pyx_builtin_LookupError) __PYX_ERR(0, 2286, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 2350, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 2580, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 2654, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1038, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "bioscrape/types.pyx":102
 *         :return: (list(string), list(string)) First entry is the names of species, second entry is the names of parameters
 *         """
 *         return (None,None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "bioscrape/types.pyx":424
 *             if key == 'species':
 *                 if '+' in value or '-' in value:
 *                     raise SyntaxError('Plus or minus character in mass action propensity string.')             # <<<<<<<<<<<<<<
 *                 species_names = [s.strip() for s in value.split('*')]
 *                 for species_name in species_names:
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Plus_or_minus_character_in_mass); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "bioscrape/types.pyx":460
 * cdef class Term:
 *     cdef double evaluate(self, double *species, double *params, double time):
 *         raise SyntaxError('Cannot make Term base object')             # <<<<<<<<<<<<<<
 * 
 *     cdef double volume_evaluate(self, double *species, double *params, double vol, double time):
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Cannot_make_Term_base_object); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "bioscrape/types.pyx":692
 * 
 * def sympy_species_and_parameters(instring, species2index = None, params2index = None):
 *     instring = instring.replace('^','**')             # <<<<<<<<<<<<<<
 *     instring = instring.replace('|','_')
 *     root = sympy.sympify(instring, _clash1)
 */
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_kp_s__8, __pyx_kp_s__9); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "bioscrape/types.pyx":693
 * def sympy_species_and_parameters(instring, species2index = None, params2index = None):
 *     instring = instring.replace('^','**')
 *     instring = instring.replace('|','_')             # <<<<<<<<<<<<<<
 *     root = sympy.sympify(instring, _clash1)
 *     nodes = [root]
 */
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_kp_s__11, __pyx_n_s__12); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "bioscrape/types.pyx":702
 *         nodes.extend(node.args)
 *     names = [str(n) for n in nodes if type(n) == sympy.Symbol]\
 *             +[str(n)[1:] for n in nodes if type(n) == sympy.Symbol if str(n)[0] == "_"]             # <<<<<<<<<<<<<<
 *     species_names = [s for s in names if s in species2index]
 *     param_names = [s for s in names if (s not in species2index and s != 'volume' and s != 't')]
 */
  __pyx_slice__14 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__14)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__14);
  __Pyx_GIVEREF(__pyx_slice__14);

  /* "bioscrape/types.pyx":814
 *     instring = instring.replace('^','**')
 *     instring = instring.replace('|', '_')
 *     instring = instring.replace('heaviside', 'Heaviside')             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_n_s_heaviside, __pyx_n_s_Heaviside); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "bioscrape/types.pyx":997
 *     """
 *     cdef void rule_operation(self, double *state, double *params, double time, double dt):
 *         raise NotImplementedError('Creating base Rule class. This should be subclassed.')             # <<<<<<<<<<<<<<
 * 
 *     cdef void rule_volume_operation(self, double *state, double *params, double volume, double time, double dt):
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Creating_base_Rule_class_This_sh); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "bioscrape/types.pyx":1217
 *         Returns a deep copy of the volume object
 *         """
 *         raise NotImplementedError('Need to implement copy for population simulations')             # <<<<<<<<<<<<<<
 * 
 *     def py_copy(self):
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_Need_to_implement_copy_for_popul); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "bioscrape/types.pyx":1391
 *         self.division_volume = self.average_division_volume * cyrandom.normal_rv(1.0, self.division_noise)
 *         if self.division_noise > volume:
 *             raise RuntimeError('Division occurs before initial volume - change your parameters!')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Division_occurs_before_initial_v); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "bioscrape/types.pyx":1472
 * 
 *         if filename != None and sbml_filename != None:
 *             raise ValueError("Cannot load both a bioSCRAPE xml file and an "             # <<<<<<<<<<<<<<
 *                              "SBML file. Please choose just one.")
 *         elif filename != None:
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_Cannot_load_both_a_bioSCRAPE_xml); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "bioscrape/types.pyx":1491
 *                 delay_type, delay_reactants, delay_products, delay_param_dict = rxn
 *             else:
 *                 raise ValueError("Reaction Tuple of the wrong length! Must be "             # <<<<<<<<<<<<<<
 *                                  "of length 4 (no delay) or 8 (with delays). "
 *                                  "See BioSCRAPE Model API for details.")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_Reaction_Tuple_of_the_wrong_leng); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 1491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "bioscrape/types.pyx":1519
 *                                  input_printout = input_printout)
 *             else:
 *                 raise ValueError("Rules must be a tuple: (rule_type (string), "             # <<<<<<<<<<<<<<
 *                                  "rule_attributes (dict), rule_frequency "
 *                                  "(optional))")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_Rules_must_be_a_tuple_rule_type); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "bioscrape/types.pyx":1831
 *         else:
 *             raise SyntaxError('Unknown delay type: ' + delay_type)
 *         delay_param_dict.pop('type',None)             # <<<<<<<<<<<<<<
 * 
 *         self._add_reaction(reaction_update_dict, prop_object, propensity_param_dict, delay_reaction_update_dict, delay_object, delay_param_dict)
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_s_type, Py_None); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "bioscrape/types.pyx":1918
 *         if unspecified_parameters:
 *             error_string += f" (params2index is {self.params2index}; param_values is {self.params_values})"
 *             raise ValueError(error_string[:-2])             # <<<<<<<<<<<<<<
 * 
 *     #Checks that species' values are all set. Unset values default to 0 and warning is raised.
 */
  __pyx_slice__33 = PySlice_New(Py_None, __pyx_int_neg_2, Py_None); if (unlikely(!__pyx_slice__33)) __PYX_ERR(0, 1918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__33);
  __Pyx_GIVEREF(__pyx_slice__33);

  /* "bioscrape/types.pyx":2019
 *         Model = xml.find_all('model')
 *         if len(Model) != 1:
 *             raise SyntaxError('Did not include global model tag in XML file')             # <<<<<<<<<<<<<<
 * 
 *         Species = xml.find_all('species')
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_Did_not_include_global_model_tag); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 2019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "bioscrape/types.pyx":2058
 *             delay = reaction.find_all('delay')
 *             if len(delay) != 1:
 *                 raise SyntaxError('Incorrect delay spec')             # <<<<<<<<<<<<<<
 *             delay = delay[0]
 *             delay_param_dict = delay.attrs
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_Incorrect_delay_spec); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 2058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "bioscrape/types.pyx":2310
 *             if p[0] == '_':
 *                 # Remove the underscore at the beginning of the parameter name
 *                 p = p.replace('_','',1)             # <<<<<<<<<<<<<<
 *             add_parameter(model = model, param_name=p, param_value = val)
 * 
 */
  __pyx_tuple__37 = PyTuple_Pack(3, __pyx_n_s__12, __pyx_kp_s__3, __pyx_int_1); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 2310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "bioscrape/types.pyx":2370
 *         document, _ = self.generate_sbml_model(stochastic_model = stochastic_model, **keywords)
 *         sbml_string = libsbml.writeSBMLToString(document)
 *         with open(file_name, 'w') as f:             # <<<<<<<<<<<<<<
 *             f.write(sbml_string)
 *         return True
 */
  __pyx_tuple__38 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 2370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_self_c_delays_self_c_propensitie); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":4
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_delays,self.c_propensities,self.c_repeat_rules cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_self_c_delays_self_c_propensitie); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_self_c_schnitzes_cannot_be_conve); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":4
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_self_c_schnitzes_cannot_be_conve); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_self_c_schnitzes_cannot_be_conve); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":4
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_schnitzes cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_self_c_schnitzes_cannot_be_conve); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(2, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(2, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(2, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(2, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(2, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(2, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "../../../../../Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(2, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "bioscrape/types.pyx":523
 * #   but that resulted in mysterious errors about calling unsafe __new__()
 * #   methods, which I couldn't resolve. Sorry. =(
 * def restore_binary_term(state, ClassName):             # <<<<<<<<<<<<<<
 *     new_term = ClassName()
 *     if state is not None:
 */
  __pyx_tuple__53 = PyTuple_Pack(5, __pyx_n_s_state, __pyx_n_s_ClassName, __pyx_n_s_new_term, __pyx_n_s_i, __pyx_n_s_x); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_bioscrape_types_pyx, __pyx_n_s_restore_binary_term, 523, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 523, __pyx_L1_error)

  /* "bioscrape/types.pyx":691
 * 
 * 
 * def sympy_species_and_parameters(instring, species2index = None, params2index = None):             # <<<<<<<<<<<<<<
 *     instring = instring.replace('^','**')
 *     instring = instring.replace('|','_')
 */
  __pyx_tuple__55 = PyTuple_Pack(12, __pyx_n_s_instring, __pyx_n_s_species2index, __pyx_n_s_params2index, __pyx_n_s_root, __pyx_n_s_nodes, __pyx_n_s_index_2, __pyx_n_s_node, __pyx_n_s_names, __pyx_n_s_species_names, __pyx_n_s_param_names, __pyx_n_s_n, __pyx_n_s_s); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(3, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_bioscrape_types_pyx, __pyx_n_s_sympy_species_and_parameters, 691, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 691, __pyx_L1_error)

  /* "bioscrape/types.pyx":708
 *     return species_names, param_names
 * 
 * def sympy_recursion(tree, species2index, params2index):             # <<<<<<<<<<<<<<
 *     cdef SumTerm sumterm
 *     cdef ProductTerm productterm
 */
  __pyx_tuple__57 = PyTuple_Pack(16, __pyx_n_s_tree, __pyx_n_s_species2index, __pyx_n_s_params2index, __pyx_n_s_sumterm, __pyx_n_s_productterm, __pyx_n_s_powerterm, __pyx_n_s_expterm, __pyx_n_s_logterm, __pyx_n_s_stepterm, __pyx_n_s_absterm, __pyx_n_s_maxterm, __pyx_n_s_minterm, __pyx_n_s_root, __pyx_n_s_args, __pyx_n_s_name, __pyx_n_s_a); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(3, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_bioscrape_types_pyx, __pyx_n_s_sympy_recursion, 708, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 708, __pyx_L1_error)

  /* "bioscrape/types.pyx":810
 * 
 * 
 * def parse_expression(instring, species2index, params2index):             # <<<<<<<<<<<<<<
 *     instring = instring.strip()
 *     instring = instring.replace('^','**')
 */
  __pyx_tuple__59 = PyTuple_Pack(4, __pyx_n_s_instring, __pyx_n_s_species2index, __pyx_n_s_params2index, __pyx_n_s_parse_tree); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_bioscrape_types_pyx, __pyx_n_s_parse_expression, 810, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 810, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_Propensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__61 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Propensity, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__63 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ConstitutivePrope, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__65 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_UnimolecularPrope, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__67 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BimolecularPropen, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__69 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PositiveHillPrope, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__71 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PositiveProportio, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__73 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_NegativeHillPrope, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__75 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_NegativeProportio, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__77 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_MassActionPropens, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__79 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Term, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__81 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ConstantTerm, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__83 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_SpeciesTerm, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__85 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ParameterTerm, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__87 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_VolumeTerm, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__89 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PowerTerm, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__91 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ExpTerm, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__93 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_LogTerm, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__95 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_StepTerm, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__97 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__97, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_AbsTerm, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__99 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__99, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_TimeTerm, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__101 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__101, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_GeneralPropensity, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__103 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__103, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Delay, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__105 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_NoDelay, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__107 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_FixedDelay, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__109 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_GaussianDelay, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__111 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__111, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_GammaDelay, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__113 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Rule, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__115 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_AdditiveAssignmen, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__117 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__117, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_GeneralAssignment, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__119 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__119, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_GeneralODERule, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__121 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__121, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Volume, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__123 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__123, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_StochasticTimeThr, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__125 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_StateDependentVol, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__127 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  __pyx_codeobj__128 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__127, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Schnitz, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__128)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10546787 = PyInt_FromLong(10546787L); if (unlikely(!__pyx_int_10546787)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30306432 = PyInt_FromLong(30306432L); if (unlikely(!__pyx_int_30306432)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_33963030 = PyInt_FromLong(33963030L); if (unlikely(!__pyx_int_33963030)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_42384060 = PyInt_FromLong(42384060L); if (unlikely(!__pyx_int_42384060)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_45537207 = PyInt_FromLong(45537207L); if (unlikely(!__pyx_int_45537207)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_68940339 = PyInt_FromLong(68940339L); if (unlikely(!__pyx_int_68940339)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_89037106 = PyInt_FromLong(89037106L); if (unlikely(!__pyx_int_89037106)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_101827990 = PyInt_FromLong(101827990L); if (unlikely(!__pyx_int_101827990)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_102619244 = PyInt_FromLong(102619244L); if (unlikely(!__pyx_int_102619244)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_109607067 = PyInt_FromLong(109607067L); if (unlikely(!__pyx_int_109607067)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_111776469 = PyInt_FromLong(111776469L); if (unlikely(!__pyx_int_111776469)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_134806458 = PyInt_FromLong(134806458L); if (unlikely(!__pyx_int_134806458)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_144821092 = PyInt_FromLong(144821092L); if (unlikely(!__pyx_int_144821092)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_148820563 = PyInt_FromLong(148820563L); if (unlikely(!__pyx_int_148820563)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_151740626 = PyInt_FromLong(151740626L); if (unlikely(!__pyx_int_151740626)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_170981376 = PyInt_FromLong(170981376L); if (unlikely(!__pyx_int_170981376)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_196870574 = PyInt_FromLong(196870574L); if (unlikely(!__pyx_int_196870574)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_216766286 = PyInt_FromLong(216766286L); if (unlikely(!__pyx_int_216766286)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_237076984 = PyInt_FromLong(237076984L); if (unlikely(!__pyx_int_237076984)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_241189467 = PyInt_FromLong(241189467L); if (unlikely(!__pyx_int_241189467)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_259794484 = PyInt_FromLong(259794484L); if (unlikely(!__pyx_int_259794484)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_260941684 = PyInt_FromLong(260941684L); if (unlikely(!__pyx_int_260941684)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_265546857 = PyInt_FromLong(265546857L); if (unlikely(!__pyx_int_265546857)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_2 = PyInt_FromLong(-2); if (unlikely(!__pyx_int_neg_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_9bioscrape_5types_Propensity = &__pyx_vtable_9bioscrape_5types_Propensity;
  __pyx_vtable_9bioscrape_5types_Propensity.get_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_10Propensity_get_propensity;
  __pyx_vtable_9bioscrape_5types_Propensity.get_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_10Propensity_get_volume_propensity;
  __pyx_vtable_9bioscrape_5types_Propensity.get_stochastic_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_10Propensity_get_stochastic_propensity;
  __pyx_vtable_9bioscrape_5types_Propensity.get_stochastic_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_10Propensity_get_stochastic_volume_propensity;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_Propensity) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_Propensity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_Propensity.tp_dictoffset && __pyx_type_9bioscrape_5types_Propensity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_Propensity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_9bioscrape_5types_Propensity, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 26, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_9bioscrape_5types_10Propensity___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9bioscrape_5types_10Propensity___init__.doc = __pyx_doc_9bioscrape_5types_10Propensity___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9bioscrape_5types_10Propensity___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_Propensity.tp_dict, __pyx_vtabptr_9bioscrape_5types_Propensity) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Propensity, (PyObject *)&__pyx_type_9bioscrape_5types_Propensity) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_Propensity) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_Propensity = &__pyx_type_9bioscrape_5types_Propensity;
  __pyx_vtabptr_9bioscrape_5types_ConstitutivePropensity = &__pyx_vtable_9bioscrape_5types_ConstitutivePropensity;
  __pyx_vtable_9bioscrape_5types_ConstitutivePropensity.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Propensity;
  __pyx_vtable_9bioscrape_5types_ConstitutivePropensity.__pyx_base.get_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_22ConstitutivePropensity_get_propensity;
  __pyx_vtable_9bioscrape_5types_ConstitutivePropensity.__pyx_base.get_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_22ConstitutivePropensity_get_volume_propensity;
  __pyx_type_9bioscrape_5types_ConstitutivePropensity.tp_base = __pyx_ptype_9bioscrape_5types_Propensity;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_ConstitutivePropensity) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_ConstitutivePropensity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_ConstitutivePropensity.tp_dictoffset && __pyx_type_9bioscrape_5types_ConstitutivePropensity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_ConstitutivePropensity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_ConstitutivePropensity.tp_dict, __pyx_vtabptr_9bioscrape_5types_ConstitutivePropensity) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ConstitutivePropensity, (PyObject *)&__pyx_type_9bioscrape_5types_ConstitutivePropensity) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_ConstitutivePropensity) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_ConstitutivePropensity = &__pyx_type_9bioscrape_5types_ConstitutivePropensity;
  __pyx_vtabptr_9bioscrape_5types_UnimolecularPropensity = &__pyx_vtable_9bioscrape_5types_UnimolecularPropensity;
  __pyx_vtable_9bioscrape_5types_UnimolecularPropensity.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Propensity;
  __pyx_vtable_9bioscrape_5types_UnimolecularPropensity.__pyx_base.get_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_22UnimolecularPropensity_get_propensity;
  __pyx_vtable_9bioscrape_5types_UnimolecularPropensity.__pyx_base.get_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_22UnimolecularPropensity_get_volume_propensity;
  __pyx_type_9bioscrape_5types_UnimolecularPropensity.tp_base = __pyx_ptype_9bioscrape_5types_Propensity;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_UnimolecularPropensity) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_UnimolecularPropensity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_UnimolecularPropensity.tp_dictoffset && __pyx_type_9bioscrape_5types_UnimolecularPropensity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_UnimolecularPropensity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_UnimolecularPropensity.tp_dict, __pyx_vtabptr_9bioscrape_5types_UnimolecularPropensity) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UnimolecularPropensity, (PyObject *)&__pyx_type_9bioscrape_5types_UnimolecularPropensity) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_UnimolecularPropensity) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_UnimolecularPropensity = &__pyx_type_9bioscrape_5types_UnimolecularPropensity;
  __pyx_vtabptr_9bioscrape_5types_BimolecularPropensity = &__pyx_vtable_9bioscrape_5types_BimolecularPropensity;
  __pyx_vtable_9bioscrape_5types_BimolecularPropensity.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Propensity;
  __pyx_vtable_9bioscrape_5types_BimolecularPropensity.__pyx_base.get_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_21BimolecularPropensity_get_propensity;
  __pyx_vtable_9bioscrape_5types_BimolecularPropensity.__pyx_base.get_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_21BimolecularPropensity_get_volume_propensity;
  __pyx_vtable_9bioscrape_5types_BimolecularPropensity.__pyx_base.get_stochastic_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_21BimolecularPropensity_get_stochastic_propensity;
  __pyx_vtable_9bioscrape_5types_BimolecularPropensity.__pyx_base.get_stochastic_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_21BimolecularPropensity_get_stochastic_volume_propensity;
  __pyx_type_9bioscrape_5types_BimolecularPropensity.tp_base = __pyx_ptype_9bioscrape_5types_Propensity;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_BimolecularPropensity) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_BimolecularPropensity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_BimolecularPropensity.tp_dictoffset && __pyx_type_9bioscrape_5types_BimolecularPropensity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_BimolecularPropensity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_BimolecularPropensity.tp_dict, __pyx_vtabptr_9bioscrape_5types_BimolecularPropensity) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BimolecularPropensity, (PyObject *)&__pyx_type_9bioscrape_5types_BimolecularPropensity) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_BimolecularPropensity) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_BimolecularPropensity = &__pyx_type_9bioscrape_5types_BimolecularPropensity;
  __pyx_vtabptr_9bioscrape_5types_PositiveHillPropensity = &__pyx_vtable_9bioscrape_5types_PositiveHillPropensity;
  __pyx_vtable_9bioscrape_5types_PositiveHillPropensity.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Propensity;
  __pyx_vtable_9bioscrape_5types_PositiveHillPropensity.__pyx_base.get_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_22PositiveHillPropensity_get_propensity;
  __pyx_vtable_9bioscrape_5types_PositiveHillPropensity.__pyx_base.get_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_22PositiveHillPropensity_get_volume_propensity;
  __pyx_type_9bioscrape_5types_PositiveHillPropensity.tp_base = __pyx_ptype_9bioscrape_5types_Propensity;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_PositiveHillPropensity) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_PositiveHillPropensity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_PositiveHillPropensity.tp_dictoffset && __pyx_type_9bioscrape_5types_PositiveHillPropensity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_PositiveHillPropensity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_PositiveHillPropensity.tp_dict, __pyx_vtabptr_9bioscrape_5types_PositiveHillPropensity) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PositiveHillPropensity, (PyObject *)&__pyx_type_9bioscrape_5types_PositiveHillPropensity) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_PositiveHillPropensity) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_PositiveHillPropensity = &__pyx_type_9bioscrape_5types_PositiveHillPropensity;
  __pyx_vtabptr_9bioscrape_5types_PositiveProportionalHillPropensity = &__pyx_vtable_9bioscrape_5types_PositiveProportionalHillPropensity;
  __pyx_vtable_9bioscrape_5types_PositiveProportionalHillPropensity.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Propensity;
  __pyx_vtable_9bioscrape_5types_PositiveProportionalHillPropensity.__pyx_base.get_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_34PositiveProportionalHillPropensity_get_propensity;
  __pyx_vtable_9bioscrape_5types_PositiveProportionalHillPropensity.__pyx_base.get_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_34PositiveProportionalHillPropensity_get_volume_propensity;
  __pyx_type_9bioscrape_5types_PositiveProportionalHillPropensity.tp_base = __pyx_ptype_9bioscrape_5types_Propensity;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_PositiveProportionalHillPropensity) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_PositiveProportionalHillPropensity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_PositiveProportionalHillPropensity.tp_dictoffset && __pyx_type_9bioscrape_5types_PositiveProportionalHillPropensity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_PositiveProportionalHillPropensity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_PositiveProportionalHillPropensity.tp_dict, __pyx_vtabptr_9bioscrape_5types_PositiveProportionalHillPropensity) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PositiveProportionalHillPropensi, (PyObject *)&__pyx_type_9bioscrape_5types_PositiveProportionalHillPropensity) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_PositiveProportionalHillPropensity) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_PositiveProportionalHillPropensity = &__pyx_type_9bioscrape_5types_PositiveProportionalHillPropensity;
  __pyx_vtabptr_9bioscrape_5types_NegativeHillPropensity = &__pyx_vtable_9bioscrape_5types_NegativeHillPropensity;
  __pyx_vtable_9bioscrape_5types_NegativeHillPropensity.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Propensity;
  __pyx_vtable_9bioscrape_5types_NegativeHillPropensity.__pyx_base.get_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_22NegativeHillPropensity_get_propensity;
  __pyx_vtable_9bioscrape_5types_NegativeHillPropensity.__pyx_base.get_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_22NegativeHillPropensity_get_volume_propensity;
  __pyx_type_9bioscrape_5types_NegativeHillPropensity.tp_base = __pyx_ptype_9bioscrape_5types_Propensity;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_NegativeHillPropensity) < 0) __PYX_ERR(0, 288, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_NegativeHillPropensity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_NegativeHillPropensity.tp_dictoffset && __pyx_type_9bioscrape_5types_NegativeHillPropensity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_NegativeHillPropensity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_NegativeHillPropensity.tp_dict, __pyx_vtabptr_9bioscrape_5types_NegativeHillPropensity) < 0) __PYX_ERR(0, 288, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NegativeHillPropensity, (PyObject *)&__pyx_type_9bioscrape_5types_NegativeHillPropensity) < 0) __PYX_ERR(0, 288, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_NegativeHillPropensity) < 0) __PYX_ERR(0, 288, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_NegativeHillPropensity = &__pyx_type_9bioscrape_5types_NegativeHillPropensity;
  __pyx_vtabptr_9bioscrape_5types_NegativeProportionalHillPropensity = &__pyx_vtable_9bioscrape_5types_NegativeProportionalHillPropensity;
  __pyx_vtable_9bioscrape_5types_NegativeProportionalHillPropensity.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Propensity;
  __pyx_vtable_9bioscrape_5types_NegativeProportionalHillPropensity.__pyx_base.get_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_34NegativeProportionalHillPropensity_get_propensity;
  __pyx_vtable_9bioscrape_5types_NegativeProportionalHillPropensity.__pyx_base.get_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_34NegativeProportionalHillPropensity_get_volume_propensity;
  __pyx_type_9bioscrape_5types_NegativeProportionalHillPropensity.tp_base = __pyx_ptype_9bioscrape_5types_Propensity;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_NegativeProportionalHillPropensity) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_NegativeProportionalHillPropensity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_NegativeProportionalHillPropensity.tp_dictoffset && __pyx_type_9bioscrape_5types_NegativeProportionalHillPropensity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_NegativeProportionalHillPropensity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_NegativeProportionalHillPropensity.tp_dict, __pyx_vtabptr_9bioscrape_5types_NegativeProportionalHillPropensity) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NegativeProportionalHillPropensi, (PyObject *)&__pyx_type_9bioscrape_5types_NegativeProportionalHillPropensity) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_NegativeProportionalHillPropensity) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_NegativeProportionalHillPropensity = &__pyx_type_9bioscrape_5types_NegativeProportionalHillPropensity;
  __pyx_vtabptr_9bioscrape_5types_MassActionPropensity = &__pyx_vtable_9bioscrape_5types_MassActionPropensity;
  __pyx_vtable_9bioscrape_5types_MassActionPropensity.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Propensity;
  __pyx_vtable_9bioscrape_5types_MassActionPropensity.__pyx_base.get_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_20MassActionPropensity_get_propensity;
  __pyx_vtable_9bioscrape_5types_MassActionPropensity.__pyx_base.get_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_20MassActionPropensity_get_volume_propensity;
  __pyx_vtable_9bioscrape_5types_MassActionPropensity.__pyx_base.get_stochastic_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_20MassActionPropensity_get_stochastic_propensity;
  __pyx_vtable_9bioscrape_5types_MassActionPropensity.__pyx_base.get_stochastic_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_20MassActionPropensity_get_stochastic_volume_propensity;
  __pyx_type_9bioscrape_5types_MassActionPropensity.tp_base = __pyx_ptype_9bioscrape_5types_Propensity;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_MassActionPropensity) < 0) __PYX_ERR(0, 390, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_MassActionPropensity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_MassActionPropensity.tp_dictoffset && __pyx_type_9bioscrape_5types_MassActionPropensity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_MassActionPropensity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_MassActionPropensity.tp_dict, __pyx_vtabptr_9bioscrape_5types_MassActionPropensity) < 0) __PYX_ERR(0, 390, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MassActionPropensity, (PyObject *)&__pyx_type_9bioscrape_5types_MassActionPropensity) < 0) __PYX_ERR(0, 390, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_MassActionPropensity) < 0) __PYX_ERR(0, 390, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_MassActionPropensity = &__pyx_type_9bioscrape_5types_MassActionPropensity;
  __pyx_vtabptr_9bioscrape_5types_Term = &__pyx_vtable_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_Term.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_4Term_evaluate;
  __pyx_vtable_9bioscrape_5types_Term.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_4Term_volume_evaluate;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_Term) < 0) __PYX_ERR(0, 458, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_Term.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_Term.tp_dictoffset && __pyx_type_9bioscrape_5types_Term.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_Term.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_Term.tp_dict, __pyx_vtabptr_9bioscrape_5types_Term) < 0) __PYX_ERR(0, 458, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Term, (PyObject *)&__pyx_type_9bioscrape_5types_Term) < 0) __PYX_ERR(0, 458, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_Term) < 0) __PYX_ERR(0, 458, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_Term = &__pyx_type_9bioscrape_5types_Term;
  __pyx_vtabptr_9bioscrape_5types_ConstantTerm = &__pyx_vtable_9bioscrape_5types_ConstantTerm;
  __pyx_vtable_9bioscrape_5types_ConstantTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_ConstantTerm.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_12ConstantTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_ConstantTerm.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_12ConstantTerm_volume_evaluate;
  __pyx_type_9bioscrape_5types_ConstantTerm.tp_base = __pyx_ptype_9bioscrape_5types_Term;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_ConstantTerm) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_ConstantTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_ConstantTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_ConstantTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_ConstantTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_ConstantTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_ConstantTerm) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ConstantTerm, (PyObject *)&__pyx_type_9bioscrape_5types_ConstantTerm) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_ConstantTerm) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_ConstantTerm = &__pyx_type_9bioscrape_5types_ConstantTerm;
  __pyx_vtabptr_9bioscrape_5types_SpeciesTerm = &__pyx_vtable_9bioscrape_5types_SpeciesTerm;
  __pyx_vtable_9bioscrape_5types_SpeciesTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_SpeciesTerm.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_11SpeciesTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_SpeciesTerm.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_11SpeciesTerm_volume_evaluate;
  __pyx_type_9bioscrape_5types_SpeciesTerm.tp_base = __pyx_ptype_9bioscrape_5types_Term;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_SpeciesTerm) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_SpeciesTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_SpeciesTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_SpeciesTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_SpeciesTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_SpeciesTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_SpeciesTerm) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SpeciesTerm, (PyObject *)&__pyx_type_9bioscrape_5types_SpeciesTerm) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_SpeciesTerm) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_SpeciesTerm = &__pyx_type_9bioscrape_5types_SpeciesTerm;
  __pyx_vtabptr_9bioscrape_5types_ParameterTerm = &__pyx_vtable_9bioscrape_5types_ParameterTerm;
  __pyx_vtable_9bioscrape_5types_ParameterTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_ParameterTerm.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_13ParameterTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_ParameterTerm.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_13ParameterTerm_volume_evaluate;
  __pyx_type_9bioscrape_5types_ParameterTerm.tp_base = __pyx_ptype_9bioscrape_5types_Term;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_ParameterTerm) < 0) __PYX_ERR(0, 497, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_ParameterTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_ParameterTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_ParameterTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_ParameterTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_ParameterTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_ParameterTerm) < 0) __PYX_ERR(0, 497, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ParameterTerm, (PyObject *)&__pyx_type_9bioscrape_5types_ParameterTerm) < 0) __PYX_ERR(0, 497, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_ParameterTerm) < 0) __PYX_ERR(0, 497, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_ParameterTerm = &__pyx_type_9bioscrape_5types_ParameterTerm;
  __pyx_vtabptr_9bioscrape_5types_VolumeTerm = &__pyx_vtable_9bioscrape_5types_VolumeTerm;
  __pyx_vtable_9bioscrape_5types_VolumeTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_VolumeTerm.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_10VolumeTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_VolumeTerm.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_10VolumeTerm_volume_evaluate;
  __pyx_type_9bioscrape_5types_VolumeTerm.tp_base = __pyx_ptype_9bioscrape_5types_Term;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_VolumeTerm) < 0) __PYX_ERR(0, 506, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_VolumeTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_VolumeTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_VolumeTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_VolumeTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_VolumeTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_VolumeTerm) < 0) __PYX_ERR(0, 506, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_VolumeTerm, (PyObject *)&__pyx_type_9bioscrape_5types_VolumeTerm) < 0) __PYX_ERR(0, 506, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_VolumeTerm) < 0) __PYX_ERR(0, 506, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_VolumeTerm = &__pyx_type_9bioscrape_5types_VolumeTerm;
  __pyx_vtabptr_9bioscrape_5types_BinaryTerm = &__pyx_vtable_9bioscrape_5types_BinaryTerm;
  __pyx_vtable_9bioscrape_5types_BinaryTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_BinaryTerm.add_term = (void (*)(struct __pyx_obj_9bioscrape_5types_BinaryTerm *, struct __pyx_obj_9bioscrape_5types_Term *))__pyx_f_9bioscrape_5types_10BinaryTerm_add_term;
  __pyx_type_9bioscrape_5types_BinaryTerm.tp_base = __pyx_ptype_9bioscrape_5types_Term;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_BinaryTerm) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_BinaryTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_BinaryTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_BinaryTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_BinaryTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_BinaryTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_BinaryTerm) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BinaryTerm, (PyObject *)&__pyx_type_9bioscrape_5types_BinaryTerm) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_BinaryTerm = &__pyx_type_9bioscrape_5types_BinaryTerm;
  __pyx_vtabptr_9bioscrape_5types_SumTerm = &__pyx_vtable_9bioscrape_5types_SumTerm;
  __pyx_vtable_9bioscrape_5types_SumTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_BinaryTerm;
  __pyx_vtable_9bioscrape_5types_SumTerm.__pyx_base.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_7SumTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_SumTerm.__pyx_base.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_7SumTerm_volume_evaluate;
  __pyx_type_9bioscrape_5types_SumTerm.tp_base = __pyx_ptype_9bioscrape_5types_BinaryTerm;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_SumTerm) < 0) __PYX_ERR(0, 544, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_SumTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_SumTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_SumTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_SumTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_SumTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_SumTerm) < 0) __PYX_ERR(0, 544, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SumTerm, (PyObject *)&__pyx_type_9bioscrape_5types_SumTerm) < 0) __PYX_ERR(0, 544, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_SumTerm = &__pyx_type_9bioscrape_5types_SumTerm;
  __pyx_vtabptr_9bioscrape_5types_ProductTerm = &__pyx_vtable_9bioscrape_5types_ProductTerm;
  __pyx_vtable_9bioscrape_5types_ProductTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_BinaryTerm;
  __pyx_vtable_9bioscrape_5types_ProductTerm.__pyx_base.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_11ProductTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_ProductTerm.__pyx_base.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_11ProductTerm_volume_evaluate;
  __pyx_type_9bioscrape_5types_ProductTerm.tp_base = __pyx_ptype_9bioscrape_5types_BinaryTerm;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_ProductTerm) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_ProductTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_ProductTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_ProductTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_ProductTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_ProductTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_ProductTerm) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ProductTerm, (PyObject *)&__pyx_type_9bioscrape_5types_ProductTerm) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_ProductTerm = &__pyx_type_9bioscrape_5types_ProductTerm;
  __pyx_vtabptr_9bioscrape_5types_MaxTerm = &__pyx_vtable_9bioscrape_5types_MaxTerm;
  __pyx_vtable_9bioscrape_5types_MaxTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_BinaryTerm;
  __pyx_vtable_9bioscrape_5types_MaxTerm.__pyx_base.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_7MaxTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_MaxTerm.__pyx_base.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_7MaxTerm_volume_evaluate;
  __pyx_type_9bioscrape_5types_MaxTerm.tp_base = __pyx_ptype_9bioscrape_5types_BinaryTerm;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_MaxTerm) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_MaxTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_MaxTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_MaxTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_MaxTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_MaxTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_MaxTerm) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MaxTerm, (PyObject *)&__pyx_type_9bioscrape_5types_MaxTerm) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_MaxTerm = &__pyx_type_9bioscrape_5types_MaxTerm;
  __pyx_vtabptr_9bioscrape_5types_MinTerm = &__pyx_vtable_9bioscrape_5types_MinTerm;
  __pyx_vtable_9bioscrape_5types_MinTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_BinaryTerm;
  __pyx_vtable_9bioscrape_5types_MinTerm.__pyx_base.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_7MinTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_MinTerm.__pyx_base.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_7MinTerm_volume_evaluate;
  __pyx_type_9bioscrape_5types_MinTerm.tp_base = __pyx_ptype_9bioscrape_5types_BinaryTerm;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_MinTerm) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_MinTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_MinTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_MinTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_MinTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_MinTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_MinTerm) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MinTerm, (PyObject *)&__pyx_type_9bioscrape_5types_MinTerm) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_MinTerm = &__pyx_type_9bioscrape_5types_MinTerm;
  __pyx_vtabptr_9bioscrape_5types_PowerTerm = &__pyx_vtable_9bioscrape_5types_PowerTerm;
  __pyx_vtable_9bioscrape_5types_PowerTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_PowerTerm.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_9PowerTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_PowerTerm.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_9PowerTerm_volume_evaluate;
  __pyx_vtable_9bioscrape_5types_PowerTerm.set_base = (void (*)(struct __pyx_obj_9bioscrape_5types_PowerTerm *, struct __pyx_obj_9bioscrape_5types_Term *))__pyx_f_9bioscrape_5types_9PowerTerm_set_base;
  __pyx_vtable_9bioscrape_5types_PowerTerm.set_exponent = (void (*)(struct __pyx_obj_9bioscrape_5types_PowerTerm *, struct __pyx_obj_9bioscrape_5types_Term *))__pyx_f_9bioscrape_5types_9PowerTerm_set_exponent;
  __pyx_type_9bioscrape_5types_PowerTerm.tp_base = __pyx_ptype_9bioscrape_5types_Term;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_PowerTerm) < 0) __PYX_ERR(0, 620, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_PowerTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_PowerTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_PowerTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_PowerTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_PowerTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_PowerTerm) < 0) __PYX_ERR(0, 620, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PowerTerm, (PyObject *)&__pyx_type_9bioscrape_5types_PowerTerm) < 0) __PYX_ERR(0, 620, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_PowerTerm) < 0) __PYX_ERR(0, 620, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_PowerTerm = &__pyx_type_9bioscrape_5types_PowerTerm;
  __pyx_vtabptr_9bioscrape_5types_ExpTerm = &__pyx_vtable_9bioscrape_5types_ExpTerm;
  __pyx_vtable_9bioscrape_5types_ExpTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_ExpTerm.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_7ExpTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_ExpTerm.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_7ExpTerm_volume_evaluate;
  __pyx_vtable_9bioscrape_5types_ExpTerm.set_arg = (void (*)(struct __pyx_obj_9bioscrape_5types_ExpTerm *, struct __pyx_obj_9bioscrape_5types_Term *))__pyx_f_9bioscrape_5types_7ExpTerm_set_arg;
  __pyx_type_9bioscrape_5types_ExpTerm.tp_base = __pyx_ptype_9bioscrape_5types_Term;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_ExpTerm) < 0) __PYX_ERR(0, 635, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_ExpTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_ExpTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_ExpTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_ExpTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_ExpTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_ExpTerm) < 0) __PYX_ERR(0, 635, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExpTerm, (PyObject *)&__pyx_type_9bioscrape_5types_ExpTerm) < 0) __PYX_ERR(0, 635, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_ExpTerm) < 0) __PYX_ERR(0, 635, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_ExpTerm = &__pyx_type_9bioscrape_5types_ExpTerm;
  __pyx_vtabptr_9bioscrape_5types_LogTerm = &__pyx_vtable_9bioscrape_5types_LogTerm;
  __pyx_vtable_9bioscrape_5types_LogTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_LogTerm.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_7LogTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_LogTerm.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_7LogTerm_volume_evaluate;
  __pyx_vtable_9bioscrape_5types_LogTerm.set_arg = (void (*)(struct __pyx_obj_9bioscrape_5types_LogTerm *, struct __pyx_obj_9bioscrape_5types_Term *))__pyx_f_9bioscrape_5types_7LogTerm_set_arg;
  __pyx_type_9bioscrape_5types_LogTerm.tp_base = __pyx_ptype_9bioscrape_5types_Term;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_LogTerm) < 0) __PYX_ERR(0, 646, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_LogTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_LogTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_LogTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_LogTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_LogTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_LogTerm) < 0) __PYX_ERR(0, 646, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LogTerm, (PyObject *)&__pyx_type_9bioscrape_5types_LogTerm) < 0) __PYX_ERR(0, 646, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_LogTerm) < 0) __PYX_ERR(0, 646, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_LogTerm = &__pyx_type_9bioscrape_5types_LogTerm;
  __pyx_vtabptr_9bioscrape_5types_StepTerm = &__pyx_vtable_9bioscrape_5types_StepTerm;
  __pyx_vtable_9bioscrape_5types_StepTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_StepTerm.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_8StepTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_StepTerm.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_8StepTerm_volume_evaluate;
  __pyx_vtable_9bioscrape_5types_StepTerm.set_arg = (void (*)(struct __pyx_obj_9bioscrape_5types_StepTerm *, struct __pyx_obj_9bioscrape_5types_Term *))__pyx_f_9bioscrape_5types_8StepTerm_set_arg;
  __pyx_type_9bioscrape_5types_StepTerm.tp_base = __pyx_ptype_9bioscrape_5types_Term;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_StepTerm) < 0) __PYX_ERR(0, 657, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_StepTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_StepTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_StepTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_StepTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_StepTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_StepTerm) < 0) __PYX_ERR(0, 657, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StepTerm, (PyObject *)&__pyx_type_9bioscrape_5types_StepTerm) < 0) __PYX_ERR(0, 657, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_StepTerm) < 0) __PYX_ERR(0, 657, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_StepTerm = &__pyx_type_9bioscrape_5types_StepTerm;
  __pyx_vtabptr_9bioscrape_5types_AbsTerm = &__pyx_vtable_9bioscrape_5types_AbsTerm;
  __pyx_vtable_9bioscrape_5types_AbsTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_AbsTerm.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_7AbsTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_AbsTerm.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_7AbsTerm_volume_evaluate;
  __pyx_vtable_9bioscrape_5types_AbsTerm.set_arg = (void (*)(struct __pyx_obj_9bioscrape_5types_AbsTerm *, struct __pyx_obj_9bioscrape_5types_Term *))__pyx_f_9bioscrape_5types_7AbsTerm_set_arg;
  __pyx_type_9bioscrape_5types_AbsTerm.tp_base = __pyx_ptype_9bioscrape_5types_Term;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_AbsTerm) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_AbsTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_AbsTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_AbsTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_AbsTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_AbsTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_AbsTerm) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AbsTerm, (PyObject *)&__pyx_type_9bioscrape_5types_AbsTerm) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_AbsTerm) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_AbsTerm = &__pyx_type_9bioscrape_5types_AbsTerm;
  __pyx_vtabptr_9bioscrape_5types_TimeTerm = &__pyx_vtable_9bioscrape_5types_TimeTerm;
  __pyx_vtable_9bioscrape_5types_TimeTerm.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Term;
  __pyx_vtable_9bioscrape_5types_TimeTerm.__pyx_base.evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double))__pyx_f_9bioscrape_5types_8TimeTerm_evaluate;
  __pyx_vtable_9bioscrape_5types_TimeTerm.__pyx_base.volume_evaluate = (double (*)(struct __pyx_obj_9bioscrape_5types_Term *, double *, double *, double, double))__pyx_f_9bioscrape_5types_8TimeTerm_volume_evaluate;
  __pyx_type_9bioscrape_5types_TimeTerm.tp_base = __pyx_ptype_9bioscrape_5types_Term;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_TimeTerm) < 0) __PYX_ERR(0, 683, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_TimeTerm.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_TimeTerm.tp_dictoffset && __pyx_type_9bioscrape_5types_TimeTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_TimeTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_TimeTerm.tp_dict, __pyx_vtabptr_9bioscrape_5types_TimeTerm) < 0) __PYX_ERR(0, 683, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TimeTerm, (PyObject *)&__pyx_type_9bioscrape_5types_TimeTerm) < 0) __PYX_ERR(0, 683, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_TimeTerm) < 0) __PYX_ERR(0, 683, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_TimeTerm = &__pyx_type_9bioscrape_5types_TimeTerm;
  __pyx_vtabptr_9bioscrape_5types_GeneralPropensity = &__pyx_vtable_9bioscrape_5types_GeneralPropensity;
  __pyx_vtable_9bioscrape_5types_GeneralPropensity.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Propensity;
  __pyx_vtable_9bioscrape_5types_GeneralPropensity.__pyx_base.get_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double))__pyx_f_9bioscrape_5types_17GeneralPropensity_get_propensity;
  __pyx_vtable_9bioscrape_5types_GeneralPropensity.__pyx_base.get_volume_propensity = (double (*)(struct __pyx_obj_9bioscrape_5types_Propensity *, double *, double *, double, double))__pyx_f_9bioscrape_5types_17GeneralPropensity_get_volume_propensity;
  __pyx_type_9bioscrape_5types_GeneralPropensity.tp_base = __pyx_ptype_9bioscrape_5types_Propensity;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_GeneralPropensity) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_GeneralPropensity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_GeneralPropensity.tp_dictoffset && __pyx_type_9bioscrape_5types_GeneralPropensity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_GeneralPropensity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_GeneralPropensity.tp_dict, __pyx_vtabptr_9bioscrape_5types_GeneralPropensity) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GeneralPropensity, (PyObject *)&__pyx_type_9bioscrape_5types_GeneralPropensity) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_GeneralPropensity) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_GeneralPropensity = &__pyx_type_9bioscrape_5types_GeneralPropensity;
  __pyx_vtabptr_9bioscrape_5types_Delay = &__pyx_vtable_9bioscrape_5types_Delay;
  __pyx_vtable_9bioscrape_5types_Delay.get_delay = (double (*)(struct __pyx_obj_9bioscrape_5types_Delay *, double *, double *))__pyx_f_9bioscrape_5types_5Delay_get_delay;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_Delay) < 0) __PYX_ERR(0, 851, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_Delay.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_Delay.tp_dictoffset && __pyx_type_9bioscrape_5types_Delay.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_Delay.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_9bioscrape_5types_Delay, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 851, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_9bioscrape_5types_5Delay___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9bioscrape_5types_5Delay___init__.doc = __pyx_doc_9bioscrape_5types_5Delay___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9bioscrape_5types_5Delay___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_Delay.tp_dict, __pyx_vtabptr_9bioscrape_5types_Delay) < 0) __PYX_ERR(0, 851, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Delay, (PyObject *)&__pyx_type_9bioscrape_5types_Delay) < 0) __PYX_ERR(0, 851, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_Delay) < 0) __PYX_ERR(0, 851, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_Delay = &__pyx_type_9bioscrape_5types_Delay;
  __pyx_vtabptr_9bioscrape_5types_NoDelay = &__pyx_vtable_9bioscrape_5types_NoDelay;
  __pyx_vtable_9bioscrape_5types_NoDelay.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Delay;
  __pyx_vtable_9bioscrape_5types_NoDelay.__pyx_base.get_delay = (double (*)(struct __pyx_obj_9bioscrape_5types_Delay *, double *, double *))__pyx_f_9bioscrape_5types_7NoDelay_get_delay;
  __pyx_type_9bioscrape_5types_NoDelay.tp_base = __pyx_ptype_9bioscrape_5types_Delay;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_NoDelay) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_NoDelay.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_NoDelay.tp_dictoffset && __pyx_type_9bioscrape_5types_NoDelay.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_NoDelay.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_NoDelay.tp_dict, __pyx_vtabptr_9bioscrape_5types_NoDelay) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NoDelay, (PyObject *)&__pyx_type_9bioscrape_5types_NoDelay) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_NoDelay) < 0) __PYX_ERR(0, 913, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_NoDelay = &__pyx_type_9bioscrape_5types_NoDelay;
  __pyx_vtabptr_9bioscrape_5types_FixedDelay = &__pyx_vtable_9bioscrape_5types_FixedDelay;
  __pyx_vtable_9bioscrape_5types_FixedDelay.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Delay;
  __pyx_vtable_9bioscrape_5types_FixedDelay.__pyx_base.get_delay = (double (*)(struct __pyx_obj_9bioscrape_5types_Delay *, double *, double *))__pyx_f_9bioscrape_5types_10FixedDelay_get_delay;
  __pyx_type_9bioscrape_5types_FixedDelay.tp_base = __pyx_ptype_9bioscrape_5types_Delay;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_FixedDelay) < 0) __PYX_ERR(0, 920, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_FixedDelay.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_FixedDelay.tp_dictoffset && __pyx_type_9bioscrape_5types_FixedDelay.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_FixedDelay.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_FixedDelay.tp_dict, __pyx_vtabptr_9bioscrape_5types_FixedDelay) < 0) __PYX_ERR(0, 920, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FixedDelay, (PyObject *)&__pyx_type_9bioscrape_5types_FixedDelay) < 0) __PYX_ERR(0, 920, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_FixedDelay) < 0) __PYX_ERR(0, 920, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_FixedDelay = &__pyx_type_9bioscrape_5types_FixedDelay;
  __pyx_vtabptr_9bioscrape_5types_GaussianDelay = &__pyx_vtable_9bioscrape_5types_GaussianDelay;
  __pyx_vtable_9bioscrape_5types_GaussianDelay.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Delay;
  __pyx_vtable_9bioscrape_5types_GaussianDelay.__pyx_base.get_delay = (double (*)(struct __pyx_obj_9bioscrape_5types_Delay *, double *, double *))__pyx_f_9bioscrape_5types_13GaussianDelay_get_delay;
  __pyx_type_9bioscrape_5types_GaussianDelay.tp_base = __pyx_ptype_9bioscrape_5types_Delay;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_GaussianDelay) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_GaussianDelay.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_GaussianDelay.tp_dictoffset && __pyx_type_9bioscrape_5types_GaussianDelay.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_GaussianDelay.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_GaussianDelay.tp_dict, __pyx_vtabptr_9bioscrape_5types_GaussianDelay) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GaussianDelay, (PyObject *)&__pyx_type_9bioscrape_5types_GaussianDelay) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_GaussianDelay) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_GaussianDelay = &__pyx_type_9bioscrape_5types_GaussianDelay;
  __pyx_vtabptr_9bioscrape_5types_GammaDelay = &__pyx_vtable_9bioscrape_5types_GammaDelay;
  __pyx_vtable_9bioscrape_5types_GammaDelay.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Delay;
  __pyx_vtable_9bioscrape_5types_GammaDelay.__pyx_base.get_delay = (double (*)(struct __pyx_obj_9bioscrape_5types_Delay *, double *, double *))__pyx_f_9bioscrape_5types_10GammaDelay_get_delay;
  __pyx_type_9bioscrape_5types_GammaDelay.tp_base = __pyx_ptype_9bioscrape_5types_Delay;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_GammaDelay) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_GammaDelay.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_GammaDelay.tp_dictoffset && __pyx_type_9bioscrape_5types_GammaDelay.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_GammaDelay.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_GammaDelay.tp_dict, __pyx_vtabptr_9bioscrape_5types_GammaDelay) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GammaDelay, (PyObject *)&__pyx_type_9bioscrape_5types_GammaDelay) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_GammaDelay) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_GammaDelay = &__pyx_type_9bioscrape_5types_GammaDelay;
  __pyx_vtabptr_9bioscrape_5types_Rule = &__pyx_vtable_9bioscrape_5types_Rule;
  __pyx_vtable_9bioscrape_5types_Rule.rule_operation = (void (*)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double))__pyx_f_9bioscrape_5types_4Rule_rule_operation;
  __pyx_vtable_9bioscrape_5types_Rule.rule_volume_operation = (void (*)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double, double))__pyx_f_9bioscrape_5types_4Rule_rule_volume_operation;
  __pyx_vtable_9bioscrape_5types_Rule.execute_rule = (void (*)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double, unsigned int))__pyx_f_9bioscrape_5types_4Rule_execute_rule;
  __pyx_vtable_9bioscrape_5types_Rule.execute_volume_rule = (void (*)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double, double, unsigned int))__pyx_f_9bioscrape_5types_4Rule_execute_volume_rule;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_Rule) < 0) __PYX_ERR(0, 991, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_Rule.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_Rule.tp_dictoffset && __pyx_type_9bioscrape_5types_Rule.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_Rule.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_Rule.tp_dict, __pyx_vtabptr_9bioscrape_5types_Rule) < 0) __PYX_ERR(0, 991, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Rule, (PyObject *)&__pyx_type_9bioscrape_5types_Rule) < 0) __PYX_ERR(0, 991, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_Rule) < 0) __PYX_ERR(0, 991, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_Rule = &__pyx_type_9bioscrape_5types_Rule;
  __pyx_vtabptr_9bioscrape_5types_AdditiveAssignmentRule = &__pyx_vtable_9bioscrape_5types_AdditiveAssignmentRule;
  __pyx_vtable_9bioscrape_5types_AdditiveAssignmentRule.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Rule;
  __pyx_vtable_9bioscrape_5types_AdditiveAssignmentRule.__pyx_base.rule_operation = (void (*)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double))__pyx_f_9bioscrape_5types_22AdditiveAssignmentRule_rule_operation;
  __pyx_type_9bioscrape_5types_AdditiveAssignmentRule.tp_base = __pyx_ptype_9bioscrape_5types_Rule;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_AdditiveAssignmentRule) < 0) __PYX_ERR(0, 1054, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_AdditiveAssignmentRule.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_AdditiveAssignmentRule.tp_dictoffset && __pyx_type_9bioscrape_5types_AdditiveAssignmentRule.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_AdditiveAssignmentRule.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_AdditiveAssignmentRule.tp_dict, __pyx_vtabptr_9bioscrape_5types_AdditiveAssignmentRule) < 0) __PYX_ERR(0, 1054, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AdditiveAssignmentRule, (PyObject *)&__pyx_type_9bioscrape_5types_AdditiveAssignmentRule) < 0) __PYX_ERR(0, 1054, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_AdditiveAssignmentRule) < 0) __PYX_ERR(0, 1054, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_AdditiveAssignmentRule = &__pyx_type_9bioscrape_5types_AdditiveAssignmentRule;
  __pyx_vtabptr_9bioscrape_5types_GeneralAssignmentRule = &__pyx_vtable_9bioscrape_5types_GeneralAssignmentRule;
  __pyx_vtable_9bioscrape_5types_GeneralAssignmentRule.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Rule;
  __pyx_vtable_9bioscrape_5types_GeneralAssignmentRule.__pyx_base.rule_operation = (void (*)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double))__pyx_f_9bioscrape_5types_21GeneralAssignmentRule_rule_operation;
  __pyx_vtable_9bioscrape_5types_GeneralAssignmentRule.__pyx_base.rule_volume_operation = (void (*)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double, double))__pyx_f_9bioscrape_5types_21GeneralAssignmentRule_rule_volume_operation;
  __pyx_type_9bioscrape_5types_GeneralAssignmentRule.tp_base = __pyx_ptype_9bioscrape_5types_Rule;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_GeneralAssignmentRule) < 0) __PYX_ERR(0, 1090, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_GeneralAssignmentRule.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_GeneralAssignmentRule.tp_dictoffset && __pyx_type_9bioscrape_5types_GeneralAssignmentRule.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_GeneralAssignmentRule.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_GeneralAssignmentRule.tp_dict, __pyx_vtabptr_9bioscrape_5types_GeneralAssignmentRule) < 0) __PYX_ERR(0, 1090, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GeneralAssignmentRule, (PyObject *)&__pyx_type_9bioscrape_5types_GeneralAssignmentRule) < 0) __PYX_ERR(0, 1090, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_GeneralAssignmentRule) < 0) __PYX_ERR(0, 1090, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_GeneralAssignmentRule = &__pyx_type_9bioscrape_5types_GeneralAssignmentRule;
  __pyx_vtabptr_9bioscrape_5types_GeneralODERule = &__pyx_vtable_9bioscrape_5types_GeneralODERule;
  __pyx_vtable_9bioscrape_5types_GeneralODERule.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Rule;
  __pyx_vtable_9bioscrape_5types_GeneralODERule.__pyx_base.rule_operation = (void (*)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double))__pyx_f_9bioscrape_5types_14GeneralODERule_rule_operation;
  __pyx_vtable_9bioscrape_5types_GeneralODERule.__pyx_base.rule_volume_operation = (void (*)(struct __pyx_obj_9bioscrape_5types_Rule *, double *, double *, double, double, double))__pyx_f_9bioscrape_5types_14GeneralODERule_rule_volume_operation;
  __pyx_type_9bioscrape_5types_GeneralODERule.tp_base = __pyx_ptype_9bioscrape_5types_Rule;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_GeneralODERule) < 0) __PYX_ERR(0, 1141, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_GeneralODERule.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_GeneralODERule.tp_dictoffset && __pyx_type_9bioscrape_5types_GeneralODERule.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_GeneralODERule.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_GeneralODERule.tp_dict, __pyx_vtabptr_9bioscrape_5types_GeneralODERule) < 0) __PYX_ERR(0, 1141, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GeneralODERule, (PyObject *)&__pyx_type_9bioscrape_5types_GeneralODERule) < 0) __PYX_ERR(0, 1141, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_GeneralODERule) < 0) __PYX_ERR(0, 1141, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_GeneralODERule = &__pyx_type_9bioscrape_5types_GeneralODERule;
  __pyx_vtabptr_9bioscrape_5types_Volume = &__pyx_vtable_9bioscrape_5types_Volume;
  __pyx_vtable_9bioscrape_5types_Volume.get_volume_step = (double (*)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double, double))__pyx_f_9bioscrape_5types_6Volume_get_volume_step;
  __pyx_vtable_9bioscrape_5types_Volume.initialize = (void (*)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double))__pyx_f_9bioscrape_5types_6Volume_initialize;
  __pyx_vtable_9bioscrape_5types_Volume.cell_divided = (unsigned int (*)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double, double))__pyx_f_9bioscrape_5types_6Volume_cell_divided;
  __pyx_vtable_9bioscrape_5types_Volume.copy = (struct __pyx_obj_9bioscrape_5types_Volume *(*)(struct __pyx_obj_9bioscrape_5types_Volume *))__pyx_f_9bioscrape_5types_6Volume_copy;
  __pyx_vtable_9bioscrape_5types_Volume.set_volume = (void (*)(struct __pyx_obj_9bioscrape_5types_Volume *, double))__pyx_f_9bioscrape_5types_6Volume_set_volume;
  __pyx_vtable_9bioscrape_5types_Volume.get_volume = (double (*)(struct __pyx_obj_9bioscrape_5types_Volume *))__pyx_f_9bioscrape_5types_6Volume_get_volume;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_Volume) < 0) __PYX_ERR(0, 1196, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_Volume.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_Volume.tp_dictoffset && __pyx_type_9bioscrape_5types_Volume.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_Volume.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_Volume.tp_dict, __pyx_vtabptr_9bioscrape_5types_Volume) < 0) __PYX_ERR(0, 1196, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Volume, (PyObject *)&__pyx_type_9bioscrape_5types_Volume) < 0) __PYX_ERR(0, 1196, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_Volume) < 0) __PYX_ERR(0, 1196, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_Volume = &__pyx_type_9bioscrape_5types_Volume;
  __pyx_vtabptr_9bioscrape_5types_StochasticTimeThresholdVolume = &__pyx_vtable_9bioscrape_5types_StochasticTimeThresholdVolume;
  __pyx_vtable_9bioscrape_5types_StochasticTimeThresholdVolume.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Volume;
  __pyx_vtable_9bioscrape_5types_StochasticTimeThresholdVolume.__pyx_base.get_volume_step = (double (*)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double, double))__pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_get_volume_step;
  __pyx_vtable_9bioscrape_5types_StochasticTimeThresholdVolume.__pyx_base.initialize = (void (*)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double))__pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_initialize;
  __pyx_vtable_9bioscrape_5types_StochasticTimeThresholdVolume.__pyx_base.cell_divided = (unsigned int (*)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double, double))__pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_cell_divided;
  __pyx_vtable_9bioscrape_5types_StochasticTimeThresholdVolume.__pyx_base.copy = (struct __pyx_obj_9bioscrape_5types_Volume *(*)(struct __pyx_obj_9bioscrape_5types_Volume *))__pyx_f_9bioscrape_5types_29StochasticTimeThresholdVolume_copy;
  __pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume.tp_base = __pyx_ptype_9bioscrape_5types_Volume;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume) < 0) __PYX_ERR(0, 1283, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume.tp_dictoffset && __pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 1283, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_9bioscrape_5types_29StochasticTimeThresholdVolume___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9bioscrape_5types_29StochasticTimeThresholdVolume___init__.doc = __pyx_doc_9bioscrape_5types_29StochasticTimeThresholdVolume___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9bioscrape_5types_29StochasticTimeThresholdVolume___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume.tp_dict, __pyx_vtabptr_9bioscrape_5types_StochasticTimeThresholdVolume) < 0) __PYX_ERR(0, 1283, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StochasticTimeThresholdVolume, (PyObject *)&__pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume) < 0) __PYX_ERR(0, 1283, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume) < 0) __PYX_ERR(0, 1283, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_StochasticTimeThresholdVolume = &__pyx_type_9bioscrape_5types_StochasticTimeThresholdVolume;
  __pyx_vtabptr_9bioscrape_5types_StateDependentVolume = &__pyx_vtable_9bioscrape_5types_StateDependentVolume;
  __pyx_vtable_9bioscrape_5types_StateDependentVolume.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Volume;
  __pyx_vtable_9bioscrape_5types_StateDependentVolume.__pyx_base.get_volume_step = (double (*)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double, double))__pyx_f_9bioscrape_5types_20StateDependentVolume_get_volume_step;
  __pyx_vtable_9bioscrape_5types_StateDependentVolume.__pyx_base.initialize = (void (*)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double))__pyx_f_9bioscrape_5types_20StateDependentVolume_initialize;
  __pyx_vtable_9bioscrape_5types_StateDependentVolume.__pyx_base.cell_divided = (unsigned int (*)(struct __pyx_obj_9bioscrape_5types_Volume *, double *, double *, double, double, double))__pyx_f_9bioscrape_5types_20StateDependentVolume_cell_divided;
  __pyx_vtable_9bioscrape_5types_StateDependentVolume.__pyx_base.copy = (struct __pyx_obj_9bioscrape_5types_Volume *(*)(struct __pyx_obj_9bioscrape_5types_Volume *))__pyx_f_9bioscrape_5types_20StateDependentVolume_copy;
  __pyx_type_9bioscrape_5types_StateDependentVolume.tp_base = __pyx_ptype_9bioscrape_5types_Volume;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_StateDependentVolume) < 0) __PYX_ERR(0, 1361, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_StateDependentVolume.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_StateDependentVolume.tp_dictoffset && __pyx_type_9bioscrape_5types_StateDependentVolume.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_StateDependentVolume.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_StateDependentVolume.tp_dict, __pyx_vtabptr_9bioscrape_5types_StateDependentVolume) < 0) __PYX_ERR(0, 1361, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StateDependentVolume, (PyObject *)&__pyx_type_9bioscrape_5types_StateDependentVolume) < 0) __PYX_ERR(0, 1361, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_StateDependentVolume) < 0) __PYX_ERR(0, 1361, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_StateDependentVolume = &__pyx_type_9bioscrape_5types_StateDependentVolume;
  __pyx_vtabptr_9bioscrape_5types_Model = &__pyx_vtable_9bioscrape_5types_Model;
  __pyx_vtable_9bioscrape_5types_Model.get_c_propensities = (std::vector<void *>  *(*)(struct __pyx_obj_9bioscrape_5types_Model *))__pyx_f_9bioscrape_5types_5Model_get_c_propensities;
  __pyx_vtable_9bioscrape_5types_Model.get_c_delays = (std::vector<void *>  *(*)(struct __pyx_obj_9bioscrape_5types_Model *))__pyx_f_9bioscrape_5types_5Model_get_c_delays;
  __pyx_vtable_9bioscrape_5types_Model.get_c_repeat_rules = (std::vector<void *>  *(*)(struct __pyx_obj_9bioscrape_5types_Model *))__pyx_f_9bioscrape_5types_5Model_get_c_repeat_rules;
  __pyx_vtable_9bioscrape_5types_Model.get_update_array = (PyArrayObject *(*)(struct __pyx_obj_9bioscrape_5types_Model *))__pyx_f_9bioscrape_5types_5Model_get_update_array;
  __pyx_vtable_9bioscrape_5types_Model.get_delay_update_array = (PyArrayObject *(*)(struct __pyx_obj_9bioscrape_5types_Model *))__pyx_f_9bioscrape_5types_5Model_get_delay_update_array;
  __pyx_vtable_9bioscrape_5types_Model.get_species_values = (PyArrayObject *(*)(struct __pyx_obj_9bioscrape_5types_Model *))__pyx_f_9bioscrape_5types_5Model_get_species_values;
  __pyx_vtable_9bioscrape_5types_Model.get_params_values = (PyArrayObject *(*)(struct __pyx_obj_9bioscrape_5types_Model *))__pyx_f_9bioscrape_5types_5Model_get_params_values;
  __pyx_vtable_9bioscrape_5types_Model._initialize = (void (*)(struct __pyx_obj_9bioscrape_5types_Model *))__pyx_f_9bioscrape_5types_5Model__initialize;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_Model) < 0) __PYX_ERR(0, 1413, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_Model.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_Model.tp_dictoffset && __pyx_type_9bioscrape_5types_Model.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_Model.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_9bioscrape_5types_Model, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 1413, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_9bioscrape_5types_5Model___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9bioscrape_5types_5Model___init__.doc = __pyx_doc_9bioscrape_5types_5Model___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9bioscrape_5types_5Model___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_Model.tp_dict, __pyx_vtabptr_9bioscrape_5types_Model) < 0) __PYX_ERR(0, 1413, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Model, (PyObject *)&__pyx_type_9bioscrape_5types_Model) < 0) __PYX_ERR(0, 1413, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_Model) < 0) __PYX_ERR(0, 1413, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_Model = &__pyx_type_9bioscrape_5types_Model;
  __pyx_vtabptr_9bioscrape_5types_Schnitz = &__pyx_vtable_9bioscrape_5types_Schnitz;
  __pyx_vtable_9bioscrape_5types_Schnitz.get_data = (PyArrayObject *(*)(struct __pyx_obj_9bioscrape_5types_Schnitz *))__pyx_f_9bioscrape_5types_7Schnitz_get_data;
  __pyx_vtable_9bioscrape_5types_Schnitz.get_time = (PyArrayObject *(*)(struct __pyx_obj_9bioscrape_5types_Schnitz *))__pyx_f_9bioscrape_5types_7Schnitz_get_time;
  __pyx_vtable_9bioscrape_5types_Schnitz.get_volume = (PyArrayObject *(*)(struct __pyx_obj_9bioscrape_5types_Schnitz *))__pyx_f_9bioscrape_5types_7Schnitz_get_volume;
  __pyx_vtable_9bioscrape_5types_Schnitz.get_parent = (struct __pyx_obj_9bioscrape_5types_Schnitz *(*)(struct __pyx_obj_9bioscrape_5types_Schnitz *))__pyx_f_9bioscrape_5types_7Schnitz_get_parent;
  __pyx_vtable_9bioscrape_5types_Schnitz.get_daughter_1 = (struct __pyx_obj_9bioscrape_5types_Schnitz *(*)(struct __pyx_obj_9bioscrape_5types_Schnitz *))__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_1;
  __pyx_vtable_9bioscrape_5types_Schnitz.get_daughter_2 = (struct __pyx_obj_9bioscrape_5types_Schnitz *(*)(struct __pyx_obj_9bioscrape_5types_Schnitz *))__pyx_f_9bioscrape_5types_7Schnitz_get_daughter_2;
  __pyx_vtable_9bioscrape_5types_Schnitz.set_parent = (void (*)(struct __pyx_obj_9bioscrape_5types_Schnitz *, struct __pyx_obj_9bioscrape_5types_Schnitz *))__pyx_f_9bioscrape_5types_7Schnitz_set_parent;
  __pyx_vtable_9bioscrape_5types_Schnitz.set_daughters = (void (*)(struct __pyx_obj_9bioscrape_5types_Schnitz *, struct __pyx_obj_9bioscrape_5types_Schnitz *, struct __pyx_obj_9bioscrape_5types_Schnitz *))__pyx_f_9bioscrape_5types_7Schnitz_set_daughters;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_Schnitz) < 0) __PYX_ERR(0, 2453, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_Schnitz.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_Schnitz.tp_dictoffset && __pyx_type_9bioscrape_5types_Schnitz.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_Schnitz.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_9bioscrape_5types_Schnitz, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 2453, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_9bioscrape_5types_7Schnitz___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9bioscrape_5types_7Schnitz___init__.doc = __pyx_doc_9bioscrape_5types_7Schnitz___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9bioscrape_5types_7Schnitz___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_Schnitz.tp_dict, __pyx_vtabptr_9bioscrape_5types_Schnitz) < 0) __PYX_ERR(0, 2453, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Schnitz, (PyObject *)&__pyx_type_9bioscrape_5types_Schnitz) < 0) __PYX_ERR(0, 2453, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_Schnitz) < 0) __PYX_ERR(0, 2453, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_Schnitz = &__pyx_type_9bioscrape_5types_Schnitz;
  __pyx_vtabptr_9bioscrape_5types_Lineage = &__pyx_vtable_9bioscrape_5types_Lineage;
  __pyx_vtable_9bioscrape_5types_Lineage.add_schnitz = (void (*)(struct __pyx_obj_9bioscrape_5types_Lineage *, struct __pyx_obj_9bioscrape_5types_Schnitz *))__pyx_f_9bioscrape_5types_7Lineage_add_schnitz;
  __pyx_vtable_9bioscrape_5types_Lineage.size = (unsigned int (*)(struct __pyx_obj_9bioscrape_5types_Lineage *))__pyx_f_9bioscrape_5types_7Lineage_size;
  __pyx_vtable_9bioscrape_5types_Lineage.get_schnitz = (struct __pyx_obj_9bioscrape_5types_Schnitz *(*)(struct __pyx_obj_9bioscrape_5types_Lineage *, unsigned int))__pyx_f_9bioscrape_5types_7Lineage_get_schnitz;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_Lineage) < 0) __PYX_ERR(0, 2559, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_Lineage.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_Lineage.tp_dictoffset && __pyx_type_9bioscrape_5types_Lineage.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_Lineage.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_9bioscrape_5types_Lineage, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 2559, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_9bioscrape_5types_7Lineage___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_9bioscrape_5types_7Lineage___init__.doc = __pyx_doc_9bioscrape_5types_7Lineage___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_9bioscrape_5types_7Lineage___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_Lineage.tp_dict, __pyx_vtabptr_9bioscrape_5types_Lineage) < 0) __PYX_ERR(0, 2559, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Lineage, (PyObject *)&__pyx_type_9bioscrape_5types_Lineage) < 0) __PYX_ERR(0, 2559, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_Lineage) < 0) __PYX_ERR(0, 2559, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_Lineage = &__pyx_type_9bioscrape_5types_Lineage;
  __pyx_vtabptr_9bioscrape_5types_ExperimentalLineage = &__pyx_vtable_9bioscrape_5types_ExperimentalLineage;
  __pyx_vtable_9bioscrape_5types_ExperimentalLineage.__pyx_base = *__pyx_vtabptr_9bioscrape_5types_Lineage;
  __pyx_type_9bioscrape_5types_ExperimentalLineage.tp_base = __pyx_ptype_9bioscrape_5types_Lineage;
  if (PyType_Ready(&__pyx_type_9bioscrape_5types_ExperimentalLineage) < 0) __PYX_ERR(0, 2652, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9bioscrape_5types_ExperimentalLineage.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9bioscrape_5types_ExperimentalLineage.tp_dictoffset && __pyx_type_9bioscrape_5types_ExperimentalLineage.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9bioscrape_5types_ExperimentalLineage.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9bioscrape_5types_ExperimentalLineage.tp_dict, __pyx_vtabptr_9bioscrape_5types_ExperimentalLineage) < 0) __PYX_ERR(0, 2652, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExperimentalLineage, (PyObject *)&__pyx_type_9bioscrape_5types_ExperimentalLineage) < 0) __PYX_ERR(0, 2652, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9bioscrape_5types_ExperimentalLineage) < 0) __PYX_ERR(0, 2652, __pyx_L1_error)
  __pyx_ptype_9bioscrape_5types_ExperimentalLineage = &__pyx_type_9bioscrape_5types_ExperimentalLineage;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 206, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 233, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 242, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("bioscrape.random"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "normal_rv", (void (**)(void))&__pyx_f_9bioscrape_6random_normal_rv, "double (double, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "gamma_rv", (void (**)(void))&__pyx_f_9bioscrape_6random_gamma_rv, "double (double, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inittypes(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inittypes(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_types(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_types(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_types(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'types' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_types(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("types", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_bioscrape__types) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "bioscrape.types")) {
      if (unlikely(PyDict_SetItemString(modules, "bioscrape.types", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "bioscrape/types.pyx":5
 * # cython: wraparound=False
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * from bs4 import BeautifulSoup
 * cimport numpy as np
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":6
 * 
 * import numpy as np
 * from bs4 import BeautifulSoup             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * cimport random as cyrandom
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_BeautifulSoup);
  __Pyx_GIVEREF(__pyx_n_s_BeautifulSoup);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_BeautifulSoup);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_bs4, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BeautifulSoup); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BeautifulSoup, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":10
 * cimport random as cyrandom
 * from vector cimport vector
 * import re             # <<<<<<<<<<<<<<
 * import sympy
 * from sympy.abc import _clash1
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_re, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":11
 * from vector cimport vector
 * import re
 * import sympy             # <<<<<<<<<<<<<<
 * from sympy.abc import _clash1
 * import warnings
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sympy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sympy, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":12
 * import re
 * import sympy
 * from sympy.abc import _clash1             # <<<<<<<<<<<<<<
 * import warnings
 * import logging
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_clash1);
  __Pyx_GIVEREF(__pyx_n_s_clash1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_clash1);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sympy_abc, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_clash1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_clash1, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":13
 * import sympy
 * from sympy.abc import _clash1
 * import warnings             # <<<<<<<<<<<<<<
 * import logging
 * import libsbml
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":14
 * from sympy.abc import _clash1
 * import warnings
 * import logging             # <<<<<<<<<<<<<<
 * import libsbml
 * import cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":15
 * import warnings
 * import logging
 * import libsbml             # <<<<<<<<<<<<<<
 * import cython
 * from bioscrape.sbmlutil import add_species, add_parameter, add_reaction, add_rule, create_sbml_model, import_sbml
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_libsbml, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_libsbml, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "bioscrape/types.pyx":17
 * import libsbml
 * import cython
 * from bioscrape.sbmlutil import add_species, add_parameter, add_reaction, add_rule, create_sbml_model, import_sbml             # <<<<<<<<<<<<<<
 * 
 * from libc.math cimport log, sqrt, cos, round, exp, fabs
 */
  __pyx_t_1 = PyList_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_add_species_2);
  __Pyx_GIVEREF(__pyx_n_s_add_species_2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_add_species_2);
  __Pyx_INCREF(__pyx_n_s_add_parameter);
  __Pyx_GIVEREF(__pyx_n_s_add_parameter);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_add_parameter);
  __Pyx_INCREF(__pyx_n_s_add_reaction_2);
  __Pyx_GIVEREF(__pyx_n_s_add_reaction_2);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_add_reaction_2);
  __Pyx_INCREF(__pyx_n_s_add_rule);
  __Pyx_GIVEREF(__pyx_n_s_add_rule);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_add_rule);
  __Pyx_INCREF(__pyx_n_s_create_sbml_model);
  __Pyx_GIVEREF(__pyx_n_s_create_sbml_model);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_create_sbml_model);
  __Pyx_INCREF(__pyx_n_s_import_sbml);
  __Pyx_GIVEREF(__pyx_n_s_import_sbml);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_import_sbml);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_bioscrape_sbmlutil, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_add_species_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_species_2, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_add_parameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_parameter, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_add_reaction_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_reaction_2, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_add_rule); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_rule, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_create_sbml_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_create_sbml_model, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_import_sbml); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_import_sbml, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":523
 * #   but that resulted in mysterious errors about calling unsafe __new__()
 * #   methods, which I couldn't resolve. Sorry. =(
 * def restore_binary_term(state, ClassName):             # <<<<<<<<<<<<<<
 *     new_term = ClassName()
 *     if state is not None:
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_1restore_binary_term, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_restore_binary_term, __pyx_t_2) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":691
 * 
 * 
 * def sympy_species_and_parameters(instring, species2index = None, params2index = None):             # <<<<<<<<<<<<<<
 *     instring = instring.replace('^','**')
 *     instring = instring.replace('|','_')
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_3sympy_species_and_parameters, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sympy_species_and_parameters, __pyx_t_2) < 0) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":708
 *     return species_names, param_names
 * 
 * def sympy_recursion(tree, species2index, params2index):             # <<<<<<<<<<<<<<
 *     cdef SumTerm sumterm
 *     cdef ProductTerm productterm
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_5sympy_recursion, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sympy_recursion, __pyx_t_2) < 0) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":810
 * 
 * 
 * def parse_expression(instring, species2index, params2index):             # <<<<<<<<<<<<<<
 *     instring = instring.strip()
 *     instring = instring.replace('^','**')
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_7parse_expression, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_parse_expression, __pyx_t_2) < 0) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":1414
 * 
 * cdef class Model:
 *     def __init__(self, filename = None, species = [], reactions = [],             # <<<<<<<<<<<<<<
 *                  parameters = [], rules = [], initial_condition_dict = None,
 *                  sbml_filename = None, input_printout = False,
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__21 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__22 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":1415
 * cdef class Model:
 *     def __init__(self, filename = None, species = [], reactions = [],
 *                  parameters = [], rules = [], initial_condition_dict = None,             # <<<<<<<<<<<<<<
 *                  sbml_filename = None, input_printout = False,
 *                  initialize_model = True, **kwargs):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__23 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__24 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":1623
 * 
 *     def _add_reaction(self, reaction_update_dict, propensity_object, propensity_param_dict,
 *         delay_reaction_update_dict = {}, delay_object = None, delay_param_dict = {}):             # <<<<<<<<<<<<<<
 *         self.initialized = False
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__28 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__29 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":2653
 * 
 * cdef class ExperimentalLineage(Lineage):
 *     def __init__(self, dict species_indices={}):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self.species_dict = species_indices
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__43 = ((PyObject*)__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Propensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_9__pyx_unpickle_Propensity, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Propensity, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Propensity__set_state(<Propensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Propensity__set_state(Propensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_11__pyx_unpickle_ConstitutivePropensity, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ConstitutivePrope, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_UnimolecularPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_13__pyx_unpickle_UnimolecularPropensity, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_UnimolecularPrope, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_UnimolecularPropensity__set_state(<UnimolecularPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_UnimolecularPropensity__set_state(UnimolecularPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.rate_index = __pyx_state[1]; __pyx_result.species_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_15__pyx_unpickle_BimolecularPropensity, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_BimolecularPropen, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PositiveHillPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_17__pyx_unpickle_PositiveHillPropensity, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PositiveHillPrope, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PositiveHillPropensity__set_state(<PositiveHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PositiveHillPropensity__set_state(PositiveHillPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_19__pyx_unpickle_PositiveProportionalHillPropensity, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PositiveProportio, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_NegativeHillPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_21__pyx_unpickle_NegativeHillPropensity, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_NegativeHillPrope, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_NegativeHillPropensity__set_state(<NegativeHillPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NegativeHillPropensity__set_state(NegativeHillPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.K_index = __pyx_state[0]; __pyx_result.n_index = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.rate_index = __pyx_state[3]; __pyx_result.s1_index = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_23__pyx_unpickle_NegativeProportionalHillPropensity, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_NegativeProportio, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_MassActionPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_25__pyx_unpickle_MassActionPropensity, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_MassActionPropens, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_MassActionPropensity__set_state(<MassActionPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MassActionPropensity__set_state(MassActionPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.k_index = __pyx_state[0]; __pyx_result.num_species = __pyx_state[1]; __pyx_result.propensity_type = __pyx_state[2]; __pyx_result.sp_counts = __pyx_state[3]; __pyx_result.sp_inds = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_27__pyx_unpickle_Term, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Term, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ConstantTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_29__pyx_unpickle_ConstantTerm, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ConstantTerm, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_ConstantTerm__set_state(<ConstantTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ConstantTerm__set_state(ConstantTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.value = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_31__pyx_unpickle_SpeciesTerm, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_SpeciesTerm, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ParameterTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_33__pyx_unpickle_ParameterTerm, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ParameterTerm, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_ParameterTerm__set_state(<ParameterTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ParameterTerm__set_state(ParameterTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.index = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_35__pyx_unpickle_VolumeTerm, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_VolumeTerm, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PowerTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_37__pyx_unpickle_PowerTerm, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PowerTerm, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PowerTerm__set_state(<PowerTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PowerTerm__set_state(PowerTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.base = __pyx_state[0]; __pyx_result.exponent = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_39__pyx_unpickle_ExpTerm, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ExpTerm, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_LogTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_41__pyx_unpickle_LogTerm, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_LogTerm, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_LogTerm__set_state(<LogTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_LogTerm__set_state(LogTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_43__pyx_unpickle_StepTerm, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_StepTerm, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_AbsTerm(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_45__pyx_unpickle_AbsTerm, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_AbsTerm, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_AbsTerm__set_state(<AbsTerm> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_AbsTerm__set_state(AbsTerm __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.arg = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_47__pyx_unpickle_TimeTerm, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_TimeTerm, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_GeneralPropensity(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_49__pyx_unpickle_GeneralPropensity, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_GeneralPropensity, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_GeneralPropensity__set_state(<GeneralPropensity> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralPropensity__set_state(GeneralPropensity __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.propensity_type = __pyx_state[0]; __pyx_result.term = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_51__pyx_unpickle_Delay, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Delay, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_NoDelay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_53__pyx_unpickle_NoDelay, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_NoDelay, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_NoDelay__set_state(<NoDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_NoDelay__set_state(NoDelay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_type = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_55__pyx_unpickle_FixedDelay, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_FixedDelay, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_GaussianDelay(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_57__pyx_unpickle_GaussianDelay, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_GaussianDelay, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_GaussianDelay__set_state(<GaussianDelay> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GaussianDelay__set_state(GaussianDelay __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.delay_type = __pyx_state[0]; __pyx_result.mean_index = __pyx_state[1]; __pyx_result.std_index = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_59__pyx_unpickle_GammaDelay, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_GammaDelay, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Rule(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_61__pyx_unpickle_Rule, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Rule, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Rule__set_state(<Rule> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Rule__set_state(Rule __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.frequency_flag = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_63__pyx_unpickle_AdditiveAssignmentRule, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_AdditiveAssignmen, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_GeneralAssignmentRule(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_65__pyx_unpickle_GeneralAssignmentRule, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_GeneralAssignment, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_GeneralAssignmentRule__set_state(<GeneralAssignmentRule> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_GeneralAssignmentRule__set_state(GeneralAssignmentRule __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.dest_index = __pyx_state[0]; __pyx_result.frequency_flag = __pyx_state[1]; __pyx_result.param_flag = __pyx_state[2]; __pyx_result.rhs = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_67__pyx_unpickle_GeneralODERule, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_GeneralODERule, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Volume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_69__pyx_unpickle_Volume, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Volume, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Volume__set_state(<Volume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Volume__set_state(Volume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.current_volume = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_71__pyx_unpickle_StochasticTimeThresholdVolume, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_StochasticTimeThr, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_StateDependentVolume(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_73__pyx_unpickle_StateDependentVolume, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_StateDependentVol, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_StateDependentVolume__set_state(<StateDependentVolume> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_StateDependentVolume__set_state(StateDependentVolume __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.average_division_volume = __pyx_state[0]; __pyx_result.current_volume = __pyx_state[1]; __pyx_result.division_noise = __pyx_state[2]; __pyx_result.division_volume = __pyx_state[3]; __pyx_result.growth_rate = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9bioscrape_5types_75__pyx_unpickle_Schnitz, NULL, __pyx_n_s_bioscrape_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Schnitz, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bioscrape/types.pyx":1
 * # cython: boundscheck=False             # <<<<<<<<<<<<<<
 * # cython: cdivision=True
 * # cython: wraparound=False
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init bioscrape.types", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init bioscrape.types");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyErrExceptionMatches */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
  static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
  static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
  #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
  #if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* UnpackUnboundCMethod */
  static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
  static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_items */
  static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return PyDict_Items(d);
}

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
  static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* BytesEquals */
  static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
  static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* DictGetItem */
  #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCall2Args */
  static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetItemInt */
  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* SliceObject */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* JoinPyUnicode */
  static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* ExtTypeTest */
  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* pyobject_as_double */
  static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if ((0)) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* PyObjectGetMethod */
  static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
  static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
  static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyObjectCallMethod0 */
  static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
  static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
  static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
  static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* MergeKeywords */
  static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping) {
    PyObject *iter, *key = NULL, *value = NULL;
    int source_is_dict, result;
    Py_ssize_t orig_length, ppos = 0;
    iter = __Pyx_dict_iterator(source_mapping, 0, __pyx_n_s_items, &orig_length, &source_is_dict);
    if (unlikely(!iter)) {
        PyObject *args;
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        args = PyTuple_Pack(1, source_mapping);
        if (likely(args)) {
            PyObject *fallback = PyObject_Call((PyObject*)&PyDict_Type, args, NULL);
            Py_DECREF(args);
            if (likely(fallback)) {
                iter = __Pyx_dict_iterator(fallback, 1, __pyx_n_s_items, &orig_length, &source_is_dict);
                Py_DECREF(fallback);
            }
        }
        if (unlikely(!iter)) goto bad;
    }
    while (1) {
        result = __Pyx_dict_iter_next(iter, orig_length, &ppos, &key, &value, NULL, source_is_dict);
        if (unlikely(result < 0)) goto bad;
        if (!result) break;
        if (unlikely(PyDict_Contains(kwdict, key))) {
            __Pyx_RaiseDoubleKeywordsError("function", key);
            result = -1;
        } else {
            result = PyDict_SetItem(kwdict, key, value);
        }
        Py_DECREF(key);
        Py_DECREF(value);
        if (unlikely(result < 0)) goto bad;
    }
    Py_XDECREF(iter);
    return 0;
bad:
    Py_XDECREF(iter);
    return -1;
}

/* PyIntCompare */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* py_dict_keys */
  static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* pyfrozenset_new */
  static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if (likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
  static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectSetAttrStr */
  #if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CIntToDigits */
  static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
  static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
  #ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define GCC_DIAGNOSTIC
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_unsigned_int(unsigned int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(unsigned int)*3+2];
    char *dpos, *end = digits + sizeof(unsigned int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    unsigned int remaining;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (unsigned int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (unsigned int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (unsigned int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
  static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpTraverse */
  static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
  static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From___pyx_t_9bioscrape_5types_PropensityType(__pyx_t_9bioscrape_5types_PropensityType value) {
    const __pyx_t_9bioscrape_5types_PropensityType neg_one = (__pyx_t_9bioscrape_5types_PropensityType) ((__pyx_t_9bioscrape_5types_PropensityType) 0 - (__pyx_t_9bioscrape_5types_PropensityType) 1), const_zero = (__pyx_t_9bioscrape_5types_PropensityType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(__pyx_t_9bioscrape_5types_PropensityType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(__pyx_t_9bioscrape_5types_PropensityType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(__pyx_t_9bioscrape_5types_PropensityType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(__pyx_t_9bioscrape_5types_PropensityType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(__pyx_t_9bioscrape_5types_PropensityType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(__pyx_t_9bioscrape_5types_PropensityType),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From___pyx_t_9bioscrape_5types_DelayType(__pyx_t_9bioscrape_5types_DelayType value) {
    const __pyx_t_9bioscrape_5types_DelayType neg_one = (__pyx_t_9bioscrape_5types_DelayType) ((__pyx_t_9bioscrape_5types_DelayType) 0 - (__pyx_t_9bioscrape_5types_DelayType) 1), const_zero = (__pyx_t_9bioscrape_5types_DelayType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(__pyx_t_9bioscrape_5types_DelayType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(__pyx_t_9bioscrape_5types_DelayType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(__pyx_t_9bioscrape_5types_DelayType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(__pyx_t_9bioscrape_5types_DelayType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(__pyx_t_9bioscrape_5types_DelayType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(__pyx_t_9bioscrape_5types_DelayType),
                                     little, !is_unsigned);
    }
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* Print */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) ((enum NPY_TYPES) 0 - (enum NPY_TYPES) 1), const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE __pyx_t_9bioscrape_5types_PropensityType __Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(PyObject *x) {
    const __pyx_t_9bioscrape_5types_PropensityType neg_one = (__pyx_t_9bioscrape_5types_PropensityType) ((__pyx_t_9bioscrape_5types_PropensityType) 0 - (__pyx_t_9bioscrape_5types_PropensityType) 1), const_zero = (__pyx_t_9bioscrape_5types_PropensityType) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(__pyx_t_9bioscrape_5types_PropensityType) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (__pyx_t_9bioscrape_5types_PropensityType) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (__pyx_t_9bioscrape_5types_PropensityType) 0;
                case  1: __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, digit, digits[0])
                case 2:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) >= 2 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_PropensityType) (((((__pyx_t_9bioscrape_5types_PropensityType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) >= 3 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_PropensityType) (((((((__pyx_t_9bioscrape_5types_PropensityType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) >= 4 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_PropensityType) (((((((((__pyx_t_9bioscrape_5types_PropensityType)digits[3]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (__pyx_t_9bioscrape_5types_PropensityType) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(__pyx_t_9bioscrape_5types_PropensityType) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(__pyx_t_9bioscrape_5types_PropensityType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(__pyx_t_9bioscrape_5types_PropensityType) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(__pyx_t_9bioscrape_5types_PropensityType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (__pyx_t_9bioscrape_5types_PropensityType) 0;
                case -1: __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) - 1 > 2 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_PropensityType) (((__pyx_t_9bioscrape_5types_PropensityType)-1)*(((((__pyx_t_9bioscrape_5types_PropensityType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) - 1 > 2 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_PropensityType) ((((((__pyx_t_9bioscrape_5types_PropensityType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) - 1 > 3 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_PropensityType) (((__pyx_t_9bioscrape_5types_PropensityType)-1)*(((((((__pyx_t_9bioscrape_5types_PropensityType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) - 1 > 3 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_PropensityType) ((((((((__pyx_t_9bioscrape_5types_PropensityType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) - 1 > 4 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_PropensityType) (((__pyx_t_9bioscrape_5types_PropensityType)-1)*(((((((((__pyx_t_9bioscrape_5types_PropensityType)digits[3]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_PropensityType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_PropensityType) - 1 > 4 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_PropensityType) ((((((((((__pyx_t_9bioscrape_5types_PropensityType)digits[3]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_PropensityType)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(__pyx_t_9bioscrape_5types_PropensityType) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(__pyx_t_9bioscrape_5types_PropensityType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(__pyx_t_9bioscrape_5types_PropensityType) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(__pyx_t_9bioscrape_5types_PropensityType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            __pyx_t_9bioscrape_5types_PropensityType val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (__pyx_t_9bioscrape_5types_PropensityType) -1;
        }
    } else {
        __pyx_t_9bioscrape_5types_PropensityType val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (__pyx_t_9bioscrape_5types_PropensityType) -1;
        val = __Pyx_PyInt_As___pyx_t_9bioscrape_5types_PropensityType(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to __pyx_t_9bioscrape_5types_PropensityType");
    return (__pyx_t_9bioscrape_5types_PropensityType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to __pyx_t_9bioscrape_5types_PropensityType");
    return (__pyx_t_9bioscrape_5types_PropensityType) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE __pyx_t_9bioscrape_5types_DelayType __Pyx_PyInt_As___pyx_t_9bioscrape_5types_DelayType(PyObject *x) {
    const __pyx_t_9bioscrape_5types_DelayType neg_one = (__pyx_t_9bioscrape_5types_DelayType) ((__pyx_t_9bioscrape_5types_DelayType) 0 - (__pyx_t_9bioscrape_5types_DelayType) 1), const_zero = (__pyx_t_9bioscrape_5types_DelayType) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(__pyx_t_9bioscrape_5types_DelayType) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (__pyx_t_9bioscrape_5types_DelayType) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (__pyx_t_9bioscrape_5types_DelayType) 0;
                case  1: __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, digit, digits[0])
                case 2:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) >= 2 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_DelayType) (((((__pyx_t_9bioscrape_5types_DelayType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) >= 3 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_DelayType) (((((((__pyx_t_9bioscrape_5types_DelayType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) >= 4 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_DelayType) (((((((((__pyx_t_9bioscrape_5types_DelayType)digits[3]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (__pyx_t_9bioscrape_5types_DelayType) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(__pyx_t_9bioscrape_5types_DelayType) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(__pyx_t_9bioscrape_5types_DelayType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(__pyx_t_9bioscrape_5types_DelayType) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(__pyx_t_9bioscrape_5types_DelayType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (__pyx_t_9bioscrape_5types_DelayType) 0;
                case -1: __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) - 1 > 2 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_DelayType) (((__pyx_t_9bioscrape_5types_DelayType)-1)*(((((__pyx_t_9bioscrape_5types_DelayType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) - 1 > 2 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_DelayType) ((((((__pyx_t_9bioscrape_5types_DelayType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) - 1 > 3 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_DelayType) (((__pyx_t_9bioscrape_5types_DelayType)-1)*(((((((__pyx_t_9bioscrape_5types_DelayType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) - 1 > 3 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_DelayType) ((((((((__pyx_t_9bioscrape_5types_DelayType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) - 1 > 4 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_DelayType) (((__pyx_t_9bioscrape_5types_DelayType)-1)*(((((((((__pyx_t_9bioscrape_5types_DelayType)digits[3]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(__pyx_t_9bioscrape_5types_DelayType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(__pyx_t_9bioscrape_5types_DelayType) - 1 > 4 * PyLong_SHIFT) {
                            return (__pyx_t_9bioscrape_5types_DelayType) ((((((((((__pyx_t_9bioscrape_5types_DelayType)digits[3]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[2]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[1]) << PyLong_SHIFT) | (__pyx_t_9bioscrape_5types_DelayType)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(__pyx_t_9bioscrape_5types_DelayType) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(__pyx_t_9bioscrape_5types_DelayType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(__pyx_t_9bioscrape_5types_DelayType) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(__pyx_t_9bioscrape_5types_DelayType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            __pyx_t_9bioscrape_5types_DelayType val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (__pyx_t_9bioscrape_5types_DelayType) -1;
        }
    } else {
        __pyx_t_9bioscrape_5types_DelayType val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (__pyx_t_9bioscrape_5types_DelayType) -1;
        val = __Pyx_PyInt_As___pyx_t_9bioscrape_5types_DelayType(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to __pyx_t_9bioscrape_5types_DelayType");
    return (__pyx_t_9bioscrape_5types_DelayType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to __pyx_t_9bioscrape_5types_DelayType");
    return (__pyx_t_9bioscrape_5types_DelayType) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* PrintOne */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
  #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
